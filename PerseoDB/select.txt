PerseoNET/frmPannelloGestionePersonale.cs:					object value = "SELECT IDpers, Avviso FROM t_Personale WHERE IDpers=" + Conversions.ToString(VariabiliClassi.IDaccesso);
PerseoNET/frmPannelloGestionePersonale.cs:						vSQL = "SELECT IDcontratto, IDcontrest, FK_Docente, DescrPubblicaAmm, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, FilePAmmPDF FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE ProtAutorizzaPubblicaAmm IS NOT NULL AND FilePAmmPDF IS NULL AND DataInizioContratto>='01/01/2012' ";
PerseoNET/frmPannelloGestionePersonale.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcontratto, IDcontrest, FK_Docente, DescrPubblicaAmm, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, FilePAmmPDF FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE FK_Docente=", clsTblDatiDR.get_Campo((object)"FK_Docente")), "AND DescrPubblicaAmm='"), FunzStringa.StringaSQL(Conversions.ToString(clsTblDatiDR.get_Campo((object)"DescrPubblicaAmm")))), "' "), "AND t_DocentiContrattiEsterni.FilePAmmPDF IS NOT NULL "), "AND ProtAutorizzaPubblicaAmm='"), FunzStringa.StringaSQL(Conversions.ToString(clsTblDatiDR.get_Campo((object)"ProtAutorizzaPubblicaAmm")))), "' "), "AND DataAutorizzaPubblicaAmm="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataAutorizzaPubblicaAmm")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataInizioContratto>='01/06/2011' AND IDcontrest<>"), clsTblDatiDR.get_Campo((object)"IDcontrest")));
PerseoNET/frmPannelloGestionePersonale.cs:							string origineDati = "SELECT t_ProgettiPagamentiFatture.IDprogfatt, FK_Fattura, IDdocente, IDprogetto, IDsede, (Cognome + ' ' + Nome) AS StrDOC, DescrAzienda, SiglaSede, DescrProgetto, CodiceProgetto, (CASE WHEN FK_Fattura IS NULL THEN 'No' ELSE 'SÃ¬' END) AS Fattura, DataRichiestaInizio, DataRichiestaFine, DataPagamento, Sospeso, Autorizzazione, DataFattura, NumeroFattura FROM t_Aziende RIGHT OUTER JOIN t_DocentiFatture ON t_Aziende.IDazienda = t_DocentiFatture.FK_Azienda RIGHT OUTER JOIN t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_Docenti ON t_ProgettiPagamentiFatture.FK_Docente = t_Docenti.IDdocente INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto ON t_DocentiFatture.IDfattura = t_ProgettiPagamentiFatture.FK_Fattura WHERE Sospeso=1 ORDER BY (Cognome + ' ' + Nome), DataRichiestaInizio ";
PerseoNET/frmPannelloGestionePersonale.cs:							origineDati = "SELECT IDincarico, IDdocente, Fornitore, OreFatte, OrePagate, DataPagatoMIN, DataPagatoMAX FROM t_Incarichi ";
PerseoNET/frmPannelloGestionePersonale.cs:							origineDati = "SELECT IDincarico, IDdocente, (SUM(Minuti)/60) AS OreFatte, (0) AS Esito FROM v_DettaglioOreSvoltePerIncarico INNER JOIN t_PianoServizi ON v_DettaglioOreSvoltePerIncarico.IDedizione = t_PianoServizi.IDedizione WHERE IDdocente>3 AND FK_SedeEdizione " + Variabili.FiltroSedi + " AND FK_Tipo>2 AND IncaricoGenericoGratuito=0 AND DataSvolgimento>=" + FunzStringa.StrDataSQL(txtDal.Text, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(txtAl.Text, FlagSqlServer: true) + " GROUP BY IDdocente, IDincarico ORDER BY IDdocente, IDincarico ";
PerseoNET/frmPannelloGestionePersonale.cs:							origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDincarico, IDedizione, SUM(TotOreFatte) AS TotaleOrePagate, MIN(DataPagatoInizio) AS DataPagatoInizio, MAX(DataPagatoFine) AS DataPagatoFine FROM t_ProgettiPagamentiCompensiOneri WHERE DataPagatoFine>'" + txtDal.Text + "' AND FK_SedeEdizione " + Variabili.FiltroSedi + " AND Reso=0 GROUP BY t_ProgettiPagamentiCompensiOneri.IDincarico, IDedizione HAVING IDincarico " + clsTblDatiDR3.StringaFiltroIN("IDincarico");
PerseoNET/frmPannelloGestionePersonale.cs:							origineDati = "SELECT t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente, FK_SedeEdizione, IDprogetto, SiglaSede, CodiceProgetto, TipoProgetto, CodiceEdizione, DataAvvio, DataFine, (Cognome + ' ' + Nome) AS Collaboratore, (CASE WHEN FK_Azienda IS NOT NULL THEN (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) ELSE NULL END) AS Azienda, (CASE WHEN FK_Azienda IS NULL THEN (SELECT CodFiscale FROM t_Docenti WHERE IDdocente=t_IncarichiEdizioni.FK_Docente) ELSE (SELECT (CASE WHEN PIVA IS NOT NULL THEN PIVA ELSE CodFiscale END) FROM t_Aziende WHERE IDazienda=FK_Azienda) END) AS CF_PIVA, FK_CodicePF, FK_Azienda, (NULL) AS DescrParFiscale, TipoAttivita, DescrArgomento, QuotaOraIncarico, (0) AS OreFatte, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (NULL) AS UltimaData, (NULL) AS DescrSospeso FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE DocenteTest=0 AND IncaricoBloccato=0 AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(txtAl.Text, FlagSqlServer: true) + " AND (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE Dataprolungamento END)>=" + FunzStringa.StrDataSQL(txtDal.Text, FlagSqlServer: true) + " GROUP BY IDincarico, QuotaOraIncarico, FK_CodicePF, t_IncarichiEdizioni.FK_Docente, FK_Azione, FK_Azienda, DataAvvio, DataFine, FK_SedeEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, IndTA, Cognome, Nome, SiglaSede, CodiceProgetto, TipoProgetto, IDprogetto HAVING IDincarico " + clsTblDatiDR3.StringaFiltroIN("IDincarico") + " AND QuotaOraIncarico>0 ORDER BY (Cognome + ' ' + Nome), IndTA, IDincarico ";
PerseoNET/frmPannelloGestionePersonale.cs:					string vSQL = "SELECT IDpers, Avviso FROM t_Personale WHERE IDpers=" + Conversions.ToString(VariabiliClassi.IDaccesso);
PerseoNET/frmPannelloGestionePersonale.cs:					string origineDati = "SELECT Tipo, CFPersonaMittente, RagSocMittente, CFMittente, CFSoftwarehouse, TipoProcSH, SedeINPS, AnnoMeseDenuncia, CFAzienda, RagSocAzienda, Composizione, Matricola, TrattQuotaLav, NumLavoratori, ForzaAziendale, NumDenIndiv, TotaleADebito, TotaleACredito, CAP, ISTAT, CFCollaboratore, Cognome, Nome, CodiceComune, TipoRapporto, CodiceAttivita, Imponibile, Aliquota, AltraAss, Dal, Al FROM t_INPS ";
PerseoNET/frmSedi.cs:				string str = "SELECT t_Sedi.IDsede, SiglaSede, SiglaTipoSede, ComuneSede, PROVsede, DataBloccoIncassi, DataBloccoCollProf, Attiva FROM t_Sedi INNER JOIN t_TipoSede ON t_Sedi.FK_TipoSede = t_TipoSede.IDtsede WHERE Attiva=1 ";
PerseoNET/frmSedi.cs:					string str = "SELECT t_Sedi.IDsede, SiglaSede, SiglaTipoSede, ComuneSede, PROVsede, DataBloccoIncassi, DataBloccoCollProf, Attiva FROM t_Sedi INNER JOIN t_TipoSede ON t_Sedi.FK_TipoSede = t_TipoSede.IDtsede ";
PerseoNET/frmSedi.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_AziendeSediFormativeConvenzioni.IDconvazienda, IDazienda, DescrAzienda, TipoFormaGiuridica, TipoAreaProduttiva, ComSedeAz, ProvSedeAz, AnnoFormativo, ConvenzioneAzienda, DataConvenzione, ConvenzioneAttiva, COUNT(IDconvenzione) AS TirociniEnaip FROM t_ConvenzioniStage RIGHT OUTER JOIN t_Aziende INNER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod INNER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag INNER JOIN t_AziendeSediFormativeConvenzioni ON t_Aziende.IDazienda = t_AziendeSediFormativeConvenzioni.FK_Azienda INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda WHERE FK_SedeFormativa=", tblSedi.get_Campo((object)"IDsede", vFlagUpdateDB: false)), " AND t_SediAziende.FK_TipoSede=1 "), "GROUP BY t_AziendeSediFormativeConvenzioni.IDconvazienda, IDazienda, DescrAzienda, TipoFormaGiuridica, TipoAreaProduttiva, AnnoFormativo, DataConvenzione, "), "ComSedeAz, ProvSedeAz, DataConvenzione, ConvenzioneAzienda, ConvenzioneAttiva "), "ORDER BY DescrAzienda, DataConvenzione "));
PerseoNET/frmSedi.cs:						string origineDati = "SELECT t_SediValutazioneFornitori.IDvalutaforn, IDsede, IDdocente, SiglaSede, AnnoAmm, (Cognome + ' ' + Nome) AS StrDOC, DescrModelloValutaForn, TipoAttivita, OreSvolte, DataCompilazione, Valutatore, Archiviato, (NULL) AS Valutazione, (0) AS Opz1, (0) AS Opz2, (0) AS Opz3, (0) AS Opz4, (0) AS Opz5 FROM t_SediValutazioneFornitori INNER JOIN t_ModelliValutazioneFornitori ON t_SediValutazioneFornitori.FK_ModelloQuestionario = t_ModelliValutazioneFornitori.IDmodvalforn INNER JOIN t_Docenti ON t_SediValutazioneFornitori.FK_Docente = t_Docenti.IDdocente INNER JOIN t_Sedi ON t_SediValutazioneFornitori.FK_Sede = t_Sedi.IDsede WHERE IDsede " + Variabili.FiltroSedi + " AND AnnoAmm='" + cmbAnnoAmm.Text + "' AND DataCompilazione IS NOT NULL ORDER BY SiglaSede, (Cognome + ' ' + Nome) ";
PerseoNET/frmSedi.cs:							origineDati = "SELECT SiglaSede, Attiva FROM t_Sedi ";
PerseoNET/frmSedi.cs:							origineDati = "SELECT t_Docenti.IDdocente, IDvalutaforn, IDrispostavcp, SiglaSede, AnnoAmm, Cognome, Nome, TipoAttivita, OreSvolte, DescrItem, ValoreOpzione FROM t_Docenti INNER JOIN t_SediValutazioneFornitori ON t_Docenti.IDdocente = t_SediValutazioneFornitori.FK_Docente INNER JOIN t_SediValutazioneFornitoriRisposte ON t_SediValutazioneFornitori.IDvalutaforn = t_SediValutazioneFornitoriRisposte.FK_Questionario INNER JOIN t_Sedi ON t_SediValutazioneFornitori.FK_Sede = t_Sedi.IDsede INNER JOIN t_ModelliValutazioneFornitoriItem ON t_SediValutazioneFornitoriRisposte.FK_Item = t_ModelliValutazioneFornitoriItem.IDitemvalforn WHERE IDsede " + Variabili.FiltroSedi + " AND AnnoAmm='" + cmbAnnoAmm.Text + "' ORDER BY SiglaSede, Cognome, Nome, IndItemVF ";
PerseoNET/frmSedi.cs:								origineDati = (clsTblDatiDR.OrigineDati = "SELECT SiglaSede, Attiva FROM t_Sedi ");
PerseoNET/frmPersonaleInternoCostiVar.cs:				string origineDati = "SELECT t_Docenti.IDdocente, IDcontratto, (Cognome + ' ' + Nome) AS StrDoc, CodFiscale, CodiceLivelloDoc, CodiceDipendente, t_Docenti.Attivo, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedePrimaria) AS StrSede, DataInizioContratto, DataFineContratto, OreContratto, OreLavorate, CostoDocenza, CostoCoordTutor, CostoAltreFunzioni, OreMeno, DataVariazioni FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_TipoLivelloDocenteInterno ON t_DocentiContratti.FK_LivelloInterno = t_TipoLivelloDocenteInterno.IDtlivcontrdoc WHERE FK_Tipo=2 AND Sovrapponibile=0 AND DocenteTest=0 AND DataInizioContratto>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioContratto<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmPersonaleInternoCostiVar.cs:						origineDati = "SELECT t_Docenti.IDdocente, IDcontratto, (Cognome + ' ' + Nome) AS StrDoc, CodFiscale, CodiceDipendente, CodiceLivelloDoc, t_Docenti.Attivo, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedePrimaria) AS StrSede, DataInizioContratto, DataFineContratto, OreContratto, (SELECT CostoDocenza FROM t_DocentiInterniCostoMese WHERE FK_Contratto=IDcontratto AND Mese=" + Conversions.ToString(value) + ") AS CostoDocenza, (SELECT CostoCoordTutor FROM t_DocentiInterniCostoMese WHERE FK_Contratto=IDcontratto AND Mese=" + Conversions.ToString(value) + ") AS CostoCoordTutor, (SELECT CostoAltreFunzioni FROM t_DocentiInterniCostoMese WHERE FK_Contratto=IDcontratto AND Mese=" + Conversions.ToString(value) + ") AS CostoAltreFunzioni, OreLavorate, OreMeno, DataVariazioni, (0) AS Esito FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_TipoLivelloDocenteInterno ON t_DocentiContratti.FK_LivelloInterno = t_TipoLivelloDocenteInterno.IDtlivcontrdoc WHERE FK_Tipo=2 AND Sovrapponibile=0 AND DocenteTest=0 AND DataInizioContratto>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioContratto<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmPersonaleInternoCostiVar.cs:						origineDati = "SELECT t_Docenti.IDdocente, IDcontratto, (Cognome + ' ' + Nome) AS StrDoc, CodFiscale, CodiceDipendente, CodiceLivelloDoc, t_Docenti.Attivo, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedePrimaria) AS StrSede, DataInizioContratto, DataFineContratto, OreContratto, CostoDocenza, CostoCoordTutor, CostoAltreFunzioni, OreLavorate, OreMeno, DataVariazioni, (0) AS Esito FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_TipoLivelloDocenteInterno ON t_DocentiContratti.FK_LivelloInterno = t_TipoLivelloDocenteInterno.IDtlivcontrdoc WHERE FK_Tipo=2 AND Sovrapponibile=0 AND DocenteTest=0 AND DataInizioContratto>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioContratto<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmPersonaleInternoCostiVar.cs:							origineDati = "SELECT t_Docenti.IDdocente, IDcontratto, StrDoc, CodFiscale, CodiceDipendente, CodiceLivelloDoc, Attivo, StrSede, DataInizioContratto, DataFineContratto, OreContratto, CostoDocenza, CostoCoordTutor, CostoAltreFunzioni, (NULL) AS Esito FROM t_Docenti ";
PerseoNET/frmPersonaleInternoCostiVar.cs:								origineDati = "SELECT t_Docenti.IDdocente, IDcontratto, StrDoc, CodFiscale, CodiceDipendente, CodiceLivelloDoc, Attivo, StrSede, DataInizioContratto, DataFineContratto, OreContratto, OreLavorate, (NULL) AS Esito FROM t_Docenti ";
PerseoNET/frmPersonaleInternoCostiVar.cs:								origineDati = "SELECT t_Docenti.IDdocente, IDcontratto, StrDoc, CodFiscale, CodiceDipendente, CodiceLivelloDoc, Attivo, StrSede, DataInizioContratto, DataFineContratto, OreContratto, OreMeno, DataVariazioni, (NULL) AS Esito FROM t_Docenti ";
PerseoNET/frmPersonaleInternoCostiVar.cs:					string text = (strCopiaSQL = "SELECT FK_Docente, FK_TipoFormaContratto, FK_LivelloInterno, DataInizioContratto, DataFineContratto, DataDimissioneDipendente, DimessoSedePrimaria, DimessoDescrIncentivo, OreContratto, (OreContratto) AS OreLavorate, (0) AS OrePiu, (0) AS OreMeno, (NULL) AS DataVariazioni, CostoDocenza, CostoCoordTutor, CostoAltreFunzioni FROM t_DocentiContratti WHERE FK_Docente " + tblDoc.StringaFiltroIN("IDdocente") + " AND YEAR(DataFineContratto)=" + Strings.Right(cmbAnno.Text, 4) + " AND DataDimissioneDipendente IS NULL ");
PerseoNET/frmPersonaleInternoCostiVar.cs:						string str = "SELECT t_Docenti.IDdocente, IDcontratto, (Cognome + ' ' + Nome) AS StrDoc, CodFiscale, CodiceLivelloDoc, CodiceDipendente, t_Docenti.Attivo, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedePrimaria) AS StrSede, DataInizioContratto, DataFineContratto, OreContratto, OreLavorate, (SELECT CostoDocenza FROM t_DocentiInterniCostoMese WHERE FK_Contratto=IDcontratto AND Mese=" + Conversions.ToString(value) + ") AS CostoDocenza, (SELECT CostoCoordTutor FROM t_DocentiInterniCostoMese WHERE FK_Contratto=IDcontratto AND Mese=" + Conversions.ToString(value) + ") AS CostoCoordTutor, (SELECT CostoAltreFunzioni FROM t_DocentiInterniCostoMese WHERE FK_Contratto=IDcontratto AND Mese=" + Conversions.ToString(value) + ") AS CostoAltreFunzioni, OreMeno, DataVariazioni FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_TipoLivelloDocenteInterno ON t_DocentiContratti.FK_LivelloInterno = t_TipoLivelloDocenteInterno.IDtlivcontrdoc WHERE FK_Tipo=2 AND Sovrapponibile=0 AND DataInizioContratto>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioContratto<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " ";
PerseoNET/frmPersonaleInternoCostiVar.cs:					string origineDati = "SELECT IDcontratto, OreContratto, OreLavorate, CostoDocenza, CostoCoordTutor, CostoAltreFunzioni, OreMeno, DataVariazioni, DataRec, DataModifica FROM t_DocentiContratti WHERE IDcontratto=" + Conversions.ToString(vID);
PerseoNET/frmPersonaleInternoCostiVar.cs:				string origineDati = "SELECT IDcontratto, OreContratto, OreLavorate, OreMeno, DataVariazioni, DataRec, DataModifica FROM t_DocentiContratti WHERE IDcontratto=" + Conversions.ToString(vID);
PerseoNET/frmPersonaleInternoCostiVar.cs:					origineDati = "SELECT IDcostomese, FK_Contratto FROM t_DocentiInterniCostoMese WHERE FK_Contratto=" + Conversions.ToString(vID) + " AND Mese=" + Conversions.ToString(value);
PerseoNET/frmPersonaleInternoCostiVar.cs:					origineDati = "SELECT IDcostomese, FK_Contratto, StringaMese, Mese, CostoDocenza, CostoCoordTutor, CostoAltreFunzioni, DataRec, DataModifica FROM t_DocentiInterniCostoMese WHERE IDcostomese=" + Conversions.ToString(value2);
PerseoNET/frmStudenti.cs:					string origineDati = "SELECT IDtslav, TipoStatoLav, DescrCertificazione FROM t_TipoStatoLav ";
PerseoNET/frmStudenti.cs:					origineDati = "SELECT (t_Iscrizioni.FK_Utente) AS IDutente, TipoLivelloMW FROM t_Iscrizioni INNER JOIN t_PercorsoStudi ON t_Iscrizioni.FK_Utente = t_PercorsoStudi.FK_Utente INNER JOIN t_TipoLivelloTitoloMW ON t_PercorsoStudi.FK_LivelloStudioMW = t_TipoLivelloTitoloMW.IDtlivstudioMW WHERE t_Iscrizioni.FK_Utente " + clsTblDatiDR2.StringaFiltroIN("IDutente") + " ORDER BY LivelloMW DESC ";
PerseoNET/frmStudenti.cs:				string origineDati = "SELECT t_Utenti.IDutente, (Cognome + ' ' + Nome) AS Studente, t_Utenti.CodFiscale, TipoNazionalita, ComResidenza, ProvResidenza, CAPresidenza, IndirResidenza, (CASE WHEN (Tel_1 IS NOT NULL AND Tel_2 IS NULL) THEN Tel_1 WHEN (Tel_1 IS NULL AND Tel_2 IS NOT NULL) THEN Tel_2 WHEN (Tel_1 IS NOT NULL AND Tel_2 IS NOT NULL) THEN (Tel_1 + ' - ' + Tel_2) END) AS Telefoni, DataInizioRapp, DataFineRapp, DescrMansione, TipoSettoreProd, TipoContratto, TipoEsitoOccupazione, NoteAltro, DescrAzienda, IndirizzoAzienda, ComuneAzienda, CAPazienda, ProvAzienda, TutorAziendale, TipoContrattoCollettivo, NoteContatti FROM t_Utenti INNER JOIN t_EsperienzeLavoro ON t_Utenti.IDutente = t_EsperienzeLavoro.FK_Utente INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz LEFT OUTER JOIN t_TipoSettoreProduttivo ON t_EsperienzeLavoro.FK_SettoreProduttivo = t_TipoSettoreProduttivo.IDtsetprod LEFT OUTER JOIN t_TipoEsitoOccupazione ON t_EsperienzeLavoro.FK_EsitoOccupazionale = t_TipoEsitoOccupazione.IDtesitoocc LEFT OUTER JOIN t_TipoContratto ON t_EsperienzeLavoro.FK_TipoContratto = t_TipoContratto.IDcontr " + StrFiltroWhere + " ORDER BY (Cognome + ' ' + Nome), DataInizioRapp ";
PerseoNET/frmStudenti.cs:				string origineDati = "SELECT t_Utenti.IDutente, (Cognome + ' ' + Nome) AS Studente, CodFiscale, TipoNazionalita, ComResidenza, ProvResidenza, CAPresidenza, IndirResidenza, Tel_1, Tel_2, Tel_3, (CASE WHEN (Tel_1 IS NOT NULL) THEN Tel_1 WHEN (Tel_1 IS NULL AND Tel_2 IS NOT NULL) THEN Tel_2 ELSE Tel_1 END) AS Telefono, COUNT(DISTINCT IDiscrizione) AS NIscr, COUNT(DISTINCT IDdotestud) AS NDoti, TipoContratto, TipoAreaProduttiva, DescrMansione, DispStage, Formazione, Pendolare, MezzoProprio, TipoDistanza, NoteVincoli, NoteInteresse FROM t_Utenti INNER JOIN t_InteressiLavorativi ON t_Utenti.IDutente = t_InteressiLavorativi.FK_Studente INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz LEFT OUTER JOIN t_StudentiDoti ON t_Utenti.IDutente = t_StudentiDoti.FK_Studente LEFT OUTER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente LEFT OUTER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_TipoSettoreProduttivo ON t_InteressiLavorativi.FK_SettoreProduttivo = t_TipoSettoreProduttivo.IDtsetprod LEFT OUTER JOIN t_TipoContratto ON t_InteressiLavorativi.FK_TipoContratto = t_TipoContratto.IDcontr LEFT OUTER JOIN t_TipoDistanzaLav ON t_InteressiLavorativi.FK_Distanza = t_TipoDistanzaLav.IDtdist GROUP BY t_Utenti.IDutente, Cognome, Nome, CodFiscale, TipoNazionalita, ComResidenza, ProvResidenza, CAPresidenza, IndirResidenza, Tel_1, Tel_2, Tel_3, UtenteTest, TipoContratto, TipoAreaProduttiva, DescrMansione, DispStage, Formazione, Pendolare, MezzoProprio, TipoDistanza, NoteVincoli, NoteInteresse " + Strings.Replace(StrFiltroWhere, "WHERE ", "HAVING ") + " ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmStudenti.cs:				string origineDati = "SELECT t_Utenti.IDutente, (Cognome + ' ' + Nome) AS Studente, CodFiscale, TipoNazionalita, ComResidenza, ProvResidenza, CAPresidenza, IndirResidenza, Tel_1, Tel_2, Tel_3, COUNT(DISTINCT IDiscrizione) AS NIscr, COUNT(DISTINCT IDdotestud) AS NDoti, TipoSettoreInt, TipoFormativoInterno, DescrInteresse, NoteInteresse, Stage FROM t_Utenti INNER JOIN t_InteressiFormativi ON t_Utenti.IDutente = t_InteressiFormativi.FK_Studente INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz LEFT OUTER JOIN t_StudentiDoti ON t_Utenti.IDutente = t_StudentiDoti.FK_Studente LEFT OUTER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente LEFT OUTER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_TipoSettoreInterno ON t_InteressiFormativi.FK_SettoreInterno = t_TipoSettoreInterno.IDtsettin LEFT OUTER JOIN t_TipoFormativoInterno ON t_InteressiFormativi.FK_TipoFormativo = t_TipoFormativoInterno.IDtformaint GROUP BY t_Utenti.IDutente, Cognome, Nome, CodFiscale, TipoNazionalita, ComResidenza, ProvResidenza, CAPresidenza, IndirResidenza, Tel_1, Tel_2, Tel_3, UtenteTest, TipoSettoreInt, TipoFormativoInterno, DescrInteresse, NoteInteresse, Stage " + Strings.Replace(StrFiltroWhere, "WHERE ", "HAVING ") + " ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmStudenti.cs:					string origineDati = "SELECT t_Utenti.IDutente, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, t_Utenti.CodFiscale, t_Utenti.Sesso, t_Utenti.DataNascita, t_Utenti.LuogoNascita, t_Utenti.ProvNascita, t_Utenti.NazNascita, t_Utenti.IndirResidenza, t_Utenti.ComResidenza, t_Utenti.CAPresidenza, t_Utenti.ProvResidenza, TipoReferenteUte, (t_ReferentiUtente.Cognome + ' ' + t_ReferentiUtente.Nome) AS Contatto, DescrAmmRef, NoteRef, t_ReferentiUtente.TelRef_1, t_ReferentiUtente.TelRef_2, t_ReferentiUtente.FaxRef, t_ReferentiUtente.EmailRef, IndirAmmRef, ComuneAmmRef, CAPammref, PROVammref, t_ReferentiUtente.Attivo FROM t_Utenti INNER JOIN t_ReferentiUtente ON t_Utenti.IDutente = t_ReferentiUtente.FK_Utente INNER JOIN t_TipoReferenteUtente ON t_ReferentiUtente.FK_TipoRef = t_TipoReferenteUtente.IDtrefute WHERE IDutente " + tblUtenti.StringaFiltroIN(0) + " ORDER BY (t_Utenti.Cognome + ' ' + t_Utenti.Nome), TipoReferenteUte, (t_ReferentiUtente.Cognome + ' ' + t_ReferentiUtente.Nome) ";
PerseoNET/frmStudenti.cs:				string str = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " ";
PerseoNET/frmStudenti.cs:				str = "SELECT IDtformaint, TipoFormativoInterno FROM t_TipoFormativoInterno ORDER BY TipoFormativoInterno";
PerseoNET/frmStudenti.cs:				str = "SELECT IDtnaz, TipoNazionalita FROM t_TipoNazionalita WHERE Obsoleto=0 ORDER BY IndNaz";
PerseoNET/frmStudenti.cs:				str = "SELECT t_Utenti.IDutente, (Cognome + ' ' + Nome) AS Studente, Sesso, DataNascita, CodFiscale, PIVA, TipoNazionalita, NazNascita, ComResidenza, ProvResidenza, CAPresidenza, IndirResidenza, Cittadinanza, (NULL) AS TipoTitoloStudio, (FK_StatoLav) AS StatoAttuale, Tel_1, Tel_2, Tel_3, (CASE WHEN (Tel_1 IS NOT NULL) THEN Tel_1 WHEN (Tel_1 IS NULL AND Tel_2 IS NOT NULL) THEN Tel_2 ELSE Tel_1 END) AS Telefono, Email, (0) AS NIscr, (0) AS NDoti FROM t_Utenti INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz ";
PerseoNET/frmStudenti.cs:				string vSQL = "SELECT (FK_Utente) AS IDutente, COUNT(IDiscrizione) AS NIscr FROM t_Iscrizioni GROUP BY FK_Utente HAVING FK_Utente IN() ";
PerseoNET/frmStudenti.cs:				vSQL = "SELECT (FK_Studente) AS IDutente, COUNT(IDdotestud) AS NDoti FROM t_StudentiDoti GROUP BY FK_Studente HAVING FK_Studente IN() ";
PerseoNET/frmStudenti.cs:					str = "SELECT t_Utenti.IDutente, (Cognome + ' ' + Nome) AS Studente, CodFiscale FROM t_Utenti ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmStudenti.cs:					string vSQL = "SELECT (FK_Utente) AS IDutente, COUNT(IDiscrizione) AS NIscr FROM t_Iscrizioni GROUP BY FK_Utente HAVING FK_Utente IN() ";
PerseoNET/frmStudenti.cs:					vSQL = "SELECT (FK_Studente) AS IDutente, COUNT(IDdotestud) AS NDoti FROM t_StudentiDoti GROUP BY FK_Studente HAVING FK_Studente IN() ";
PerseoNET/frmStudenti.cs:					string vSQL = "SELECT (FK_Utente) AS IDutente, COUNT(IDiscrizione) AS NIscr FROM t_Iscrizioni GROUP BY FK_Utente HAVING FK_Utente IN() ";
PerseoNET/frmStudenti.cs:					vSQL = "SELECT (FK_Studente) AS IDutente, COUNT(IDdotestud) AS NDoti FROM t_StudentiDoti GROUP BY FK_Studente HAVING FK_Studente IN() ";
PerseoNET/frmStudenti.cs:					string origineDati = "SELECT IDutente, (Cognome + ' ' + Nome) AS Studente, CodFiscale, NazNascita, (SELECT TipoNazionalita FROM t_TipoNazioniCF LEFT OUTER JOIN t_TipoNazionalita ON t_TipoNazioniCF.FK_ProvenienzaGeo = t_TipoNazionalita.IDtnaz WHERE DescrNazione=NazNascita) AS ZonaGeografica, Cittadinanza, (CittadinanzaNonAcquisita) NatoItaliaSenzaCittadinanza, (TipoLivelloMW) AS LivelloStudio, (TipoStatoLav) AS StatoLavorativo, (NULL) AS DescrSedi FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN v_StudentiLivelloTitoloStudio ON t_Utenti.IDutente=v_StudentiLivelloTitoloStudio.IDstudente LEFT OUTER JOIN t_TipoStatoLav ON t_Utenti.FK_StatoLav = t_TipoStatoLav.IDtslav " + text + " GROUP BY IDutente, (Cognome + ' ' + Nome), CodFiscale, NazNascita, Cittadinanza, TipoLivelloMW, CittadinanzaNonAcquisita, TipoStatoLav ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmStudenti.cs:					string origineDati = "SELECT IDutente, (Cognome + ' ' + Nome) AS Studente, CodFiscale, NazNascita, (SELECT TipoNazionalita FROM t_TipoNazioniCF LEFT OUTER JOIN t_TipoNazionalita ON t_TipoNazioniCF.FK_ProvenienzaGeo = t_TipoNazionalita.IDtnaz WHERE DescrNazione=NazNascita) AS ZonaGeografica, Cittadinanza, (CittadinanzaNonAcquisita) NatoItaliaSenzaCittadinanza, Disabile, (Svantaggio) AS DSA, StatoDisagioSociale, (TipoLivelloMW) AS LivelloStudio, (TipoStatoLav) AS StatoLavorativo, (NULL) AS DescrSedi FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN v_StudentiLivelloTitoloStudio ON t_Utenti.IDutente=v_StudentiLivelloTitoloStudio.IDstudente LEFT OUTER JOIN t_TipoStatoLav ON t_Utenti.FK_StatoLav = t_TipoStatoLav.IDtslav " + text + " GROUP BY IDutente, (Cognome + ' ' + Nome), CodFiscale, NazNascita, Cittadinanza, TipoLivelloMW, CittadinanzaNonAcquisita, TipoStatoLav, Disabile, Svantaggio, StatoDisagioSociale ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmStudenti.cs:						string origineDati = "SELECT IDsede, SiglaSede, (FK_Utente) AS IDutente, TipoFormativoInterno FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint " + text + " ORDER BY IDutente, IDtformaint, SiglaSede ";
PerseoNET/frmStudenti.cs:				string origineDati = "SELECT IDutente, FK_Iscrizione, IDdocumento, (Cognome + ' ' + Nome) AS Studente, CodFiscale, LuogoNascita, ProvNascita, NazNascita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, TipoDocumento, DescrDocumento, DataPubblicazione, (Redattore) AS RilasciatoDa, CodiceDoc, DataScadenza, NoteDocumento FROM t_Documenti INNER JOIN t_Utenti ON t_Documenti.FK_Studente = t_Utenti.IDutente INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz " + strFiltroWhere + " AND AttestatoPercorso=0 AND CertificazioneStudente=0 ORDER BY (Cognome + ' ' + Nome), CodFiscale ";
PerseoNET/frmStudenti.cs:					string vSQL = "SELECT IDutente, CodFiscale FROM t_Utenti INNER JOIN t_StudentiDoti ON t_StudentiDoti.FK_Studente = t_Utenti.IDutente WHERE ID_Dote='" + txtCercaSpeciale.Text + "' ";
PerseoNET/frmStudenti.cs:				string vSQL = "SELECT IDiscrizione, FK_Utente, FK_Edizione FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE IDiscrizione=" + Conversions.ToString(Conversions.ToLong(txtCercaSpeciale.Text)) + " ";
PerseoNET/frmStudenti.cs:					string origineDati = "SELECT IDutente, IDdocumento, FK_Iscrizione, (Cognome + ' ' + Nome) AS Studente, CodFiscale, LuogoNascita, ProvNascita, NazNascita, IndirResidenza, ComResidenza, CAPresidenza, ProvResidenza, TipoDocumento, DescrDocumento, DataPubblicazione, (Redattore) AS RilasciatoDa, (CASE WHEN CodiceInterno IS NOT NULL THEN CodiceInterno ELSE CodiceDoc END) AS CodiceDocumento, CodiceEdizione, DescrEdizione,SiglaSede, OrePrevisteCertificazione FROM t_PianoServizi LEFT OUTER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede RIGHT OUTER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione RIGHT OUTER JOIN t_Documenti INNER JOIN t_Utenti ON t_Documenti.FK_Studente = t_Utenti.IDutente INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz ON t_Iscrizioni.IDiscrizione = t_Documenti.FK_Iscrizione " + text + " AND (AttestatoPercorso=1 OR CertificazioneStudente=1) ORDER BY (Cognome + ' ' + Nome), CodFiscale, DataPubblicazione DESC ";
PerseoNET/frmStudenti.cs:					string origineDati = "SELECT IDutente, IDdocumento, FK_Iscrizione, (Cognome + ' ' + Nome) AS Studente, CodFiscale, LuogoNascita, ProvNascita, NazNascita, IndirResidenza, ComResidenza, CAPresidenza, ProvResidenza, TipoDocumento, DescrDocumento, DataPubblicazione, (CASE WHEN CodiceInterno IS NOT NULL THEN CodiceInterno ELSE CodiceDoc END) AS CodiceDocumento, CodiceEdizione, DescrEdizione,SiglaSede, OrePrevisteCertificazione FROM t_PianoServizi LEFT OUTER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede RIGHT OUTER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione RIGHT OUTER JOIN t_Documenti INNER JOIN t_Utenti ON t_Documenti.FK_Studente = t_Utenti.IDutente INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz ON t_Iscrizioni.IDiscrizione = t_Documenti.FK_Iscrizione " + text + " AND (AttestatoPercorso=1 OR CertificazioneStudente=1) ORDER BY (Cognome + ' ' + Nome), CodFiscale, DataPubblicazione DESC ";
PerseoNET/clsAzienda.cs:					string origineDati = "SELECT t_Aziende.IDazienda, FK_SettoreProd, FK_TipoForma, FK_TipoDimensione, IDsedeaz, FK_ParFiscaleAttuale, FK_TipoAssociazioneImpre, DescrAzienda, PIVA, CodFiscale, URLAzienda, ReferentePrimoContatto, NoteContatto, PubblicaAmministrazione, t_Aziende.Attiva, AziendaTest, Fornitore, TipoAreaProduttiva, TipoSettoreProd, TipoFormaGiuridica, SiglaTFG, TipoDimensione, TipoAssociazioneImprenditoriale, DescrCCNL, CodiceATECO, (0) AS NumContratti, (0) AS NumOrdini, (SELECT COUNT(IDparcella) FROM t_DocentiParcelle WHERE FK_Azienda=IDazienda) AS NumParcelle, (SELECT COUNT(IDconvazienda) FROM t_AziendeSediFormativeConvenzioni WHERE FK_Azienda=IDazienda) AS NumConv, CodiceIscrCCIAA, ComuneCCIAA, DataIscrCCIAA, DocValutazioneRischi, RSPP, MedicoCompetente, AddettoIncendioSoccorso, PianoEvacuazione, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, TelSedeAz_2, FaxSedeAz, EmailSedeAz, CodiceIBAN, DescrBancaBonifico, Assegno, (t_SediAziende.Attiva) AS SedeAttiva, DescrParFiscale, ModelloLetteraIncarico, AccettazioneCIGCUP, DettaglioEdizione_LI, FatturaElettronicaCD FROM t_Aziende INNER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod INNER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag LEFT OUTER JOIN t_TipoAssociazioneImprenditoriale ON t_Aziende.FK_TipoAssociazioneImpre = t_TipoAssociazioneImprenditoriale.IDtassimpre LEFT OUTER JOIN t_TipoDimensioneAzienda ON t_Aziende.FK_TipoDimensione = t_TipoDimensioneAzienda.IDtdimaz LEFT OUTER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda LEFT OUTER JOIN t_DecodificatoreParametroFiscale ON t_Aziende.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc WHERE (IDazienda=" + Conversions.ToString(value) + " AND IDsedeaz IS NULL) OR (IDazienda=" + Conversions.ToString(value) + " AND FK_TipoSede=1 AND t_SediAziende.Attiva=1) ";
PerseoNET/clsAzienda.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, SenzaPIVA, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", mvAzienda.get_Campo((object)"FK_TipoForma")));
PerseoNET/clsAzienda.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDazienda, DescrAzienda FROM t_Aziende WHERE (PIVA='", mvAzienda.get_Campo((object)"PIVA")), "' AND IDazienda<>"), value), ") "), "OR (CodFiscale='"), mvAzienda.get_Campo((object)"PIVA")), "' AND IDazienda<>"), value), ") "));
PerseoNET/clsAzienda.cs:							origineDati = "SELECT IDazienda, DescrAzienda FROM t_Aziende WHERE (PIVA='" + FunzStringa.StringaSQL(Conversions.ToString(mvAzienda.get_Campo((object)"CodFiscale"))) + "' AND IDazienda<>" + Conversions.ToString(value) + ") OR (CodFiscale='" + FunzStringa.StringaSQL(Conversions.ToString(mvAzienda.get_Campo((object)"CodFiscale"))) + "' AND IDazienda<>" + Conversions.ToString(value) + ") ";
PerseoNET/clsAzienda.cs:					string origineDati = "SELECT t_SediAziende.IDsedeaz, IDazienda, (IDazienda) AS PKaz, IDtsedeaz, FK_TipoSede, TipoSedeAzienda, DescrAzienda, DescrSedeAzienda, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, TelSedeAz_2, FaxSedeAz, EmailSedeAz, PosizioneINAIL, CodiceIBAN, CognomeIBAN, Assegno, t_SediAziende.Attiva FROM t_Aziende INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda INNER JOIN t_TipoSedeAzienda ON t_SediAziende.FK_TipoSede = t_TipoSedeAzienda.IDtsedeaz WHERE IDazienda=" + Conversions.ToString(mvIDazienda) + " ORDER BY t_SediAziende.Attiva DESC, FK_TipoSede, ComSedeAz ";
PerseoNET/clsAzienda.cs:					origineDati = "SELECT IDsedeaz, IDazienda, FK_Azienda, IDtsedeaz, FK_TipoSede, TipoSedeAzienda, DescrAzienda, DescrSedeAzienda, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, TelSedeAz_2, FaxSedeAz, EmailSedeAz, PosizioneINAIL, CodiceIBAN, CognomeIBAN, Assegno, Attiva FROM t_SediAziende ";
PerseoNET/clsAzienda.cs:				string origineDati = "SELECT IDreferaz, IDsedeaz, FK_TipoSede, (Cognome + ' ' + Nome) AS Contatto, DataNascita, LuogoNascita, ProvNascita, NazNascita, TelRef_1, TelRef_2, FaxRefAz, EmailRefAz, RapprLegale, ResponsabileSede, TutorStage, TutorApprendista, ReferenteAmministrativo, CF_RapprLegale, DescrEsperienzaProf, AnniEsperienzaProf, LivelloTitoloStudio, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, TelSedeAz_2, FaxSedeAz, EmailSedeAz, Attiva, Attivo FROM t_ReferentiAziende INNER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz INNER JOIN t_SediAziende ON t_ReferentiAziende.FK_SedeAzienda = t_SediAziende.IDsedeaz WHERE FK_Azienda=" + Conversions.ToString(PKAzienda) + " ORDER BY Attivo DESC, (Cognome + ' ' + Nome) ";
PerseoNET/clsAzienda.cs:						origineDati = (clsTblDatiDR.OrigineDati = "SELECT IDreferaz, (t_ReferentiAziende.Cognome + ' ' + t_ReferentiAziende.Nome) AS TutorAziendaOspitante, Attivo, (ComSedeAz) AS SedeTirocinio, (IndirSedeAz) AS Indirizzo, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Tirocinante, t_ConvenzioniStage.DataAvvio, t_ConvenzioniStage.DataFine, DataProlungamento, DataInterruzione, DurataStage, TipoConvenzione, (DescrRifDecreto) AS Decreto, (SiglaSede) AS SedeFormativa, DescrEdizione, CodiceEdizione FROM t_ReferentiAziende INNER JOIN t_ConvenzioniStage ON t_ReferentiAziende.IDreferaz = t_ConvenzioniStage.FK_TutorAzienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_SediAziende ON t_ConvenzioniStage.FK_SedeStage = t_SediAziende.IDsedeaz INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE t_AziendeSediFormativeConvenzioni.FK_Azienda=" + Conversions.ToString(PKAzienda) + " ORDER BY Attivo DESC, (t_ReferentiAziende.Cognome + ' ' + t_ReferentiAziende.Nome), t_ConvenzioniStage.DataAvvio DESC ");
PerseoNET/clsAzienda.cs:					string origineDati = "SELECT IDreferaz, (t_ReferentiAziende.Cognome + ' ' + t_ReferentiAziende.Nome) AS TutorAziendaOspitante, Attivo, (ComSedeAz) AS SedeTirocinio, (IndirSedeAz) AS Indirizzo, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Tirocinante, t_ConvenzioniStage.DataAvvio, t_ConvenzioniStage.DataFine, DataProlungamento, DataInterruzione, DurataStage, TipoConvenzione, (DescrRifDecreto) AS Decreto, ExtraCurriculare, (SiglaSede) AS SedeFormativa, DescrEdizione, CodiceEdizione FROM t_ReferentiAziende INNER JOIN t_ConvenzioniStage ON t_ReferentiAziende.IDreferaz = t_ConvenzioniStage.FK_TutorAzienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_SediAziende ON t_ConvenzioniStage.FK_SedeStage = t_SediAziende.IDsedeaz INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede " + str + "ORDER BY (t_ReferentiAziende.Cognome + ' ' + t_ReferentiAziende.Nome), ExtraCurriculare DESC, TipoConvenzione, t_ConvenzioniStage.DataAvvio DESC ";
PerseoNET/clsAzienda.cs:				string origineDati = "SELECT IDconvenzione, IDconvazienda, DescrAzienda,TipoSettoreProd, TipoConvenzione, (DescrRifDecreto) AS Decreto, ExtraCurriculare, DataConvenzione, DataScadenza, NumeroStudentiPrevisti, DataAvvio, DataFine, DataInterruzione, DataProlungamento, DurataStage, GiorniStage, MaxOreGiorno, MaxOreSettimana, OraIngressoM, OraUscitaM, OraIngressoP, OraUscitaP, NumAltriTirocinanti, NumeroExtraCurrAttivi, (t_ReferentiAziende.Cognome + ' ' +  t_ReferentiAziende.Nome) AS TutorAzienda, NumStudentiTutorAzienda, ComSedeAz, IndirSedeAz, ProvSedeAz, NazioneSedeAz, (NumeroDipendenti) AS FasciaDimensioneSede, NumeroAddettiSede, t_ConvenzioniStage.StagePagamento, (CASE WHEN CompensoStage IS NOT NULL THEN CompensoStage ELSE 0 END) AS CompensoStage, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS TutorDidattico, (SELECT TipoIndennitaCorrisposta FROM t_TipoStageIndennitaCorrisposta WHERE IDtindennitacorrisposta=FK_TipoIndennita) AS TipoIndennita, (SELECT TipoDipendentiSedeStage FROM t_TipoDipendentiSedeStage WHERE IDtdipedesestage=FK_NumeroDipendenti) AS NumeroDipendentiSedeStage, (SELECT TipoAttivazioneDeroga FROM t_TipoConvenzioneAttivazioneDeroga WHERE IDtconvderoga=FK_TipoAttivazioneDeroga) AS TipoAttivazioneDeroga, (SELECT TipoStatoTirocinante FROM t_TipoStatoTirocinante WHERE IDtstirocinante=FK_TipoStatoTirocinante) AS TipoStatoTirocinante, ImportoIndennita, IndennitaPromotore, IndennitaAzienda, BuoniPasto, Mensa, (CF_RapprLegale) AS CF_TutorAzienda FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_SediAziende ON t_ConvenzioniStage.FK_SedeStage = t_SediAziende.IDsedeaz AND t_Aziende.IDazienda = t_SediAziende.FK_Azienda INNER JOIN t_ReferentiAziende ON t_ConvenzioniStage.FK_TutorAzienda = t_ReferentiAziende.IDreferaz INNER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod INNER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag INNER JOIN t_Docenti ON t_ConvenzioniStage.FK_Tutor = t_Docenti.IDdocente LEFT OUTER JOIN t_TipoPosizioneTutorAzienda ON t_ReferentiAziende.FK_TipoPosizioneTutor = t_TipoPosizioneTutorAzienda.IDttutoraz " + str + "ORDER BY ExtraCurriculare DESC, TipoConvenzione, t_ConvenzioniStage.DataAvvio DESC ";
PerseoNET/clsAzienda.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT FK_Azienda, IDparcella FROM t_DocentiParcelle WHERE FK_Azienda=", this.get_Campo((object)0)));
PerseoNET/clsAzienda.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT FK_Azienda, IDcontrest FROM t_DocentiContrattiEsterni WHERE FK_Azienda=", this.get_Campo((object)0)));
PerseoNET/clsAzienda.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT FK_Fornitore, IDordine FROM t_RichiesteOrdini WHERE FK_Fornitore=", this.get_Campo((object)0)));
PerseoNET/clsAzienda.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT FK_Azienda, IDconvazienda FROM t_AziendeSediFormativeConvenzioni WHERE FK_Azienda=", this.get_Campo((object)0)));
PerseoNET/clsAzienda.cs:						text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDreferaz, (FK_Azienda) AS IDazienda, IDsedeaz, FK_TipoSede, (Cognome + ' ' + Nome) AS Referente, DataNascita, LuogoNascita, ProvNascita, NazNascita, ResidenzaRapprLegale, TipoRuoloAz, TelRef_1, TelRef_2, FaxRefAz, EmailRefAz, RapprLegale, TutorStage, TutorApprendista, ReferenteAmministrativo, ResponsabileSede, CF_RapprLegale, Attiva, Attivo FROM t_SediAziende INNER JOIN t_ReferentiAziende ON t_SediAziende.IDsedeaz = t_ReferentiAziende.FK_SedeAzienda INNER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz WHERE FK_Azienda=", this.get_Campo((object)0)), " AND Attivo=1 AND RapprLegale=1 "), "ORDER BY FK_TipoSede, (Cognome + ' ' + Nome) "));
PerseoNET/clsAzienda.cs:							string vSQL = "SELECT IDcomune, Comune, CodiceComune FROM t_TipoComuni WHERE CodiceComune='" + Strings.Mid(strCF, 12, 4) + "' ORDER BY Attivo DESC, Comune ";
PerseoNET/clsAzienda.cs:							string vSQL = "SELECT IDtnazione, CodiceNazione, DescrNazione FROM t_TipoNazioniCF WHERE CodiceNazione IS NOT NULL AND CodiceNazione='" + Strings.Mid(strCF, 12, 4) + "' ORDER BY DescrNazione";
PerseoNET/EsportaPerseo.cs:				string origineDati = "SELECT Cognome, Nome, CodFiscale, TipoAttivita, DescrArgomento, OreAssegnate, SiglaSede, DescrEdizione, QuotaOraIncarico, SUM(OreSvolgere) AS OreApprovate, MIN(DataInizioIncarico) AS DataInizio, MAX(DataFineIncarico) AS DataTermine FROM t_IncarichiEdizioniContratti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE PagamentoIndividuale=1 GROUP BY Cognome, Nome, CodFiscale, TipoAttivita, DescrArgomento, OreAssegnate, SiglaSede, DescrEdizione, IndTA, QuotaOraIncarico HAVING DataFineIncarico>='01/09/" + Strings.Mid(vAnnoAmm, 1, 4) + "'  AND DataInizioIncarico<='31/08/" + Strings.Mid(vAnnoAmm, 6, 4) + "' ORDER BY Cognome, CodFiscale, IndTA";
PerseoNET/EsportaPerseo.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, PosRegistro, (Cognome + ' ' + Nome) AS Studente, DataAssenza, SUM(Minuti) AS TotaleMinuti, Giustificata FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_AssenzeAttivita ON t_Iscrizioni.IDiscrizione = t_AssenzeAttivita.FK_Iscrizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY IDiscrizione, PosRegistro, (Cognome + ' ' + Nome), DataAssenza, Giustificata "), "ORDER BY (Cognome + ' ' + Nome), PosRegistro, DataAssenza "));
PerseoNET/EsportaPerseo.cs:					string origineDati = "SELECT IDdocente, Docente, Dalle, Alle" + text4 + " FROM t_Locali ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDdocente, (Cognome + ' ' + Nome) AS Docente FROM t_Docenti WHERE IDdocente " + vStrFiltroIN + " AND FK_Tipo>1 ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDdocente, CodiceEdizione, (Cognome + ' ' + Nome) AS Docente, SiglaSede, DataAttivita, OraInizio, OraFine FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione=t_Sedi.IDsede WHERE IDdocente " + vStrFiltroIN + " AND DataAttivita>=" + FunzStringa.StrDataSQL(vStrDAL, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " ORDER BY IDdocente, DataAttivita, OraInizio ";
PerseoNET/EsportaPerseo.cs:				string str = "SELECT IDincarico, (FK_Contratto) AS IDcontratto, (Cognome + ' ' + Nome) AS Collaboratore, CodiceEdizione, DescrEdizione, OreAssegnate, TipoAttivita, DescrBreveArgomento, QuotaOraIncarico, (OreSvolgere) AS OreApprovate, DataInizioIncarico, DataFineIncarico, DataProlungamento, ApprovaIncarico, IncaricoGenericoGratuito FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi AND t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IncaricoGenericoGratuito=0 AND DataFine>'31/08/2007' ";
PerseoNET/EsportaPerseo.cs:				string origineDati = "SELECT TipoLivello, SottoTitolo, NoteCertificato, DescrSettore, t_TipoSicurezzaLivello.OrePreviste, Ordinale, DescrContenuto, DescrContenutoDettaglio, DescrRiferimento, (t_TipoSicurezzaContenuti.OrePreviste) As OreContenuto, t_TipoSicurezzaLivello.Obsoleto FROM t_TipoSicurezzaLivello INNER JOIN t_TipoSicurezzaContenuti ON t_TipoSicurezzaLivello.IDtoresicurezza = t_TipoSicurezzaContenuti.FK_Livello ORDER BY LivelloGenerale DESC, t_TipoSicurezzaLivello.OrePreviste, TipoLivello, DescrSettore, Ordinale, DescrContenuto";
PerseoNET/EsportaPerseo.cs:				string origineDati = "SELECT IDitemgrad, DescrModello, (CodiceSez) AS Codice, DescrSezione, PesoSezione, (DescrItem) AS Domanda, (PesoItem) AS Peso, CoeffRating FROM t_ModelliGradimento INNER JOIN t_ModelloGradimentoSezioni ON t_ModelliGradimento.IDmodgr = t_ModelloGradimentoSezioni.FK_ModelloGR INNER JOIN t_ModelloGradimentoItem ON t_ModelloGradimentoSezioni.IDsezmodgr = t_ModelloGradimentoItem.FK_Sezione WHERE FK_Modello=" + Conversions.ToString(vIDmodello) + " ORDER BY CodiceSez, IndItem ";
PerseoNET/EsportaPerseo.cs:				string origineDati = "SELECT (t_Iscrizioni.IDiscrizione) AS MatricolaIscritto, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, (CASE WHEN FK_Anno IS NOT NULL THEN (CAST(FK_Anno AS VARCHAR) + 'Â°anno') ELSE NULL END) AS Annualita, (Cognome + ' ' + Nome) AS Studente, IDmwiscr, ID_Dote, DoteChiusa, DataIscr, DataRitiro, OreSostegno, OreSostegnoIndividuale, (SELECT SUM(DATEDIFF(mi,OraInizio, OraFine))/60 FROM v_DettaglioIscrittiSostegno WHERE IDiscrizione=t_Iscrizioni.IDiscrizione) AS TotaleOre, (SELECT SUM(DATEDIFF(mi,OraInizio, OraFine))/60 FROM v_DettaglioIscrittiSostegno WHERE IDiscrizione=t_Iscrizioni.IDiscrizione AND SostegnoIndividuale=1) AS TotaleOreIndividuale, (SELECT MAX(DataAttivita) FROM v_DettaglioIscrittiSostegno WHERE IDiscrizione=t_Iscrizioni.IDiscrizione) AS UltimaData FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud AND t_Utenti.IDutente = t_StudentiDoti.FK_Studente " + left + "ORDER BY SiglaSede, CodiceEdizione, PosRegistro, t_Utenti.Cognome, t_Utenti.Nome ";
PerseoNET/EsportaPerseo.cs:				string str = "SELECT IDprogetto, (IDutente) AS ID_Studente, (Cognome + ' ' + Nome) AS Studente, Cognome, Nome, CodFiscale, Sesso, DataNascita, (DATEDIFF(d,DataNascita,DataAvvioProg)/365) AS Eta, LuogoNascita, ProvNascita, NazNascita, TipoNazionalita, Cittadinanza, CittadinanzaNonAcquisita, StatoCivile, LuogoNascitaStraniero, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, SiglaSede, CodiceProgetto, DescrProgetto, TipoProgetto, IDmwp, DescrBando, AnnoBando, CodiceBando, DataAvvioProg, DataFineProg, Disabile, (Svantaggio) AS DSA, (TipoStatoLav) AS TipoStatoLavorativo, (SELECT TipoLivelloMW FROM t_PercorsoStudi INNER JOIN t_TipoLivelloTitoloMW ON t_PercorsoStudi.FK_LivelloStudioMW = t_TipoLivelloTitoloMW.IDtlivstudioMW WHERE FK_Utente=t_Utenti.IDutente) AS TipoTitoloStudio, (Tel_1) AS Telefono, (Tel_2) AS Cellulare, (Tel_3) AS AltroTelefono, Fax, Email, COUNT(DISTINCT IDiscrizione) AS NumeroIscrizioni, SUM(OreUtente) AS OreUtente, SUM(OreAttivitaIndividuali) AS OreAttivitaIndividuali, (0) OreServiziPIP, SUM(OreSostegno) AS OreSostegno, SUM(OreSostegnoIndividuale) AS OreSostegnoIndividuale FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando INNER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto LEFT OUTER JOIN t_TipoStatoLav ON t_Utenti.FK_StatoLav = t_TipoStatoLav.IDtslav ";
PerseoNET/EsportaPerseo.cs:					str = "SELECT (FK_Utente) AS IDutente, IDprogetto, SiglaSede, SUM(MaxOrePreviste) AS OreServiziPIP FROM t_StudentiDotiPianiFormativi INNER JOIN t_StudentiDoti ON t_StudentiDotiPianiFormativi.FK_Dote = t_StudentiDoti.IDdotestud INNER JOIN t_Iscrizioni ON t_StudentiDoti.IDdotestud = t_Iscrizioni.FK_DoteStudente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_StudentiDoti.FK_ProgettoRendiconta = t_Progetti.IDprogetto AND t_Azioni.FK_Progetto = t_Progetti.IDprogetto GROUP BY FK_Utente, IDprogetto, SiglaSede HAVING IDprogetto " + clsTblDatiDR.StringaFiltroIN("IDprogetto") + " ORDER BY IDprogetto, FK_Utente, SiglaSede";
PerseoNET/EsportaPerseo.cs:				string str = "SELECT IDiscrizione, t_Utenti.IDutente, IDedizione, (Cognome + ' ' + Nome) AS Studente, Cognome, Nome, CodFiscale, CFProvvisorio, Sesso, DataNascita, (DATEDIFF(d,DataNascita,DataAvvio)/365) AS Eta, LuogoNascita, ProvNascita, NazNascita, (TipoNazionalita) AS AreaGeograficaNascita, StatoCivile, LuogoNascitaStraniero, Cittadinanza, CittadinanzaNonAcquisita, (NULL) AS DoppiaCittadinanza, DataResidenzaItalia, ComResidenza, ProvResidenza, CAPresidenza, IndirResidenza, ComAbitazione, ProvAbitazione, CAPabitazione, IndirAbitazione, SiglaSede, DescrEdizione, CodiceEdizione, IDmwe, TipoAnnualita, TipoFormativoInterno, TipoSettoreInt, (NULL) AS AnnoAmministrativo, DataAvvio, DataFine, DataFineEsame, Durata, DescrProgetto, CodiceProgetto, IDmwp, DescrBando, AnnoBando, ID_Dote, TipoDote, DataAvvioDote, DataFineDote, PIPEsterno, DoteChiusa, DataDoteChiusa, (DoteDeroga) AS Proroga, Uditore, IDmwiscr, (DataIscr) AS DataIscrizione, DataRitiro, TipoMotivoRitiro, (NULL) TrasferitoDopoRitiro, OreUtente, OreCredito, OreAttivitaIndividuali, (0) OreServiziPIP, Sostegno, OreSostegno, OreSostegnoIndividuale, Disabile, (Svantaggio) AS DSA, (TipoStatoLav) AS TipoStatoLavorativo, (NULL) AS TipoTitoloStudio, (Tel_1) AS Telefono, (Tel_2) AS Cellulare, (Tel_3) AS AltroTelefono, Fax, Email, EmailFAD, (CASE WHEN ID_Dote IS NOT NULL THEN ImportoTotaleDote ELSE 0 END) AS QuotaTotaleDote, (0) AS QuotaTotaleVersata, EsenzioneVersamento, QuotaEsenzione, NoteEsenzione, PresenzaEsame, EsameINAIL, IdoneoAmmesso, PuntFinale, ProseguePercorso, (NULL) AS DescrDocumento, (NULL) AS TipoDocumento, (NULL) AS CodiceDoc, (NULL) AS Redattore, (NULL) AS DataPubblicazione, (NULL) AS DataScadenza, PosRegistro, DropOut, NoteProvenienza, StatoDisagioSociale, (NULL) AS DescrAzienda, (NULL) AS ComuneAzienda, (NULL) AS CAPazienda, (NULL) AS ProvAzienda, (NULL) AS IndirizzoAzienda, (NULL) AS DescrMansione, Gruppo, (NULL) AS EdizioneProvenienza, LezioneReligioneCattolica, LingueStraniere FROM t_TipoDoteStudente RIGHT OUTER JOIN t_StudentiDoti ON t_TipoDoteStudente.IDtdote = t_StudentiDoti.FK_TipoDote RIGHT OUTER JOIN t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando LEFT OUTER JOIN t_TipoSettoreInterno ON t_PianoServizi.FK_SettoreEdizione = t_TipoSettoreInterno.IDtsettin LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_TipoMotivoRitiro ON t_Iscrizioni.FK_MotivoRitiro = t_TipoMotivoRitiro.IDtritiro LEFT OUTER JOIN t_TipoStatoLav ON t_Utenti.FK_StatoLav = t_TipoStatoLav.IDtslav ON t_StudentiDoti.IDdotestud = t_Iscrizioni.FK_DoteStudente ";
PerseoNET/EsportaPerseo.cs:						str = "SELECT IDiscrizione, DescrDocumento, NoteDocumento, DataPubblicazione, DataScadenza, CodiceDoc, Redattore, TipoDocumento, DurataMesiMax, ObbligoDataScadenza FROM t_Utenti INNER JOIN t_Documenti ON t_Utenti.IDutente = t_Documenti.FK_Studente INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente WHERE DocRiconoscimento=1 AND FK_Edizione " + clsTblDatiDR.StringaFiltroIN("IDedizione") + " ORDER BY IDiscrizione, DataPubblicazione DESC ";
PerseoNET/EsportaPerseo.cs:						str = "SELECT (t_Iscrizioni.FK_Utente) AS IDutente, TipoLivelloMW FROM t_Iscrizioni INNER JOIN t_PercorsoStudi ON t_Iscrizioni.FK_Utente = t_PercorsoStudi.FK_Utente INNER JOIN t_TipoLivelloTitoloMW ON t_PercorsoStudi.FK_LivelloStudioMW = t_TipoLivelloTitoloMW.IDtlivstudioMW WHERE t_Iscrizioni.FK_Utente " + clsTblDatiDR.StringaFiltroIN("IDutente") + " ORDER BY LivelloMW DESC ";
PerseoNET/EsportaPerseo.cs:							str = Conversions.ToString(Operators.ConcatenateObject("SELECT IDutente, Cittadinanza FROM t_Utenti WHERE IDutente=", clsTblDatiDR.get_Campo((object)"IDutente")));
PerseoNET/EsportaPerseo.cs:						str = (clsTblDatiDR2.OrigineDati = "SELECT IDiscrizione, (QuotaDoteIscrizione*NumeroVoucher) AS TQuota FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_IscrizioniDoti ON t_Iscrizioni.IDiscrizione = t_IscrizioniDoti.FK_Iscrizione WHERE IDiscrizione " + clsTblDatiDR.StringaFiltroIN("IDiscrizione") + " ORDER BY IDiscrizione ");
PerseoNET/EsportaPerseo.cs:						str = (clsTblDatiDR2.OrigineDati = "SELECT IDiscrizione, Quota FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_IscrizioniVersamenti ON t_Iscrizioni.IDiscrizione = t_IscrizioniVersamenti.FK_Iscrizione WHERE IDiscrizione " + clsTblDatiDR.StringaFiltroIN("IDiscrizione") + " ORDER BY IDiscrizione ");
PerseoNET/EsportaPerseo.cs:						str = (clsTblDatiDR2.OrigineDati = "SELECT FK_Studente, ID_Dote, SUM(MaxOrePreviste) AS OreServiziPIP FROM t_StudentiDoti INNER JOIN t_StudentiDotiPianiFormativi ON t_StudentiDoti.IDdotestud = t_StudentiDotiPianiFormativi.FK_Dote GROUP BY FK_Studente, ID_Dote ");
PerseoNET/EsportaPerseo.cs:						str = "SELECT IDiscrizione, FK_Utente, FK_TipoFormativoInterno, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataIscr, DataRitiro, TipoMotivoRitiro, SiglaSede, FK_Anno FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_TipoMotivoRitiro ON t_Iscrizioni.FK_MotivoRitiro=t_TipoMotivoRitiro.IDtritiro WHERE FK_Utente " + clsTblDatiDR.StringaFiltroIN("IDutente") + " AND TipoFormativoInterno='OBBLIGO FORMATIVO - DDIF' ORDER BY DataAvvio DESC ";
PerseoNET/EsportaPerseo.cs:						str = "SELECT IDdocumento, FK_Studente, DescrDocumento, DataPubblicazione, Redattore FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE TipoDocumento LIKE '%cittadinanza%' AND DescrDocumento LIKE '%italia%' ORDER BY FK_Studente, DataModifica DESC ";
PerseoNET/EsportaPerseo.cs:								str = Conversions.ToString(Operators.ConcatenateObject("SELECT IDiscrizione FROM t_Iscrizioni WHERE DataIscr>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataRitiro")), "dd/MM/yyyy"), FlagSqlServer: true) + " AND DataIscr<=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataFine")), "dd/MM/yyyy"), FlagSqlServer: true) + " AND FK_Utente=", clsTblDatiDR.get_Campo((object)"IDutente")));
PerseoNET/EsportaPerseo.cs:						str = "SELECT IDiscrizione, Cognome, Nome, DescrAzienda, ComuneAzienda, CAPazienda, ProvAzienda, IndirizzoAzienda, DescrMansione, DataInizioRapp, DataFineRapp, DataIscr FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_EsperienzeLavoro ON t_Utenti.IDutente = t_EsperienzeLavoro.FK_Utente WHERE DataInizioRapp IS NOT NULL AND DescrAzienda IS NOT NULL AND FK_Edizione " + clsTblDatiDR.StringaFiltroIN("IDedizione") + " ";
PerseoNET/EsportaPerseo.cs:							str = (clsTblDatiDR4.OrigineDati = "SELECT IDiscrizione, DescrAzienda, ComSedeAz, CAPSedeAZ, ProvSedeAz, IndirSedeAz FROM t_Iscrizioni INNER JOIN t_Aziende ON t_Iscrizioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda WHERE t_Iscrizioni.FK_Azienda IS NOT NULL AND t_SediAziende.Attiva=1 AND FK_TipoSede=1 AND FK_Edizione " + clsTblDatiDR.StringaFiltroIN("IDedizione") + " ");
PerseoNET/EsportaPerseo.cs:								str = "SELECT Categoria, Iscritti, Subentri, Ritirati, IscrittiFinali, Ammessi, NonAmmessi FROM t_Iscrizioni ";
PerseoNET/EsportaPerseo.cs:								string str = "SELECT (IDiscrizione) AS MatricolaIscr, (t_Utenti.IDutente) AS MatricolaStud, IDedizione, (Cognome + ' ' + Nome) AS Studente, Cognome, Nome, CodFiscale, Sesso, DataNascita, (DATEDIFF(d,DataNascita,DataAvvio)/365) AS Eta, LuogoNascita, ProvNascita, NazNascita, TipoNazionalita, StatoCivile, LuogoNascitaStraniero, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, (NULL) AS RegioneResidenza, SiglaSede, DescrEdizione, CodiceEdizione, IDmwe, TipoAnnualita, TipoFormativoInterno, TipoSettoreInt, (NULL) AS AnnoAmministrativo, DataAvvio, DataFine, DataFineEsame, Durata, CodiceProgetto, DescrProgetto, IDmwp, DescrBando, AnnoBando, (NULL) AS ID_DotePrecedente, (NULL) AS StatoAvvioEdizione, ID_Dote, (FK_TipoDote) AS TipoDote, IDmwiscr, (DataIscr) AS DataIscrizione, DataRitiro, TipoMotivoRitiro, (NULL) TrasferitoDopoRitiro, OreCredito, OreAttivitaIndividuali, Sostegno, OreSostegno, OreSostegnoIndividuale, Disabile, (Svantaggio) AS DSA, (TipoStatoLav) AS TipoStatoLavorativo, (SELECT TipoLivelloMW FROM t_PercorsoStudi INNER JOIN t_TipoLivelloTitoloMW ON t_PercorsoStudi.FK_LivelloStudioMW = t_TipoLivelloTitoloMW.IDtlivstudioMW WHERE FK_Utente=t_Utenti.IDutente) AS TipoTitoloStudio, (Tel_1) AS Telefono, (Tel_2) AS Cellulare, (Tel_3) AS AltroTelefono, Fax, Email, (SELECT SUM(QuotaDoteIscrizione*NumeroVoucher) AS TQuota FROM t_IscrizioniDoti WHERE FK_Iscrizione=IDiscrizione) AS QuotaTotaleDote, (SELECT SUM(Quota) AS TQuota FROM t_IscrizioniVersamenti WHERE FK_Iscrizione=IDiscrizione) AS QuotaTotaleVersata, EsenzioneVersamento, QuotaEsenzione, NoteEsenzione, PresenzaEsame, EsameINAIL, IdoneoAmmesso, PuntFinale, ProseguePercorso, (NULL) AS DescrDocumento, (NULL) AS TipoDocumento, (NULL) AS CodiceDoc, (NULL) AS Redattore, (NULL) AS DataPubblicazione, (NULL) AS DataScadenza, PosRegistro, DropOut, NoteProvenienza, StatoDisagioSociale, CittadinanzaNonAcquisita, (NULL) AS DoppiaCittadinanza, Cittadinanza, (0) AS Maggiorenne, (0) AS PossibileApprendista FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando LEFT OUTER JOIN t_TipoSettoreInterno ON t_PianoServizi.FK_SettoreEdizione = t_TipoSettoreInterno.IDtsettin LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_TipoMotivoRitiro ON t_Iscrizioni.FK_MotivoRitiro = t_TipoMotivoRitiro.IDtritiro LEFT OUTER JOIN t_TipoStatoLav ON t_Utenti.FK_StatoLav = t_TipoStatoLav.IDtslav LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE IDedizione " + MyProject.Forms.frmEdizioni.tblEdizioni.StringaFiltroIN("IDedizione") + " AND IDsede " + Variabili.FiltroSedi + " AND Gruppo=1 AND Durata>=500 AND Uditore=0 ";
PerseoNET/EsportaPerseo.cs:								str = "SELECT IDtdote, TipoDote FROM t_TipoDoteStudente ";
PerseoNET/EsportaPerseo.cs:								str = "SELECT (IDiscrizione) AS MatricolaIscr, (t_Utenti.IDutente) AS MatricolaStud, IDedizione, (Cognome + ' ' + Nome) AS Studente, Cognome, Nome, CodFiscale, Sesso, DataNascita, (DATEDIFF(d,DataNascita,DataAvvio)/365) AS Eta, LuogoNascita, ProvNascita, NazNascita, TipoNazionalita, StatoCivile, LuogoNascitaStraniero, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, (NULL) AS RegioneResidenza, SiglaSede, DescrEdizione, CodiceEdizione, IDmwe, TipoAnnualita, TipoFormativoInterno, TipoSettoreInt, (NULL) AS AnnoAmministrativo, DataAvvio, DataFine, DataFineEsame, Durata, CodiceProgetto, DescrProgetto, IDmwp, DescrBando, AnnoBando, (NULL) AS ID_DotePrecedente, (NULL) AS StatoAvvioEdizione, ID_Dote, (FK_TipoDote) AS TipoDote, IDmwiscr, (DataIscr) AS DataIscrizione, DataRitiro, TipoMotivoRitiro, (NULL) TrasferitoDopoRitiro, OreCredito, OreAttivitaIndividuali, Sostegno, OreSostegno, OreSostegnoIndividuale, Disabile, (Svantaggio) AS DSA, (TipoStatoLav) AS TipoStatoLavorativo, (SELECT TipoLivelloMW FROM t_PercorsoStudi INNER JOIN t_TipoLivelloTitoloMW ON t_PercorsoStudi.FK_LivelloStudioMW = t_TipoLivelloTitoloMW.IDtlivstudioMW WHERE FK_Utente=t_Utenti.IDutente) AS TipoTitoloStudio, (Tel_1) AS Telefono, (Tel_2) AS Cellulare, (Tel_3) AS AltroTelefono, Fax, Email, (SELECT SUM(QuotaDoteIscrizione*NumeroVoucher) AS TQuota FROM t_IscrizioniDoti WHERE FK_Iscrizione=IDiscrizione) AS QuotaTotaleDote, (SELECT SUM(Quota) AS TQuota FROM t_IscrizioniVersamenti WHERE FK_Iscrizione=IDiscrizione) AS QuotaTotaleVersata, EsenzioneVersamento, QuotaEsenzione, NoteEsenzione, PresenzaEsame, EsameINAIL, IdoneoAmmesso, PuntFinale, ProseguePercorso, (NULL) AS DescrDocumento, (NULL) AS TipoDocumento, (NULL) AS CodiceDoc, (NULL) AS Redattore, (NULL) AS DataPubblicazione, (NULL) AS DataScadenza, PosRegistro, DropOut, NoteProvenienza, StatoDisagioSociale, CittadinanzaNonAcquisita, (NULL) AS DoppiaCittadinanza, Cittadinanza, (0) AS Maggiorenne, (0) AS PossibileApprendista FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando LEFT OUTER JOIN t_TipoSettoreInterno ON t_PianoServizi.FK_SettoreEdizione = t_TipoSettoreInterno.IDtsettin LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_TipoMotivoRitiro ON t_Iscrizioni.FK_MotivoRitiro = t_TipoMotivoRitiro.IDtritiro LEFT OUTER JOIN t_TipoStatoLav ON t_Utenti.FK_StatoLav = t_TipoStatoLav.IDtslav LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE TipoFormativoInterno " + clsTblDatiDR2.StringaFiltroIN("TipoFormativoInterno") + " AND DataAvvio<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND DataFine>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND IDsede " + Variabili.FiltroSedi + " AND Gruppo=1 AND Durata>0 AND Uditore=0 ";
PerseoNET/EsportaPerseo.cs:								str = "SELECT IDdocumento, FK_Studente, DescrDocumento, DataPubblicazione, Redattore FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE TipoDocumento LIKE '%cittadinanza%' AND DescrDocumento LIKE '%italia%' ORDER BY DataPubblicazione DESC ";
PerseoNET/EsportaPerseo.cs:								str = "SELECT IDiscrizione, DescrDocumento, TipoDocumento, CodiceDoc, Redattore, DataPubblicazione, DataScadenza FROM t_PianoServizi INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione INNER JOIN v_StudentiDocumentoRiconoscimentoAttivo ON t_Iscrizioni.FK_Utente = v_StudentiDocumentoRiconoscimentoAttivo.IDutente WHERE IDedizione " + MyProject.Forms.frmEdizioni.tblEdizioni.StringaFiltroIN("IDedizione") + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " AND Gruppo=1 AND Durata>=500 AND Uditore=0 ORDER BY IDiscrizione, DataPubblicazione DESC ";
PerseoNET/EsportaPerseo.cs:											str = Conversions.ToString(Operators.ConcatenateObject("SELECT IDiscrizione FROM t_Iscrizioni WHERE DataIscr>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR2.get_Campo((object)"DataRitiro")), "dd/MM/yyyy"), FlagSqlServer: true) + " AND DataIscr<=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR2.get_Campo((object)"DataFine")), "dd/MM/yyyy"), FlagSqlServer: true) + " AND FK_Utente=", clsTblDatiDR2.get_Campo((object)"MatricolaStud")));
PerseoNET/EsportaPerseo.cs:								str = "SELECT SiglaSede, CodiceEdizione, Annualita, DescrEdizione, Categoria, Iscritti, Subentri, Ritirati, IscrittiFinali, Ammessi, NonAmmessi, Proseguono, Ripetono FROM t_Iscrizioni ";
PerseoNET/EsportaPerseo.cs:				string origineDati = "SELECT (t_DocentiParcelle.IDparcella) AS Parcella, (CASE WHEN IDazienda IS NOT NULL THEN DescrAzienda ELSE (Cognome + ' ' + Nome) END) AS Collaboratore, DescrProgetto, CodiceProgetto, CodiceCIG, CodiceCUP, DescrEdizione, CodiceEdizione, SiglaSede, (CASE WHEN IDcomponente IS NOT NULL THEN ('SÃ¬') ELSE NULL END) AS CommissioneEsame, DataRiunionePreliminare, DescrCostiAggiuntivi, DescrParcella, TipoCausaleParcella, DescrParFiscale, CodiceTributo, DescrAmmNomina, DescrDatoreLavoro, DataParcella, DataPagamento, ImportoParcella, sngRiva, sngCassaPrev, sngIVA, (CostiAnticipo+CostiVitto+CostiViaggio) AS Costi, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, NumeroFattura, DataFattura FROM t_Progetti RIGHT OUTER JOIN t_DocentiParcelle INNER JOIN t_TipoCausaleParcella ON t_DocentiParcelle.FK_Causale = t_TipoCausaleParcella.IDtcausaparce LEFT OUTER JOIN t_CommissioniEsameComponenti ON t_DocentiParcelle.FK_Commissione = t_CommissioniEsameComponenti.IDcomponente LEFT OUTER JOIN t_CommissioniEsame ON t_CommissioniEsameComponenti.FK_Commissione = t_CommissioniEsame.IDcommissione LEFT OUTER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Sedi ON t_DocentiParcelle.FK_Sede = t_Sedi.IDsede ON t_Progetti.IDprogetto = t_DocentiParcelle.FK_Progetto LEFT OUTER JOIN t_Azioni ON t_DocentiParcelle.FK_Azione = t_Azioni.IDazione LEFT OUTER JOIN t_PianoServizi ON t_DocentiParcelle.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda WHERE DataPagamento IS NOT NULL AND DataPagamento>='" + vDal + "' AND DataPagamento<='" + vAL + "' AND IDsede " + Variabili.FiltroSedi + " ORDER BY (CASE WHEN FK_Azienda IS NOT NULL THEN DescrAzienda ELSE (Cognome + ' ' + Nome) END), DataPagamento ";
PerseoNET/EsportaPerseo.cs:				string origineDati = "SELECT t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Tipo=1 THEN 'Generico' WHEN FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS TipoDOC, (CASE WHEN FK_Tipo=1 THEN (SELECT OreContratto FROM t_DocentiContratti WHERE DataInizioContratto<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND DataFineContratto>=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND FK_Docente=IDdocente) ELSE NULL END) AS OreContratto, (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine))/60 FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND FK_Docente=IDdocente AND FK_Argomento IS NOT NULL) AS TotaleOreDOC, (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine))/60 FROM t_IncarichiEdizioni INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND FK_Docente=IDdocente AND FK_Argomento IS NULL) AS TotaleOreCODOC, (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine))/60 FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND FK_Docente=IDdocente AND FK_Argomento IS NULL) AS TotaleOreAltro, (0) AS TotaleOreSettimana FROM t_Docenti WHERE IDdocente " + vStrFiltroDocenti + " ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/EsportaPerseo.cs:						string str = "SELECT (t_Docenti.IDdocente) AS PKdoc, Aula, Secondaria, (Cognome + ' ' + Nome) AS Collaboratore, (FK_Contratto) AS Contratto, (IDincarico) AS Incarico, (SELECT DescrParFiscale FROM t_DocentiContrattiEsterni INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE FK_DocenteContratto=t_IncarichiEdizioniContratti.FK_Contratto) AS ParametroFiscale, (SELECT DescrAzienda FROM t_Aziende INNER JOIN t_DocentiContrattiEsterni ON t_Aziende.IDazienda = t_DocentiContrattiEsterni.FK_Azienda WHERE FK_DocenteContratto=t_IncarichiEdizioniContratti.FK_Contratto) AS Azienda, (SELECT RegolaAnnoSolare FROM t_DocentiContrattiEsterni INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE FK_DocenteContratto=t_IncarichiEdizioniContratti.FK_Contratto) AS RegolaMaxGiorniAnno, TipoAttivita, DescrArgomento, OreAssegnate, DataInizioIncarico, DataFineIncarico, DataProlungamento, (CASE WHEN ApprovaIncarico=0 THEN 0 ELSE OreSvolgere END) AS OreApprovate, (ApprovaIncarico) AS Approvato, IncaricoGenericoGratuito, DescrGratuito, PagamentoIndividuale, (NULL) AS DataGenerazione, (NULL) AS DataPrelievo, (NULL) AS DataAccettazione FROM t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(num2) + " AND FK_Tipo>2 ";
PerseoNET/EsportaPerseo.cs:						str = "SELECT IDsede, IDlettinc, IDcontratto, IDdocente, IDazienda, IDtattivita, IDprogetto, IDparfisc, SiglaSede, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Collaboratore, DescrProgetto, CodiceProgetto, TipoAttivita, QuotaOraIncarico, OreApprovate, DataInizioContratto, DataFineContratto, MaxDataProlungamento, DataApprovaIncarico, DataGenerazione, DataProlungamento, DataDownload, DataUpload FROM t_DocentiLettereIncarichi RIGHT OUTER JOIN v_DocentiLettereIncaricoPreviste ON t_DocentiLettereIncarichi.FK_Contratto = v_DocentiLettereIncaricoPreviste.IDcontratto AND t_DocentiLettereIncarichi.FK_Sede = v_DocentiLettereIncaricoPreviste.IDsede AND t_DocentiLettereIncarichi.FK_Docente = v_DocentiLettereIncaricoPreviste.IDdocente AND t_DocentiLettereIncarichi.FK_Progetto = v_DocentiLettereIncaricoPreviste.IDprogetto AND t_DocentiLettereIncarichi.FK_Attivita = v_DocentiLettereIncaricoPreviste.IDtattivita WHERE IDcontratto " + clsTblDatiDR.StringaFiltroIN("Contratto") + " ORDER BY (Cognome + ' ' + Nome), IDcontratto ";
PerseoNET/EsportaPerseo.cs:						str = "SELECT IDincarico, IDdocente, (Cognome + ' ' + Nome) AS Collaboratore, TipoAttivita, DescrArgomento, DataSvolgimento, (CASE WHEN OraInizio IS NOT NULL THEN OraInizio ELSE OraInizioCOD END) AS OraInizio, (CASE WHEN OraFine IS NOT NULL THEN OraFine ELSE OraFineCOD END) AS OraFine, (Minuti) AS Svolte, (NULL) AS Contratto FROM v_DettaglioOreSvoltePerIncarico WHERE IDincarico " + clsTblDatiDR.StringaFiltroIN("Incarico") + " ORDER BY IDincarico, DataSvolgimento, OraInizio";
PerseoNET/EsportaPerseo.cs:						str = "SELECT (t_Docenti.IDdocente) AS PKdoc, (Cognome + ' ' + Nome) AS Collaboratore, (IDcontratto) AS Contratto, DescrParFiscale, DataInizioContratto, DataFineContratto, MAX(DataProlungamento) AS DataProlungamento, NumeroGiorniLavorativi FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(num2) + " AND FK_Tipo>2 GROUP BY t_Docenti.IDdocente, Cognome, Nome, IDcontratto, DataInizioContratto, DataFineContratto, NumeroGiorniLavorativi, DescrParFiscale ";
PerseoNET/EsportaPerseo.cs:				string str = "SELECT (t_Docenti.IDdocente) AS PKdoc, Aula, Secondaria, (Cognome + ' ' + Nome) AS Collaboratore, (FK_Contratto) AS Contratto, (IDincarico) AS Incarico, DescrEdizione, Codiceedizione, SiglaSede,  (SELECT DescrParFiscale FROM t_DocentiContrattiEsterni INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE FK_DocenteContratto=t_IncarichiEdizioniContratti.FK_Contratto) AS ParametroFiscale, (SELECT DescrAzienda FROM t_Aziende INNER JOIN t_DocentiContrattiEsterni ON t_Aziende.IDazienda = t_DocentiContrattiEsterni.FK_Azienda WHERE FK_DocenteContratto=t_IncarichiEdizioniContratti.FK_Contratto) AS Azienda, (SELECT RegolaAnnoSolare FROM t_DocentiContrattiEsterni INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE FK_DocenteContratto=t_IncarichiEdizioniContratti.FK_Contratto) AS RegolaMaxGiorniAnno, TipoAttivita, DescrArgomento, OreAssegnate, DataInizioIncarico, DataFineIncarico, DataProlungamento, (CASE WHEN ApprovaIncarico=0 THEN 0 ELSE OreSvolgere END) AS OreApprovate, (ApprovaIncarico) AS Approvato, IncaricoGenericoGratuito, DescrGratuito, PagamentoIndividuale, (NULL) AS DataGenerazione, (NULL) AS DataPrelievo, (NULL) AS DataAccettazione FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione=t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_Sedeedizione=t_Sedi.Idsede INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE DataInizioIncarico<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND DataFineIncarico>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND IDsede=" + Conversions.ToString(vIDsede) + " AND FK_Tipo>2 ";
PerseoNET/EsportaPerseo.cs:				str = "SELECT IDsede, IDlettinc, IDcontratto, IDdocente, IDazienda, IDtattivita, IDprogetto, IDparfisc, SiglaSede, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Collaboratore, DescrProgetto, CodiceProgetto, TipoAttivita, QuotaOraIncarico, OreApprovate, DataInizioContratto, DataFineContratto, MaxDataProlungamento, DataApprovaIncarico, DataGenerazione, DataProlungamento, DataDownload, DataUpload FROM t_DocentiLettereIncarichi RIGHT OUTER JOIN v_DocentiLettereIncaricoPreviste ON t_DocentiLettereIncarichi.FK_Contratto = v_DocentiLettereIncaricoPreviste.IDcontratto AND t_DocentiLettereIncarichi.FK_Sede = v_DocentiLettereIncaricoPreviste.IDsede AND t_DocentiLettereIncarichi.FK_Docente = v_DocentiLettereIncaricoPreviste.IDdocente AND t_DocentiLettereIncarichi.FK_Progetto = v_DocentiLettereIncaricoPreviste.IDprogetto AND t_DocentiLettereIncarichi.FK_Attivita = v_DocentiLettereIncaricoPreviste.IDtattivita WHERE IDcontratto " + clsTblDatiDR.StringaFiltroIN("Contratto") + " ORDER BY (Cognome + ' ' + Nome), IDcontratto ";
PerseoNET/EsportaPerseo.cs:					string str = "SELECT t_Progetti.IDprogetto, IDsede, SiglaSede, DescrProgetto, CodiceProgetto, DataAvvioProg, DataFineProg, DescrBando, CodiceBando, COUNT(IDedizione) AS NumeroEdizioni, MAX(DataFine) AS UltimoFine, MAX(DataFineFA) AS UltimoFineFA, (SELECT MAX(DataRichiestaFine) FROM t_ProgettiPagamenti WHERE FK_Sede=IDsede AND FK_Progetto=IDprogetto AND DataPagamento IS NULL) AS UltimaRichiesta, (SELECT MAX(DataRichiestaFine) FROM t_ProgettiPagamenti WHERE FK_Sede=IDsede AND FK_Progetto=IDprogetto AND DataPagamento IS NOT NULL) AS UltimoPagamento FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Sedi ON t_Sedi.IDsede = t_PianoServizi.FK_SedeEdizione INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando GROUP BY t_Progetti.IDprogetto, IDsede, SiglaSede, DescrProgetto, CodiceProgetto, DataAvvioProg, DataFineProg, DescrBando, CodiceBando ";
PerseoNET/EsportaPerseo.cs:				string origineDati = ((!vFlagVeloce) ? ("SELECT t_StudentiDoti.IDdotestud, IDprogetto, IDutente, (Cognome + ' ' + Nome) AS Studente, ID_Dote, SiglaSede, CodiceProgetto, DescrProgetto, (FK_TipoDote) AS TipoDote, DataAvvioDote, DataFineDote, PIPEsterno, DoteChiusa, DescrAziendaProvenienza, DataInizioCIGS, DataFineCIGS, DataInvioDomanda, ImportoTotaleDote, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, SUM(QuotaDoteIscrizione) AS QuotaImpegnata, (ImportoTotaleDote - (SUM(QuotaDoteIscrizione))) AS QuotaDisponibile, SUM(OreAttivitaIndividuali) AS OrePIP, SUM(OreUtente) AS OreFormazione, (SUM(OreAttivitaIndividuali) + SUM(OreUtente)) AS OrePreviste, (NULL) AS PrimaDataPIP, (NULL) AS UltimaDataPIP, (NULL) AS UltimaDataFormazione, (0) AS OreSvoltePIP, (0) AS OreSvolteFormazione FROM t_IscrizioniDoti RIGHT OUTER JOIN t_Iscrizioni ON t_IscrizioniDoti.FK_Iscrizione = t_Iscrizioni.IDiscrizione RIGHT OUTER JOIN t_Utenti INNER JOIN t_StudentiDoti ON t_Utenti.IDutente = t_StudentiDoti.FK_Studente INNER JOIN t_Progetti ON t_StudentiDoti.FK_ProgettoRendiconta = t_Progetti.IDprogetto LEFT OUTER JOIN t_Sedi ON t_StudentiDoti.FK_SedePrimaria = t_Sedi.IDsede ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente AND t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud GROUP BY t_StudentiDoti.IDdotestud, IDprogetto, IDutente, Cognome, Nome, ID_Dote, IDsede, DoteChiusa, SiglaSede, CodiceProgetto, DescrProgetto, DataAvvioDote, DataFineDote, PIPEsterno, DescrAziendaProvenienza, DataInizioCIGS, DataFineCIGS, DataInvioDomanda, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, ImportoTotaleDote, FK_TipoDote " + vFiltro + "ORDER BY (Cognome + ' ' + Nome), ID_Dote ") : ("SELECT t_StudentiDoti.IDdotestud, IDprogetto, IDutente, (Cognome + ' ' + Nome) AS Studente, ID_Dote, SiglaSede, CodiceProgetto, DescrProgetto, (FK_TipoDote) AS TipoDote, DataAvvioDote, DataFineDote, PIPEsterno, DoteChiusa, DescrAziendaProvenienza, DataInizioCIGS, DataFineCIGS, DataInvioDomanda, ImportoTotaleDote, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, SUM(QuotaDoteIscrizione) AS QuotaImpegnata, (ImportoTotaleDote - (SUM(QuotaDoteIscrizione))) AS QuotaDisponibile, SUM(OreAttivitaIndividuali) AS OrePIP, SUM(OreUtente) AS OreFormazione, (SUM(OreAttivitaIndividuali) + SUM(OreUtente)) AS OrePreviste FROM t_IscrizioniDoti RIGHT OUTER JOIN t_Iscrizioni ON t_IscrizioniDoti.FK_Iscrizione = t_Iscrizioni.IDiscrizione RIGHT OUTER JOIN t_Utenti INNER JOIN t_StudentiDoti ON t_Utenti.IDutente = t_StudentiDoti.FK_Studente INNER JOIN t_Progetti ON t_StudentiDoti.FK_ProgettoRendiconta = t_Progetti.IDprogetto LEFT OUTER JOIN t_Sedi ON t_StudentiDoti.FK_SedePrimaria = t_Sedi.IDsede ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente AND t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud GROUP BY t_StudentiDoti.IDdotestud, IDprogetto, IDutente, Cognome, Nome, ID_Dote, IDsede, DoteChiusa, SiglaSede, CodiceProgetto, DescrProgetto, DataAvvioDote, DataFineDote, PIPEsterno, DescrAziendaProvenienza, DataInizioCIGS, DataFineCIGS, DataInvioDomanda, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, ImportoTotaleDote, FK_TipoDote " + vFiltro + "ORDER BY (Cognome + ' ' + Nome), ID_Dote "));
PerseoNET/EsportaPerseo.cs:				origineDati = "SELECT IDtdote, TipoDote FROM t_TipoDoteStudente ";
PerseoNET/EsportaPerseo.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_DoteStudente, IDiscrizione, (1) AS Indice, DataRitiro, MIN(DataStage) AS Prima, MAX(DataStage) AS Ultima, SUM(DATEDIFF(mi, OraIngresso, OraUscita)) AS TotaleMinuti, (0) AS TotaleMinutiAssenza FROM t_Iscrizioni INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione WHERE FK_Attivita IS NOT NULL AND FK_TipoStage>2 GROUP BY IDiscrizione, DataRitiro, FK_DoteStudente HAVING FK_DoteStudente=", clsTblDatiDR.get_Campo((object)"IDdotestud")), " "));
PerseoNET/EsportaPerseo.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(origineDati + "UNION SELECT FK_DoteStudente, IDiscrizione, (2) AS Indice, DataRitiro, MIN(DataAttivita) AS Prima, MAX(DataAttivita) AS Ultima, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleMinuti, (0) AS TotaleMinutiAssenza FROM t_Iscrizioni INNER JOIN t_CalendarioAttivita ON t_Iscrizioni.IDiscrizione = t_CalendarioAttivita.FK_Iscrizione WHERE LavoroPIP=1 GROUP BY IDiscrizione, DataRitiro, FK_DoteStudente HAVING FK_DoteStudente=", clsTblDatiDR.get_Campo((object)"IDdotestud")), " "));
PerseoNET/EsportaPerseo.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(origineDati + "UNION SELECT FK_DoteStudente, IDiscrizione, (3) AS Indice, DataRitiro, MIN(DataAttivita) AS Prima, MAX(DataAttivita) AS Ultima, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleMinuti, SUM(Minuti) AS TotaleMinutiAssenza FROM t_PianoServizi INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico LEFT OUTER JOIN t_AssenzeAttivita ON t_CalendarioAttivita.IDcalatt = t_AssenzeAttivita.FK_Attivita WHERE FK_Argomento IS NOT NULL AND DataAttivita<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " GROUP BY FK_DoteStudente, DataRitiro, IDiscrizione HAVING FK_DoteStudente=", clsTblDatiDR.get_Campo((object)"IDdotestud")), " "));
PerseoNET/EsportaPerseo.cs:					string origineDati = "SELECT IDedizione, IDazienda, IDiscrizione, Studente, Stato, CodFiscale, LuogoNascita, ProvNascita, NazNascita, DataNascita, ComResidenza, CAPresidenza, ProvResidenza, IndirResidenza, NazResidenza, SiglaSede, DescrEdizione, CodiceEdizione, TipoAnnualita, TipoFormativoInterno, DataAvvio, DataFine, (CASE WHEN Durata>0 THEN Durata ELSE NULL END) AS OreEdizione, IDconvazienda, IDconvenzione, TipoConvenzione, DescrQualificaUscita, DataConvenzione, DataScadenza, (NULL) AS AnnoAvvioTirocinio, (DataAvvioStage) AS StageDAL, (DataFineStage) AS StageAL, (DataInterruzione) AS Interrotto, (DataProlungamento) AS DataProlungamento, (DurataStage) AS OreStage, VariazioneDurataStage, (DescrAzienda) AS Azienda, PIVA_CF, (DescrSedeAzienda) AS Descrizione, (IndirSedeAz) Indirizzo, (ComSedeAz) AS Comune, (ProvSedeAz) AS Prov, (CAPSedeAZ) AS CAP, (NazioneSedeAz) AS Nazione, (TipoSedeAzienda) AS TipoSede, (TipoDipendentiSedeStage) AS NumeroAddettiSedeStage, NumeroAddettiSede, NumeroExtraCurrAttivi, TipoFormaGiuridica, (TipoSettoreProd) AS SettoreAzienda, TipoDimensione, PosizioneINAIL, OraIngressoM, OraUscitaM, OraIngressoP, OraUscitaP, MaxOreGiorno, MaxOreSettimana, (GiorniStage) AS SvolgimentoSettimanale, (DescrAmbitoStage) AS AmbitoStage, (DescrFacilitazioni) AS AccordiFacilitazioni, (NoteAltreSediStage) AS AltreSediOperative, NoteStage, (TelSedeAz_1) AS Telefono, (FaxSedeAz) AS Fax, EmailSedeAz, TutorAzienda, (TelRef_1) AS TelTutor, (TelRef_2) AS AltroTelTutor, FaxRefAz, (EmailRefAz) AS EmailTutor, NumStudentiTutorAzienda, TipoRuoloAz, DescrEsperienzaProf, AnniEsperienzaProf, CF_RapprLegale, TutorCentro, TelTutorStage, EmailTutorStage, StagePagamento, CompensoStage, DataAccordoEconomico, ProtocolloAccordo, GiorniPagare, DataFattura, NumeroFattura, ProtocolloConv, DataProtocollo, (FormSicurGenAzienda) AS SicurezzaGeneraleAzienda, (FormSicurGenCSF) AS SicurezzaGeneraleSedeForm, (FormSicurSpecAzienda) AS SicurezzaSpecificaAzienda, (FormSicurSpecCSF) AS SicurezzaSpecificaSedeForm, (TipoLivello) AS LivelloDVR, (DescrSettore) AS SettoreDVR, OreSicurezzaSpecifica, (SELECT OrePreviste FROM t_TipoSicurezzaLivello WHERE LivelloGenerale=1 AND Obsoleto=0) AS OreSicurezzaGenerale, AttestatoAttivitaStage, CertificazioneCompetenze, ImportoIndennita, IndennitaAzienda, IndennitaPromotore, (DescrIndennita) AS IndennitaStudenteAltri, AltroSettore, (NULL) AS UltimaDataAttivita, (0) AS OreSvolte, PagaGiorniINAIL, ClasseRischioINAIL, ConvenzionePagaINAIL, DescrVariazioni, DataSospeso, DataRipresa, DataRipresaProroga, IndennitaRipresa, MaxOreSettimanaRipresa, (NULL) AS Variazioni, FileAccordoEconomicoPDF, FileSchedaAziendaPDF, AziendaPosizioneINAIL, AziendaDescrINAIL FROM v_ElencoStageSediEdizioni " + str + "ORDER BY SiglaSede, TipoFormativoInterno, TipoAnnualita, DescrEdizione, Studente, DataAvvioStage ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDiscrizione, MAX(DataStage) AS UltimaDataAttivita, SUM(DATEDIFF(mi, OraIngresso, OraUscita)/60) AS OreSvolte FROM t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE Stage=1 Or (SicurezzaSpecifica=1) GROUP BY IDiscrizione HAVING IDiscrizione " + clsTblDatiDR.StringaFiltroIN("IDiscrizione") + " ORDER BY IDiscrizione ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDvartir, (FK_ConvenzioneProgetto) AS IDconvenzione, Tipo, (CASE WHEN Tutor=1 THEN (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE IDdocente=FK_Precedente) WHEN TutorAzienda=1 THEN (SELECT (Cognome + ' ' + Nome) FROM t_ReferentiAziende WHERE IDreferaz=FK_Precedente) WHEN SedeTirocinio=1 THEN (SELECT (IndirSedeAz + ' ' + ComSedeAz + ' (' + ProvSedeAz + ')') FROM t_SediAziende WHERE IDsedeaz=FK_Precedente) ELSE NULL END) AS Precedente, (CASE WHEN Tutor=1 THEN (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE IDdocente=FK_Corrente) WHEN TutorAzienda=1 THEN (SELECT (Cognome + ' ' + Nome) FROM t_ReferentiAziende WHERE IDreferaz=FK_Corrente) WHEN SedeTirocinio=1 THEN (SELECT (IndirSedeAz + ' ' + ComSedeAz + ' (' + ProvSedeAz + ')') FROM t_SediAziende WHERE IDsedeaz=FK_Corrente)  ELSE NULL END) AS Attuale, DataVariazione, Tutor, TutorAzienda, SedeTirocinio, FK_Precedente, FK_Corrente FROM t_ConvenzioniStageVariazioni INNER JOIN t_ConvenzioniStage ON t_ConvenzioniStageVariazioni.FK_ConvenzioneProgetto=t_ConvenzioniStage.IDconvenzione INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione=t_Iscrizioni.IDiscrizione WHERE FK_Edizione " + clsTblDatiDR.StringaFiltroIN("IDedizione") + " ORDER BY FK_ConvenzioneProgetto, DataVariazione ";
PerseoNET/EsportaPerseo.cs:				string origineDati = "SELECT IDedizione, IDazienda, (IDconvazienda) AS NumeroConvenzione, (IDconvenzione) AS NumeroProgetto, (IDiscrizione) AS MatricolaIscrizione, Studente, SiglaSede, CodiceEdizione, DataConvenzione, DataScadenza, (DataAvvioStage) AS StageDAL, (DataFineStage) AS StageAL, (DataInterruzione) AS Interrotto, (DataProlungamento) AS DataProlungamento, (DurataStage) AS OreStage, VariazioneDurataStage, (DescrAzienda) AS Azienda, PIVA_CF, (NULL) AS Sedelegale, (NULL) AS TelSedelegale, (NULL) AS EmailSedeLegale, (NULL) AS ReferenteAmministrativo, (IndirSedeAz + ' ' + ComSedeAz + ' (' + ProvSedeAz + ') ' + CAPSedeAZ + ' ' + NazioneSedeAz) AS SedeTirocinio, (TelSedeAz_1) AS TelSedeTirocinio, (EmailSedeAz) AS EmailSedeTirocinio, TutorCentro, (CompensoStage) AS Importo, DataAccordoEconomico, GiorniPagare, DataFattura, NumeroFattura, FileAccordoEconomicoPDF, (PKLettoAccordoEconomico) AS DataLettura, FileSchedaAziendaPDF FROM v_ElencoStageSediEdizioni WHERE IDsede " + Variabili.FiltroSedi + " AND DataAvvioStage>=" + FunzStringa.StrDataSQL(vStrDal, FlagSqlServer: true) + " AND DataAvvioStage<=" + FunzStringa.StrDataSQL(vStrAl, FlagSqlServer: true) + " AND StagePagamento=1 ORDER BY SiglaSede, CodiceEdizione, Studente, DataAvvioStage ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDsedeaz, FK_Azienda, FK_TipoSede, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, EmailSedeAz FROM t_SediAziende WHERE FK_TipoSede=1 AND Attiva=1 AND FK_Azienda " + clsTblDatiDR.StringaFiltroIN("IDazienda");
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDreferaz, FK_Azienda, Cognome, Nome, TelRef_1 FROM t_ReferentiAziende INNER JOIN t_SediAziende ON t_ReferentiAziende.FK_SedeAzienda = t_SediAziende.IDsedeaz WHERE ReferenteAmministrativo=1 AND Attivo=1 AND FK_Azienda " + clsTblDatiDR.StringaFiltroIN("IDazienda") + " ORDER BY FK_Azienda, Cognome ";
PerseoNET/EsportaPerseo.cs:					string origineDati = "SELECT t_Docenti.IDdocente, IDincarico, (CASE WHEN t_Docenti.FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS StrTipoDOC, (Cognome + ' ' + Nome) AS StrDOC, Cognome, Nome, (NULL) AS TipoLivelloDocInterno, (NULL) AS OreContratto, CodFiscale, ProvSede, SiglaSede, DescrProgetto, CodiceProgetto, IDmwp, TipoProgetto, CodiceEdizione, IDmwe, DescrEdizione, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, TipoCategoriaRisorsa, Aula, DescrArgomento, OreAssegnate, (0) AS OreFatte, (0) AS OreFattePrecedenteAF, TipoLivelloMW, DescrTitoloStudio, DescrEquivalenteEQF, LivelloEQF FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto inner join t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_TipoLivelloTitoloMW ON t_Docenti.FK_TipoStudio = t_TipoLivelloTitoloMW.IDtlivstudioMW WHERE (t_Docenti.FK_Tipo>1 AND DocenteTest=0 AND FK_SedeEdizione " + Variabili.FiltroSedi + " AND DocenteTest=0 AND DataAvvio<'" + text + "' AND DataFine>='" + text + "'" + text3 + ") OR (t_Docenti.FK_Tipo>1 AND DocenteTest=0 AND FK_SedeEdizione " + Variabili.FiltroSedi + " AND DocenteTest=0 AND DataAvvio>='" + text + "' AND DataAvvio<='" + text2 + "' AND DataFine>'" + text + "'" + text3 + ") OR (t_Docenti.FK_Tipo>1 AND DocenteTest=0 AND FK_SedeEdizione " + Variabili.FiltroSedi + " AND DocenteTest=0 AND DataAvvio<'" + text + "' AND DataFineFA>='" + text + "'" + text3 + ") OR (t_Docenti.FK_Tipo>1 AND DocenteTest=0 AND FK_SedeEdizione " + Variabili.FiltroSedi + " AND DocenteTest=0 AND DataAvvio>'" + text2 + "' AND DataInizioFA<='" + text2 + "'" + text3 + ") ORDER BY t_Docenti.FK_Tipo, (Cognome + ' ' + Nome), IndTA, DescrArgomento ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDincarico, (SUM(Minuti)/60) AS OreFatte FROM v_DettaglioOreSvoltePerIncarico WHERE DataSvolgimento>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND FK_Tipo>1 GROUP BY IDincarico ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDincarico, (SUM(Minuti)/60) AS OreFatte FROM v_DettaglioOreSvoltePerIncarico INNER JOIN t_PianoServizi ON v_DettaglioOreSvoltePerIncarico.IDedizione = t_PianoServizi.IDedizione WHERE (DataSvolgimento<" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataFine>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND FK_Tipo>1) OR (DataSvolgimento<" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataFineFA>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND FK_Tipo>1) GROUP BY IDincarico ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (FK_Docente) AS IDdocente, TipoLivelloDocInterno, OreContratto FROM t_DocentiContratti INNER JOIN t_TipoLivelloDocenteInterno ON t_DocentiContratti.FK_LivelloInterno = t_TipoLivelloDocenteInterno.IDtlivcontrdoc WHERE DataInizioContratto>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataInizioContratto<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true);
PerseoNET/EsportaPerseo.cs:						string origineDati = "q";
PerseoNET/EsportaPerseo.cs:						origineDati = "SELECT t_Docenti.IDdocente, IDincarico, (CASE WHEN t_Docenti.FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS StrTipoDOC, IndTA, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Azienda, CodFiscale, DescrParFiscale, TipoFasciaDOC, ProvSede, SiglaSede, DescrBando, TipoBando, DescrProgetto, CodiceProgetto, TipoProgetto, CodiceEdizione, DescrEdizione, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, DescrArgomento, OreAssegnate, (SELECT SUM(OreSvolgere) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico AND ApprovaIncarico=1) AS TotOreAppr, (SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine)))/60 FROM t_CalendarioAttivita WHERE FK_Incarico=IDincarico AND DataAttivita>='" + text2 + "' AND DataAttivita<='" + text3 + "') AS TotFatte, (SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine)))/60 FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE t_CalendarioCodocenza.FK_Incarico=IDincarico AND DataAttivita>='" + text2 + "' AND DataAttivita<='" + text3 + "') AS TotFatteCOD, (SELECT AVG(QuotaOraIncarico) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico AND ApprovaIncarico=1) AS CompensoOra, (SELECT SUM(sngTotale) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0 AND DataPagatoInizio>='" + text2 + "' AND DataPagatoInizio<='" + text3 + "') AS TotaleCosto, (SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0 AND DataPagatoInizio>='" + text2 + "' AND DataPagatoInizio<='" + text3 + "') AS TotPagate, (0) AS DaPagare FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando INNER JOIN t_TipoBando ON t_Bandi.FK_TipoBando = t_TipoBando.IDtbando INNER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto inner join t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_DecodificatoreParametroFiscale ON t_Docenti.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_TipoFasciaDocenteEsterno ON t_Docenti.FK_TipoFascia = t_TipoFasciaDocenteEsterno.IDtfasciadoc INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE (t_Docenti.FK_Tipo=3 AND FK_SedeEdizione " + text + " AND DocenteTest=0 AND DataAvvio<'" + text2 + "' AND DataFine>='" + text2 + "') OR (t_Docenti.FK_Tipo=3 AND FK_SedeEdizione " + text + " AND DocenteTest=0 AND DataAvvio>='" + text2 + "' AND DataAvvio<='" + text3 + "' AND DataFine>'" + text2 + "') OR (t_Docenti.FK_Tipo=3 AND FK_SedeEdizione " + text + " AND DocenteTest=0 AND DataAvvio<'" + text2 + "' AND DataFineFA>='" + text2 + "') OR (t_Docenti.FK_Tipo=3 AND FK_SedeEdizione " + text + " AND DocenteTest=0 AND DataAvvio>'" + text3 + "' AND DataInizioFA<='" + text3 + "') ";
PerseoNET/EsportaPerseo.cs:						origineDati = origineDati + "UNION SELECT t_Docenti.IDdocente, IDincarico, (CASE WHEN t_Docenti.FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS StrTipoDOC, IndTA, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Azienda, CodFiscale, (NULL) AS DescrParFiscale, (NULL) AS TipoFasciaDOC, ProvSede, SiglaSede, DescrBando, TipoBando, DescrProgetto, CodiceProgetto, TipoProgetto, CodiceEdizione, DescrEdizione, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, DescrArgomento, OreAssegnate, (OreAssegnate) AS TotOreAppr, (SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine)))/60 FROM t_CalendarioAttivita WHERE FK_Incarico=IDincarico AND DataAttivita>='" + text2 + "' AND DataAttivita<='" + text3 + "') AS TotFatte, (SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine)))/60 FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE t_CalendarioCodocenza.FK_Incarico=IDincarico AND DataAttivita>='" + text2 + "' AND DataAttivita<='" + text3 + "') AS TotFatteCOD, (NULL) AS CompensoOra, (0) AS TotaleCosto, (0) AS TotPagate, (0) AS DaPagare FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando INNER JOIN t_TipoBando ON t_Bandi.FK_TipoBando = t_TipoBando.IDtbando INNER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto inner join t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento ";
PerseoNET/EsportaPerseo.cs:						origineDati = "SELECT IDincarico, DescrAzienda, PIVA, (SELECT DescrParFiscale FROM t_DecodificatoreParametroFiscale WHERE IDparfisc=FK_ParFiscaleAttuale) AS DescrParFiscale FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE (DataAvvio<'" + text2 + "' AND DataFine>='" + text2 + "') OR (DataAvvio>='" + text2 + "' AND DataAvvio<='" + text3 + "' AND DataFine>'" + text2 + "') OR (DataAvvio<'" + text2 + "' AND DataFineFA>='" + text2 + "') OR (DataAvvio>'" + text3 + "' AND DataInizioFA<='" + text3 + "') ";
PerseoNET/EsportaPerseo.cs:					text6 = ((!vFlagDipendenti) ? "" : " AND (SELECT COUNT(IDincacontra) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico)<1 ");
PerseoNET/EsportaPerseo.cs:					string str = "SELECT (t_Docenti.IDdocente) AS PKdoc, (IDincarico) AS NumeroIncarico, IDedizione, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Tipo=1 THEN 'Generico' WHEN FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS StrTipo, CodFiscale, SiglaSede, CodiceEdizione, DescrEdizione, CodiceProgetto, DescrProgetto, TipoFormativoInterno, DataAvvio, DataFine, DataInizioFA, DataFineFA, Durata, TipoAttivita, Aula, ContrattoAula, DescrArgomento, OreAssegnate, (CASE WHEN FK_Tipo<=2 THEN OreAssegnate ELSE (SELECT SUM(OreSvolgere) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico AND ApprovaIncarico=1) END) AS OreApprovate, (0) AS OreAssegnateAnno, (0) AS OreFatte, (0) AS OreFatte_" + text5 + ", (0) AS OreResidue, PagamentoIndividuale, IncaricoBloccato, IncaricoGenericoGratuito, DescrGratuito, DescrIncarico, PreDimissione FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE (DataAvvio<='" + text4 + "' AND DataFine>='" + text3 + "' " + text2 + text + text6 + ") OR (DataInizioFA<='" + text4 + "' AND DataFineFA>='" + text3 + "' " + text2 + text + text6 + ") ";
PerseoNET/EsportaPerseo.cs:					str = "SELECT IDincarico, (SUM(Minuti)/60) AS OreFatte FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE DataSvolgimento>=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico " + clsTblDatiDR.StringaFiltroIN("NumeroIncarico") + " ";
PerseoNET/EsportaPerseo.cs:					str = "SELECT IDincarico, (SUM(Minuti)/60) AS OreFatte FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE DataSvolgimento<" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico " + clsTblDatiDR.StringaFiltroIN("NumeroIncarico") + " ";
PerseoNET/EsportaPerseo.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDpfdote, (Cognome + ' ' + Nome) AS Studente, ID_Dote, (FK_TipoDote) AS TipoDote, DataAvvioDote, DataFineDote, ImportoTotaleDote, QuotaServiziIndividuali, t_StudentiDotiPianiFormativi.DescrAttivita, t_StudentiDotiPianiFormativi.MaxOrePreviste, (SELECT TipoAttivita FROM t_TipoAttivitaEdizione WHERE IDtattivita=FK_TipoAttivitaPF) AS TipoAttivita, (0) AS TotaleOre FROM t_Iscrizioni INNER JOIN t_StudentiDotiPianiFormativi ON t_Iscrizioni.FK_DoteStudente = t_StudentiDotiPianiFormativi.FK_Dote INNER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud AND t_StudentiDotiPianiFormativi.FK_Dote = t_StudentiDoti.IDdotestud INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente AND t_StudentiDoti.FK_Studente = t_Utenti.IDutente WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY (Cognome + ' ' + Nome), t_StudentiDotiPianiFormativi.IndPIP "));
PerseoNET/EsportaPerseo.cs:				origineDati = "SELECT IDtdote, TipoDote FROM t_TipoDoteStudente ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDiscrizione, IDpfdote, DataAttivita, OraInizio, OraFine FROM t_StudentiDotiPianiFormativi INNER JOIN t_CalendarioAttivita ON t_StudentiDotiPianiFormativi.IDpfdote = t_CalendarioAttivita.FK_DotePIP INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione AND t_StudentiDotiPianiFormativi.FK_Dote = t_Iscrizioni.FK_DoteStudente WHERE LavoroPIP=1 AND IDiscrizione " + clsTblDatiDR.StringaFiltroIN("IDiscrizione") + " AND FK_DoteStudente IS NOT NULL ORDER BY IDiscrizione, IDpfdote, DataAttivita, OraInizio ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDiscrizione, IDpfdote, DataAttivita, OraInizio, OraFine FROM t_Iscrizioni INNER JOIN t_StudentiDotiPianiFormativi ON t_Iscrizioni.FK_DoteStudente = t_StudentiDotiPianiFormativi.FK_Dote INNER JOIN t_CalendarioAttivita ON t_StudentiDotiPianiFormativi.DescrAttivita = t_CalendarioAttivita.DescrAttivita INNER JOIN t_RegistroStage ON t_CalendarioAttivita.IDcalatt = t_RegistroStage.FK_Attivita AND t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione INNER JOIN t_TipoAttivitaEdizione ON t_StudentiDotiPianiFormativi.FK_TipoAttivitaPF = t_TipoAttivitaEdizione.IDtattivita WHERE LavoroPIP=1 AND IDiscrizione " + clsTblDatiDR.StringaFiltroIN("IDiscrizione") + " AND FK_DoteStudente IS NOT NULL ORDER BY IDiscrizione, IDpfdote, DataAttivita, OraInizio ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDdocente, IDtattivita, IndTA, DescrEdizione, CodiceEdizione, (Cognome + ' ' + Nome) AS Nominativo, TipoDocente, TipoAttivita, SUM(Minuti) AS TotaleMinuti, MONTH(DataSvolgimento) AS Mese, YEAR(DataSvolgimento) AS Anno FROM v_DettaglioOreSvoltePerIncarico INNER JOIN t_PianoServizi ON v_DettaglioOreSvoltePerIncarico.IDedizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto WHERE t_PianoServizi.IDedizione=" + Conversions.ToString(vID) + " AND DataSvolgimento>=" + FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(strAL, FlagSqlServer: true) + " GROUP BY IDdocente, IDtattivita, DescrEdizione, CodiceEdizione, TipoDocente, Cognome, Nome, IndTA, TipoAttivita, YEAR(DataSvolgimento), MONTH(DataSvolgimento), IndTA ORDER BY Cognome, Nome, TipoDocente, IndTA, IDtattivita, YEAR(DataSvolgimento), MONTH(DataSvolgimento) ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDdocente, IDtattivita, IndTA, DescrProgetto, CodiceProgetto, (Cognome + ' ' + Nome) AS Nominativo, TipoDocente, TipoAttivita, SUM(Minuti) AS TotaleMinuti, MONTH(DataSvolgimento) AS Mese, YEAR(DataSvolgimento) AS Anno FROM v_DettaglioOreSvoltePerIncarico INNER JOIN t_PianoServizi ON v_DettaglioOreSvoltePerIncarico.IDedizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto WHERE IDprogetto=" + Conversions.ToString(vID) + " AND DataSvolgimento>=" + FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(strAL, FlagSqlServer: true) + " GROUP BY IDdocente, IDtattivita, DescrProgetto, CodiceProgetto, TipoDocente, Cognome, Nome, IndTA, TipoAttivita, YEAR(DataSvolgimento), MONTH(DataSvolgimento), IndTA ORDER BY Cognome, Nome, TipoDocente, IndTA, IDtattivita, YEAR(DataSvolgimento), MONTH(DataSvolgimento) ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDdocente, IDtattivita, t_PianoServizi.IDedizione, IndTA, DescrProgetto, CodiceProgetto, SiglaSede, DescrEdizione, CodiceEdizione, (Cognome + ' ' + Nome) AS Nominativo, TipoDocente, TipoAttivita, SUM(Minuti) AS TotaleMinuti, MONTH(DataSvolgimento) AS Mese, YEAR(DataSvolgimento) AS Anno FROM v_DettaglioOreSvoltePerIncarico INNER JOIN t_PianoServizi ON v_DettaglioOreSvoltePerIncarico.IDedizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDprogetto=" + Conversions.ToString(vID) + " AND DataSvolgimento>=" + FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(strAL, FlagSqlServer: true) + " GROUP BY IDdocente, IDtattivita, DescrProgetto, CodiceProgetto, SiglaSede, DescrEdizione, CodiceEdizione, TipoDocente, Cognome, Nome, IndTA, TipoAttivita, t_PianoServizi.IDedizione, YEAR(DataSvolgimento), MONTH(DataSvolgimento), IndTA ORDER BY Cognome, Nome, TipoDocente, IndTA, IDtattivita, YEAR(DataSvolgimento), MONTH(DataSvolgimento) ";
PerseoNET/EsportaPerseo.cs:							origineDati = "SELECT DescrEdizione, CodiceEdizione, Nominativo, TipoDocente, TipoAttivita, TotaleFattePeriodo, " + Strings.Left(vStrMesi, Strings.Len(vStrMesi) - 2) + " FROM t_Sinottico ";
PerseoNET/EsportaPerseo.cs:							origineDati = "SELECT DescrProgetto, CodiceProgetto, Nominativo, TipoDocente, TipoAttivita, TotaleFattePeriodo, " + Strings.Left(vStrMesi, Strings.Len(vStrMesi) - 2) + " FROM t_Sinottico ";
PerseoNET/EsportaPerseo.cs:							origineDati = "SELECT DescrProgetto, CodiceProgetto, SiglaSede, DescrEdizione, CodiceEdizione, Nominativo, TipoDocente, TipoAttivita, TotaleFattePeriodo, " + Strings.Left(vStrMesi, Strings.Len(vStrMesi) - 2) + " FROM t_Sinottico ";
PerseoNET/EsportaPerseo.cs:				string origineDati = "SELECT t_ProgettiPagamentiFatture.IDprogfatt, FK_Fattura, IDdocente, IDprogetto, IDsede, (Cognome + ' ' + Nome) AS StrDOC, DescrAzienda, SiglaSede, DescrProgetto, CodiceProgetto, (CASE WHEN FK_Fattura IS NULL THEN 'No' ELSE 'SÃ¬' END) AS Fattura, DataRichiestaInizio, DataRichiestaFine, DataPagamento, Sospeso, Autorizzazione, DataFattura, NumeroFattura FROM t_Aziende RIGHT OUTER JOIN t_DocentiFatture ON t_Aziende.IDazienda = t_DocentiFatture.FK_Azienda RIGHT OUTER JOIN t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_Docenti ON t_ProgettiPagamentiFatture.FK_Docente = t_Docenti.IDdocente INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto ON t_DocentiFatture.IDfattura = t_ProgettiPagamentiFatture.FK_Fattura " + left + " ORDER BY (Cognome + ' ' + Nome), DataRichiestaInizio ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT t_TipoAltraAssicurazioneINPS.IDtaltrainps, (FK_Docente) AS IDdocente, TipoAltraAssINPS FROM t_TipoAltraAssicurazioneINPS INNER JOIN t_ProgettiPagamentiFatture ON t_TipoAltraAssicurazioneINPS.IDtaltrainps = t_ProgettiPagamentiFatture.FK_AltraAssINPS INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE YEAR(t_ProgettiPagamenti.DataPagamento)=" + Conversions.ToString(intAnno) + " AND MONTH(t_ProgettiPagamenti.DataPagamento)=" + Conversions.ToString(num2) + " ORDER BY FK_Docente ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, IDincarico, t_Docenti.IDdocente, FK_Azienda, IDedizione, FK_SedeEdizione, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Prestatore, (CASE WHEN FK_Azienda IS NULL THEN (CAPresidenza + ' ' + ComResidenza + ' (' + ProvResidenza + ') ' + IndirResidenza) ELSE NULL END) AS Residenza, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE (CASE WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) END) AS CF_PIVA, CodiceParFiscale, t_ProgettiPagamentiCompensiOneri.DescrParFiscale, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, DescrEdizione, CodiceEdizione, TipoAttivita, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, (0) AS AltriEnaip, (0) AS ImponibilePrev, DataPagatoInizio, DataPagatoFine, (NULL) AS SvolteDAL, (NULL) AS SvolteAL, t_ProgettiPagamentiCompensiOneri.DataPagamento, (NULL) AS TipoAltraAssINPS FROM t_ProgettiPagamenti INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE Reso=0 AND YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(intAnno) + " AND MONTH(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(num2) + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = origineDati + "UNION SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, IDincarico, t_Docenti.IDdocente, FK_Azienda, IDedizione, FK_SedeEdizione, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Prestatore, (CASE WHEN FK_Azienda IS NULL THEN (CAPresidenza + ' ' + ComResidenza + ' (' + ProvResidenza + ') ' + IndirResidenza) ELSE NULL END) AS Residenza, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE (CASE WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) END) AS CF_PIVA, CodiceParFiscale, t_ProgettiPagamentiCompensiOneri.DescrParFiscale, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, DescrEdizione, CodiceEdizione, TipoAttivita, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, (0) AS AltriEnaip, (0) AS ImponibilePrev, DataPagatoInizio, DataPagatoFine, (NULL) AS SvolteDAL, (NULL) AS SvolteAL, t_ProgettiPagamentiCompensiOneri.DataPagamento, (NULL) AS TipoAltraAssINPS FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE Reso=0 AND YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(intAnno) + " AND MONTH(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(num2) + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = origineDati + "UNION SELECT (t_DocentiParcelle.IDparcella) AS IDcompensi, (NULL) AS IDincarico, t_Docenti.IDdocente, t_DocentiParcelle.FK_Azienda, t_DocentiParcelle.FK_Edizione, t_DocentiParcelle.FK_Sede, t_Docenti.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Prestatore, (CASE WHEN FK_Azienda IS NULL THEN (CAPresidenza + ' ' + ComResidenza + ' (' + ProvResidenza + ') ' + IndirResidenza) ELSE NULL END) AS Residenza, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE (CASE WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) END) AS CF_PIVA, t_DecodificatoreParametroFiscale.CodiceParFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, sngAliquotaPrevSepa, t_DecodificatoreParametroFiscale.CodiceTributo, t_Progetti.DescrProgetto, t_Progetti.CodiceProgetto, t_Progetti.IDmwp, t_PianoServizi.DescrEdizione, t_PianoServizi.CodiceEdizione, t_TipoCausaleParcella.TipoCausaleParcella AS TipoAttivita, (0) AS TotOreFatte, (0) AS QuotaOraIncarico, t_DocentiParcelle.sngCostoInc, t_DocentiParcelle.sngRiva, t_DocentiParcelle.sngCassaPrev, t_DocentiParcelle.CostiAnticipo, t_DocentiParcelle.CostiViaggio, t_DocentiParcelle.CostiVitto, t_DocentiParcelle.CostiAggiuntivi, t_DocentiParcelle.sngIVA, t_DocentiParcelle.sngINPS, t_DocentiParcelle.sngINPS23, t_DocentiParcelle.sngTotale, t_DocentiParcelle.sngINPS13, t_DocentiParcelle.sngRiteAcc, t_DocentiParcelle.sngNettoInc, t_DocentiParcelle.AltriRedditi, (0) AS AltriEnaip, (0) AS ImponibilePrev, (NULL) AS DataPagatoInizio, (NULL) AS DataPagatoFine, (NULL) AS SvolteDAL, (NULL) AS SvolteAL, t_DocentiParcelle.DataPagamento, (SELECT TipoAltraAssINPS FROM t_TipoAltraAssicurazioneINPS WHERE IDtaltrainps=t_DocentiParcelle.FK_AltraAssINPS) AS TipoAltraAssINPS FROM t_DecodificatoreParametroFiscale INNER JOIN t_DocentiParcelle ON t_DecodificatoreParametroFiscale.IDparfisc = t_DocentiParcelle.FK_PF INNER JOIN t_TipoCausaleParcella ON t_DocentiParcelle.FK_Causale = t_TipoCausaleParcella.IDtcausaparce LEFT OUTER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_PianoServizi ON t_DocentiParcelle.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_Sedi ON t_DocentiParcelle.FK_Sede = t_Sedi.IDsede LEFT OUTER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_Progetti ON t_DocentiParcelle.FK_Progetto = t_Progetti.IDprogetto WHERE YEAR(DataPagamento)=" + Conversions.ToString(intAnno) + " AND MONTH(DataPagamento)=" + Conversions.ToString(num2) + " AND FK_Sede " + Variabili.FiltroSedi + " ORDER BY (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) ";
PerseoNET/EsportaPerseo.cs:						origineDati = "SELECT t_TipoAltraAssicurazioneINPS.IDtaltrainps, (FK_Docente) AS IDdocente, TipoAltraAssINPS FROM t_TipoAltraAssicurazioneINPS INNER JOIN t_ProgettiPagamentiFatture ON t_TipoAltraAssicurazioneINPS.IDtaltrainps = t_ProgettiPagamentiFatture.FK_AltraAssINPS INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE YEAR(t_ProgettiPagamenti.DataPagamento)=" + Conversions.ToString(intAnno) + " ORDER BY FK_Docente ";
PerseoNET/EsportaPerseo.cs:						origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, IDincarico, t_Docenti.IDdocente, FK_Azienda, IDedizione, FK_SedeEdizione, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Prestatore, (CASE WHEN FK_Azienda IS NULL THEN (CAPresidenza + ' ' + ComResidenza + ' (' + ProvResidenza + ') ' + IndirResidenza) ELSE NULL END) AS Residenza, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE (CASE WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) END) AS CF_PIVA, CodiceParFiscale, t_ProgettiPagamentiCompensiOneri.DescrParFiscale, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, DescrEdizione, CodiceEdizione, TipoAttivita, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, (0) AS AltriEnaip, (0) AS ImponibilePrev, DataPagatoInizio, DataPagatoFine, (NULL) AS SvolteDAL, (NULL) AS SvolteAL, t_ProgettiPagamentiCompensiOneri.DataPagamento, (NULL) AS TipoAltraAssINPS FROM t_ProgettiPagamenti INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE Reso=0 AND YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(intAnno) + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " ";
PerseoNET/EsportaPerseo.cs:						origineDati = origineDati + "UNION SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, IDincarico, t_Docenti.IDdocente, FK_Azienda, IDedizione, FK_SedeEdizione, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Prestatore, (CASE WHEN FK_Azienda IS NULL THEN (CAPresidenza + ' ' + ComResidenza + ' (' + ProvResidenza + ') ' + IndirResidenza) ELSE NULL END) AS Residenza, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE (CASE WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) END) AS CF_PIVA, CodiceParFiscale, t_ProgettiPagamentiCompensiOneri.DescrParFiscale, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, DescrEdizione, CodiceEdizione, TipoAttivita, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, (0) AS AltriEnaip, (0) AS ImponibilePrev, DataPagatoInizio, DataPagatoFine, (NULL) AS SvolteDAL, (NULL) AS SvolteAL, t_ProgettiPagamentiCompensiOneri.DataPagamento, (NULL) AS TipoAltraAssINPS FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE Reso=0 AND YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(intAnno) + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " ";
PerseoNET/EsportaPerseo.cs:						origineDati = origineDati + "UNION SELECT (t_DocentiParcelle.IDparcella) AS IDcompensi, (NULL) AS IDincarico, t_Docenti.IDdocente, t_DocentiParcelle.FK_Azienda, t_DocentiParcelle.FK_Edizione, t_DocentiParcelle.FK_Sede, t_Docenti.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Prestatore, (CASE WHEN FK_Azienda IS NULL THEN (CAPresidenza + ' ' + ComResidenza + ' (' + ProvResidenza + ') ' + IndirResidenza) ELSE NULL END) AS Residenza, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE (CASE WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) END) AS CF_PIVA, t_DecodificatoreParametroFiscale.CodiceParFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, sngAliquotaPrevSepa, t_DecodificatoreParametroFiscale.CodiceTributo, t_Progetti.DescrProgetto, t_Progetti.CodiceProgetto, t_Progetti.IDmwp, t_PianoServizi.DescrEdizione, t_PianoServizi.CodiceEdizione, t_TipoCausaleParcella.TipoCausaleParcella AS TipoAttivita, (0) AS TotOreFatte, (0) AS QuotaOraIncarico, t_DocentiParcelle.sngCostoInc, t_DocentiParcelle.sngRiva, t_DocentiParcelle.sngCassaPrev, t_DocentiParcelle.CostiAnticipo, t_DocentiParcelle.CostiViaggio, t_DocentiParcelle.CostiVitto, t_DocentiParcelle.CostiAggiuntivi, t_DocentiParcelle.sngIVA, t_DocentiParcelle.sngINPS, t_DocentiParcelle.sngINPS23, t_DocentiParcelle.sngTotale, t_DocentiParcelle.sngINPS13, t_DocentiParcelle.sngRiteAcc, t_DocentiParcelle.sngNettoInc, t_DocentiParcelle.AltriRedditi, (0) AS AltriEnaip, (0) AS ImponibilePrev, (NULL) AS DataPagatoInizio, (NULL) AS DataPagatoFine, (NULL) AS SvolteDAL, (NULL) AS SvolteAL, t_DocentiParcelle.DataPagamento, (SELECT TipoAltraAssINPS FROM t_TipoAltraAssicurazioneINPS WHERE IDtaltrainps=t_DocentiParcelle.FK_AltraAssINPS) AS TipoAltraAssINPS FROM t_DecodificatoreParametroFiscale INNER JOIN t_DocentiParcelle ON t_DecodificatoreParametroFiscale.IDparfisc = t_DocentiParcelle.FK_PF INNER JOIN t_TipoCausaleParcella ON t_DocentiParcelle.FK_Causale = t_TipoCausaleParcella.IDtcausaparce LEFT OUTER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_PianoServizi ON t_DocentiParcelle.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_Sedi ON t_DocentiParcelle.FK_Sede = t_Sedi.IDsede LEFT OUTER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_Progetti ON t_DocentiParcelle.FK_Progetto = t_Progetti.IDprogetto WHERE YEAR(DataPagamento)=" + Conversions.ToString(intAnno) + " AND FK_Sede " + Variabili.FiltroSedi + " ORDER BY (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) ";
PerseoNET/EsportaPerseo.cs:						origineDati = "SELECT t_TipoAltraAssicurazioneINPS.IDtaltrainps, (FK_Docente) AS IDdocente, TipoAltraAssINPS FROM t_TipoAltraAssicurazioneINPS INNER JOIN t_ProgettiPagamentiFatture ON t_TipoAltraAssicurazioneINPS.IDtaltrainps = t_ProgettiPagamentiFatture.FK_AltraAssINPS INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE t_ProgettiPagamenti.DataPagamento='" + vStrFiltro + "' ORDER BY FK_Docente ";
PerseoNET/EsportaPerseo.cs:						origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, IDincarico, t_Docenti.IDdocente, FK_Azienda, IDedizione, FK_SedeEdizione, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Prestatore, (CASE WHEN FK_Azienda IS NULL THEN (CAPresidenza + ' ' + ComResidenza + ' (' + ProvResidenza + ') ' + IndirResidenza) ELSE NULL END) AS Residenza, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE (CASE WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) END) AS CF_PIVA, CodiceParFiscale, t_ProgettiPagamentiCompensiOneri.DescrParFiscale, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, DescrEdizione, CodiceEdizione, TipoAttivita, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, (0) AS AltriEnaip, (0) AS ImponibilePrev, DataPagatoInizio, DataPagatoFine, (NULL) AS SvolteDAL, (NULL) AS SvolteAL, t_ProgettiPagamentiCompensiOneri.DataPagamento, (NULL) AS TipoAltraAssINPS FROM t_ProgettiPagamenti INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE Reso=0 AND t_ProgettiPagamentiCompensiOneri.DataPagamento='" + vStrFiltro + "' AND FK_SedeEdizione " + Variabili.FiltroSedi + " ";
PerseoNET/EsportaPerseo.cs:						origineDati = origineDati + "UNION SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, IDincarico, t_Docenti.IDdocente, FK_Azienda, IDedizione, FK_SedeEdizione, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Prestatore, (CASE WHEN FK_Azienda IS NULL THEN (CAPresidenza + ' ' + ComResidenza + ' (' + ProvResidenza + ') ' + IndirResidenza) ELSE NULL END) AS Residenza, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE (CASE WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) END) AS CF_PIVA, CodiceParFiscale, t_ProgettiPagamentiCompensiOneri.DescrParFiscale, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, DescrEdizione, CodiceEdizione, TipoAttivita, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, (0) AS AltriEnaip, (0) AS ImponibilePrev, DataPagatoInizio, DataPagatoFine, (NULL) AS SvolteDAL, (NULL) AS SvolteAL, t_ProgettiPagamentiCompensiOneri.DataPagamento, (NULL) AS TipoAltraAssINPS FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE Reso=0 AND t_ProgettiPagamentiCompensiOneri.DataPagamento='" + vStrFiltro + "' AND FK_SedeEdizione " + Variabili.FiltroSedi + " ";
PerseoNET/EsportaPerseo.cs:						origineDati = origineDati + "UNION SELECT (IDparcella) AS IDcompensi, (NULL) AS IDincarico, t_Docenti.IDdocente, t_DocentiParcelle.FK_Azienda, t_DocentiParcelle.FK_Edizione, t_DocentiParcelle.FK_Sede, t_Docenti.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Prestatore, (CASE WHEN FK_Azienda IS NULL THEN (CAPresidenza + ' ' + ComResidenza + ' (' + ProvResidenza + ') ' + IndirResidenza) ELSE NULL END) AS Residenza, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE (CASE WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) END) AS CF_PIVA, t_DecodificatoreParametroFiscale.CodiceParFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, sngAliquotaPrevSepa, t_DecodificatoreParametroFiscale.CodiceTributo, t_Progetti.DescrProgetto, t_Progetti.CodiceProgetto, t_Progetti.IDmwp, t_PianoServizi.DescrEdizione, t_PianoServizi.CodiceEdizione, t_TipoCausaleParcella.TipoCausaleParcella AS TipoAttivita, (0) AS TotOreFatte, (0) AS QuotaOraIncarico, t_DocentiParcelle.sngCostoInc, t_DocentiParcelle.sngRiva, t_DocentiParcelle.sngCassaPrev, t_DocentiParcelle.CostiAnticipo, t_DocentiParcelle.CostiViaggio, t_DocentiParcelle.CostiVitto, t_DocentiParcelle.CostiAggiuntivi, t_DocentiParcelle.sngIVA, t_DocentiParcelle.sngINPS, t_DocentiParcelle.sngINPS23, t_DocentiParcelle.sngTotale, t_DocentiParcelle.sngINPS13, t_DocentiParcelle.sngRiteAcc, t_DocentiParcelle.sngNettoInc, t_DocentiParcelle.AltriRedditi, (0) AS AltriEnaip, (0) AS ImponibilePrev, NULL AS DataPagatoInizio, NULL AS DataPagatoFine, (NULL) AS SvolteDAL, (NULL) AS SvolteAL, t_DocentiParcelle.DataPagamento, (SELECT TipoAltraAssINPS FROM t_TipoAltraAssicurazioneINPS WHERE IDtaltrainps=t_DocentiParcelle.FK_AltraAssINPS) AS TipoAltraAssINPS FROM t_DecodificatoreParametroFiscale INNER JOIN t_DocentiParcelle ON t_DecodificatoreParametroFiscale.IDparfisc = t_DocentiParcelle.FK_PF INNER JOIN t_TipoCausaleParcella ON t_DocentiParcelle.FK_Causale = t_TipoCausaleParcella.IDtcausaparce LEFT OUTER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_PianoServizi ON t_DocentiParcelle.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_Sedi ON t_DocentiParcelle.FK_Sede = t_Sedi.IDsede LEFT OUTER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_Progetti ON t_DocentiParcelle.FK_Progetto = t_Progetti.IDprogetto WHERE t_DocentiParcelle.DataPagamento='" + vStrFiltro + "' AND FK_Sede " + Variabili.FiltroSedi + " ORDER BY (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) ";
PerseoNET/EsportaPerseo.cs:							origineDati = "SELECT (t_ProgettiPagamentiCompensiOneri.FK_Progetto) AS IDprogetto, IDdocente, (FK_Azienda) AS IDazienda, DataPagatoInizio, DataPagatoFine, DataPagamento, MIN(DataAttivita) AS SvolteDAL, MAX(DataAttivita) AS SvolteAL FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_IncarichiEdizioni ON t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE DataAttivita>=DataPagatoInizio AND DataAttivita<=DataPagatoFine GROUP BY t_ProgettiPagamentiCompensiOneri.FK_Progetto, IDdocente, FK_Azienda, FK_SedeEdizione, DataPagatoInizio, DataPagatoFine, DataPagamento HAVING YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(intAnno) + " AND MONTH(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(num2) + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " ";
PerseoNET/EsportaPerseo.cs:							origineDati = origineDati + "UNION SELECT (t_ProgettiPagamentiCompensiOneri.FK_Progetto) as IDprogetto, IDdocente, (FK_Azienda) AS IDazienda, DataPagatoInizio, DataPagatoFine, DataPagamento, MIN(DataAttivita) AS SvolteDAL, MAX(DataAttivita) AS SvolteAL FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_IncarichiEdizioni ON t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE DataAttivita>=DataPagatoInizio AND DataAttivita<=DataPagatoFine GROUP BY t_ProgettiPagamentiCompensiOneri.FK_Progetto, IDdocente, FK_Azienda, FK_SedeEdizione, DataPagatoInizio, DataPagatoFine, DataPagamento HAVING YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(intAnno) + " AND MONTH(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(num2) + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " ORDER BY IDdocente, FK_Azienda, DataPagamento ";
PerseoNET/EsportaPerseo.cs:							origineDati = "SELECT (t_ProgettiPagamentiCompensiOneri.FK_Progetto) AS IDprogetto, IDdocente, (FK_Azienda) AS IDazienda, DataPagatoInizio, DataPagatoFine, DataPagamento, MIN(DataAttivita) AS SvolteDAL, MAX(DataAttivita) AS SvolteAL FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_IncarichiEdizioni ON t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE DataAttivita>=DataPagatoInizio AND DataAttivita<=DataPagatoFine AND FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY t_ProgettiPagamentiCompensiOneri.FK_Progetto, IDdocente, FK_Azienda, DataPagatoInizio, DataPagatoFine, DataPagamento HAVING YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(intAnno) + " AND MONTH(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(num2) + " ";
PerseoNET/EsportaPerseo.cs:							origineDati = origineDati + "UNION SELECT (t_ProgettiPagamentiCompensiOneri.FK_Progetto) as IDprogetto, IDdocente, (FK_Azienda) AS IDazienda, DataPagatoInizio, DataPagatoFine, DataPagamento, MIN(DataAttivita) AS SvolteDAL, MAX(DataAttivita) AS SvolteAL FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_IncarichiEdizioni ON t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE DataAttivita>=DataPagatoInizio AND DataAttivita<=DataPagatoFine AND FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY t_ProgettiPagamentiCompensiOneri.FK_Progetto, IDdocente, FK_Azienda, DataPagatoInizio, DataPagatoFine, DataPagamento HAVING YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(intAnno) + " AND MONTH(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(num2) + " ORDER BY IDdocente, FK_Azienda, DataPagamento ";
PerseoNET/EsportaPerseo.cs:							origineDati = (clsTblDatiDR2.DestinazioneDati = "SELECT IDcompensi, IDincarico, IDdocente, FK_Azienda, IDedizione, FK_SedeEdizione, FK_ParFiscaleAttuale, StrDOC, Residenza, CodFiscale, CodiceParFiscale, DescrParFiscale, FK_AliquotaPrevSepa, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, DescrEdizione, CodiceEdizione, TipoAttivita, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, AltriEnaip, ImponibilePrev, DataPagatoInizio, DataPagatoFine, SvolteDAL, SvolteAL, DataPagamento, TipoAltraAssINPS FROM t_Pagamenti ");
PerseoNET/EsportaPerseo.cs:							origineDati = "SELECT (StrDOC) AS Prestatore, Residenza, CodFiscale, CodiceParFiscale, DescrParFiscale, MAX(FK_AliquotaPrevSepa) AS FK_AliquotaPrevSepa, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, FK_SedeEdizione, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCassaPrev) AS sngCassaPrev, SUM(sngCostiAnticipo) AS sngCostiAnticipo, SUM(sngCostiViaggio) AS sngCostiViaggio, SUM(sngCostiVitto) AS sngCostiVitto, SUM(sngIVA) AS sngIVA, SUM(sngINPS) AS sngINPS, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, AltriRedditi, AltriEnaip, SUM(ImponibilePrev) AS ImponibilePrev, MIN(SvolteDAL) AS SvolteDAL, MAX(SvolteAL) AS SvolteAL, DataPagamento, TipoAltraAssINPS FROM t_Pagamenti GROUP BY StrDOC, Residenza, CodFiscale, CodiceParFiscale, DescrParFiscale, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, FK_SedeEdizione, AltriRedditi, AltriEnaip, DataPagamento, TipoAltraAssINPS ORDER BY StrDOC, DataPagamento ";
PerseoNET/EsportaPerseo.cs:							origineDati = (clsTblDatiDR2.DestinazioneDati = "SELECT IDcompensi, IDincarico, IDdocente, FK_Azienda, IDedizione, FK_SedeEdizione, FK_ParFiscaleAttuale, StrDOC, Residenza, CodFiscale, CodiceParFiscale, DescrParFiscale, FK_AliquotaPrevSepa, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, DescrEdizione, CodiceEdizione, TipoAttivita, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, AltriEnaip, ImponibilePrev, DataPagatoInizio, DataPagatoFine, SvolteDAL, SvolteAL, DataPagamento, TipoAltraAssINPS FROM t_Pagamenti ");
PerseoNET/EsportaPerseo.cs:							origineDati = "SELECT (StrDOC) AS Prestatore, Residenza, CodFiscale, CodiceParFiscale, DescrParFiscale, MAX(FK_AliquotaPrevSepa) AS FK_AliquotaPrevSepa, CodiceTributo, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCassaPrev) AS sngCassaPrev, SUM(sngCostiAnticipo) AS sngCostiAnticipo, SUM(sngCostiViaggio) AS sngCostiViaggio, SUM(sngCostiVitto) AS sngCostiVitto, SUM(sngIVA) AS sngIVA, SUM(sngINPS) AS sngINPS, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, AltriRedditi, AltriEnaip, SUM(ImponibilePrev) AS ImponibilePrev, MIN(SvolteDAL) AS SvolteDAL, MAX(SvolteAL) AS SvolteAL, DataPagamento, TipoAltraAssINPS FROM t_Pagamenti GROUP BY StrDOC, Residenza, CodFiscale, CodiceParFiscale, DescrParFiscale, CodiceTributo, AltriRedditi, AltriEnaip, DataPagamento, TipoAltraAssINPS ORDER BY StrDOC, DataPagamento ";
PerseoNET/EsportaPerseo.cs:				string origineDati = "SELECT SiglaSede, (Cognome + ' ' + Nome) AS StrDOC, DescrAzienda, Sesso, (CASE WHEN IDazienda IS NULL THEN CodFiscale ELSE PIVA END) AS CodFiscale, DataNascita, (CAPresidenza + ' ' + ComResidenza + ' (' + ProvResidenza + ') ' + IndirResidenza) AS Residenza, TipoLivelloMW, DescrTitoloStudio, DescrParFiscale, TipoFasciaDOC, TipoDipendente, DescrProfessione, (CASE WHEN DataAutorizzaPubblicaAmm IS NOT NULL THEN (DescrPubblicaAmm + ' - ' + IndirPubblicaAmm + ' ' + ComPubblicaAmm) ELSE NULL END) AS PubblicaAmm, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, MIN(DataInizioIncarico) AS ContrattoDAL, MAX(DataFineIncarico) AS ContrattoAL, TipoAttivita, Aula, OreAssegnate, SUM(OreSvolgere) AS TotaleApprovate, MIN(QuotaOraIncarico) AS CompensoMIN, MAX(QuotaOraIncarico) AS CompensoMAX, SUM(OreAssegnate * QuotaOraIncarico) AS Imponibile, SUM(OreSvolgere * QuotaOraIncarico) AS ImponibileLI FROM v_DettContrattiCollaborazioneApprovati WHERE DataInizioIncarico>=" + FunzStringa.StrDataSQL("01/09/" + Strings.Left(vstrAnnoAmm, 4), FlagSqlServer: true) + " AND DataFineIncarico<=" + FunzStringa.StrDataSQL("31/08/" + Strings.Right(vstrAnnoAmm, 4), FlagSqlServer: true) + " AND IDsede " + Variabili.FiltroSedi + " GROUP BY IDdocente, Cognome, Nome, Sesso, DescrAzienda, CodFiscale, PIVA, DataNascita, CAPresidenza, ComResidenza, ProvResidenza, IndirResidenza, TipoLivelloMW, DescrTitoloStudio, DescrParFiscale, TipoFasciaDOC, TipoDipendente, DescrProfessione, DescrPubblicaAmm, IndirPubblicaAmm, ComPubblicaAmm, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, TipoAttivita, OreAssegnate, Aula, SiglaSede, IDazienda " + vStrFiltroDocenti + " ORDER BY (Cognome + ' ' + Nome), SiglaSede, MIN(DataInizioIncarico) ";
PerseoNET/EsportaPerseo.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Progetti.IDprogetto, t_Docenti.IDdocente, (FK_Azienda) AS IDazienda, DescrProgetto, CodiceProgetto, IDmwp, DataAvvioProg, DataFineProg, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS StrColl, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE t_Aziende.PIVA END) AS PIVA_CF, t_DecodificatoreParametroFiscale.DescrParFiscale, t_PianoServizi.CodiceEdizione, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=t_PianoServizi.FK_SedeEdizione) AS SiglaSede, TipoAttivita, DescrArgomento, QuotaOraIncarico, SUM(TotOreFatte) AS TotOrePagate, SUM(sngCostoInc) AS Lordo, SUM(sngCostiAnticipo) AS CostiAnticipo, SUM(sngCostiViaggio) AS CostiViaggio, SUM(sngCostiVitto) AS CostiVitto, SUM(sngRiva) AS Rivalsa, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RitenutaAcc, SUM(sngNettoInc) AS PagatoNetto, MAX(AltriRedditi) AS AltriCompensi, MIN(DataPagatoInizio) AS PagatoDAL, MAX(DataPagatoFine) AS PagatoAL, (NULL) AS SvolteDAL, (NULL) AS SvolteAL, DataPagamento, ('fatt. ' + NumeroFattura) AS NumeroFattura, DataFattura, CodiceCIG, CodiceCUP FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_PianoServizi.IDedizione = t_ProgettiPagamentiCompensiOneri.IDedizione INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE Reso=0 GROUP BY IDprogetto, DescrProgetto, CodiceProgetto, IDmwp, DataAvvioProg, DataFineProg, t_DecodificatoreParametroFiscale.DescrParFiscale, t_PianoServizi.CodiceEdizione, FK_Azienda, t_PianoServizi.FK_SedeEdizione, t_Docenti.IDdocente, Cognome, Nome, t_Docenti.CodFiscale, DescrAzienda, t_Aziende.PIVA, TipoAttivita, DescrArgomento, DataPagamento, QuotaOraIncarico, ('fatt. ' + NumeroFattura), DataFattura, CodiceCIG, CodiceCUP HAVING IDprogetto=", Variabili.Progetto.get_Campo((object)0)), " AND t_PianoServizi.FK_SedeEdizione "), Variabili.FiltroSedi), " "), "ORDER BY DataAvvioProg, CodiceProgetto, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END),  "), "TipoAttivita, MIN(DataPagatoInizio) "));
PerseoNET/EsportaPerseo.cs:							origineDati = (clsTblDatiDR.OrigineDatiUnione = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_DocentiParcelle.IDparcella, IDdocente, IDazienda, DescrProgetto, CodiceProgetto, IDmwp, DataAvvioProg, DataFineProg, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS StrColl, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE t_Aziende.PIVA END) AS PIVA_CF, t_DecodificatoreParametroFiscale.DescrParFiscale, (NULL) AS CodiceEdizione, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=t_Progetti.FK_SedeProgetto) AS SiglaSede, TipoCausaleParcella, DescrParcella, (NULL) AS QuotaOraIncarico, (NULL) AS TotOrePagate, sngCostoInc, CostiAnticipo, CostiViaggio, CostiVitto, sngRiva, sngCassaPrev, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi,(NULL) AS PagatoDAL, (NULL) AS PagatoAL, (NULL) AS SvolteDAL, (NULL) AS SvolteAL, DataPagamento, ('fatt. ' + NumeroFattura) AS NumeroFattura, DataFattura, CodiceCIG, CodiceCUP FROM t_DocentiParcelle INNER JOIN t_Progetti ON t_DocentiParcelle.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente INNER JOIN t_TipoCausaleParcella ON t_DocentiParcelle.FK_Causale = t_TipoCausaleParcella.IDtcausaparce LEFT OUTER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda WHERE IDprogetto=", Variabili.Progetto.get_Campo((object)0)), " "), "ORDER BY (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END), TipoCausaleParcella, DataPagamento ")));
PerseoNET/EsportaPerseo.cs:								origineDati = "SELECT (t_ProgettiPagamentiCompensiOneri.FK_Progetto) AS IDprogetto, IDdocente, (FK_Azienda) AS IDazienda, DataPagatoInizio, DataPagatoFine, DataPagamento, MIN(DataAttivita) AS SvolteDAL, MAX(DataAttivita) AS SvolteAL FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_IncarichiEdizioni ON t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE DataAttivita>=DataPagatoInizio AND DataAttivita<=DataPagatoFine AND Reso=0 GROUP BY t_ProgettiPagamentiCompensiOneri.FK_Progetto, IDdocente, FK_Azienda, DataPagatoInizio, DataPagatoFine, DataPagamento HAVING t_ProgettiPagamentiCompensiOneri.FK_Progetto " + text2 + " AND IDdocente " + text + " ";
PerseoNET/EsportaPerseo.cs:								origineDati = origineDati + "UNION SELECT (t_ProgettiPagamentiCompensiOneri.FK_Progetto) as IDprogetto, IDdocente, (FK_Azienda) AS IDazienda, DataPagatoInizio, DataPagatoFine, DataPagamento, MIN(DataAttivita) AS SvolteDAL, MAX(DataAttivita) AS SvolteAL FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_IncarichiEdizioni ON t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE DataAttivita>=DataPagatoInizio AND DataAttivita<=DataPagatoFine AND Reso=0 GROUP BY t_ProgettiPagamentiCompensiOneri.FK_Progetto, IDdocente, FK_Azienda, DataPagatoInizio, DataPagatoFine, DataPagamento HAVING t_ProgettiPagamentiCompensiOneri.FK_Progetto " + text2 + " AND IDdocente " + text + " ORDER BY IDdocente, FK_Azienda, DataPagamento ";
PerseoNET/EsportaPerseo.cs:				string origineDati = "SELECT MAX(DataRichiestaFine) AS Ultima FROM t_ProgettiPagamenti WHERE FK_Sede=" + Conversions.ToString(vIDsede);
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT t_PianoServizi.IDedizione, PROVsede, SiglaSede, DescrEdizione, TipoAnnualita, CodiceEdizione, TipoFormativoInterno, TipoSettoreInt, DescrBando, CodiceBando, TipoBando, DescrProgetto, TipoProgetto, CodiceProgetto, IDmwp, IDmwe, DataAvvio, DataFine, DataInizioFA, DataFineFA, Durata, (0) AS Stage, (0) AS NumeroIscritti, (0) AS PrevistoAula, (0) AS AssegnatoAula, (0) AS AssegnatoAulaEst, (0) PrevistoAltro, (0) AS AssegnatoAltro, (0) AS AssegnatoAltroEst, (NULL) AS DataPianificazione, (NULL) AS DataPianificazioneAltro, (0) AS OreSvolteAula, (0) AS OreSvolteAltro, (0) AS OreServLav, (0) AS OreSvolteServLav, (0) AS OreStage, ('0,0') AS PercFatte, DataAggRegistro, DataBloccoSCO, DataBloccoPagato, (0) AS Controllare FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando INNER JOIN t_TipoBando ON t_Bandi.FK_TipoBando = t_TipoBando.IDtbando INNER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_TipoSettoreInterno ON t_PianoServizi.FK_SettoreEdizione = t_TipoSettoreInterno.IDtsettin LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint WHERE IDedizione " + vCriterioFiltro + " ORDER BY SiglaSede, TipoFormativoInterno, DataAvvio ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (FK_Edizione) AS IDedizione, COUNT(IDiscrizione) AS NumeroIscritti FROM t_Iscrizioni WHERE Uditore=0 AND Dataiscr IS NOT NULL GROUP BY FK_Edizione HAVING FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (FK_Edizione) AS IDedizione, SUM(OreAttivita) AS TotaleOre FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE TipoAttivita='DOCENZA' GROUP BY FK_Edizione HAVING FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (FK_Edizione) AS IDedizione, SUM(OreAttivita) AS Stage FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE TipoAttivita='STAGE' GROUP BY FK_Edizione HAVING FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, SUM(OreAssegnate) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE TipoAttivita='DOCENZA' GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, SUM(OreAssegnate) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_incarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE FK_Tipo>2 AND TipoAttivita='DOCENZA' GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (FK_Edizione) AS IDedizione, SUM(OreAttivita) AS TotaleOre FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE Aula=0 GROUP BY FK_Edizione HAVING FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, SUM(OreAssegnate) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE Aula=0 GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, SUM(OreAssegnate) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_incarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE FK_Tipo>2 AND Aula=0 GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, MAX(DataAttivita) AS DataPianificazione FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Argomento IS NOT NULL GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, MAX(DataAttivita) AS DataPianificazioneAltro FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Argomento IS NULL GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS OreSvolteAula FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Argomento IS NOT NULL AND DataAttivita<='" + text2 + "' GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS OreSvolteAltro FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Argomento IS NULL AND DataAttivita<='" + text2 + "' GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (FK_Edizione) AS IDedizione, SUM(OreAttivita) AS OreServLav FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE Aula=0 AND AttivitaPIP=1 GROUP BY FK_Edizione HAVING FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS OreSvolteServLav FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE DataAttivita<='" + text2 + "' AND AttivitaPIP=1 GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (FK_Edizione) AS IDedizione, (SUM(DATEDIFF(mi, OraIngresso, OraUscita))/60) AS OreStage FROM t_Iscrizioni INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione WHERE Uditore=0 AND FK_TipoStage<=2 GROUP BY FK_Edizione HAVING FK_Edizione " + vCriterioFiltro + " ";
PerseoNET/EsportaPerseo.cs:				string text5 = "SELECT t_PianoServizi.IDedizione, PROVsede, SiglaSede, DescrEdizione, TipoAnnualita, CodiceEdizione, TipoFormativoInterno, TipoSettoreInt, DescrBando, CodiceBando, TipoBando, DescrProgetto, TipoProgetto, CodiceProgetto, IDmwp, IDmwa, IDmwe, DataAvvio, DataFine, DataInizioFA, DataFineFA, Durata, (SELECT SUM(OreAttivita) FROM t_AttivitaEdizioni WHERE FK_Edizione=IDedizione AND FK_TipoAttivita=2) AS Stage, SUM(Iscritto) AS Iscritti, SUM(Ritirato) AS Ritirati, SUM(Subentro) AS Subentrati, SUM(IscrittoAttivo) AS Attivi, SUM(IscrittoDisabile) AS Disabili, SUM(ConSostegno) AS Sostegno, SUM(IscrittoDote) AS NumeroDoti,  SUM(OreAttivitaIndividuali) AS OreAttivitaIndividuali,  (0) AS QuoteDoti,  (0) AS QuotePrivati,  (0) AS PrevistoAula, (0) AS AssegnatoAula, (0) AS AssegnatoAulaEst, (0) AS PrevistoAltro, (0) AS AssegnatoAltro, (0) AS AssegnatoAltroEst, (NULL) AS DataPianificazione, (NULL) AS DataPianificazioneAltro, (0) AS OreSvolteAula, (0) AS OreSvolteAltro, (0) AS OreServLav, (0) AS OreSvolteServLav, (0) AS OreStage, ('0,0') AS PercFatte, DataAggRegistro, DataBloccoSCO, DataBloccoStudenti, DataBloccoPagato, (0) AS NumeroTirocini, (NULL) AnnoAmmAvvio, (0) AS Controllare FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando INNER JOIN t_TipoBando ON t_Bandi.FK_TipoBando = t_TipoBando.IDtbando INNER JOIN v_StatoIscrizioniEdizione ON t_PianoServizi.IDedizione = v_StatoIscrizioniEdizione.PK_Edizione LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_TipoSettoreInterno ON t_PianoServizi.FK_SettoreEdizione = t_TipoSettoreInterno.IDtsettin LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint ";
PerseoNET/EsportaPerseo.cs:				text5 = "SELECT (FK_Edizione) AS IDedizione, MAX(DataAttivita) AS DataPianificazione FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Argomento IS NOT NULL GROUP BY FK_Edizione HAVING FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (FK_Edizione) AS IDedizione, MAX(DataAttivita) AS DataPianificazioneAltro FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Argomento IS NULL GROUP BY FK_Edizione HAVING FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, SUM(OreAssegnate) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE Aula=1 GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, SUM(OreAssegnate) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_incarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE Aula=1 AND FK_Tipo>2 GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, SUM(OreAssegnate) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE Aula=0 GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, SUM(OreAssegnate) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_incarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE Aula=0 AND FK_Tipo>2 GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (FK_Edizione) AS IDedizione, SUM(OreAttivita) AS TotaleOre FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE Aula=1 GROUP BY FK_Edizione HAVING FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (FK_Edizione) AS IDedizione, SUM(OreAttivita) AS TotaleOre FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE Aula=0 GROUP BY FK_Edizione HAVING FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (FK_edizione) AS IDedizione, SUM(DATEDIFF(mi, OraIngresso, OraUscita)) AS TotaleOre FROM t_Iscrizioni INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione WHERE Uditore=0 AND FK_TipoStage<=2 GROUP BY FK_Edizione HAVING FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (t_IncarichiEdizioni.FK_edizione) AS IDedizione, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleOre FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE AttivitaPIP=1 AND DataAttivita<='" + text4 + "' GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (FK_edizione) AS IDedizione, SUM(OreAttivita) AS TotaleOre FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE AttivitaPIP=1 GROUP BY FK_Edizione HAVING FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (FK_edizione) AS IDedizione, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleOre FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Argomento IS NOT NULL AND DataAttivita<='" + text4 + "' GROUP BY FK_Edizione HAVING FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (FK_edizione) AS IDedizione, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleOre  FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Argomento IS NULL AND DataAttivita<='" + text4 + "' GROUP BY FK_Edizione HAVING FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT IDiscrizione, IDedizione, ImportoTotaleDote, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, Gruppo FROM t_Iscrizioni INNER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_IscrizioniDoti ON t_Iscrizioni.IDiscrizione = t_IscrizioniDoti.FK_Iscrizione WHERE (IDedizione " + text6 + " AND TipoAttivita='DOCENZA') OR (IDedizione " + text6 + " AND AttivitaPIP=1) ORDER BY IDedizione ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (FK_Edizione) AS IDedizione, IDiscrizione, SUM(QuotaDoteIscrizione) AS QuoteDoti FROM t_Iscrizioni INNER JOIN t_IscrizioniDoti ON t_Iscrizioni.IDiscrizione = t_IscrizioniDoti.FK_Iscrizione GROUP BY FK_Edizione, IDiscrizione HAVING FK_Edizione " + text6 + " ORDER BY FK_Edizione ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT (FK_Edizione) AS IDedizione, SUM(Quota) AS QuotePrivati FROM t_Iscrizioni INNER JOIN t_IscrizioniVersamenti ON t_Iscrizioni.IDiscrizione = t_IscrizioniVersamenti.FK_Iscrizione GROUP BY FK_Edizione HAVING FK_Edizione " + text6 + " ";
PerseoNET/EsportaPerseo.cs:					text5 = "SELECT IDiscrizione, FK_Edizione, FK_SedeStage, COUNT(DISTINCT t_ConvenzioniStage.IDconvenzione) AS NTir FROM t_Iscrizioni INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione GROUP BY IDiscrizione, FK_SedeStage, FK_Edizione HAVING FK_Edizione " + text6 + " ORDER BY FK_Edizione ";
PerseoNET/EsportaPerseo.cs:				string origineDati = "SELECT IDedizione, TipoProgetto, (SELECT OreAttivita FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE FK_Edizione=IDedizione AND TipoAttivita='DOCENZA') AS OreDocenza, (0) AS DocenzaEsterni, (0) AS DocenzaInterni, (0) AS CodocenzaEsterni, (0) AS CodocenzaInterni, (0) AS SostegnoEsterni, (0) AS SostegnoInterni, (0) AS CoordinamentoEsterni, (0) AS CoordinamentoInterni, (0) AS TutorEsterni, (0) AS TutorInterni, (0) AS ServiziPIPEsterni, (0) AS ServiziPIPInterni, (0) AS AltroEsterni, (0) AS AltroInterni, (0) AS DocenteGenerico, DescrEdizione, CodiceEdizione, TipoAnnualita, TipoFormativoInterno, DataAvvio, DataFine, DataInizioFA, DataFineFA, Durata, CodiceProgetto, DescrProgetto, SiglaSede FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno WHERE IDedizione " + tblPubblicaIncarichi.StringaFiltroIN("IDedizione") + " ORDER BY SiglaSede, TipoProgetto, TipoFormativoInterno, TipoAnnualita, DescrEdizione ";
PerseoNET/EsportaPerseo.cs:							origineDati = "SELECT TipoAttivita, AttivitaPIP FROM t_TipoAttivitaEdizione WHERE TipoAttivita='" + FunzStringa.StringaSQL(Conversions.ToString(tblPubblicaIncarichi.get_Campo((object)"TipoAttivita"))) + "' ";
PerseoNET/EsportaPerseo.cs:								origineDati = "SELECT TipoAttivita, AttivitaPIP FROM t_TipoAttivitaEdizione WHERE TipoAttivita='" + FunzStringa.StringaSQL(Conversions.ToString(tblPubblicaIncarichi.get_Campo((object)"TipoAttivita"))) + "' ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDedizione, CodiceEdizione, DescrEdizione, TipoFormativoInterno, Durata, TipoAttivita, OreAttivita, SUM(OreAssegnate) AS OreAssegnate, AttivitaPIP FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_AttivitaEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_IncarichiEdizioni ON t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita GROUP BY IDedizione, IDtformaint, CodiceEdizione, DescrEdizione, TipoFormativoInterno, Durata, TipoAttivita, OreAttivita, IndTG, IndTA, AttivitaPIP HAVING IDedizione " + tblPubblicaIncarichi.StringaFiltroIN("IDedizione") + " ORDER BY IDtformaint, CodiceEdizione, DescrEdizione, IndTG, IndTA ";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDiscrizione, (FK_Edizione) AS IDedizione, Sostegno, DataRitiro FROM t_iscrizioni WHERE FK_Edizione " + tblPubblicaIncarichi.StringaFiltroIN("IDedizione") + " ORDER BY FK_Edizione ";
PerseoNET/EsportaPerseo.cs:					origineDati = (clsTblDatiDR.OrigineDati = "SELECT IDedizione, CodiceEdizione, DescrEdizione, TipoFormativoInterno, Durata, (0) AS OreDocenza, (0) AS OreAssegnateDocenza, (0) AS OreCodocenza, (0) AS OreAssegnateCodocenza, (0) AS OreSostegno, (0) AS OreAssegnateSostegno, (0) AS OreTutor, (0) AS OreassegnateTutor, (0) AS OreCoord, (0) AS OreAssegnateCoord, (0) AS OreServiziPIP, (0) AS OreAssegnateServiziPIP, (0) AS OreAltro, (0) AS OreAssegnateAltro, (0) AS Iscritti, (0) AS IscrittiAttivi, (0) AS IscrittiSostegno FROM t_PianoServizi ");
PerseoNET/EsportaPerseo.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Utenti.IDutente, IDedizione, IDiscrizione, PosRegistro, (Cognome + ' ' + Nome) AS Studente, Sesso, CodFiscale, DataNascita, (CASE WHEN NazNascita='ITALIA' THEN LuogoNascita ELSE NazNascita END) AS StrNascita, NazNascita, TipoNazionalita, ComResidenza, ProvResidenza, CAPresidenza, IndirResidenza, ID_Dote, DataAvvioDote, DataFineDote, IDmwiscr, DataIscr, DataRitiro, SiglaSede, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, ImportoTotaleDote, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, (NULL) AS QuotaDoteIscrizione FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE (IDedizione=", Variabili.Edizione.get_Campo((object)0)), " AND TipoAttivita='DOCENZA') "), "OR (IDedizione="), Variabili.Edizione.get_Campo((object)0)), " AND AttivitaPIP=1) "), "ORDER BY PosRegistro, (Cognome + ' ' + Nome) "));
PerseoNET/EsportaPerseo.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Utenti.IDutente, IDedizione, IDiscrizione, PosRegistro, (Cognome + ' ' + Nome) AS Studente, Sesso, CodFiscale, DataNascita, (CASE WHEN NazNascita='ITALIA' THEN LuogoNascita ELSE NazNascita END) AS StrNascita, NazNascita, TipoNazionalita, ComResidenza, ProvResidenza, CAPresidenza, IndirResidenza, ID_Dote, DataAvvioDote, DataFineDote, IDmwiscr, DataIscr, DataRitiro, SiglaSede, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, ImportoTotaleDote, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, (NULL) AS QuotaDoteIscrizione FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE (IDprogetto=", Variabili.Progetto.get_Campo((object)0)), " AND IDsede "), Variabili.FiltroSedi), " AND TipoAttivita='DOCENZA') "), "OR (IDprogetto="), Variabili.Progetto.get_Campo((object)0)), " AND IDsede "), Variabili.FiltroSedi), " AND AttivitaPIP=1) "), "ORDER BY SiglaSede, CodiceEdizione, PosRegistro, (Cognome + ' ' + Nome) "));
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT (FK_Edizione) AS IDedizione, IDiscrizione, SUM(QuotaDoteIscrizione) AS QuoteDoti FROM t_Iscrizioni INNER JOIN t_IscrizioniDoti ON t_Iscrizioni.IDiscrizione = t_IscrizioniDoti.FK_Iscrizione GROUP BY FK_Edizione, IDiscrizione HAVING FK_Edizione " + clsTblDatiDR.StringaFiltroIN("IDedizione") + " ORDER BY FK_Edizione ";
PerseoNET/EsportaPerseo.cs:					text6 = "SELECT IDiscrfatt, IDiscrizione, StrFK_Versamenti, DataFatturaMago, NumeroFatturaMago, ImponibileFattura FROM t_IscrizioniFatture INNER JOIN t_Iscrizioni ON t_IscrizioniFatture.FK_Iscrizione = t_Iscrizioni.IDiscrizione " + text5 + " AND FK_ConvenzioneStage IS NULL ";
PerseoNET/EsportaPerseo.cs:					text6 = "SELECT IDiscrfatt, IDiscrizione, StrFK_Versamenti, DataFatturaMago, NumeroFatturaMago, ImponibileFattura FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione INNER JOIN t_IscrizioniFatture ON t_Iscrizioni.IDiscrizione = t_IscrizioniFatture.FK_Iscrizione " + text5 + " AND FK_ConvenzioneStage IS NULL ";
PerseoNET/EsportaPerseo.cs:					text6 = "SELECT IDversaiscr, FK_Fattura, t_IscrizioniVersamenti.FK_Azienda, (IDiscrizione) AS MatricolaIscritto, (Cognome + ' ' + Nome) AS Studente, t_Utenti.CodFiscale, t_Utenti.PIVA, SiglaSede, DataBloccoIncassi, DescrEdizione, CodiceEdizione, (IDmwe) AS IdIscrizioneFOL, TipoFormativoInterno, DescrProgetto, CodiceProgetto, DataIscr, DataRitiro, QuotaIscr, QuotaInteg, DataVersamento, (CASE WHEN Reso=0 THEN Quota ELSE (0-Quota) END) AS ImportoVersato, TipoModoVersamento, NoteVersamento, (SELECT DataFatturaMago FROM t_IscrizioniFatture WHERE IDiscrfatt=FK_Fattura) AS DataFatturaMago, (SELECT NumeroFatturaMago FROM t_IscrizioniFatture WHERE IDiscrfatt=FK_Fattura) AS NumeroFatturaMago, (NULL) AS DescrAziendaFattura, (NULL) AS AziendaPIVA, (NULL) AS AziendaCF, (NULL) AS CodiceDestinatarioPrivato FROM t_TipoModoVersamento RIGHT OUTER JOIN t_IscrizioniVersamenti ON t_TipoModoVersamento.IDtmodoversa = t_IscrizioniVersamenti.FK_ModoVersamento RIGHT OUTER JOIN t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto ON t_IscrizioniVersamenti.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint ";
PerseoNET/EsportaPerseo.cs:					text6 = "SELECT IDversaiscr, FK_Fattura, t_IscrizioniVersamenti.FK_Azienda, (IDiscrizione) AS MatricolaIscritto, (Cognome + ' ' + Nome) AS Studente, t_Utenti.CodFiscale, t_Utenti.PIVA, SiglaSede, DescrEdizione, CodiceEdizione, (IDmwe) AS IdIscrizioneFOL, TipoFormativoInterno, DescrProgetto, CodiceProgetto, DataIscr, DataRitiro, QuotaIscr, QuotaInteg, EsenzioneVersamento, QuotaEsenzione, NoteEsenzione, DataVersamento, (CASE WHEN Reso=0 THEN Quota ELSE (0-Quota) END) AS ImportoVersato, TipoModoVersamento, NoteVersamento, (SELECT DataFatturaMago FROM t_IscrizioniFatture WHERE IDiscrfatt=FK_Fattura) AS DataFatturaMago, (SELECT NumeroFatturaMago FROM t_IscrizioniFatture WHERE IDiscrfatt=FK_Fattura) AS NumeroFatturaMago, (NULL) AS DescrAziendaFattura, (NULL) AS AziendaPIVA, (NULL) AS AziendaCF, (NULL) AS CodiceDestinatarioPrivato FROM t_TipoModoVersamento RIGHT OUTER JOIN t_IscrizioniVersamenti ON t_TipoModoVersamento.IDtmodoversa = t_IscrizioniVersamenti.FK_ModoVersamento RIGHT OUTER JOIN t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto ON t_IscrizioniVersamenti.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint ";
PerseoNET/EsportaPerseo.cs:						text6 = "SELECT IDiscrizione, (NULL) AS FK_Fattura, (Cognome + ' ' + Nome) AS Studente, t_Utenti.CodFiscale, t_Utenti.PIVA, SiglaSede, DataBloccoIncassi, (DataBloccoIncassiTemp) AS BloccoTemporaneo, DescrEdizione, CodiceEdizione, IDmwe, (TipoFormativoInterno) AS TipoFormativo, EsenzioneVersamento, QuotaEsenzione, NoteEsenzione, (QuotaIscr+QuotaInteg-QuotaEsenzione) AS QuotaPrevista, COUNT(IDversaiscr) AS NumeroVersamenti, SUM(Quota) AS TotaleVersato, (QuotaIscr+QuotaInteg-SUM(Quota)) AS QuotaResidua, (NULL) AS NoteVersamenti, (NULL) AS ModoVersamenti, (NULL) AS FattureEmesse, DescrAzienda, t_Aziende.PIVA, t_Aziende.CodFiscale, (FatturaElettronicaCD) AS CodiceDestinatarioPrivato FROM t_IscrizioniVersamenti RIGHT OUTER JOIN t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede ON t_IscrizioniVersamenti.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_Aziende ON t_IscrizioniVersamenti.FK_Azienda = t_Aziende.IDazienda " + text5 + str + " GROUP BY IDiscrizione, (Cognome + ' ' + Nome), t_Utenti.CodFiscale, QuotaIscr, QuotaInteg, QuotaEsenzione, TipoFormativoInterno, SiglaSede, DescrEdizione, CodiceEdizione, EsenzioneVersamento, QuotaEsenzione, NoteEsenzione, IDmwe, DataBloccoIncassi, DataBloccoIncassiTemp, DescrAzienda, t_Aziende.PIVA, t_Aziende.CodFiscale, t_Utenti.PIVA, FatturaElettronicaCD ORDER BY SiglaSede, CodiceEdizione, (Cognome + ' ' + Nome) ";
PerseoNET/EsportaPerseo.cs:					text6 = "SELECT IDazienda, DescrAzienda, PIVA, CodFiscale, (FatturaElettronicaCD) AS CodiceDestinatarioPrivato FROM t_Aziende WHERE IDazienda " + clsTblDatiDR2.StringaFiltroIN("FK_Azienda");
PerseoNET/EsportaPerseo.cs:					text6 = "SELECT IDiscrizione, IDversaiscr, DescrQuietanza, NoteVersamento FROM t_IscrizioniVersamenti INNER JOIN t_TipoModoVersamento ON t_IscrizioniVersamenti.FK_ModoVersamento = t_TipoModoVersamento.IDtmodoversa INNER JOIN t_Iscrizioni ON t_IscrizioniVersamenti.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE Quota>0 " + strFiltroEdizioni + " " + str + "ORDER BY IDiscrizione ";
PerseoNET/EsportaPerseo.cs:				string origineDati = "SELECT v_ContrattiIncarichiRegolaOccasionale.IDdocente, ('" + FunzStringa.StringaSQL(vDocente) + "') AS StrDOC, v_DettaglioOreSvoltePerIncaricoRidotta.DataSvolgimento, SUM(Minuti) AS TotaleMin FROM v_DettaglioOreSvoltePerIncaricoRidotta INNER JOIN v_ContrattiIncarichiRegolaOccasionale ON v_DettaglioOreSvoltePerIncaricoRidotta.IDincarico = v_ContrattiIncarichiRegolaOccasionale.IDincarico AND  v_DettaglioOreSvoltePerIncaricoRidotta.DataSvolgimento >= v_ContrattiIncarichiRegolaOccasionale.DataInizioIncarico AND v_DettaglioOreSvoltePerIncaricoRidotta.DataSvolgimento <= v_ContrattiIncarichiRegolaOccasionale.DataFineIncarico GROUP BY v_DettaglioOreSvoltePerIncaricoRidotta.DataSvolgimento, v_ContrattiIncarichiRegolaOccasionale.IDdocente HAVING v_ContrattiIncarichiRegolaOccasionale.IDdocente=" + Conversions.ToString(vIDdoc) + " AND YEAR(DataSvolgimento)=" + Conversions.ToString(vAnno) + " ORDER BY DataSvolgimento ";
PerseoNET/EsportaPerseo.cs:					string origineDati = "SELECT t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS Collaboratore, t_Docenti.CodFiscale, CodiceDipendente, SUM(sngCostoInc) AS CostoInc, SUM(sngNettoInc) AS Netto, MIN(DataPagatoInizio) AS DataPagatoDAL, MAX(DataPagatoFine) AS DataPagatoAL, SUM(TotOreFatte) AS OrePagate FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente WHERE Reso=0 AND chbParasubordinato=1 AND CodiceTributo LIKE '1004%' AND TipoCococo=1 " + text3 + "GROUP BY t_Docenti.IDdocente, (Cognome + ' ' + Nome), t_Docenti.CodFiscale, CodiceDipendente, CodFiscale ORDER BY (Cognome + ' ' + Nome), CodFiscale";
PerseoNET/EsportaPerseo.cs:					origineDati = "SELECT IDcompensi, t_IncarichiEdizioni.IDincarico, t_Docenti.IDdocente, IDazienda, t_PianoServizi.IDedizione, IDsede, (FK_Progetto) AS IDprogetto, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (Cognome + ' ' + Nome) AS StrDOC, t_Docenti.CodFiscale, CodiceParFiscale, t_ProgettiPagamentiCompensiOneri.DescrParFiscale, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, t_PianoServizi.DescrEdizione, t_PianoServizi.CodiceEdizione, SiglaSede, t_TipoAttivitaEdizione.TipoAttivita, t_ArgomentiModuli.DescrArgomento, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, (0) AS AltriEnaip, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, DataPagatoInizio, DataPagatoFine, ('fatt. ' + NumeroFattura) AS NumeroFattura, DataFattura, t_ProgettiPagamentiCompensiOneri.DataPagamento, CodiceCIG, CodiceCUP, (SELECT TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=FK_TipoLavoroAttuale) AS TipoDipendente, CorrezionePagamento, CausaleCorrezione, GenerareAssegno, MatricolaTracciatoAssegni, (NULL) AS CodiceFiscale FROM t_Docenti INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_Docenti.IDdocente = t_ProgettiPagamentiCompensiOneri.IDdocente INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_PianoServizi ON t_ProgettiPagamentiCompensiOneri.IDedizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_IncarichiEdizioni ON t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_TipoAttivitaEdizione ON t_ProgettiPagamentiCompensiOneri.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE Reso=0 AND chbParasubordinato=1 AND CodiceTributo LIKE '1004%' AND TipoCococo=1 " + text3 + "ORDER BY (CASE WHEN IDazienda Is NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END), t_ProgettiPagamentiCompensiOneri.DataPagamento  ";
PerseoNET/frmDettFormazione.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDstudio, FK_Utente, FK_LivelloStudioMW FROM t_PercorsoStudi WHERE FK_Utente=", Variabili.Studente.get_Campo((object)"IDutente")), " "), "AND FK_LivelloStudioMW IS NOT NULL "));
PerseoNET/frmDettFormazione.cs:				vSQL = "SELECT IDstudio, FK_Utente, FK_LivelloStudioMW, DescrIstituto, Anno, DescrFormazione, Completato, ConTirocinio, Certificato, DurataOre, ResidenzaIstituto, DataRec, DataModifica FROM t_PercorsoStudi WHERE IDstudio=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettFormazione.cs:				vSQL = "SELECT IDtlivstudioMW, TipoLivelloMW FROM t_TipoLivelloTitoloMW WHERE Obsoleto=False ORDER BY LivelloMW, TipoLivelloMW";
PerseoNET/frmDettFormazione.cs:				string text = "SELECT IDstudio FROM t_PercorsoStudi WHERE FK_LivelloStudioMW IS NOT NULL AND FK_Utente=" + Conversions.ToString(MyProject.Forms.frmDettStudente.FormUt.ChiavePrimaria) + " ";
PerseoNET/clsAttivitaIndividuali.cs:					vSQL = "SELECT FK_Iscrizione, FK_ProgettoTirocinio, (NULL) AS Studente, DataStage, SUM(DATEDIFF(mi,OraIngresso,OraUscita)) AS Minuti, Stage, (0) AS ControllareData FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE PIP=0 GROUP BY FK_Iscrizione, FK_ProgettoTirocinio, DataStage, Stage HAVING FK_Iscrizione " + mvTirocini.StringaFiltroIN("IDiscrizione") + " ORDER BY FK_Iscrizione, DataStage, FK_ProgettoTirocinio ";
PerseoNET/clsAttivitaIndividuali.cs:						string origineDati = "SELECT IDiscrizione, DataAvvio, DataFine, DataProlungamento, DataInterruzione, DataSospesoDal, DataSospesoAl, DataSospeso, DataRipresa, DataRipresaProroga, DataAmmessa, Criticita FROM t_Tirocini ";
PerseoNET/clsAttivitaIndividuali.cs:				string origineDati = "SELECT IDconvenzione, IDiscrizione, IDutente, IDazienda, IDconvazienda, (NULL) AS DescrEdizione, (NULL) AS CodiceEdizione, (NULL) AS SiglaSede, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, DataIscr, DataRitiro, DescrAzienda, DataAvvio, DataFine, DataProlungamento, DataInterruzione, DataSospesoDal, DataSospesoAl, DataSospeso, DataRipresa, DataRipresaProroga, DurataStage, VariazioneDurataStage, (CASE WHEN DataInterruzione IS NOT NULL THEN DataInterruzione WHEN DataProlungamento IS NOT NULL AND DataInterruzione IS NULL THEN DataProlungamento WHEN DataRipresaProroga IS NOT NULL THEN DataRipresaProroga ELSE DataFine END) AS DataConclusioneAttivita, (CASE WHEN DataInterruzione IS NOT NULL THEN VariazioneDurataStage ELSE DurataStage END) AS OrePreviste, (0) AS TotaleMinuti, (0) AS TotaleMinutiAltro, (0) AS ControllareOre, (0) AS ControllareData, (NULL) AS Prolunga, (0) AS Sovrapposto, (NULL) AS Esito FROM t_ConvenzioniStage LEFT OUTER JOIN t_SediAziende ON t_ConvenzioniStage.FK_SedeStage = t_SediAziende.IDsedeaz RIGHT OUTER JOIN t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione LEFT OUTER JOIN t_Aziende RIGHT OUTER JOIN t_AziendeSediFormativeConvenzioni ON t_Aziende.IDazienda = t_AziendeSediFormativeConvenzioni.FK_Azienda ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda WHERE FK_Edizione=" + Conversions.ToString(vIDedizione) + " AND DataIscr IS NOT NULL ORDER BY IDiscrizione, IDconvenzione ";
PerseoNET/clsAttivitaIndividuali.cs:				string origineDati = "SELECT IDconvenzione, IDiscrizione, IDutente, IDazienda, IDconvazienda, (NULL) AS DescrEdizione, (NULL) AS CodiceEdizione, (NULL) AS SiglaSede, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, DataIscr, DataRitiro, DescrAzienda, DataAvvio, DataFine, DataProlungamento, DataInterruzione, DataSospesoDal, DataSospesoAl, DurataStage, VariazioneDurataStage, (CASE WHEN DataInterruzione IS NOT NULL THEN DataInterruzione WHEN DataProlungamento IS NOT NULL AND DataInterruzione IS NULL THEN DataProlungamento ELSE DataFine END) AS DataConclusioneAttivita, (CASE WHEN DataInterruzione IS NOT NULL THEN VariazioneDurataStage ELSE DurataStage END) AS OrePreviste, (0) AS TotaleMinuti, (0) AS TotaleMinutiAltro, (0) AS ControllareOre, (0) AS ControllareData, (NULL) AS Prolunga, (0) AS Sovrapposto, (NULL) AS Esito FROM t_ConvenzioniStage LEFT OUTER JOIN t_SediAziende ON t_ConvenzioniStage.FK_SedeStage = t_SediAziende.IDsedeaz RIGHT OUTER JOIN t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione LEFT OUTER JOIN t_Aziende RIGHT OUTER JOIN t_AziendeSediFormativeConvenzioni ON t_Aziende.IDazienda = t_AziendeSediFormativeConvenzioni.FK_Azienda ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda WHERE FK_Edizione=" + Conversions.ToString(num3) + " AND DataIscr IS NOT NULL ORDER BY IDiscrizione, IDconvenzione ";
PerseoNET/clsAttivitaIndividuali.cs:						origineDati = "SELECT FK_Iscrizione, (NULL) AS Studente, DataStage, SUM(DATEDIFF(mi,OraIngresso,OraUscita)) AS Minuti, Stage, (0) AS ControllareData FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE PIP=0 GROUP BY FK_Iscrizione, DataStage, Stage HAVING FK_Iscrizione " + mvTirocini.StringaFiltroIN("IDiscrizione") + " ORDER BY FK_Iscrizione, DataStage ";
PerseoNET/clsAttivitaIndividuali.cs:					vSQL = "SELECT FK_Iscrizione, FK_ProgettoTirocinio, (NULL) AS Studente, DataStage, SUM(DATEDIFF(mi,OraIngresso,OraUscita)) AS Minuti, Stage, (0) AS ControllareData FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE PIP=0 GROUP BY FK_Iscrizione, FK_ProgettoTirocinio, DataStage, Stage HAVING FK_Iscrizione " + mvTirocini.StringaFiltroIN("IDiscrizione") + " ORDER BY FK_Iscrizione, DataStage, FK_ProgettoTirocinio ";
PerseoNET/frmAltriModelliCertificazione.cs:				string origineDati = "SELECT IDmodellocert, TipoCertificazione, FK_TipoDocumento, TitoloCertificazione, SottotitoloCertificazione, TitoloModuloFormativo, OrePreviste, DescrObiettivi, DescrContenuti, DescrRifNormativo, Note, PercentualeMinimaOFA, FileLoghi, FileModello, ModelloAttivo, DataRec, DataModifica, Bloccato FROM t_ModelliCertificazione WHERE IDmodellocert=" + Conversions.ToString(vID);
PerseoNET/frmAltriModelliCertificazione.cs:				origineDati = "SELECT IDtdoc, TipoDocumento FROM t_TipoDocumento WHERE CertificazioneStudente=1 AND Obsoleto=0 ORDER BY IndTipoDoc ";
PerseoNET/frmAltriModelliCertificazione.cs:				string origineDati = "SELECT t_ModelliCertificazione.IDmodellocert, IndModello, TipoCertificazione, TipoDocumento, (CASE WHEN TipoArgomento IS NOT NULL THEN TipoArgomento ELSE DescrDisciplinaCertificata END) AS TipoArgomento, OrePreviste, PercentualeMinimaOFA, ModelloAttivo FROM t_ModelliCertificazione INNER JOIN t_TipoDocumento ON t_ModelliCertificazione.FK_TipoDocumento = t_TipoDocumento.IDtdoc LEFT OUTER JOIN t_TipoArgomento ON t_ModelliCertificazione.FK_TipoArgomento = t_TipoArgomento.IDtarg ORDER BY ModelloAttivo DESC, IndModello, TipoCertificazione ";
PerseoNET/frmAltriModelliCertificazione.cs:				string origineDati = "SELECT TipoCertificazione, TipoDocumento, TitoloCertificazione, SottotitoloCertificazione, TitoloModuloFormativo, OrePreviste, DescrObiettivi, DescrContenuti, AltriContenuti, DescrRifNormativo, Note, IndicareOFA, FileLoghi, FileModello, DataDisattivazione, ModelloAttivo FROM t_ModelliCertificazione INNER JOIN t_TipoDocumento ON t_ModelliCertificazione.FK_TipoDocumento = t_TipoDocumento.IDtdoc INNER JOIN t_TipoArgomento ON t_ModelliCertificazione.FK_TipoArgomento = t_TipoArgomento.IDtarg ORDER BY ModelloAttivo DESC, IndModello, OrePreviste ";
PerseoNET/frmDettFatturaProgetto.cs:					VariabiliClassi.Vedetta.ControlloMancanzaProtezioneRecord("SELECT IDprogfatt, Bloccato FROM t_ProgettiPagamentiFatture WHERE IDprogfatt=" + Conversions.ToString(FormAut.ChiavePrimaria));
PerseoNET/frmDettFatturaProgetto.cs:					string str2 = "SELECT t_DocentiFatture.IDfattura, t_DocentiFatture.FK_Docente, t_DocentiFatture.FK_Azienda, DataFattura, NumeroFattura, COUNT(IDprogpagamento) AS NumPagamenti, MAX(DataPagamento) AS UltimoData FROM t_DocentiFatture LEFT OUTER JOIN t_ProgettiPagamentiFatture ON t_DocentiFatture.IDfattura = t_ProgettiPagamentiFatture.FK_Fattura LEFT OUTER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento GROUP BY t_DocentiFatture.IDfattura, t_DocentiFatture.FK_Docente, t_DocentiFatture.FK_Azienda, DataFattura, NumeroFattura " + str;
PerseoNET/frmDettFatturaProgetto.cs:					str2 = "SELECT IDprogfatt, FK_ProgPagamento, FK_Docente, FK_Fattura, AltriRedditiOccasionale, DataStampaAutorizzazione, Autorizzazione, Sospeso, FK_AltraAssINPS, sngAliquotaPrevSepa, ImponibileOccasionale, DataUploadAutorizza, FK_PFAutorizzazione, DataRec, DataModifica, Bloccato FROM t_ProgettiPagamentiFatture ";
PerseoNET/frmDettFatturaProgetto.cs:					str2 = "SELECT IDtaltrainps, (TipoAltraAssINPS + ' [' + CodiceAssINPS + ']') AS AltraAss FROM t_TipoAltraAssicurazioneINPS WHERE Obsoleto=0 ORDER BY CodiceAssINPS";
PerseoNET/frmDettFatturaProgetto.cs:						str2 = "SELECT IDtaliquosepa, TipoAliquotaPrevSepa FROM t_TipoAliquotaPrevidenzaSeparata WHERE Obsoleto=False ORDER BY TipoAliquotaPrevSepa";
PerseoNET/frmDettFatturaProgetto.cs:					vSQL = ((!txtNumeroFattura.Enabled) ? ("SELECT IDfattura, FK_Docente FROM t_DocentiFatture WHERE DataFattura=" + FunzStringa.StrDataSQL(txtDataFattura.Text, FlagSqlServer: true) + " AND FK_Docente=" + Conversions.ToString(idDocCorrente) + " AND IDfattura<>" + Conversions.ToString(FormFatt.ChiavePrimaria)) : ((!Information.IsNothing(RuntimeHelpers.GetObjectValue(Variabili.TblRichiestaPagamenti.get_Campo((object)"FK_Azienda")))) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDfattura, FK_Azienda FROM t_DocentiFatture WHERE DataFattura=" + FunzStringa.StrDataSQL(txtDataFattura.Text, FlagSqlServer: true) + " AND FK_Azienda=", Variabili.TblRichiestaPagamenti.get_Campo((object)"FK_Azienda")), " "), "AND NumeroFattura='"), FunzStringa.StringaSQL(txtNumeroFattura.Text)), "' AND IDfattura<>"), FormFatt.ChiavePrimaria)) : ("SELECT IDfattura, FK_Docente FROM t_DocentiFatture WHERE DataFattura=" + FunzStringa.StrDataSQL(txtDataFattura.Text, FlagSqlServer: true) + " AND FK_Docente=" + Conversions.ToString(idDocCorrente) + " AND NumeroFattura='" + FunzStringa.StringaSQL(txtNumeroFattura.Text) + "' AND IDfattura<>" + Conversions.ToString(FormFatt.ChiavePrimaria))));
PerseoNET/frmDettFatturaProgetto.cs:					vSQL = ((!Information.IsNothing(RuntimeHelpers.GetObjectValue(Variabili.TblRichiestaPagamenti.get_Campo((object)"FK_Azienda")))) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDfattura, FK_Docente FROM t_DocentiFatture WHERE DataFattura=" + FunzStringa.StrDataSQL(txtDataFattura.Text, FlagSqlServer: true) + " AND FK_Azienda=", Variabili.TblRichiestaPagamenti.get_Campo((object)"FK_Azienda")), " "), "AND NumeroFattura='"), FunzStringa.StringaSQL(txtNumeroFattura.Text)), "' ")) : ("SELECT IDfattura, FK_Docente FROM t_DocentiFatture WHERE DataFattura=" + FunzStringa.StrDataSQL(txtDataFattura.Text, FlagSqlServer: true) + " AND FK_Docente=" + Conversions.ToString(idDocCorrente) + " AND NumeroFattura='" + FunzStringa.StringaSQL(txtNumeroFattura.Text) + "' "));
PerseoNET/frmDettFatturaProgetto.cs:				string origineDati = "SELECT IDfattura, FK_Docente, FK_Azienda, DataFattura, NumeroFattura, DataRec, DataModifica, Bloccato FROM t_DocentiFatture WHERE IDfattura=" + Conversions.ToString(vID);
PerseoNET/frmRiepilogoPagamentiSede.cs:				string origineDati = "SELECT t_ProgettiPagamenti.IDprogpagamento, FK_Progetto, FK_Sede, DescrProgetto, IDmwp, CodiceProgetto, SiglaSede, DataRichiestaInizio, DataRichiestaFine, t_ProgettiPagamentiCompensiOneri.DataPagamento FROM t_ProgettiPagamenti INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_ProgettiPagamenti.IDprogpagamento = dbo.t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento ORDER BY DescrProgetto, SiglaSede, DataRichiestaFine ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				string origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.DataPagamento FROM t_ProgettiPagamentiCompensiOneri  WHERE t_ProgettiPagamentiCompensiOneri.DataPagamento>='01/09/" + Strings.Mid(cmbAnno.Text, 1, 4) + "' AND t_ProgettiPagamentiCompensiOneri.DataPagamento<='31/08/" + Strings.Mid(cmbAnno.Text, 6, 4) + "' AND FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY t_ProgettiPagamentiCompensiOneri.DataPagamento ORDER BY t_ProgettiPagamentiCompensiOneri.DataPagamento DESC ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				string vSQL = "SELECT t_ProgettiPagamentiCompensiOneri.IDincarico FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_IncarichiEdizioni ON t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContrattiEsterni ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE DataPagamento>=" + FunzStringa.StrDataSQL(txtDal.Text, FlagSqlServer: true) + " AND DataPagamento<=" + FunzStringa.StrDataSQL(txtAl.Text, FlagSqlServer: true) + " AND ProtAutorizzaPubblicaAmm IS NOT NULL GROUP BY t_ProgettiPagamentiCompensiOneri.IDincarico ";
PerseoNET/frmRiepilogoPagamentiSede.cs:						vSQL = "SELECT (IDcompensi) AS NumPagamento, (IDincarico) AS NumIncarico, t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS Collaboratore, CodFiscale, t_ProgettiPagamentiCompensiOneri.DescrParFiscale, SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, (t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa) AS AliquotaPrev, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagamento, DataPagatoInizio, DataPagatoFine, (NULL) AS DataInizioContratto, (NULL) AS DataFineContratto, (NULL) AS ProtAutorizzaPubblicaAmm, (NULL) AS DataAutorizzaPubblicaAmm, (NULL) AS DescrPubblicaAmm, (NULL) AS IndirPubblicaAmm, (NULL) AS ComPubblicaAmm, (NULL) AS IndirizzoPEC, (0) AS TotaleOrePreviste, (0) AS TotaleImponibilePrevisto, (0) TotaleImponibilePagato FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE DataPagamento>=" + FunzStringa.StrDataSQL(txtDal.Text, FlagSqlServer: true) + " AND DataPagamento<=" + FunzStringa.StrDataSQL(txtAl.Text, FlagSqlServer: true) + " AND IDincarico " + text + " AND FK_Azienda IS NULL ORDER BY (Cognome + ' ' + Nome), CodFiscale, SiglaSede, TipoAttivita";
PerseoNET/frmRiepilogoPagamentiSede.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, DataAutorizzaPubblicaAmm, ProtAutorizzaPubblicaAmm,  DescrPubblicaAmm, IndirPubblicaAmm, ComPubblicaAmm, IndirizzoPEC, DataInizioContratto, (CASE WHEN DataProlungamento IS NULL THEN DataFineContratto ELSE DataProlungamento END) AS DataFineContratto, OreSvolgere FROM v_DettIncarichiAutorizzatiPubblAmm WHERE (DataInizioContratto<=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoFine")), "dd/MM/yyyy"), FlagSqlServer: true) + " AND DataFineContratto>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoInizio")), "dd/MM/yyyy"), FlagSqlServer: true) + " AND IDincarico=", clsTblDatiDR.get_Campo((object)"NumIncarico")), ") "), "OR (DataInizioContratto<="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoFine")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataProlungamento>="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoInizio")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND IDincarico="), clsTblDatiDR.get_Campo((object)"NumIncarico")), ") "), "ORDER BY DataAutorizzaPubblicaAmm "));
PerseoNET/frmRiepilogoPagamentiSede.cs:						vSQL = "SELECT IDcompensi, IDincarico, IDdocente, StrDOC, CodFiscale, DescrParFiscale, SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagamento, DataPagatoInizio, DataPagatoFine, DataInizioContratto, DataFineContratto, ProtAutorizzaPubblicaAmm, StrDataAutorizzaPubblicaAmm, DescrPubblicaAmm, IndirPubblicaAmm, ComPubblicaAmm, IndirizzoPECPubblAmm, TotaleOreApprovate, TotaleImponibilePrevisto, TotaleImponibilePagato FROM t_Pagamenti ";
PerseoNET/frmRiepilogoPagamentiSede.cs:						vSQL = "SELECT (StrDOC) AS Collaboratore, CodFiscale, SiglaSede, DescrParFiscale, SUM(sngCostoInc) AS Imponibile, SUM(sngRiva) AS Rivalsa, SUM(sngCassaPrev) AS CassaPrev, SUM(sngCostiAnticipo + sngCostiViaggio + sngCostiVitto) AS CostiVari, SUM(sngIVA) AS IVA, SUM(sngINPS23) AS INPSPercip, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPSComm, SUM(sngRiteAcc) AS Ritenuta, SUM(sngNettoInc) AS Netto, MIN(DataInizioContratto) AS DataInizioContratto, MAX(DataFineContratto) AS DataFineContratto, MIN(DataPagamento) AS PrimaDataPagamento, MAX(DataPagamento) AS UltimaDataPagamento, (ProtAutorizzaPubblicaAmm) AS ProtAutorizzazione, (StrDataAutorizzaPubblicaAmm) AS DataAutorizzazione, DescrPubblicaAmm, IndirPubblicaAmm, ComPubblicaAmm, (IndirizzoPECPubblAmm) AS IndirizzoPEC, SUM(TotaleImponibilePrevisto) AS TotaleImponibilePrevisto, SUM(TotaleImponibilePagato) AS AccontoSaldo FROM t_Pagamenti GROUP BY StrDOC, CodFiscale, SiglaSede, DescrParFiscale, ProtAutorizzaPubblicaAmm, StrDataAutorizzaPubblicaAmm, DescrPubblicaAmm, IndirPubblicaAmm, ComPubblicaAmm, IndirizzoPECPubblAmm ORDER BY StrDOC, CodFiscale, SiglaSede ";
PerseoNET/frmRiepilogoPagamentiSede.cs:							string origineDati = "SELECT t_ProgettiPagamenti.IDprogpagamento, t_ProgettiPagamentiCompensiOneri.FK_Progetto, FK_Sede, DescrProgetto, IDmwp, CodiceProgetto, SiglaSede, DataRichiestaInizio, DataRichiestaFine, t_ProgettiPagamentiCompensiOneri.DataPagamento FROM t_ProgettiPagamenti INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_ProgettiPagamenti.IDprogpagamento = dbo.t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento GROUP BY t_ProgettiPagamenti.IDprogpagamento, t_ProgettiPagamentiCompensiOneri.FK_Progetto, FK_Sede, DescrProgetto, IDmwp, CodiceProgetto, SiglaSede, DataRichiestaInizio, DataRichiestaFine, t_ProgettiPagamentiCompensiOneri.DataPagamento HAVING t_ProgettiPagamentiCompensiOneri.DataPagamento='" + cmbDataPag.Text + "' AND FK_Sede " + Variabili.FiltroSedi + " ORDER BY DescrProgetto, SiglaSede, DataRichiestaFine ";
PerseoNET/frmRiepilogoPagamentiSede.cs:							string text = "(SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=t_PagamentiIndividuali.FK_Azienda) AS DescrAzienda, ";
PerseoNET/frmRiepilogoPagamentiSede.cs:							string origineDati = "SELECT t_PagamentiIndividuali.IDpagaindiv, IDincarico, IDdocente, (NULL) AS FK_Azienda, IDedizione, (NULL) AS FK_PF, FK_Fattura, (Cognome + ' ' + Nome) AS StrDOC, " + text + "(NULL) AS DescrParFiscale, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, DescrArgomento, DataRichiestaInizio, DataRichiestaFine, t_PagamentiIndividuali.FK_AltraAssINPS, sngAliquotaPrevSepa, t_PagamentiIndividuali.AltriRedditiOccasionale, (0) AS TotOreFatte, (0) AS sngTotaleImponibile, (CASE WHEN FK_Fattura IS NOT NULL THEN 1 ELSE 0 END) AS Fattura, Autorizzazione, Sospeso, DataStampaAutorizzazione  FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento FULL OUTER JOIN t_PagamentiIndividualiIncarichi ON t_IncarichiEdizioni.IDincarico = t_PagamentiIndividualiIncarichi.FK_Incarico FULL OUTER JOIN t_PagamentiIndividuali ON t_PagamentiIndividualiIncarichi.FK_Pagamento = t_PagamentiIndividuali.IDpagaindiv WHERE DataPagamento='" + cmbDataPag.Text + "' ORDER BY (Cognome + ' ' + Nome), IndTA ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				string origineDatiPrestazioni = "SELECT (0) AS IDcompensi, FK_SedeEdizione, SiglaSede, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE DataPagamento='" + cmbDataPag.Text + "' AND Reso=0 " + strFiltroRedd + filtro + " GROUP BY FK_SedeEdizione, SiglaSede HAVING FK_SedeEdizione " + Variabili.FiltroSedi + " ORDER BY SiglaSede ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDatiPrestazioni = "SELECT SiglaSede FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE Reso=0 " + strFiltroRedd + filtro + " AND DataPagamento='" + cmbDataPag.Text + "' GROUP BY SiglaSede, IDsede HAVING IDsede " + Variabili.FiltroSedi + " ORDER BY SiglaSede ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDatiPrestazioni = "SELECT DataPagamento FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE Reso=0 " + strFiltroRedd + filtro + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY DataPagamento HAVING DataPagamento='" + cmbDataPag.Text + "' ORDER BY DataPagamento ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				string origineDatiPrestazioni = "SELECT (0) AS IDcompensi, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS StrDOC, t_DecodificatoreParametroFiscale.DescrParFiscale, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE DataPagamento='" + cmbDataPag.Text + "' AND FK_SedeEdizione " + Variabili.FiltroSedi + " AND Reso=0 " + strFiltroRedd + filtro + " GROUP BY Cognome, Nome, FK_Azienda, t_DecodificatoreParametroFiscale.DescrParFiscale, DescrAzienda ORDER BY (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END), t_DecodificatoreParametroFiscale.DescrParFiscale ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDatiPrestazioni = "SELECT SiglaSede FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE Reso=0 " + strFiltroRedd + filtro + " AND DataPagamento='" + cmbDataPag.Text + "' GROUP BY SiglaSede, IDsede HAVING IDsede " + Variabili.FiltroSedi + " ORDER BY SiglaSede ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDatiPrestazioni = "SELECT DataPagamento FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE Reso=0 " + strFiltroRedd + filtro + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY DataPagamento HAVING DataPagamento='" + cmbDataPag.Text + "' ORDER BY DataPagamento ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				string origineDatiPrestazioni = "SELECT (1) AS IDcompensi, SiglaSede, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS StrDOC, t_DecodificatoreParametroFiscale.DescrParFiscale, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev, (NULL) AS ModoPaga FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda " + text + strFiltroRedd + filtro + " AND DataPagamento='" + cmbDataPag.Text + "' AND FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY SiglaSede, Cognome, Nome, t_DecodificatoreParametroFiscale.DescrParFiscale,  DescrAzienda, FK_Azienda ORDER BY SiglaSede, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDatiPrestazioni = "SELECT SiglaSede FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE Reso=0 " + strFiltroRedd + filtro + " AND DataPagamento='" + cmbDataPag.Text + "' GROUP BY SiglaSede, IDsede HAVING IDsede " + Variabili.FiltroSedi + " ORDER BY SiglaSede ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDatiPrestazioni = "SELECT DataPagamento FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE Reso=0 " + strFiltroRedd + filtro + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY DataPagamento HAVING DataPagamento='" + cmbDataPag.Text + "' ORDER BY DataPagamento ";
PerseoNET/frmRiepilogoPagamentiSede.cs:						string origineDati = "SELECT CodiceTributo FROM t_DecodificatoreParametroFiscale GROUP BY CodiceTributo HAVING CodiceTributo<>'0000' ORDER BY CodiceTributo";
PerseoNET/frmRiepilogoPagamentiSede.cs:				string text3 = "SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, FK_Azienda, FK_ProgettoPagamento, IDedizione, FK_SedeEdizione, IDincarico, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE t_Docenti.IDdocente=t_ProgettiPagamentiCompensiOneri.IDdocente) ELSE (SELECT DescrAzienda FROM t_Aziende WHERE Idazienda=FK_Azienda) END) AS StrDOC, (NULL) AS CodFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, (NULL) AS SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, t_ProgettiPagamentiCompensiOneri.DataPagamento, CodiceTributo, (CASE WHEN IDmwp IS NULL THEN (DescrProgetto + ' codice ' + CodiceProgetto) ELSE (DescrProgetto + ' codice MW ' + IDmwp) END) AS StrProgetto FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto WHERE Reso=0 " + text + "AND YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnnoVers.Text)) + " AND CodiceTributo<>'0000' ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = text3 + "UNION SELECT IDparcella, FK_Azienda, (FK_Progetto) AS FK_ProgettoPagamento, (FK_Edizione) AS IDedizione, (FK_Sede) AS FK_SedeEdizione, (NULL) AS IDincarico, (FK_PF) AS FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE t_Docenti.IDdocente=t_DocentiParcelle.FK_Docente) ELSE (SELECT DescrAzienda FROM t_Aziende WHERE Idazienda=FK_Azienda) END) AS StrDOC, (NULL) AS CodFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, (NULL) AS SiglaSede, (NULL) AS DescrEdizione, (NULL) AS CodiceEdizione, (NULL) AS TipoAttivita, (NULL) AS DescrArgomento, (NULL) AS TotOreFatte, (NULL) AS QuotaOraIncarico, t_DocentiParcelle.FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, (CostiAnticipo) AS sngCostiAnticipo, (CostiViaggio) AS sngCostiViaggio, (CostiVitto) AS sngCostiVitto, (CostiAnticipo + CostiViaggio + CostiVitto) AS sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagamento, CodiceTributo, (NULL) AS StrProgetto FROM t_Sedi INNER JOIN t_DocentiParcelle ON t_Sedi.IDsede = t_DocentiParcelle.FK_Sede INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc WHERE YEAR(DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnnoVers.Text)) + " " + text2 + "AND CodiceTributo<>'0000' ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = text3 + " UNION SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, FK_Azienda, FK_ProgettoPagamento, IDedizione, FK_SedeEdizione, IDincarico, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE t_Docenti.IDdocente=t_ProgettiPagamentiCompensiOneri.IDdocente) ELSE (SELECT DescrAzienda FROM t_Aziende WHERE Idazienda=FK_Azienda) END) AS StrDOC, (NULL) AS CodFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, (NULL) AS SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, t_ProgettiPagamentiCompensiOneri.DataPagamento, CodiceTributo, (CASE WHEN IDmwp IS NULL THEN (DescrProgetto + ' codice ' + CodiceProgetto) ELSE (DescrProgetto + ' codice MW ' + IDmwp) END) AS StrProgetto FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto WHERE FK_PagamentoIndividuale IS NOT NULL AND Reso=0 " + text + "AND YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnnoVers.Text)) + " AND CodiceTributo<>'0000' ORDER BY StrDOC ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = (clsTblDatiDR.DestinazioneDati = "SELECT IDcompensi, FK_Azienda, FK_Progetto, IDedizione, FK_SedeEdizione, IDincarico, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagamento, CodiceTributo, StrProgetto FROM t_Pagamenti ");
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = ((Operators.CompareString(cmbTributo.Text, "", TextCompare: false) == 0) ? "SELECT StrDOC, CodiceTributo, SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti GROUP BY StrDOC, CodiceTributo ORDER BY StrDOC, CodiceTributo " : ("SELECT StrDOC, CodiceTributo, SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti GROUP BY StrDOC, CodiceTributo HAVING CodiceTributo='" + cmbTributo.Text + "' ORDER BY StrDOC, CodiceTributo "));
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = "SELECT SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				string origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDdocente, FK_Azienda, FK_ProgettoPagamento, IDedizione, FK_SedeEdizione, IDincarico, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, t_ProgettiPagamentiCompensiOneri.DataPagamento, CodiceTributo, (CASE WHEN IDmwp IS NULL THEN (DescrProgetto + ' codice ' + CodiceProgetto) ELSE (DescrProgetto + ' codice MW ' + IDmwp) END) AS StrProgetto FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto WHERE Reso=0 " + text + "AND YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnnoVers.Text)) + " AND CodiceTributo<>'0000' ORDER BY StrDOC, TipoAttivita";
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT IDdocente, FK_Azienda, FK_Progetto, IDedizione, FK_SedeEdizione, IDincarico, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagamento, CodiceTributo, StrProgetto FROM t_Pagamenti ");
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDati = ((Operators.CompareString(cmbTributo.Text, "", TextCompare: false) == 0) ? "SELECT TipoAttivita, CodiceTributo,  SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti GROUP BY TipoAttivita, CodiceTributo ORDER BY TipoAttivita, CodiceTributo " : ("SELECT TipoAttivita, CodiceTributo, SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti GROUP BY TipoAttivita, CodiceTributo HAVING CodiceTributo='" + cmbTributo.Text + "' ORDER BY TipoAttivita, CodiceTributo "));
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDati = "SELECT SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				string origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDdocente, FK_Azienda, FK_ProgettoPagamento, IDedizione, FK_SedeEdizione, IDincarico, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (NULL) AS StrDOC, (NULL) AS CodFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, t_ProgettiPagamentiCompensiOneri.DataPagamento, CodiceTributo, (CASE WHEN IDmwp IS NULL THEN (DescrProgetto + ' codice ' + CodiceProgetto) ELSE (DescrProgetto + ' codice MW ' + IDmwp) END) AS StrProgetto FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto WHERE Reso=0 " + text + "AND YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnnoVers.Text)) + " AND CodiceTributo<>'0000' ORDER BY StrDOC, TipoAttivita";
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT IDdocente, FK_Azienda, FK_Progetto, IDedizione, FK_SedeEdizione, IDincarico, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagamento, CodiceTributo, StrProgetto FROM t_Pagamenti ");
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDati = ((Operators.CompareString(cmbTributo.Text, "", TextCompare: false) == 0) ? ("SELECT DescrEdizione, SiglaSede, CodiceTributo, SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti GROUP BY DescrEdizione, SiglaSede, CodiceTributo HAVING CodiceTributo='" + cmbTributo.Text + "' ORDER BY DescrEdizione, CodiceTributo ") : "SELECT DescrEdizione, SiglaSede, CodiceTributo, SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti GROUP BY DescrEdizione, SiglaSede, CodiceTributo ORDER BY DescrEdizione, CodiceTributo ");
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDati = "SELECT SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				string text3 = "SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, FK_Azienda, FK_ProgettoPagamento, IDedizione, FK_SedeEdizione, IDincarico, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (NULL) AS StrDOC, (NULL) AS CodFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, DescrSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, t_ProgettiPagamentiCompensiOneri.DataPagamento, CodiceTributo, (CASE WHEN IDmwp IS NULL THEN (DescrProgetto + ' codice ' + CodiceProgetto) ELSE (DescrProgetto + ' codice MW ' + IDmwp) END) AS StrProgetto FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto WHERE Reso=0 " + text + "AND YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnnoVers.Text)) + " AND CodiceTributo<>'0000' ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = text3 + "UNION SELECT IDparcella, FK_Azienda, (FK_Progetto) AS FK_ProgettoPagamento, (FK_Edizione) AS IDedizione, (FK_Sede) AS FK_SedeEdizione, (NULL) AS IDincarico, (FK_PF) AS FK_ParFiscaleAttuale, (NULL) AS StrDOC, (NULL) AS CodFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, SiglaSede, (NULL) AS DescrEdizione, (NULL) AS CodiceEdizione, (NULL) AS TipoAttivita, (NULL) AS DescrArgomento, (NULL) AS TotOreFatte, (NULL) AS QuotaOraIncarico, t_DocentiParcelle.FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, (CostiAnticipo) AS sngCostiAnticipo, (CostiViaggio) AS sngCostiViaggio, (CostiVitto) AS sngCostiVitto, (CostiAnticipo + CostiViaggio + CostiVitto) AS sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagamento, CodiceTributo, (NULL) AS StrProgetto FROM t_Sedi INNER JOIN t_DocentiParcelle ON t_Sedi.IDsede = t_DocentiParcelle.FK_Sede INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc WHERE YEAR(DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnnoVers.Text)) + " " + text2 + "AND CodiceTributo<>'0000' ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = text3 + " UNION SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, FK_Azienda, FK_ProgettoPagamento, IDedizione, FK_SedeEdizione, IDincarico, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE t_Docenti.IDdocente=t_ProgettiPagamentiCompensiOneri.IDdocente) ELSE (SELECT DescrAzienda FROM t_Aziende WHERE Idazienda=FK_Azienda) END) AS StrDOC, (NULL) AS CodFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, (NULL) AS SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, t_ProgettiPagamentiCompensiOneri.DataPagamento, CodiceTributo, (CASE WHEN IDmwp IS NULL THEN (DescrProgetto + ' codice ' + CodiceProgetto) ELSE (DescrProgetto + ' codice MW ' + IDmwp) END) AS StrProgetto FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto WHERE FK_PagamentoIndividuale IS NOT NULL AND Reso=0 " + text + "AND YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnnoVers.Text)) + " AND CodiceTributo<>'0000' ORDER BY StrDOC ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = (clsTblDatiDR.DestinazioneDati = "SELECT IDcompensi, FK_Azienda, FK_Progetto, IDedizione, FK_SedeEdizione, IDincarico, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagamento, CodiceTributo, StrProgetto FROM t_Pagamenti ");
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = ((Operators.CompareString(cmbTributo.Text, "", TextCompare: false) == 0) ? "SELECT SiglaSede, CodiceTributo, SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti GROUP BY SiglaSede, CodiceTributo ORDER BY SiglaSede, CodiceTributo " : ("SELECT SiglaSede, CodiceTributo, SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti GROUP BY SiglaSede, CodiceTributo HAVING CodiceTributo='" + cmbTributo.Text + "' ORDER BY SiglaSede, CodiceTributo "));
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = "SELECT SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				string origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDdocente, FK_Azienda, FK_ProgettoPagamento, IDedizione, FK_SedeEdizione, IDincarico, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (NULL) AS StrDOC, (NULL) AS CodFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, t_ProgettiPagamentiCompensiOneri.DataPagamento, CodiceTributo, (CASE WHEN IDmwp IS NULL THEN (DescrProgetto + ' codice ' + CodiceProgetto) ELSE (DescrProgetto + ' codice MW ' + IDmwp) END) AS StrProgetto FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto WHERE Reso=0 " + text + "AND YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnnoVers.Text)) + " AND CodiceTributo<>'0000' ORDER BY StrDOC, TipoAttivita";
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT IDdocente, FK_Azienda, FK_Progetto, IDedizione, FK_SedeEdizione, IDincarico, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagamento, CodiceTributo, StrProgetto FROM t_Pagamenti ");
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDati = ((Operators.CompareString(cmbTributo.Text, "", TextCompare: false) == 0) ? "SELECT StrProgetto, CodiceTributo, SUM(sngINPS) AS INPS,  SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti GROUP BY StrProgetto, CodiceTributo ORDER BY StrProgetto, CodiceTributo " : ("SELECT StrProgetto, CodiceTributo, SUM(sngINPS) AS INPS,  SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti GROUP BY StrProgetto, CodiceTributo HAVING CodiceTributo='" + cmbTributo.Text + "' ORDER BY StrProgetto, CodiceTributo "));
PerseoNET/frmRiepilogoPagamentiSede.cs:				origineDati = "SELECT SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				string text3 = "SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, FK_Azienda, FK_ProgettoPagamento, IDedizione, FK_SedeEdizione, IDincarico, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (NULL) AS StrDOC, (NULL) AS CodFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagamento, CodiceTributo FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc WHERE Reso=0 " + text + "AND YEAR(DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnnoVers.Text)) + " AND CodiceTributo<>'0000' ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = (text3 + "UNION SELECT IDparcella, FK_Azienda, (FK_Progetto) AS FK_ProgettoPagamento, (FK_Edizione) AS IDedizione, (FK_Sede) AS FK_SedeEdizione, (NULL) AS IDincarico, (FK_PF) AS FK_ParFiscaleAttuale, (NULL) AS StrDOC, (NULL)AS CodFiscale, t_DecodificatoreParametroFiscale.DescrParFiscale, SiglaSede, (NULL) AS DescrEdizione, (NULL) AS CodiceEdizione, (NULL) AS TipoAttivita, (NULL) AS DescrArgomento, (NULL) AS TotOreFatte, (NULL) AS QuotaOraIncarico, sngAliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, (CostiAnticipo) AS sngCostiAnticipo, (CostiViaggio) AS sngCostiViaggio, (CostiVitto) AS sngCostiVitto, (CostiAnticipo + CostiViaggio + CostiVitto) AS sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagamento, CodiceTributo FROM t_Sedi INNER JOIN t_DocentiParcelle ON t_Sedi.IDsede = t_DocentiParcelle.FK_Sede INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc WHERE YEAR(DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnnoVers.Text)) + " " + text2 + "AND sngRiteAcc<>'0000' ") ?? "";
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = (clsTblDatiDR.DestinazioneDati = "SELECT IDdocente, FK_Azienda, FK_Progetto, IDedizione, FK_SedeEdizione, IDincarico, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, FK_AliquotaPrevSepa, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagamento, CodiceTributo FROM t_Pagamenti ");
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = "SELECT CodiceTributo, FK_AliquotaPrevSepa, SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti GROUP BY CodiceTributo, FK_AliquotaPrevSepa ORDER BY CodiceTributo, FK_AliquotaPrevSepa ";
PerseoNET/frmRiepilogoPagamentiSede.cs:				text3 = "SELECT SUM(sngINPS) AS INPS, SUM(sngRiteAcc) AS RiteAcc FROM t_Pagamenti ";
PerseoNET/frmDettAzione.cs:				string origineDati = "SELECT IDazione, FK_Progetto, FK_SedeAzione, FK_StatoAzione, AzioneAttiva, DescrAzione, IDmwa, CodiceAzione, DataAvvioAzione, DataFineAzione, ModelloAzione, DataRec, DataModifica, Bloccato FROM t_Azioni WHERE IDazione=" + Conversions.ToString(Variabili.Azione.PKAzione);
PerseoNET/frmDettAzione.cs:				origineDati = ((!Funzioni.UtenteGN()) ? "SELECT IDsede, SiglaSede FROM t_Sedi WHERE Attiva=True AND SedeTest=False AND FK_TipoSede IN(1,3) ORDER BY OrdGruppo, SiglaSede " : "SELECT IDsede, SiglaSede FROM t_Sedi WHERE Attiva=True AND FK_TipoSede IN(1,3) ORDER BY OrdGruppo, SiglaSede ");
PerseoNET/frmDettAzione.cs:							string origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE Attiva=1 AND FK_TipoSede>2 AND IDsede " + Variabili.FiltroSedi + " ORDER BY FK_TipoSede, SiglaSede ";
PerseoNET/frmDettAzione.cs:							origineDati = ((chbModelloAzione.CheckState != 0) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_PianoServizi.IDedizione, IDsede, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, DataAvvio, DataFine, Durata, (CASE WHEN FK_Anno IS NOT NULL THEN (CAST(FK_Anno AS VARCHAR)  + 'Â°') ELSE NULL END) AS TipoAnnualita, (SELECT COUNT(IDiscrizione) AS ni FROM t_Iscrizioni WHERE FK_Edizione=t_PianoServizi.IDedizione) AS NIscr, AbilitaFAD, ModelloEdizione FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint WHERE FK_Azione=", Variabili.Azione.get_Campo((object)0)), " And IDsede "), Variabili.FiltroSedi), " AND ModelloEdizione=1 "), right), "ORDER BY SiglaSede, TipoFormativoInterno, FK_Anno, DataAvvio ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_PianoServizi.IDedizione, IDsede, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, DataAvvio, DataFine, Durata, (CASE WHEN FK_Anno IS NOT NULL THEN (CAST(FK_Anno AS VARCHAR) + 'Â°') ELSE NULL END) AS TipoAnnualita, (SELECT COUNT(IDiscrizione) AS ni FROM t_Iscrizioni WHERE FK_Edizione=t_PianoServizi.IDedizione) AS NIscr, AbilitaFAD, PercMaxFAD, ModelloEdizione FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno WHERE FK_Azione=", Variabili.Azione.get_Campo((object)0)), " And IDsede "), Variabili.FiltroSedi), " AND ModelloEdizione=0 "), right), "ORDER BY SiglaSede, TipoFormativoInterno, FK_Anno, DataAvvio ")));
PerseoNET/frmDettAzione.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_PianoServizi.IDedizione, IDsede, SiglaSede, DescrEdizione, LEFT(TipoAnnualita,2) AS Anno, CodiceEdizione, IDmwe, QuotaIscr, QuotaInteg, ObbligoIscritti, ConsuntivoStagePagamento, GiorniINAIL, RecuperoAssenzaProgrammata, ControlloSovraStudenti, PercMinOFA, AbilitaFAD, PercMaxFAD FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno WHERE FK_Azione=", Variabili.Azione.get_Campo((object)0)), " And IDsede "), Variabili.FiltroSedi), " And ModelloEdizione=0 "), right), "ORDER BY SiglaSede, TipoFormativoInterno, DataAvvio, CodiceEdizione "));
PerseoNET/frmDettAzione.cs:							string origineDati = "SELECT DescrEdizione, CodiceEdizione, IDmwe, DataAvvio, DataFine, Durata, Gruppo, SiglaSede, TipoFormativoInterno, TipoAnnualita, TipoDurataAnni, QuotaIscr, QuotaInteg FROM t_PianoServizi ";
PerseoNET/frmDettAzione.cs:										text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDazione, FK_Progetto, FK_SedeAzione, DescrAzione, YEAR(DataAvvioAzione) AS AnnoAZ FROM t_Azioni WHERE DescrAzione='" + FunzStringa.StringaSQL(txtDescrAzione.Text) + "' AND FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " "), "AND FK_SedeAzione="), FormAz.get_ValoreSelezioneCombo(cmbFK_SedeAzione)), " "), "AND CodiceAzione='"), FunzStringa.StringaSQL(txtCodiceAzione.Text)), "' "));
PerseoNET/frmDettAzione.cs:											text = "SELECT IDazione, IDmwa FROM t_Azioni WHERE IDmwa='" + FunzStringa.StringaSQL(txtIDmwa.Text) + "' ";
PerseoNET/frmDettAzione.cs:				text = "SELECT COUNT(IDedizione) AS NumeroRecord FROM t_PianoServizi WHERE (FK_Azione=" + Conversions.ToString(FormAz.ChiavePrimaria) + " AND DataAvvio<" + FunzStringa.StrDataSQL(txtDataAvvioAzione.Text, FlagSqlServer: true) + ") OR (FK_Azione=" + Conversions.ToString(FormAz.ChiavePrimaria) + " AND DataFine>" + FunzStringa.StrDataSQL(txtDataFineAzione.Text, FlagSqlServer: true) + ") ";
PerseoNET/frmDettAzione.cs:					string origineDati = "SELECT IDedizione, CodiceEdizione, IDmwe, QuotaIscr, QuotaInteg, ObbligoIscritti, ConsuntivoStagePagamento, GiorniINAIL, RecuperoAssenzaProgrammata, ControlloSovraStudenti, PercMinOFA, AbilitaFAD, PercMaxFAD FROM t_PianoServizi WHERE IDedizione " + tblED.StringaFiltroIN(0);
PerseoNET/frmDettAzione.cs:				string vSQL = "SELECT DescrProgetto, CodiceProgetto FROM t_Progetti WHERE IDprogetto=" + Conversions.ToString(Variabili.PKProgettoCopiaRegole);
PerseoNET/frmDettAzione.cs:				vSQL = "SELECT DescrEdizione, CodiceEdizione, DataAvvio, DataFine, Durata, Gruppo, FK_SedeEdizione, FK_TipoFormativoInterno, FK_Anno, FK_DurataAnni, QuotaIscr, QuotaInteg, AllieviMIN, AllieviMAX, PianoIncarichi, FK_Azione FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione=t_Azioni.IDazione WHERE FK_Progetto=" + Conversions.ToString(Variabili.PKProgettoCopiaRegole);
PerseoNET/frmDettAzione.cs:				vSQL = (clsTblDatiDR.DestinazioneDati = "SELECT DescrEdizione, CodiceEdizione, DataAvvio, DataFine, Durata, Gruppo, FK_SedeEdizione, FK_TipoFormativoInterno, FK_Anno, FK_DurataAnni, QuotaIscr, QuotaInteg, AllieviMIN, AllieviMAX, PianoIncarichi, FK_Azione FROM t_PianoServizi");
PerseoNET/frmDettAzione.cs:				string origineDati = "SELECT IDedizione, SiglaSede, DescrEdizione, Anno, CodiceEdizione, IDmwe, QuotaIscr, QuotaInteg, ObbligoIscritti, ConsuntivoStagePagamento, GiorniINAIL, RecuperoAssenzaProgrammata, ControlloSovraStudenti, PercMinOFA FROM t_PianoServizi";
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:					string origineDati = "SELECT IDsede, IDlettinc, IDcontratto, IDdocente, IDazienda, IDtattivita, IDprogetto, IDparfisc, SiglaSede, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Collaboratore, DescrProgetto, IDmwp, CodiceProgetto, IndTA, (CASE WHEN DescrLetteraIncarico IS NULL THEN TipoAttivita ELSE (TipoAttivita + ' - ' + DescrLetteraIncarico) END) AS TipoAttivita, QuotaOraIncarico, OreApprovate, DataInizioContratto, DataFineContratto, MaxDataProlungamento, DataApprovaIncarico, DataGenerazione, DataProlungamento, DataDownload, DataUpload, DataLetturaAccettazione, PercorsoLettera, PercorsoAccetta, CodiceCIG, CodiceCUP, DescrParFiscale, ObbligoIscrizioneAlbo, Aula, Primaria, Secondaria, DescrIncarico, DescrLetteraIncarico, (CASE WHEN DataGenerazione IS NOT NULL THEN 1 ELSE 0 END) AS FlagGenerata, (CASE WHEN DataDownload IS NOT NULL THEN 1 ELSE 0 END) AS FlagPrelevata, (CASE WHEN DataUpload IS NOT NULL THEN 1 ELSE 0 END) AS FlagAccettata FROM  t_DocentiLettereIncarichi RIGHT OUTER JOIN v_DocentiLettereIncaricoPreviste ON t_DocentiLettereIncarichi.FK_Contratto = v_DocentiLettereIncaricoPreviste.IDcontratto AND  t_DocentiLettereIncarichi.FK_Sede = v_DocentiLettereIncaricoPreviste.IDsede AND  t_DocentiLettereIncarichi.FK_Docente = v_DocentiLettereIncaricoPreviste.IDdocente AND  t_DocentiLettereIncarichi.FK_Progetto = v_DocentiLettereIncaricoPreviste.IDprogetto AND  t_DocentiLettereIncarichi.FK_Attivita = v_DocentiLettereIncaricoPreviste.IDtattivita ";
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:							text = "SELECT IDsede, IDlettinc, IDcontratto, IDdocente, IDazienda, IDtattivita, IDprogetto, IDparfisc, SiglaSede, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Collaboratore, DescrProgetto, IDmwp, CodiceProgetto, IndTA, (CASE WHEN DescrLetteraIncarico IS NULL THEN TipoAttivita ELSE DescrLetteraIncarico END) AS TipoAttivita, QuotaOraIncarico, OreApprovate, DataInizioContratto, DataFineContratto, MaxDataProlungamento, DataApprovaIncarico, DataGenerazione, DataProlungamento, DataDownload, DataUpload, DataLetturaAccettazione, PercorsoLettera, PercorsoAccetta, CodiceCIG, CodiceCUP, DescrParFiscale, ObbligoIscrizioneAlbo, Aula, Primaria, Secondaria, DescrIncarico, DescrLetteraIncarico, (CASE WHEN DataGenerazione IS NOT NULL THEN 1 ELSE 0 END) AS FlagGenerata, (CASE WHEN DataDownload IS NOT NULL THEN 1 ELSE 0 END) AS FlagPrelevata, (CASE WHEN DataUpload IS NOT NULL THEN 1 ELSE 0 END) AS FlagAccettata FROM  t_DocentiLettereIncarichi RIGHT OUTER JOIN v_DocentiLettereIncaricoPreviste ON t_DocentiLettereIncarichi.QuotaOraRaggruppa = v_DocentiLettereIncaricoPreviste.StrQuotaOraIncarico AND t_DocentiLettereIncarichi.FK_Contratto = v_DocentiLettereIncaricoPreviste.IDcontratto AND t_DocentiLettereIncarichi.FK_Sede = v_DocentiLettereIncaricoPreviste.IDsede AND t_DocentiLettereIncarichi.FK_Docente = v_DocentiLettereIncaricoPreviste.IDdocente AND t_DocentiLettereIncarichi.FK_Progetto = v_DocentiLettereIncaricoPreviste.IDprogetto AND t_DocentiLettereIncarichi.FK_Attivita = v_DocentiLettereIncaricoPreviste.IDtattivita ";
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:							text = "SELECT IDsede, IDlettinc, IDcontratto, IDdocente, IDazienda, IDtattivita, IDprogetto, IDparfisc, SiglaSede, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Collaboratore, DescrProgetto, IDmwp, CodiceProgetto, IndTA, TipoAttivita, QuotaOraIncarico, OreApprovate, DataInizioContratto, DataFineContratto, MaxDataProlungamento, DataApprovaIncarico, DataGenerazione, DataProlungamento, DataDownload, DataUpload, DataLetturaAccettazione, PercorsoLettera, PercorsoAccetta, CodiceCIG, CodiceCUP, DescrParFiscale, ObbligoIscrizioneAlbo, Aula, Primaria, Secondaria, DescrIncarico, DescrLetteraIncarico, (CASE WHEN DataGenerazione IS NOT NULL THEN 1 ELSE 0 END) AS FlagGenerata, (CASE WHEN DataDownload IS NOT NULL THEN 1 ELSE 0 END) AS FlagPrelevata, (CASE WHEN DataUpload IS NOT NULL THEN 1 ELSE 0 END) AS FlagAccettata FROM  t_DocentiLettereIncarichi RIGHT OUTER JOIN v_DocentiLettereIncaricoPreviste ON t_DocentiLettereIncarichi.QuotaOraRaggruppa = v_DocentiLettereIncaricoPreviste.StrQuotaOraIncarico AND t_DocentiLettereIncarichi.FK_Contratto = v_DocentiLettereIncaricoPreviste.IDcontratto AND t_DocentiLettereIncarichi.FK_Sede = v_DocentiLettereIncaricoPreviste.IDsede AND t_DocentiLettereIncarichi.FK_Docente = v_DocentiLettereIncaricoPreviste.IDdocente AND t_DocentiLettereIncarichi.FK_Progetto = v_DocentiLettereIncaricoPreviste.IDprogetto AND t_DocentiLettereIncarichi.FK_Attivita = v_DocentiLettereIncaricoPreviste.IDtattivita ";
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:							text = "SELECT IDsede, IDlettinc, IDcontratto, IDdocente, IDazienda, IDtattivita, IDprogetto, IDparfisc, SiglaSede, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Collaboratore, DescrProgetto, IDmwp, CodiceProgetto, IndTA, (CASE WHEN DescrLetteraIncarico IS NULL THEN TipoAttivita ELSE DescrLetteraIncarico END) AS TipoAttivita, QuotaOraIncarico, OreApprovate, DataInizioContratto, DataFineContratto, MaxDataProlungamento, DataApprovaIncarico, DataGenerazione, DataProlungamento, DataDownload, DataUpload, DataLetturaAccettazione, PercorsoLettera, PercorsoAccetta, CodiceCIG, CodiceCUP, DescrParFiscale, ObbligoIscrizioneAlbo, Aula, Primaria, Secondaria, DescrIncarico, DescrLetteraIncarico, (CASE WHEN DataGenerazione IS NOT NULL THEN 1 ELSE 0 END) AS FlagGenerata, (CASE WHEN DataDownload IS NOT NULL THEN 1 ELSE 0 END) AS FlagPrelevata, (CASE WHEN DataUpload IS NOT NULL THEN 1 ELSE 0 END) AS FlagAccettata FROM  t_DocentiLettereIncarichi RIGHT OUTER JOIN v_DocentiLettereIncaricoPreviste ON t_DocentiLettereIncarichi.QuotaOraRaggruppa = v_DocentiLettereIncaricoPreviste.StrQuotaOraIncarico AND t_DocentiLettereIncarichi.FK_Contratto = v_DocentiLettereIncaricoPreviste.IDcontratto AND t_DocentiLettereIncarichi.FK_Sede = v_DocentiLettereIncaricoPreviste.IDsede AND t_DocentiLettereIncarichi.FK_Docente = v_DocentiLettereIncaricoPreviste.IDdocente AND t_DocentiLettereIncarichi.FK_Progetto = v_DocentiLettereIncaricoPreviste.IDprogetto AND t_DocentiLettereIncarichi.FK_Attivita = v_DocentiLettereIncaricoPreviste.IDtattivita ";
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:								string origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE FK_TipoSede>=3 AND IDsede " + text2 + " ORDER BY SiglaSede";
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:							VariabiliClassi.CmdSQL.CreaRecordset(Conversions.ToString(Operators.ConcatenateObject("SELECT TipoIscrizioneAlbo FROM t_TipoIscrizioneAlbo WHERE IDtalbo=", Variabili.Docente.get_Campo((object)"FK_TipoIscrAlbo"))));
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:							string text3 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcontratto, IDincarico, DescrEdizione, CodiceEdizione, DescrArgomento, OreApprovate FROM v_DettaglioIncarichiPerContratto WHERE IDsede=", tblLett.get_Campo((object)"IDsede", vFlagUpdateDB: false)), " AND IDcontratto="), tblLett.get_Campo((object)"IDcontratto", vFlagUpdateDB: false)), " "), "AND IDtattivita="), tblLett.get_Campo((object)"IDtattivita", vFlagUpdateDB: false)), " AND IDprogetto="), tblLett.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " "), "AND QuotaOraIncarico="), text), " ORDER BY DescrEdizione, DescrArgomento "));
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:									text3 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, DescrEdizione, CodiceEdizione, SiglaSede, OreClassiRiunite FROM v_IncarichiEdizioniClassiRiunite WHERE IDincarico=", clsTblDatiDR.get_Campo((object)"IDincarico")), " "));
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:									origineDati = "SELECT IDprogetto, BloccoLettereIncarico, CodiceProgetto FROM t_Progetti WHERE IDprogetto " + tblLett.StringaFiltroIN("IDprogetto");
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:									origineDati = "SELECT IDprogetto, BloccoLettereIncarico, CodiceProgetto FROM t_Progetti WHERE IDprogetto " + tblLett.StringaFiltroIN("IDprogetto");
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:								origineDati = "SELECT IDlettinc, Collaboratore, Lettera, Esito, NoteControlloAnagrafico FROM t_DocentiLettereIncarico ";
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:						text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDlettinc FROM t_DocentiLettereIncarichi WHERE FK_Docente=", tblLett.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "), "AND FK_Sede="), tblLett.get_Campo((object)"IDsede", vFlagUpdateDB: false)), " "), "AND FK_Progetto="), tblLett.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " "), "AND FK_Attivita="), tblLett.get_Campo((object)"IDtattivita", vFlagUpdateDB: false)), " "), "AND FK_Contratto="), tblLett.get_Campo((object)"IDcontratto", vFlagUpdateDB: false)), " "), "AND QuotaOraRaggruppa="), expression), " "));
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_DocentiContratti.IDcontratto, FK_CodicePF, DataInizioContratto, DataFineContratto, OreSvolgere, QuotaOraIncarico, DescrArgomento, IndTA, TipoAttivita, DescrEdizione, IDmwa FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDcontratto=", tblLett.get_Campo((object)"IDcontratto", vFlagUpdateDB: false)), " AND IDsede="), tblLett.get_Campo((object)0, vFlagUpdateDB: false)), " "), "AND IDtattivita="), tblLett.get_Campo((object)"IDtattivita", vFlagUpdateDB: false)), " "), "AND IDprogetto= "), tblLett.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " "), "ORDER BY IndTA, DescrArgomento "));
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcontratto, IDincarico, DescrEdizione, CodiceEdizione, DescrArgomento, TipoAttivita, OreApprovate FROM v_DettaglioIncarichiPerContratto WHERE IDsede=", tblLett.get_Campo((object)"IDsede", vFlagUpdateDB: false)), " AND IDcontratto="), tblLett.get_Campo((object)"IDcontratto", vFlagUpdateDB: false)), " "), "AND IDtattivita="), tblLett.get_Campo((object)"IDtattivita", vFlagUpdateDB: false)), " AND IDprogetto="), tblLett.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " "), "AND QuotaOraIncarico="), text), " ORDER BY DescrEdizione, TipoAttivita, DescrArgomento "));
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_DocentiContratti.IDcontratto, FK_CodicePF, DataInizioContratto, DataFineContratto, OreSvolgere, QuotaOraIncarico, DescrArgomento, IndTA, TipoAttivita, DescrEdizione, IDmwa FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDcontratto=", tblLett.get_Campo((object)"IDcontratto", vFlagUpdateDB: false)), " AND IDsede="), tblLett.get_Campo((object)0, vFlagUpdateDB: false)), " "), "AND IDtattivita="), tblLett.get_Campo((object)"IDtattivita", vFlagUpdateDB: false)), " "), "AND IDprogetto= "), tblLett.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " "), "ORDER BY IndTA, DescrArgomento "));
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcontratto, IDincarico, DescrEdizione, CodiceEdizione, DescrArgomento, OreApprovate FROM v_DettaglioIncarichiPerContratto WHERE IDsede=", tblLett.get_Campo((object)"IDsede", vFlagUpdateDB: false)), " AND IDcontratto="), tblLett.get_Campo((object)"IDcontratto", vFlagUpdateDB: false)), " "), "AND IDtattivita="), tblLett.get_Campo((object)"IDtattivita", vFlagUpdateDB: false)), " AND IDprogetto="), tblLett.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " "), "AND QuotaOraIncarico="), text), " ORDER BY DescrEdizione, DescrArgomento "));
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:									vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, DescrEdizione, CodiceEdizione, SiglaSede, OreClassiRiunite FROM v_IncarichiEdizioniClassiRiunite WHERE IDincarico=", clsTblDatiDR.get_Campo((object)"IDincarico")), " "));
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:						str = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " AND FK_TipoSede>=3 AND Attiva=1 ";
PerseoNET/frmPersonaleEsternoLettereIncaricoFTP.cs:						str = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " AND FK_TipoSede>=3 ";
PerseoNET/frmAziende.cs:				string origineDati = "SELECT IDtsetprod, TipoSettoreProd FROM t_TipoSettoreProduttivo ORDER BY OrdArea, OrdSett ";
PerseoNET/frmAziende.cs:				origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE FK_TipoSede=3 ORDER BY OrdGruppo, SiglaSede ";
PerseoNET/frmAziende.cs:				origineDati = "SELECT IDtformag, IIf(Obsoleto=True, (TipoFormaGiuridica & ' (*)'), TipoFormaGiuridica) AS TipoFormaGiuridica FROM t_TipoFormaGiuridica ORDER BY TipoFormaGiuridica ";
PerseoNET/frmAziende.cs:				origineDati = "SELECT IDtdimaz, TipoDimensione FROM t_TipoDimensioneAzienda ORDER BY IndDZ, TipoDimensione ";
PerseoNET/frmAziende.cs:				origineDati = "SELECT t_Aziende.IDazienda, FK_ParFiscaleAttuale, DescrAzienda, (CASE WHEN PIVA IS NOT NULL AND CodFiscale IS NULL THEN PIVA WHEN PIVA IS NULL AND CodFiscale IS NOT NULL THEN CodFiscale WHEN PIVA IS NOT NULL AND CodFiscale IS NOT NULL THEN PIVA ELSE NULL END) AS PIVA_CF, TipoSettoreProd, TipoFormaGiuridica, TipoDimensione, NoteContatto, URLAzienda, VerificaDelegaFormazione, (SELECT (ComSedeAz + ' (' + ProvSedeAz + ') ' + IndirSedeAz) AS LegaleSede FROM t_SediAziende WHERE FK_TipoSede=1 AND Attiva=1 AND FK_Azienda=IDazienda) AS SedeLegale, (0) AS NumSedi, Fornitore, t_Aziende.Attiva FROM t_Aziende LEFT OUTER JOIN t_TipoDimensioneAzienda ON t_Aziende.FK_TipoDimensione = t_TipoDimensioneAzienda.IDtdimaz LEFT OUTER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag LEFT OUTER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod ORDER BY DescrAzienda, TipoSettoreProd ";
PerseoNET/frmAziende.cs:				string vSQL = "SELECT IDazienda, COUNT(IDsedeaz) AS NumSedi FROM t_Aziende INNER JOIN t_SediAziende ON t_SediAziende.FK_Azienda=t_Aziende.IDazienda WHERE t_SediAziende.Attiva=1 GROUP BY IDazienda HAVING IDazienda IN() ";
PerseoNET/frmAziende.cs:				vSQL = "SELECT (FK_Azienda) AS IDazienda, (ComSedeAz + ' (' + ProvSedeAz + ') ' + IndirSedeAz) AS SedeLegale FROM t_SediAziende WHERE FK_TipoSede=1 AND Attiva=1 ";
PerseoNET/frmAziende.cs:							text3 = "(SELECT COUNT(IDconvazienda) AS NConv FROM t_AziendeSediFormativeConvenzioni WHERE FK_Azienda=IDazienda AND FK_SedeFormativa=" + Conversions.ToString(ComboSede.PKSelezionatoCombo) + " AND DataConvenzione>='" + text4 + "' AND DataConvenzione<='" + text5 + "' AND ResidenteEstero=" + Conversions.ToString((int)chbResidenteEE.CheckState) + ")>0 ";
PerseoNET/frmAziende.cs:							text3 = "(SELECT COUNT(IDconvazienda) AS NConv FROM t_AziendeSediFormativeConvenzioni WHERE FK_Azienda=IDazienda AND FK_SedeFormativa=" + Conversions.ToString(ComboSede.PKSelezionatoCombo) + " AND ResidenteEstero=" + Conversions.ToString((int)chbResidenteEE.CheckState) + ")>0 ";
PerseoNET/frmAziende.cs:							text3 = "(SELECT COUNT(IDconvazienda) AS NConv FROM t_AziendeSediFormativeConvenzioni WHERE FK_Azienda=IDazienda AND DataConvenzione>='" + text4 + "' AND DataConvenzione<='" + text5 + "' AND ResidenteEstero=" + Conversions.ToString((int)chbResidenteEE.CheckState) + ")>0 ";
PerseoNET/frmAziende.cs:						text3 = ((Operators.CompareString(text3, "", TextCompare: false) != 0) ? (text3 + "AND (SELECT COUNT(IDconvazienda) AS NConv FROM t_AziendeSediFormativeConvenzioni WHERE FK_Azienda=IDazienda AND ResidenteEstero=" + Conversions.ToString((int)chbResidenteEE.CheckState) + ")>0 ") : ("(SELECT COUNT(IDconvazienda) AS NConv FROM t_AziendeSediFormativeConvenzioni WHERE FK_Azienda=IDazienda AND ResidenteEstero=" + Conversions.ToString((int)chbResidenteEE.CheckState) + ")>0 "));
PerseoNET/frmAziende.cs:						text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + " AND (PIVA IS NOT NULL OR CodFiscale IS NOT NULL) AND (SELECT COUNT(IDsedeaz) FROM t_SediAziende WHERE FK_Azienda=t_Aziende.IDazienda AND t_SediAziende.Attiva=1)>0 ") : "WHERE (PIVA IS NOT NULL OR CodFiscale IS NOT NULL) AND (SELECT COUNT(IDsedeaz) FROM t_SediAziende WHERE FK_Azienda=t_Aziende.IDazienda AND t_SediAziende.Attiva=1)>0 ");
PerseoNET/frmAziende.cs:							text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT (ComSedeAz + ' (' + ProvSedeAz + ') ' + IndirSedeAz) AS LegaleSede FROM t_SediAziende WHERE FK_TipoSede=1 AND Attiva=1 AND FK_Azienda=IDazienda) LIKE '%" + FunzStringa.StringaSQL(txtComune.Text) + "%' ") : ("WHERE (SELECT (ComSedeAz + ' (' + ProvSedeAz + ') ' + IndirSedeAz) AS LegaleSede FROM t_SediAziende WHERE FK_TipoSede=1 AND Attiva=1 AND FK_Azienda=IDazienda) LIKE '%" + FunzStringa.StringaSQL(txtComune.Text) + "%' "));
PerseoNET/frmAziende.cs:							text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT (ComSedeAz + ' (' + ProvSedeAz + ') ' + IndirSedeAz) AS LegaleSede FROM t_SediAziende WHERE FK_TipoSede=1 AND Attiva=1 AND FK_Azienda=IDazienda) LIKE '% (" + txtPROV.Text + ") %' ") : ("WHERE (SELECT (ComSedeAz + ' (' + ProvSedeAz + ') ' + IndirSedeAz) AS LegaleSede FROM t_SediAziende WHERE FK_TipoSede=1 AND Attiva=1 AND FK_Azienda=IDazienda) LIKE '% (" + txtPROV.Text + ") %' "));
PerseoNET/frmAziende.cs:						text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + " AND (SELECT IDsedeaz FROM t_SediAziende WHERE FK_TipoSede=1 AND Attiva=1 AND FK_Azienda=IDazienda) IS NULL ") : "WHERE (SELECT IDsedeaz FROM t_SediAziende WHERE FK_TipoSede=1 AND Attiva=1 AND FK_Azienda=IDazienda) IS NULL ");
PerseoNET/frmAziende.cs:						string text6 = "SELECT IDazienda FROM t_Aziende INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda LEFT OUTER JOIN t_TipoDimensioneAzienda ON t_Aziende.FK_TipoDimensione = t_TipoDimensioneAzienda.IDtdimaz LEFT OUTER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag LEFT OUTER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod ";
PerseoNET/frmAziende.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_DocentiContratti.IDcontratto, (Cognome + ' ' + Nome) AS StrDOC, CodiceProgetto, CodiceEdizione, SiglaSede, TipoAttivita, DescrArgomento, DataInizioIncarico, DataFineIncarico, DataProlungamento, OreSvolgere, QuotaOraIncarico FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto AND t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi AND t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE FK_Azienda=", tblAz.get_Campo((object)"IDazienda", vFlagUpdateDB: false)), " AND IDsede "), Variabili.FiltroSedi), " "), "ORDER BY DataInizioIncarico, IDcontratto "));
PerseoNET/frmAziende.cs:					string vRelazione = Conversions.ToString(Operators.ConcatenateObject("SELECT IDsedeaz, FK_Azienda FROM t_SediAziende WHERE FK_Azienda=", tblAz.get_Campo((object)0, vFlagUpdateDB: false)));
PerseoNET/frmAziende.cs:				string origineDati = "SELECT IDazienda, DescrAzienda, Fornitore, PIVA, CodFiscale, (FatturaElettronicaCD) AS CodiceDestinatarioPrivato, URLAzienda, EmailAzienda, CodiceIscrCCIAA, ComuneCCIAA, DataIscrCCIAA, CodiceATECO, DescrCCNL, AnnoPresenzaRegione, TipoSettoreProd, AltroSettore, TipoDimensione, TipoFormaGiuridica, DescrFondoInterprof, TipoAssociazioneImprenditoriale, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, TelSedeAz_2, FaxSedeAz, EmailSedeAz, (0) AS NumeroSediOperative, t_Aziende.Attiva, DocValutazioneRischi, RSPP, MedicoCompetente, AddettoIncendioSoccorso, PianoEvacuazione FROM t_Aziende INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda LEFT OUTER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod LEFT OUTER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag LEFT OUTER JOIN t_TipoDimensioneAzienda ON t_Aziende.FK_TipoDimensione = t_TipoDimensioneAzienda.IDtdimaz LEFT OUTER JOIN t_TipoAssociazioneImprenditoriale ON t_Aziende.FK_TipoAssociazioneImpre = t_TipoAssociazioneImprenditoriale.IDtassimpre LEFT OUTER JOIN t_TipoFondoInterprofessionale ON t_Aziende.FK_TipoFondoIP = t_TipoFondoInterprofessionale.IDtfondoprof " + FiltroAziende() + " AND t_SediAziende.FK_TipoSede=1 AND t_SediAziende.Attiva=1 GROUP BY IDazienda, DescrAzienda, Fornitore, PIVA, CodFiscale, FatturaElettronicaCD, URLAzienda, EmailAzienda, CodiceIscrCCIAA, ComuneCCIAA, DataIscrCCIAA, CodiceATECO, DescrCCNL, AnnoPresenzaRegione, TipoSettoreProd, AltroSettore, TipoDimensione, TipoFormaGiuridica, DescrFondoInterprof, TipoAssociazioneImprenditoriale, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, TelSedeAz_2, FaxSedeAz, EmailSedeAz, t_Aziende.Attiva, DocValutazioneRischi, RSPP, MedicoCompetente, AddettoIncendioSoccorso, PianoEvacuazione ORDER BY DescrAzienda ";
PerseoNET/frmAziende.cs:				string origineDati = "SELECT (t_Aziende.IDazienda) AS PKAzienda, DescrAzienda, (CASE WHEN PIVA IS NOT NULL THEN PIVA ELSE CodFiscale END) AS PIVA_CF, TipoFormaGiuridica, TipoSettoreProd, CodiceATECO, TipoDimensione, TipoSedeAzienda, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, TelSedeAz_1, TelSedeAz_2, FaxSedeAz, EmailSedeAz, PosizioneINAIL, (Cognome + ' ' + Nome) AS Referente, TelRef_1, TelRef_2, FaxRefAz, EmailRefAz, RapprLegale, ResponsabileSede, TutorStage, TutorApprendista, TipoRuoloAz, DescrRuolo, DescrEsperienzaProf, (CASE WHEN TutorStage=1 THEN TipoPosizioneTutorAzienda ELSE NULL END) AS PosizioneContrattualeTutor FROM t_SediAziende LEFT OUTER JOIN t_ReferentiAziende LEFT OUTER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz ON t_SediAziende.IDsedeaz = t_ReferentiAziende.FK_SedeAzienda LEFT OUTER JOIN t_TipoSedeAzienda ON t_SediAziende.FK_TipoSede = t_TipoSedeAzienda.IDtsedeaz RIGHT OUTER JOIN t_TipoFormaGiuridica INNER JOIN t_Aziende ON t_TipoFormaGiuridica.IDtformag = t_Aziende.FK_TipoForma ON t_SediAziende.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod LEFT OUTER JOIN t_TipoDimensioneAzienda ON t_Aziende.FK_TipoDimensione = t_TipoDimensioneAzienda.IDtdimaz LEFT OUTER JOIN t_TipoPosizioneTutorAzienda ON t_ReferentiAziende.FK_TipoPosizioneTutor = t_TipoPosizioneTutorAzienda.IDttutoraz " + FiltroAziende() + " ORDER BY DescrAzienda, FK_TipoSede, (Cognome + ' ' + Nome) ";
PerseoNET/frmAziende.cs:				string origineDati = "SELECT t_Aziende.DescrAzienda, ReferentePrimoContatto, NoteContatto, ComSedeAz, ProvSedeAz, TelSedeAz_1, EmailSedeAz, TipoAreaProduttiva, TipoSettoreProd, DescrMansione, NoteInteresse, DispStage, Formazione, TipoContratto,MezzoProprio, TipoDistanza,  NoteVincoli, NumeroAssunzioni, NoteContattoAzienda, Intervistatore, t_InteressiLavorativi.DataModifica FROM t_Aziende INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda INNER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod INNER JOIN t_InteressiLavorativi ON t_Aziende.IDazienda = t_InteressiLavorativi.FK_Azienda LEFT OUTER JOIN t_TipoDistanzaLav ON t_InteressiLavorativi.FK_Distanza = t_TipoDistanzaLav.IDtdist LEFT OUTER JOIN t_TipoContratto ON t_InteressiLavorativi.FK_TipoContratto = t_TipoContratto.IDcontr LEFT OUTER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag " + FiltroAziende() + " AND FK_TipoSede=1 ORDER BY DescrAzienda, t_InteressiLavorativi.DataModifica ";
PerseoNET/frmAziende.cs:				string origineDati = "SELECT t_Aziende.DescrAzienda, ReferentePrimoContatto, NoteContatto, ComSedeAz, ProvSedeAz, TelSedeAz_1, EmailSedeAz, TipoAreaProduttiva, TipoSettoreProd, DescrInteresse, NoteInteresse, TipoSettoreInt, TipoFormativoInterno, TipoCertificazione, LivelloFormazione, NumeroDipendenti, MinOreFormazione, MaxOreFormazione, OrarioSvolgimento, NoteContattoAzienda, Intervistatore, t_InteressiFormativi.DataModifica FROM t_Aziende INNER JOIN t_InteressiFormativi ON t_Aziende.IDazienda = t_InteressiFormativi.FK_Azienda INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda LEFT OUTER JOIN t_TipoCertificazione ON t_InteressiFormativi.FK_TipoCertificazione = t_TipoCertificazione.IDtcertificazione LEFT OUTER JOIN t_TipoFormativoInterno ON t_InteressiFormativi.FK_TipoFormativo = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_TipoSettoreInterno ON t_InteressiFormativi.FK_SettoreInterno = t_TipoSettoreInterno.IDtsettin LEFT OUTER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag LEFT OUTER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod " + FiltroAziende() + " AND FK_TipoSede=1 ORDER BY DescrAzienda, t_InteressiFormativi.DataModifica ";
PerseoNET/frmAziende.cs:				string origineDati = "SELECT DescrAzienda, TipoSettoreProd, IndirizzoAzienda, ComuneAzienda, ProvAzienda, CAPazienda, TipoContrattoCollettivo, DescrATECO, CodiceATECO, TutorAziendale, NoteContatti, (Cognome + ' ' + Nome) AS Studente, t_Utenti.CodFiscale, IndirResidenza, ComResidenza, ProvResidenza, CAPresidenza, DataInizioRapp, DataFineRapp, DescrMansione, NoteAltro, DataInizioCIGM, DataFineCIGM FROM t_Utenti INNER JOIN t_EsperienzeLavoro ON t_Utenti.IDutente = t_EsperienzeLavoro.FK_Utente LEFT OUTER JOIN t_TipoSettoreProduttivo ON t_EsperienzeLavoro.FK_SettoreProduttivo = t_TipoSettoreProduttivo.IDtsetprod WHERE DescrAzienda IS NOT NULL AND FK_SedeAzienda IS NULL AND UtenteTest=0 ORDER BY DescrAzienda, (Cognome + ' ' + Nome) ";
PerseoNET/frmAziende.cs:					string origineDati = "SELECT IDtdimaz, TipoDimensione FROM t_TipoDimensioneAzienda ORDER BY IndDZ ";
PerseoNET/frmAziende.cs:							origineDati = "SELECT DescrAzienda, PIVA, CodFiscale, SettoreProduttivo, FormaGiuridica, TipoDimensione, DescrCCNL, CodiceATECO, NoteContatto, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, FaxSedeAz, EmailSedeAz, Cognome, Nome, TelRef_1, EmailRefAz, DataNascita, LuogoNascita, ProvNascita, NazNascita, CF_RapprLegale, Esito FROM t_CalendarioAttivita ";
PerseoNET/frmAziende.cs:							long num2 = VariabiliClassi.CmdSQL.ValoreChiavePrimariaRecord("SELECT IDtsetprod FROM t_TipoSettoreProduttivo WHERE TipoSettoreProd='ALTRI SETTORI' ", Variabili.pathLog);
PerseoNET/frmAziende.cs:							long num3 = VariabiliClassi.CmdSQL.ValoreChiavePrimariaRecord("SELECT IDtformag FROM t_TipoFormaGiuridica WHERE TipoFormaGiuridica='ALTRO' ", Variabili.pathLog);
PerseoNET/frmAziende.cs:							long value = VariabiliClassi.CmdSQL.ValoreChiavePrimariaRecord("SELECT IDtruoloaz FROM t_TipoRuoloAziendale WHERE TipoRuoloAz='ALTRO' ", Variabili.pathLog);
PerseoNET/frmAziende.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDazienda, DescrAzienda FROM t_Aziende WHERE PIVA='", clsTblDatiDR2.get_Campo((object)"PIVA")), "' "));
PerseoNET/frmAziende.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDazienda, DescrAzienda FROM t_Aziende WHERE CodFiscale='", clsTblDatiDR2.get_Campo((object)"CodFiscale")), "' "));
PerseoNET/frmAziende.cs:									num4 = VariabiliClassi.CmdSQL.ValoreChiavePrimariaRecord("SELECT IDtsetprod FROM t_TipoSettoreProduttivo WHERE TipoSettoreProd='" + FunzStringa.StringaSQL(Conversions.ToString(clsTblDatiDR2.get_Campo((object)"SettoreProduttivo"))) + "' ", Variabili.pathLog);
PerseoNET/frmAziende.cs:									num5 = VariabiliClassi.CmdSQL.ValoreChiavePrimariaRecord("SELECT IDtformag FROM t_TipoFormaGiuridica WHERE TipoFormaGiuridica='" + FunzStringa.StringaSQL(Conversions.ToString(clsTblDatiDR2.get_Campo((object)"FormaGiuridica"))) + "' ", Variabili.pathLog);
PerseoNET/frmAziende.cs:								origineDati = "SELECT IDazienda FROM t_Aziende WHERE ";
PerseoNET/frmAziende.cs:								origineDati = "SELECT IDsedeaz FROM t_SediAziende WHERE FK_Azienda=" + Conversions.ToString(num7);
PerseoNET/frmAziende.cs:				string vSQL = "SELECT IDconvenzione, FK_Azienda FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda WHERE IDconvenzione=" + txtCerca.Text + " AND FK_SedeFormativa " + Variabili.FiltroSedi;
PerseoNET/frmAziende.cs:					string vSQL = "SELECT t_SediAziende.FK_Azienda FROM t_ReferentiAziende INNER JOIN t_SediAziende ON t_ReferentiAziende.FK_SedeAzienda = t_SediAziende.IDsedeaz WHERE (Cognome + ' ' + Nome) LIKE '%" + FunzStringa.StringaSQL(txtCerca.Text) + "%' ";
PerseoNET/frmAziende.cs:				string vSQL = "SELECT IDconvazienda, FK_Azienda FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda WHERE IDconvazienda=" + txtCerca.Text + " AND FK_SedeFormativa " + Variabili.FiltroSedi;
PerseoNET/frmAziende.cs:								vSQL = "SELECT IDutente, (Cognome + ' ' + Nome) AS Studente, CodFiscale FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione " + text + "GROUP BY IDutente, Cognome, Nome, CodFiscale HAVING (Cognome + ' ' + Nome) LIKE '" + FunzStringa.StringaSQL(txtCerca.Text) + "%' ";
PerseoNET/frmAziende.cs:							vSQL = "SELECT IDutente FROM t_Utenti WHERE IDutente=" + Conversions.ToString(Conversions.ToLong(txtCerca.Text)) + " ";
PerseoNET/frmAziende.cs:							vSQL = "SELECT IDutente FROM t_Utenti WHERE CodFiscale='" + txtCerca.Text + "' ";
PerseoNET/frmAziende.cs:				vSQL = "SELECT IDedizione FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Utente " + VariabiliClassi.CmdSQL.StringaFiltroIN_DataTbl(0) + " AND FK_SedeEdizione " + text2 + " ";
PerseoNET/frmAziende.cs:				string origineDati = "SELECT t_Aziende.IDazienda, t_Aziende.DescrAzienda, t_TipoFormaGiuridica.TipoFormaGiuridica, t_Aziende.PIVA, t_Aziende.CodFiscale, t_Aziende.URLAzienda, t_SediAziende.IndirSedeAz, t_SediAziende.ComSedeAz, t_SediAziende.CAPSedeAZ, t_SediAziende.ProvSedeAz, t_SediAziende.TelSedeAz_1, t_SediAziende.TelSedeAz_2, t_SediAziende.FaxSedeAz, t_SediAziende.EmailSedeAz, t_Aziende.DataModifica, t_SediAziende.DataModifica AS DataModificaSede, 'F' AS TipoRecordFROM t_Aziende INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda INNER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag WHERE(t_SediAziende.FK_TipoSede = 1) And (t_Aziende.FK_ParFiscaleAttuale Is Not NULL) And (t_Aziende.AziendaTest = 0) And (t_SediAziende.DataModifica >= DateAdd(d, -21, GETDATE())) UNION SELECT t_Aziende.IDazienda, t_Aziende.DescrAzienda, t_TipoFormaGiuridica.TipoFormaGiuridica, t_Aziende.PIVA, t_Aziende.CodFiscale, t_Aziende.URLAzienda, t_SediAziende.IndirSedeAz,  t_SediAziende.ComSedeAz, t_SediAziende.CAPSedeAZ, t_SediAziende.ProvSedeAz, t_SediAziende.TelSedeAz_1, t_SediAziende.TelSedeAz_2, t_SediAziende.FaxSedeAz,  t_SediAziende.EmailSedeAz, t_Aziende.DataModifica, t_SediAziende.DataModifica AS DataModificaSede, 'C' AS TipoRecord FROM t_Aziende INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda INNER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag INNER JOIN t_IscrizioniVersamenti ON t_Aziende.IDazienda = t_IscrizioniVersamenti.FK_Azienda WHERE (t_IscrizioniVersamenti.DataModifica >= DATEADD(d, - 21, GETDATE())) AND (t_Aziende.AziendaTest = 0) AND (t_SediAziende.FK_TipoSede = 1) AND (t_SediAziende.Attiva = 1) UNION SELECT t_Aziende.IDazienda, t_Aziende.DescrAzienda, t_TipoFormaGiuridica.TipoFormaGiuridica, t_Aziende.PIVA, t_Aziende.CodFiscale, t_Aziende.URLAzienda, t_SediAziende.IndirSedeAz,  t_SediAziende.ComSedeAz, t_SediAziende.CAPSedeAZ, t_SediAziende.ProvSedeAz, t_SediAziende.TelSedeAz_1, t_SediAziende.TelSedeAz_2, t_SediAziende.FaxSedeAz,  t_SediAziende.EmailSedeAz, t_Aziende.DataModifica, t_SediAziende.DataModifica AS DataModificaSede, 'C' AS TipoRecord FROM t_Aziende INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda INNER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag INNER JOIN t_AziendeSediFormativeConvenzioni ON t_Aziende.IDazienda = t_AziendeSediFormativeConvenzioni.FK_Azienda INNER JOIN t_ConvenzioniStage ON t_AziendeSediFormativeConvenzioni.IDconvazienda = t_ConvenzioniStage.FK_ConvenzioneAzienda WHERE (t_Aziende.AziendaTest = 0) AND (t_SediAziende.FK_TipoSede = 1) AND (t_SediAziende.Attiva = 1) AND (t_ConvenzioniStage.DataModifica >= DATEADD(d, - 21, GETDATE())) AND  (t_ConvenzioniStage.StagePagamento = 1) ORDER BY DescrAzienda ";
PerseoNET/frmRegistroRecuperoStudente.cs:				string str = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE Attiva=True AND FK_TipoSede>=3 ";
PerseoNET/frmRegistroRecuperoStudente.cs:				str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, Studente FROM t_IscrittiEdizione WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "ORDER BY PosRegistro, Studente "));
PerseoNET/frmRegistroRecuperoStudente.cs:				str = "SELECT t_AssenzeAttivita.IDassenza, (t_AssenzeAttivita.FK_Iscrizione) AS IDiscrizione, FK_EdizioneRecupero, DataAttivita, OraInizio, OraFine, Minuti, (CASE WHEN DescrBreveArgomento IS NOT NULL THEN DescrBreveArgomento ELSE TipoAttivita END) AS Attivita, DataRecupero, (CASE WHEN FK_EdizioneRecupero IS NULL THEN SedeRecupero ELSE (CodiceEdizione + ' - ' + SiglaSede) END) AS SedeRecupero, OraInizioRecupero, OraFineRecupero, FK_TipoArgomento FROM t_TipoArgomento RIGHT OUTER JOIN t_ArgomentiModuli ON t_TipoArgomento.IDtarg = t_ArgomentiModuli.FK_TipoArgomento RIGHT OUTER JOIN t_AttivitaEdizioni INNER JOIN t_AssenzeAttivita INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico ON t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_ArgomentiModuli.IDargomento = t_IncarichiEdizioni.FK_Argomento LEFT OUTER JOIN t_PianoServizi ON t_AssenzeAttivita.FK_EdizioneRecupero = t_PianoServizi.IDedizione LEFT OUTER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede ";
PerseoNET/frmRegistroRecuperoStudente.cs:				str = "SELECT t_PianoServizi.IDedizione, SiglaSede, DescrEdizione, CodiceEdizione, TipoAnnualita, TipoFormativoInterno, DataAvvio, DataFine, Durata FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint ";
PerseoNET/frmRegistroRecuperoStudente.cs:								string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtarg, TipoArgomento FROM t_TipoArgomento WHERE IDtarg=", tblCal.get_Campo((object)"FK_TipoArgomento", vFlagUpdateDB: false)), " "));
PerseoNET/frmRegistroRecuperoStudente.cs:				string origineDati = "SELECT IDassenza, SedeRecupero, DataRecupero, OraInizioRecupero, OraFineRecupero, FK_EdizioneRecupero, DataRec, DataModifica FROM t_AssenzeAttivita WHERE IDassenza=" + Conversions.ToString(vIDatt);
PerseoNET/frmRegistroRecuperoStudente.cs:						string text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, DataAttivita, OraInizio, OraFine, (CASE WHEN DescrBreveArgomento IS NOT NULL THEN DescrBreveArgomento ELSE TipoAttivita END) AS DescrBreveArgomento, FK_TipoArgomento FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg WHERE t_IncarichiEdizioni.FK_Edizione=", tblEdizioni.get_Campo((object)"IDedizione", vFlagUpdateDB: false)), " AND TipoAttivita IN('DOCENZA','LARSA') "));
PerseoNET/frmRegistroRecuperoStudente.cs:						string text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, DataAttivita, OraInizio, OraFine, (CASE WHEN DescrBreveArgomento IS NOT NULL THEN DescrBreveArgomento ELSE TipoAttivita END) AS DescrBreveArgomento, FK_TipoArgomento FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg WHERE t_IncarichiEdizioni.FK_Edizione=", tblEdizioni.get_Campo((object)"IDedizione", vFlagUpdateDB: false)), " AND TipoAttivita IN('DOCENZA','LARSA') "));
PerseoNET/frmRegistroRecuperoStudente.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, FK_EdizioneRecupero, (Cognome + ' ' + Nome) AS Studente, CodiceEdizione, DescrEdizione, SiglaSede, DataAvvio, DataFine, Durata, DataAttivita, OraInizio, OraFine, DescrArgomento, DataRecupero, OraInizioRecupero, OraFineRecupero, (NULL) AS SiglaSedeRecupero, SedeRecupero FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AssenzeAttivita ON t_Iscrizioni.IDiscrizione = t_AssenzeAttivita.FK_Iscrizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDedizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " AND IDiscrizione="), ComboStudente.PKSelezionatoCombo), " "), "AND DataRecupero IS NOT NULL "), "ORDER BY t_PianoServizi.DataAvvio, t_PianoServizi.CodiceEdizione, (Cognome + ' ' + Nome), DataRecupero "));
PerseoNET/frmRegistroRecuperoStudente.cs:				clsTblDatiDR2.OrigineDati = "SELECT IDedizione, CodiceEdizione, DescrEdizione, SiglaSede FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDedizione " + clsTblDatiDR.StringaFiltroIN("FK_EdizioneRecupero");
PerseoNET/frmDettRichiestaOrdine.cs:				string origineDati = "SELECT IDordine, FK_TipoOrdineSpesa, FK_Sede, FK_Fornitore, DescrRichiedente, DataRichiesta, NumeroRichiesta, NumeroOrdLab, DescrOrdine, Sconto, DataInizioContratto, DataFineContratto, DescrCausale, RichiestaPronta, Autorizzato, DataAutorizzazione, Respinto, NoteRespinto, AutorizzatoSCO, DataAutorizzazioneSCO, RespintoSCO, NoteRespintoSCO, DescrConsegna, NoteScadenzaPagamenti, FK_TempoPagamento, FK_ModoPagamento, DataOrdineEvaso, Provvisorio, ModalitaAutorizzazione, SospesoRevisionare, DataRec, DataModifica, Bloccato FROM t_RichiesteOrdini WHERE IDordine=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettRichiestaOrdine.cs:				origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " AND (FK_TipoSede=3 or FK_TipoSede=1) AND Attiva=True ORDER BY IIf(FK_TipoSede=3 AND Attiva=True,1,IIf(FK_TipoSede=1,2,3)), SiglaSede ";
PerseoNET/frmDettRichiestaOrdine.cs:				origineDati = "SELECT IDtmodopag, TipoModoPagaOrdine FROM t_TipoModoPagamentoOrdine WHERE Obsoleto=0 ORDER BY IndTMP, TipoModoPagaOrdine ";
PerseoNET/frmDettRichiestaOrdine.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtipospesa, TipoOrdine, TipoSpesa FROM t_TipoOrdineSpesa WHERE IDtipospesa=", FormOrd.get_Campo((object)"FK_TipoOrdineSpesa")));
PerseoNET/frmDettRichiestaOrdine.cs:				origineDati = "SELECT IDtipospesa, TipoOrdine, TipoSpesa, PreventiviMIN, TipoSpesaObsoleto, Contratto FROM t_TipoOrdineSpesa ";
PerseoNET/frmDettRichiestaOrdine.cs:				origineDati = "SELECT t_RichiesteOrdiniPreventivi.IDpreventivo, FK_Fornitore, DataPreventivo, CodicePreventivo, (CASE WHEN FK_Fornitore IS NULL THEN DescrFornitore ELSE (SELECT (DescrAzienda + ' - ' + ComSedeAz + ' (' + ProvSedeAz + ')') FROM t_Aziende INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda WHERE FK_TipoSede=1 AND IDazienda=FK_Fornitore) END) AS DescrFornitore, NotePreventivo, Imponibile, IVA, NomeFile, (CASE WHEN NomeFile IS NULL THEN 0 ELSE 1 END) AS Trasmesso FROM t_RichiesteOrdiniPreventivi WHERE FK_RichiestaOrdine=" + Conversions.ToString(FormOrd.ChiavePrimaria) + " ORDER BY DataPreventivo ";
PerseoNET/frmDettRichiestaOrdine.cs:						string origineDati = "SELECT t_RichiesteOrdiniPreventivi.IDpreventivo, FK_Fornitore, DataPreventivo, CodicePreventivo, (CASE WHEN FK_Fornitore IS NULL THEN DescrFornitore ELSE (SELECT (DescrAzienda + ' - ' + ComSedeAz + ' (' + ProvSedeAz + ')') FROM t_Aziende INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda WHERE FK_TipoSede=1 AND IDazienda=FK_Fornitore) END) AS DescrFornitore, NotePreventivo, Imponibile, IVA, NomeFile, (CASE WHEN NomeFile IS NULL THEN 0 ELSE 1 END) AS Trasmesso FROM t_RichiesteOrdiniPreventivi WHERE FK_RichiestaOrdine=" + Conversions.ToString(FormOrd.ChiavePrimaria) + " ORDER BY DataPreventivo ";
PerseoNET/frmDettRichiestaOrdine.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT MAX(NumeroRichiesta) AS MaxNR FROM t_RichiesteOrdini WHERE FK_Sede=", FormOrd.get_ValoreSelezioneCombo(cmbFK_Sede)), " "), "AND DataRichiesta>='"), text), "' AND DataRichiesta<='"), text2), "' "));
PerseoNET/frmDettRichiestaOrdine.cs:								origineDati = "SELECT MAX(NumeroOrdLab) FROM t_RichiesteOrdini WHERE DataRichiesta>='" + text + "' AND DataRichiesta<='" + text2 + "' AND DataRichiesta<='" + text2 + "' ";
PerseoNET/frmDettRichiestaOrdine.cs:										string origineDati = "SELECT t_RichiesteOrdiniProgetti.IDordprog, IDprogetto, DescrProgetto, CodiceProgetto, CodiceCIG, CodiceCUP, DataAvvioProg, DataFineProg FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=" + Conversions.ToString(FormOrd.ChiavePrimaria) + " ORDER BY DataAvvioProg, CodiceProgetto ";
PerseoNET/frmDettRichiestaOrdine.cs:										origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Progetti.IDprogetto, SiglaSede, DescrProgetto, CodiceProgetto, TipoProgetto, DataAvvioProg, DataFineProg, CodiceCIG, CodiceCUP, (SELECT COUNT(IDedizione) FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione WHERE FK_Progetto=IDprogetto AND ModelloEdizione=0) AS NumED FROM t_Progetti INNER JOIN t_Sedi ON t_Progetti.FK_SedeProgetto = t_Sedi.IDsede LEFT OUTER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto WHERE ProgettoAttivo=1 " + text + "AND DataFineProg>=" + FunzStringa.StrDataSQL(txtDataRichiesta.Text, FlagSqlServer: true) + " AND (SELECT COUNT(IDedizione) FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione WHERE FK_Progetto=IDprogetto AND ModelloEdizione=0 AND FK_SedeEdizione=", FormOrd.get_ValoreSelezioneCombo(cmbFK_Sede)), " "), "AND DataFine>="), FunzStringa.StrDataSQL(Variabili.Annualita.GeneraStringaAvvioAnnoAmministrativo(Conversions.ToDate(txtDataRichiesta.Text)), FlagSqlServer: true)), ")>0 "), "ORDER BY SiglaSede, CodiceProgetto "));
PerseoNET/frmDettRichiestaOrdine.cs:										string origineDati = "SELECT t_RichiesteOrdiniRighe.IDrigaord, FK_RichiestaOrdine, FK_UnitaMisura, IndRiga, DescrRigaOrdine, CodiceFornitore, QuantRiga, CifreDecimali, SiglaUnitaMisura, CostoUnitario, IVAunitario, Omaggio, IntestazioneGruppo FROM t_RichiesteOrdiniRighe LEFT OUTER JOIN t_TipoUnitaMisura ON t_RichiesteOrdiniRighe.FK_UnitaMisura = t_TipoUnitaMisura.IDtunitamis WHERE FK_RichiestaOrdine=" + Conversions.ToString(FormOrd.ChiavePrimaria) + " ORDER BY IndRiga, IDrigaord ";
PerseoNET/frmDettRichiestaOrdine.cs:										origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DescrRigaOrdine, CodiceFornitore, SiglaUnitaMisura, MAX(CostoUnitario) AS MaxCostoUnitario, FK_UnitaMisura FROM t_RichiesteOrdiniRighe INNER JOIN t_RichiesteOrdini ON t_RichiesteOrdiniRighe.FK_RichiestaOrdine = t_RichiesteOrdini.IDordine INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa LEFT OUTER JOIN t_TipoUnitaMisura ON t_RichiesteOrdiniRighe.FK_UnitaMisura = t_TipoUnitaMisura.IDtunitamis WHERE Prodotto=1 AND IDordine<>" + Conversions.ToString(FormOrd.ChiavePrimaria) + " GROUP BY FK_Fornitore, FK_UnitaMisura, DescrRigaOrdine, SiglaUnitaMisura, CodiceFornitore HAVING FK_Fornitore=", FormOrd.get_Campo((object)"FK_Fornitore")), " "), "ORDER BY DescrRigaOrdine, CodiceFornitore "));
PerseoNET/frmDettRichiestaOrdine.cs:										string origineDati = "SELECT IDrigaord, FK_RichiestaOrdine, IndRiga, DescrRigaOrdine, SiglaUnitaMisura, CifreDecimali, QuantRiga, (CASE WHEN SUM(QuantConsegnata) IS NULL THEN 0 ELSE SUM(QuantConsegnata) END) AS TotConsegnato, (QuantRiga-(CASE WHEN SUM(QuantConsegnata) IS NULL THEN 0 ELSE SUM(QuantConsegnata) END)) AS Residuo FROM t_RichiesteOrdiniRighe LEFT OUTER JOIN t_TipoUnitaMisura ON t_RichiesteOrdiniRighe.FK_UnitaMisura = t_TipoUnitaMisura.IDtunitamis LEFT OUTER JOIN t_RichiesteOrdiniConsegne ON t_RichiesteOrdiniRighe.IDrigaord = t_RichiesteOrdiniConsegne.FK_RigaOrdine GROUP BY IDrigaord, FK_RichiestaOrdine, DescrRigaOrdine, IndRiga, TipoUnitaMisura, CifreDecimali, QuantRiga, SiglaUnitaMisura HAVING FK_RichiestaOrdine=" + Conversions.ToString(FormOrd.ChiavePrimaria) + " ORDER BY IndRiga, IDrigaord ";
PerseoNET/frmDettRichiestaOrdine.cs:										origineDati = "SELECT t_RichiesteOrdiniConsegne.IDconsegna, IndRiga, DescrRigaOrdine, DescrRicevente, DataConsegna, SiglaUnitaMisura, CifreDecimali, QuantConsegnata, RinnovoContratto, ServizioFornito FROM t_RichiesteOrdiniRighe LEFT OUTER JOIN t_TipoUnitaMisura ON t_RichiesteOrdiniRighe.FK_UnitaMisura = t_TipoUnitaMisura.IDtunitamis INNER JOIN t_RichiesteOrdiniConsegne ON t_RichiesteOrdiniRighe.IDrigaord = t_RichiesteOrdiniConsegne.FK_RigaOrdine WHERE FK_RichiestaOrdine=" + Conversions.ToString(FormOrd.ChiavePrimaria) + " ORDER BY DataConsegna, IDrigaord ";
PerseoNET/frmDettRichiestaOrdine.cs:				string origineDati = "SELECT IDrigaord, FK_RichiestaOrdine, FK_UnitaMisura, IndRiga, DescrRigaOrdine, QuantRiga, CostoUnitario, IVAunitario, CodiceFornitore, Omaggio, DataRec, DataModifica FROM t_RichiesteOrdiniRighe WHERE IDrigaord=" + Conversions.ToString(vID);
PerseoNET/frmDettRichiestaOrdine.cs:				origineDati = "SELECT IDtunitamis, SiglaUnitaMisura FROM t_TipoUnitaMisura WHERE Obsoleto=False ORDER BY IndUM";
PerseoNET/frmDettRichiestaOrdine.cs:					string vSQL = "SELECT IDtunitamis, CifreDecimali FROM t_TipoUnitaMisura WHERE IDtunitamis=" + Conversions.ToString(Conversions.ToLong(FormDett.get_ValoreSelezioneCombo(cmbFK_UnitaMisura)));
PerseoNET/frmDettRichiestaOrdine.cs:						string origineDati = "SELECT IndRiga, DescrRigaOrdine, CodiceFornitore, QuantRiga, SiglaUnitaMisura, CostoUnitario, IVAunitario FROM t_RichiesteOrdiniRighe ";
PerseoNET/frmDettRichiestaOrdine.cs:				string origineDati = "SELECT IDpreventivo, FK_RichiestaOrdine, FK_Fornitore, DescrFornitore, DataPreventivo, CodicePreventivo, Imponibile, IVA, NotePreventivo, DataRec, DataModifica FROM t_RichiesteOrdiniPreventivi WHERE IDpreventivo=" + Conversions.ToString(vID);
PerseoNET/frmCalendarioAvvioFinale.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, (Cognome + ' ' +  Nome) AS Studente FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " ORDER BY (Cognome + ' ' +  Nome) "));
PerseoNET/frmCalendarioAvvioFinale.cs:				origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CalendarioAvvioFinale.IDcalstage, FK_Edizione, FK_Iscrizione, DataDAL, DataAL, CalendarioStage, IngressoM, UscitaM, IngressoP, UscitaP, Lun, Mar, Mer, Gio, Ven, Sab, Dom FROM t_CalendarioAvvioFinale WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY DataDAL, IngressoM "));
PerseoNET/frmCalendarioAvvioFinale.cs:				origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_DateEscluse.IDesclusa, DateEscluseDAL, DateEscluseAL, Aula, Stage FROM  t_DateEscluse WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY DateEscluseDAL "));
PerseoNET/frmCalendarioAvvioFinale.cs:			string origineDati = "SELECT IDcalstage, FK_Edizione, FK_Iscrizione, DataDAL, DataAL, CalendarioStage, IngressoM, UscitaM, IngressoP, UscitaP, Lun, Mar, Mer, Gio, Ven, Sab, Dom, Note, DataRec, DataModifica FROM t_CalendarioAvvioFinale WHERE IDcalstage=" + Conversions.ToString(vID);
PerseoNET/frmCalendarioAvvioFinale.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CalendarioAvvioFinale.IDcalstage, FK_Edizione, FK_Iscrizione, DataDAL, DataAL, CalendarioStage, IngressoM, UscitaM, IngressoP, UscitaP, Dom, Lun, Mar, Mer, Gio, Ven, Sab, Note FROM t_CalendarioAvvioFinale WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY DataDAL, DataAL "));
PerseoNET/frmCalendarioAvvioFinale.cs:					origineDati = "SELECT TipoAttivita, DataAttivita, Dalle, Alle, OrePreviste, Note FROM t_CalendarioAvvioFinale ";
PerseoNET/frmCalendarioAvvioFinale.cs:					origineDati = "SELECT TipoAttivita, DataAttivita, Dalle, Alle, OrePreviste, Note FROM t_CalendarioAvvioFinale ";
PerseoNET/frmCalendarioAvvioFinale.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject("INSERT INTO t_CalendarioAvvioFinale(FK_Edizione, FK_Iscrizione, DataDAL, DataAL, CalendarioStage,IngressoM, UscitaM, Lun, Mar, Mer, Gio, Ven, Sab, Dom) SELECT FK_Edizione, FK_Iscrizione, DataDAL, DataAL, CalendarioStage, IngressoP, UscitaP, Lun, Mar, Mer, Gio, Ven, Sab, Dom FROM t_CalendarioAvvioFinale WHERE IDcalstage=", tblCal.get_Campo((object)"IDcalstage", vFlagUpdateDB: false)));
PerseoNET/frmAzioni.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico,(Cognome + ' ' + Nome) AS Collaboratore, DataPagatoInizio, DataPagatoFine, TotOrefatte, Reso FROM t_IncarichiEdizioni INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_IncarichiEdizioni.IDincarico = t_ProgettiPagamentiCompensiOneri.IDincarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY t_IncarichiEdizioni.IDincarico, DataPagatoInizio "));
PerseoNET/frmAzioni.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento, DataRichiestaInizio, DataRichiestaFine FROM t_ProgettiPagamenti WHERE FK_Progetto=", tblAzioni.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " "), "AND DataRichiestaInizio<="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoFine")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataRichiestaFine>="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoInizio")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND FK_Sede="), Variabili.Edizione.get_Campo((object)"FK_SedeEdizione")), " "));
PerseoNET/frmAzioni.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento, DataRichiestaInizio, DataRichiestaFine FROM t_ProgettiPagamenti WHERE FK_Progetto=", tblAzioni.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " "), "AND DataRichiestaInizio="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoInizio")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataRichiestaFine="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoFine")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND FK_Sede="), Variabili.Edizione.get_Campo((object)"FK_SedeEdizione")), " "));
PerseoNET/frmAzioni.cs:				string str = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " ";
PerseoNET/frmAzioni.cs:				str = "SELECT t_Azioni.IDazione, IDprogetto, FK_SedeAzione, SiglaSede, DescrAzione, CodiceAzione, (IDmwa + CHAR(10) + IDmwp) AS ProgAz, IDmwa, CodiceProgetto, TipoProgetto, DataAvvioAzione, DataFineAzione, AzioneAttiva, (SELECT COUNT(IDedizione) FROM t_PianoServizi WHERE FK_Azione=IDazione) AS NumED FROM t_Azioni INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto INNER JOIN t_Sedi ON t_Azioni.FK_SedeAzione = t_Sedi.IDsede " + text + "ORDER BY SiglaSede, TipoProgetto, CodiceProgetto, CodiceAzione ";
PerseoNET/frmCopiaDaEdizione.cs:					string text = "SELECT t_PianoServizi.IDedizione, FK_SedeEdizione, SiglaSede, DescrEdizione, CodiceEdizione, TipoAnnualita, TipoFormativoInterno, DataAvvio, DataFine, Durata, (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE FK_Edizione=IDedizione) AS NumeroIscritti FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint ";
PerseoNET/frmCopiaDaEdizione.cs:					text = "SELECT IDtformaint, TipoFormativoInterno FROM t_TipoFormativoInterno WHERE Obsoleto=0 ORDER BY TipoFormativoInterno";
PerseoNET/frmCopiaDaEdizione.cs:					text = "SELECT IDsede, SiglaSede FROM t_Sedi ";
PerseoNET/frmCopiaDaEdizione.cs:					text = "SELECT IDtanno, TipoAnnualita FROM t_TipoAnnualita ORDER BY TipoAnnualita";
PerseoNET/frmCopiaDaEdizione.cs:							text = "SELECT IDincarico, FK_Tipo, (Cognome + ' ' + Nome) AS StrDOC, DescrArgomento, DescrBreveArgomento, OreAssegnate FROM t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento  ";
PerseoNET/frmCopiaDaEdizione.cs:						string vSQL = "SELECT IDedizione FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione  WHERE IDincarico=" + Conversions.ToString(Conversions.ToLong(value)) + " ";
PerseoNET/frmCopiaDaEdizione.cs:									vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT FK_Progetto, FK_SedeEdizione FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE IDedizione=", tblED.get_Campo((object)"IDedizione", vFlagUpdateDB: false)));
PerseoNET/frmCopiaDaEdizione.cs:									vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDlettinc FROM t_IncarichiEdizioniContratti INNER JOIN t_DocentiLettereIncarichi ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiLettereIncarichi.FK_Contratto INNER JOIN  t_TipoAttivitaEdizione ON t_DocentiLettereIncarichi.FK_Attivita = t_TipoAttivitaEdizione.IDtattivita WHERE TipoAttivita='DOCENZA' AND FK_IncaricoEdizione=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND FK_Sede="), num3), " AND FK_Progetto="), num2), " AND DataGenerazione IS NOT NULL "));
PerseoNET/frmCopiaDaEdizione.cs:									vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT FK_Progetto, FK_SedeEdizione FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE IDedizione=", tblED.get_Campo((object)"IDedizione", vFlagUpdateDB: false)));
PerseoNET/frmCopiaDaEdizione.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, FK_Tipo, (Cognome + ' ' + Nome) AS StrDOC, DescrArgomento, DescrBreveArgomento, OreAssegnate FROM t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento  WHERE FK_Edizione=", tblED.get_Campo((object)"IDedizione", vFlagUpdateDB: false)), " AND FK_Tipo<>1 "), "ORDER BY DescrArgomento, (Cognome + ' ' + Nome) "));
PerseoNET/frmConfigurazioneFTP.cs:					string origineDati = "SELECT IDvers, ParPFAgg FROM zt_Versione";
PerseoNET/frmRegistrazionePagamentiSede.cs:				string origineDati = "SELECT t_ProgettiPagamenti.IDprogpagamento, IDprogetto, FK_Sede, (SELECT COUNT(IDedizione) FROM t_Azioni INNER JOIN t_PianoServizi ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE t_Azioni.FK_Progetto=IDprogetto AND PagaConsuntivoMese=1 AND FK_SedeEdizione=FK_Sede) AS NumeroConsMese, DescrProgetto, IDmwp, CodiceProgetto, CodiceCIG, CodiceCUP, SiglaSede, DataRichiestaInizio, DataRichiestaFine, DataPagamento, Assegni, MatricolaTracciatoAssegni, Anticipo, (0) Sospesi, (0) AS Selezione FROM t_ProgettiPagamenti INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto WHERE DataRichiestaFine<='" + text + "' AND DataPagamento IS NULL AND IDsede " + Variabili.FiltroSedi + " AND t_ProgettiPagamenti.Bloccato=0 ORDER BY SiglaSede, DescrProgetto, DataRichiestaFine ";
PerseoNET/frmRegistrazionePagamentiSede.cs:				origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " AND Attiva=True ORDER BY IIf(Attiva=False,999,IIf(FK_TipoSede=1,1,IIf(FK_TipoSede=3,2,IIf(FK_TipoSede=4,3,4)))), SiglaSede ";
PerseoNET/frmRegistrazionePagamentiSede.cs:						string origineDati = "SELECT IDdocente, FK_Azienda, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS DescrAzienda, (NULL) AS CodiceProgetto, (NULL) AS SiglaSede FROM t_Docenti ";
PerseoNET/frmRegistrazionePagamentiSede.cs:								origineDati = "SELECT t_Progetti.IDprogetto, IDsede, Idedizione, CodiceProgetto, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, DataAvvio, DataFine, Durata, SoloFunzioniAggiuntive, AllieviMIN, AllieviMAX, COUNT(IDiscrizione) AS NumeroIscritti, DataAggRegistro, ObbligoIscritti FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione GROUP BY t_Progetti.IDprogetto, IDsede, IDedizione, SoloFunzioniAggiuntive, CodiceProgetto, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, AllieviMIN, AllieviMAX, DataAvvio, DataFine, DataAggRegistro, ObbligoIscritti, Durata HAVING IDprogetto " + tblPag.StringaFiltroIN("IDprogetto") + " AND IDsede " + tblPag.StringaFiltroIN("FK_Sede") + " AND DataAvvio<" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " ORDER BY CodiceProgetto, SiglaSede, CodiceEdizione ";
PerseoNET/frmRegistrazionePagamentiSede.cs:					string text5 = (clsTblDatiDR.OrigineDati = "SELECT IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriRedditi, (0) AS AltriEnaip, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NULL GROUP BY IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa ORDER BY StrDOC ");
PerseoNET/frmRegistrazionePagamentiSede.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente, FK_Progetto, FK_SedeEdizione, FK_CodicePF, FK_Azienda, QuotaOraIncarico, (0) AS TotOreFatte, (0) AS TotOreFatteAltro, (0) AS Verificare FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE (ContrattoApprovato=1 AND DataFineContratto>='", tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' AND PagamentoIndividuale=0 AND IncaricoBloccato=0) "), "OR (ContrattoApprovato=1 AND DataProlungamento>'"), tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' AND PagamentoIndividuale=0 AND IncaricoBloccato=0) "), "GROUP BY t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente, FK_Progetto, FK_SedeEdizione, "), "FK_CodicePF, FK_Azienda, QuotaOraIncarico "), "HAVING FK_Progetto="), tblPag.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " AND FK_SedeEdizione="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "ORDER BY t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente "));
PerseoNET/frmRegistrazionePagamentiSede.cs:					origineDati = "SELECT IDincarico, SUM(Minuti) AS TotaleMinuti FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE DataSvolgimento>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico " + rsPaga.StringaFiltroIN("IDincarico");
PerseoNET/frmRegistrazionePagamentiSede.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiPagamenti.IDprogpagamento, FK_Progetto, t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, Autorizzazione, Sospeso, DataStampaAutorizzazione, (Cognome + ' ' + Nome) AS StrDOC, DescrAzienda FROM t_Aziende RIGHT OUTER JOIN t_DocentiFatture ON t_Aziende.IDazienda = t_DocentiFatture.FK_Azienda RIGHT OUTER JOIN t_ProgettiPagamenti INNER JOIN t_ProgettiPagamentiFatture ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiFatture.FK_ProgPagamento INNER JOIN t_Docenti ON t_ProgettiPagamentiFatture.FK_Docente = t_Docenti.IDdocente ON t_DocentiFatture.IDfattura = t_ProgettiPagamentiFatture.FK_Fattura WHERE (FK_Progetto=", tblPag.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " AND DataRichiestaInizio='"), tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' "), "AND DataRichiestaFine='"), tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "' AND DataPagamento IS NULL AND Autorizzazione=1 AND Sospeso=0 "), right), ") "), "OR (FK_Progetto="), tblPag.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " AND DataRichiestaInizio='"), tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' "), "AND DataRichiestaFine='"), tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "' AND DataPagamento IS NULL AND Autorizzazione=0 AND Sospeso=1 "), right), ") "), "ORDER BY t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda "));
PerseoNET/frmRegistrazionePagamentiSede.cs:												origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, SUM(TotOreFatte) AS TotaleOre FROM t_ProgettiPagamentiCompensiOneri WHERE DataPagatoInizio<" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true) + " AND DataPagatoFine>" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true) + " AND Reso=0 AND IDincarico=", rsPaga.get_Campo((object)"IDincarico")), " "), "GROUP BY IDincarico "));
PerseoNET/frmRegistrazionePagamentiSede.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogfatt FROM t_ProgettiPagamentiFatture WHERE FK_ProgPagamento=", tblPag.get_Campo((object)"IDprogpagamento", vFlagUpdateDB: false)), " AND Autorizzazione=1 AND Sospeso=0 "));
PerseoNET/frmRegistrazionePagamentiSede.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente, FK_Progetto, FK_SedeEdizione, FK_CodicePF, FK_Azienda, QuotaOraIncarico, (SELECT SUM(OreSvolte) FROM t_IncarichiEdizioniOrePerMese WHERE FK_Incarico=IDincarico AND DataSvolteDAL>='", tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' AND DataSvolteAL<='"), tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "') AS TotOreFatte, "), "(0) AS TotOreFatteAltro, (0) AS Verificare "), "FROM t_IncarichiEdizioni INNER JOIN "), "t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN "), "t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN "), "t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN "), "t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN "), "t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto "), "WHERE (DataFineContratto>='"), tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' "), "AND DataInizioContratto<='"), tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "' AND PagamentoIndividuale=0 AND ContrattoApprovato=1) OR (DataProlungamento IS NOT NULL AND DataProlungamento>='"), tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' AND DataInizioContratto<='"), tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "' AND PagamentoIndividuale=0 AND ContrattoApprovato=1) "), "GROUP BY t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente, FK_Progetto, FK_SedeEdizione, "), "FK_CodicePF, FK_Azienda, QuotaOraIncarico "), "HAVING FK_Progetto="), tblPag.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " AND FK_SedeEdizione="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "ORDER BY t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente "));
PerseoNET/frmRegistrazionePagamentiSede.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiPagamenti.IDprogpagamento, FK_Progetto, t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, Autorizzazione, Sospeso, DataStampaAutorizzazione, (Cognome + ' ' + Nome) AS StrDOC, DescrAzienda FROM t_Aziende RIGHT OUTER JOIN t_DocentiFatture ON t_Aziende.IDazienda = t_DocentiFatture.FK_Azienda RIGHT OUTER JOIN t_ProgettiPagamenti INNER JOIN t_ProgettiPagamentiFatture ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiFatture.FK_ProgPagamento INNER JOIN t_Docenti ON t_ProgettiPagamentiFatture.FK_Docente = t_Docenti.IDdocente ON t_DocentiFatture.IDfattura = t_ProgettiPagamentiFatture.FK_Fattura WHERE FK_Progetto=", tblPag.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " AND DataRichiestaInizio='"), tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' "), "AND DataRichiestaFine='"), tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "' AND DataPagamento IS NULL AND (Autorizzazione=1 OR Sospeso=1) "), "ORDER BY t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda "));
PerseoNET/frmRegistrazionePagamentiSede.cs:					string origineDati = "SELECT IDdocente, (NULL) AS StrDOC, (NULL) AS CodiceProgetto, (NULL) AS SiglaSede FROM t_Docenti ";
PerseoNET/frmRegistrazionePagamentiSede.cs:					origineDati = "SELECT t_PianoServizi.IDedizione, FK_Progetto, CodiceEdizione, DataAvvio, DataFine, MezzaOra, t_PianoServizi.Bloccato FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE FK_Progetto " + text + " AND FK_SedeEdizione " + text4 + " AND MezzaOra=1 ";
PerseoNET/frmRegistrazionePagamentiSede.cs:					origineDati = "SELECT t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, (FK_CodicePF) AS FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE t_Aziende.PIVA END) AS StrFiscale, DescrParFiscale, MAX(TipoAliquotaPrevSepa) AS TipoAliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, (0) AS TotOreFatte, QuotaOraIncarico, " + vStrMesi + "(0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (0) AS Autorizzazione, (NULL) AS DataAutorizzazione, (NULL) AS DataPagatoInizio, (NULL) AS DataPagatoFine, (NULL) AS DataPagamento, (0) AS Assegni, (NULL) AS MatricolaTracciatoAssegni, (NULL) AS StrFattura, CodiceTributo FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_DocentiContrattiEsterni INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto LEFT OUTER JOIN t_TipoAliquotaPrevidenzaSeparata ON t_DocentiContrattiEsterni.FK_AliquotaPrevSepa = t_TipoAliquotaPrevidenzaSeparata.IDtaliquosepa LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE ContrattoApprovato=1 AND PagamentoIndividuale=0 AND IncaricoBloccato=0 AND IncaricoGenericoGratuito=0 AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE DataProlungamento END)>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " GROUP BY t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, FK_CodicePF, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, Cognome, Nome, t_Docenti.CodFiscale, t_Aziende.PIVA, DescrParFiscale, CodiceTributo, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, QuotaOraIncarico, IndTA HAVING IDincarico " + Variabili.AutorizzaPagamenti.StrIncarichiFiltroIN + " AND QuotaOraIncarico>0 ORDER BY (Cognome + ' ' + Nome), FK_Azienda, IndTA, TipoAttivita, IDincarico ";
PerseoNET/frmRegistrazionePagamentiSede.cs:					origineDati = "SELECT t_IncarichiEdizioni.IDincarico, (FK_Docente) AS IDdocente, (FK_Edizione) AS IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE t_IncarichiEdizioni.IDincarico " + rsPaga.StringaFiltroIN("IDincarico") + " AND DataAttivita>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " GROUP BY IDincarico, FK_Docente, FK_Edizione, MONTH(DataAttivita), YEAR(DataAttivita) ORDER BY FK_Docente, IDincarico ";
PerseoNET/frmRegistrazionePagamentiSede.cs:					origineDati = "SELECT t_IncarichiEdizioni.IDincarico, (FK_Docente) AS IDdocente, (FK_Edizione) AS IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_IncarichiEdizioni INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE t_IncarichiEdizioni.IDincarico " + rsPaga.StringaFiltroIN("IDincarico") + " AND DataAttivita>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " GROUP BY IDincarico, FK_Docente, FK_Edizione, MONTH(DataAttivita), YEAR(DataAttivita) ORDER BY FK_Docente, IDincarico ";
PerseoNET/frmRegistrazionePagamentiSede.cs:					origineDati = "SELECT IDincarico, TotOreFatte, DataPagatoInizio, DataPagatoFine, Anticipo FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE Anticipo=1 ORDER BY IDincarico, DataRichiestaFine ";
PerseoNET/frmRegistrazionePagamentiSede.cs:					origineDati = "SELECT t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, (FK_CodicePF) AS FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE t_Aziende.PIVA END) AS StrFiscale, DescrParFiscale, TipoAliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, (0) AS TotOreFatte, QuotaOraIncarico, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (0) AS Autorizzazione, (NULL) AS DataAutorizzazione, (NULL) AS DataPagatoInizio, (NULL) AS DataPagatoFine, (NULL) AS DataPagamento, (0) AS Assegni, (NULL) AS MatricolaTracciatoAssegni, (NULL) AS StrFattura, CodiceTributo FROM t_Pagamenti ";
PerseoNET/frmRegistrazionePagamentiSede.cs:					origineDati = (clsTblDatiDR3.DestinazioneDati = "SELECT IDdocente, IDincarico, FK_Progetto, IDedizione, FK_SedeEdizione, FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, AltriEnaip, Autorizzazione, DataAutorizzazione, DataPagatoInizio, DataPagatoFine, DataPagamento, Assegni, MatricolaTracciatoAssegni, StrFattura, CodiceTributo FROM t_Pagamenti ");
PerseoNET/frmRegistrazionePagamentiSede.cs:					origineDati = "SELECT IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, MAX(FK_AliquotaPrevSepa) AS FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriRedditi, (0) AS AltriEnaip, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NULL GROUP BY IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, DescrAzienda, CodiceTributo ORDER BY StrDOC ";
PerseoNET/frmRegistrazionePagamentiSede.cs:					origineDati = "SELECT FK_Azienda, FK_ParFiscaleAttuale, DescrAzienda, CodFiscale, DescrParFiscale, (NULL) AS FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriRedditi, (0) AS AltriEnaip, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NOT NULL GROUP BY FK_Azienda, FK_ParFiscaleAttuale, DescrAzienda, CodFiscale, DescrParFiscale, CodiceTributo ORDER BY DescrAzienda ";
PerseoNET/frmRegistrazionePagamentiSede.cs:									vSQL = "SELECT t_PianoServizi.IDedizione, FK_Progetto, CodiceEdizione, DataAvvio, DataFine, MezzaOra, t_PianoServizi.Bloccato FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE FK_Progetto " + text + " AND FK_SedeEdizione " + text4 + " AND MezzaOra=1 ";
PerseoNET/frmRegistrazionePagamentiSede.cs:									vSQL = "SELECT t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, (FK_CodicePF) AS FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE t_Aziende.PIVA END) AS StrFiscale, DescrParFiscale, MAX(TipoAliquotaPrevSepa) AS TipoAliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, (SELECT SUM(OreSvolte) FROM t_IncarichiEdizioniOrePerMese WHERE FK_Incarico=IDincarico AND DataSvolteDAL>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataSvolteAL<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + ") AS TotOreFatte, QuotaOraIncarico, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (0) AS Autorizzazione, (NULL) AS DataAutorizzazione, (NULL) AS DataPagatoInizio, (NULL) AS DataPagatoFine, (NULL) AS DataPagamento, (0) AS Assegni, (NULL) AS MatricolaTracciatoAssegni, (NULL) AS StrFattura, CodiceTributo FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_DocentiContrattiEsterni INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto LEFT OUTER JOIN t_TipoAliquotaPrevidenzaSeparata ON t_DocentiContrattiEsterni.FK_AliquotaPrevSepa = t_TipoAliquotaPrevidenzaSeparata.IDtaliquosepa LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE (ContrattoApprovato=1 AND PagamentoIndividuale=0 AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND DataFineIncarico>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataProlungamento IS NULL) OR (ContrattoApprovato=1 AND PagamentoIndividuale=0 AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND DataProlungamento>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataProlungamento IS NOT NULL) GROUP BY t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, FK_CodicePF, IDtattivita, CodiceTributo, FK_Azienda, Aula, Secondaria, DescrAzienda, Cognome, Nome, t_Docenti.CodFiscale, t_Aziende.PIVA, DescrParFiscale, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, QuotaOraIncarico,IndTA HAVING IDincarico " + Variabili.AutorizzaPagamenti.StrIncarichiFiltroIN + " AND QuotaOraIncarico>0 ORDER BY (Cognome + ' ' + Nome), IndTA, TipoAttivita ";
PerseoNET/frmRegistrazionePagamentiSede.cs:														vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioniContratti.IDincacontra, FK_IncaricoEdizione, DataInizioIncarico, DataFineIncarico, FK_CodicePF FROM t_IncarichiEdizioniContratti INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE (FK_IncaricoEdizione=" + Conversions.ToString(num3) + " AND DataInizioIncarico<='", rsPaga.get_Campo((object)"DataPagatoFine")), "' AND DataFineIncarico>='"), rsPaga.get_Campo((object)"DataPagatoInizio")), "' AND DataProlungamento IS NULL) "), "OR "), "(FK_IncaricoEdizione="), num3), " AND DataInizioIncarico<='"), rsPaga.get_Campo((object)"DataPagatoFine")), "' AND DataProlungamento>='"), rsPaga.get_Campo((object)"DataPagatoInizio")), "' AND DataProlungamento IS NOT NULL) "), "ORDER BY DataFineIncarico DESC "));
PerseoNET/frmRegistrazionePagamentiSede.cs:												vSQL = "SELECT t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, (FK_CodicePF) AS FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE t_Aziende.PIVA END) AS StrFiscale, DescrParFiscale, MAX(TipoAliquotaPrevSepa) AS TipoAliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, (0) AS TotOreFatte, QuotaOraIncarico, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (0) AS Autorizzazione, (NULL) AS DataAutorizzazione, (NULL) AS DataPagatoInizio, (NULL) AS DataPagatoFine, (NULL) AS DataPagamento, (0) AS Assegni, (NULL) AS MatricolaTracciatoAssegni, (NULL) AS StrFattura, CodiceTributo FROM t_Pagamenti ";
PerseoNET/frmRegistrazionePagamentiSede.cs:												vSQL = (clsTblDatiDR2.DestinazioneDati = "SELECT IDdocente, IDincarico, FK_Progetto, IDedizione, FK_SedeEdizione, FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, AltriEnaip, Autorizzazione, DataAutorizzazione, DataPagatoInizio, DataPagatoFine, DataPagamento, Assegni, MatricolaTracciatoAssegni, StrFattura, CodiceTributo FROM t_Pagamenti ");
PerseoNET/frmRegistrazionePagamentiSede.cs:												vSQL = "SELECT IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriRedditi, (0) AS AltriEnaip, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NULL GROUP BY IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, DescrAzienda, CodiceTributo ORDER BY StrDOC ";
PerseoNET/frmRegistrazionePagamentiSede.cs:												vSQL = "SELECT FK_Azienda, FK_ParFiscaleAttuale, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriRedditi, (0) AS AltriEnaip, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NOT NULL GROUP BY FK_Azienda, FK_ParFiscaleAttuale, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, CodiceTributo ORDER BY DescrAzienda ";
PerseoNET/frmRegistrazionePagamentiSede.cs:							origineDati = "SELECT FK_ProgettoPagamento, IDdocente, FK_Azienda, FK_ParFiscaleAttuale, FK_AliquotaPrevSepa, IDincarico, (FK_SedeEdizione) AS IDsede, IDedizione, (FK_Progetto) AS IDprogetto, DescrParFiscale, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagatoInizio, DataPagatoFine, DataPagamento, Autorizzazione, DataAutorizzazione, FK_TipoAttivita, ID_Assegni, GenerareAssegno, MatricolaTracciatoAssegni FROM t_ProgettiPagamentiCompensiOneri ";
PerseoNET/frmRegistrazionePagamentiSede.cs:							origineDati = (clsTblDatiDR2.DestinazioneDati = "SELECT FK_ProgettoPagamento, IDdocente, FK_Azienda, FK_ParFiscaleAttuale, FK_AliquotaPrevSepa, IDincarico, FK_SedeEdizione, IDedizione, FK_Progetto, DescrParFiscale, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagatoInizio, DataPagatoFine, DataPagamento, Autorizzazione, DataAutorizzazione, FK_TipoAttivita, ID_Assegni, GenerareAssegno, MatricolaTracciatoAssegni FROM t_ProgettiPagamentiCompensiOneri ");
PerseoNET/frmRegistrazionePagamentiSede.cs:				string origineDati = "SELECT IDincarico, IDcontratto, IDparfisc, CodiceParFiscale, Collaboratore, DataInizioIncarico, DataFineIncarico, MaxDataPagatoFine FROM t_DocentiContratti ";
PerseoNET/frmRegistrazionePagamentiSede.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_IncaricoEdizione, DataInizioIncarico, (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE DataProlungamento END) AS DataFineIncarico, FK_CodicePF FROM t_IncarichiEdizioniContratti INNER JOIN t_DocentiContrattiEsterni ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_CalendarioAttivita.FK_Incarico WHERE FK_IncaricoEdizione=" + Conversions.ToString(num3) + " AND FK_CodicePF=", rsPaga.get_Campo((object)"FK_ParFiscaleAttuale")), " "), "AND DataAttivita>="), rsTblPag.get_Campo((object)"DataRichiestaInizio")), " "), "AND DataAttivita<="), rsTblPag.get_Campo((object)"DataRichiestaFine")), " "));
PerseoNET/frmRegistrazionePagamentiSede.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_IncaricoEdizione, DataInizioIncarico, (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE DataProlungamento END) AS DataFineIncarico, FK_CodicePF FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioniContratti INNER JOIN t_DocentiContrattiEsterni ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContrattiEsterni.FK_DocenteContratto ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE FK_IncaricoEdizione=" + Conversions.ToString(num3) + " AND FK_CodicePF=", rsPaga.get_Campo((object)"FK_ParFiscaleAttuale")), " "), "AND DataAttivita>="), rsTblPag.get_Campo((object)"DataRichiestaInizio")), " "), "AND DataAttivita<="), rsTblPag.get_Campo((object)"DataRichiestaFine")), " "));
PerseoNET/frmRegistrazionePagamentiSede.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_IncaricoEdizione, DataInizioIncarico, (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE DataProlungamento END) AS DataFineIncarico, FK_CodicePF FROM t_IncarichiEdizioniContratti INNER JOIN t_DocentiContrattiEsterni ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_CalendarioAttivita.FK_Incarico WHERE FK_IncaricoEdizione=" + Conversions.ToString(num3) + " AND FK_CodicePF=", rsPaga.get_Campo((object)"FK_ParFiscaleAttuale")), " "), "AND DataAttivita>="), rsTblPag.get_Campo((object)"DataRichiestaInizio")), " "), "AND DataAttivita<="), rsTblPag.get_Campo((object)"DataRichiestaFine")), " "));
PerseoNET/frmRegistrazionePagamentiSede.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_IncaricoEdizione, DataInizioIncarico, (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE DataProlungamento END) AS DataFineIncarico, FK_CodicePF FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioniContratti INNER JOIN t_DocentiContrattiEsterni ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContrattiEsterni.FK_DocenteContratto ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE FK_IncaricoEdizione=" + Conversions.ToString(num3) + " AND FK_CodicePF=", rsPaga.get_Campo((object)"FK_ParFiscaleAttuale")), " "), "AND DataAttivita>="), rsTblPag.get_Campo((object)"DataRichiestaInizio")), " "), "AND DataAttivita<="), rsTblPag.get_Campo((object)"DataRichiestaFine")), " "));
PerseoNET/frmRegistrazionePagamentiSede.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, IDcontratto, IDparfisc, CodiceParFiscale, ('" + FunzStringa.StringaSQL(Conversions.ToString(rsPaga.get_Campo((object)"StrDOC"))) + "') AS Collaboratore, DataInizioIncarico, DataFineIncarico, (SELECT MAX(DataPagatoFine) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico) AS MaxDataPagatoFine FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE t_IncarichiEdizioni.IDincarico=" + Conversions.ToString(num3) + " AND IDparfisc IN(", rsPaga.get_Campo((object)"FK_ParFiscaleAttuale")), ","), num4), ") "), "ORDER BY DataFineIncarico DESC "));
PerseoNET/frmRichiestaPagamentiIndividuale.cs:				string origineDati = "SELECT t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente, FK_Azienda, IDedizione, DescrEdizione, CodiceEdizione, CodiceProgetto, SiglaSede, TipoFormativoInterno, DataAvvio, DataFine, (CASE WHEN DescrArgomento IS NOT NULL THEN DescrArgomento ELSE TipoAttivita END) AS TipoAttivita, DescrArgomento, OreAssegnate, (CASE WHEN (SELECT SUM(Minuti) AS TMinuti FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE v_DettaglioOreSvoltePerIncaricoRidotta.IDincarico=t_IncarichiEdizioni.IDincarico) IS NOT NULL THEN (SELECT SUM(Minuti) AS TMinuti FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE v_DettaglioOreSvoltePerIncaricoRidotta.IDincarico=t_IncarichiEdizioni.IDincarico) ELSE 0 END) AS TotOreSvolte, (CASE WHEN (SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) IS NOT NULL THEN (SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) ELSE 0 END) AS TotOrePagate, (SELECT MAX(DataPagatoFine) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) AS DataPagatoFine, (0) AS Pagare, IncaricoGenericoGratuito FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento GROUP BY t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente, FK_Azienda, IDedizione, DescrEdizione, CodiceEdizione, CodiceProgetto, SiglaSede, TipoFormativoInterno, DataAvvio, DataFine, TipoAttivita, DescrArgomento, OreAssegnate, IndTA, IncaricoGenericoGratuito ORDER BY CodiceEdizione, t_TipoAttivitaEdizione.IndTA, t_ArgomentiModuli.DescrArgomento ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:					origineDati = "SELECT t_IncarichiEdizioni.IDincarico, IDpagaindiv, IDdocente, IDazienda, IDprogetto, IDedizione, (FK_CodicePF) AS FK_ParFiscaleAttuale, FK_Fattura, t_DocentiContrattiEsterni.FK_AltraAssINPS, MezzaOra, t_PianoServizi.Bloccato, DataBloccoSCO, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Collaboratore, DescrParFiscale, DescrEdizione, CodiceEdizione, CodiceProgetto, SiglaSede, (CASE WHEN DescrArgomento IS NOT NULL THEN DescrArgomento ELSE TipoAttivita END) AS DescrAttivita, DataRichiestaInizio, DataRichiestaFine, sngAliquotaPrevSepa, t_PagamentiIndividuali.AltriRedditiOccasionale, (0) AS TotOreFatte, QuotaOraIncarico, (CASE WHEN FK_Fattura IS NOT NULL THEN 1 ELSE 0 END) AS Fattura, Autorizzazione, Sospeso, DataStampaAutorizzazione  FROM t_PagamentiIndividualiIncarichi INNER JOIN t_IncarichiEdizioni ON t_PagamentiIndividualiIncarichi.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PagamentiIndividuali ON t_PagamentiIndividualiIncarichi.FK_Pagamento = t_PagamentiIndividuali.IDpagaindiv INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:					origineDati = "SELECT t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS StrDOC, (1) AS Ordinale FROM t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE FK_Tipo=3 AND PagamentoIndividuale=1 AND DataInizioIncarico>=" + FunzStringa.StrDataSQL(value, FlagSqlServer: true) + " AND ((SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0)<OreAssegnate OR (SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) IS NULL) GROUP BY IDdocente, IDincarico, Cognome, Nome, OreAssegnate ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:					VariabiliClassi.CmdSQL.CopiaIncollaTblDati(origineDati, Variabili.ConnSQL2000, "SELECT Numerico_1, Testo_1, Numerico_2 FROM t_StampaTbl_1 ", Variabili.pathLog, "int,nd,int", vFlagSvuota: true);
PerseoNET/frmRichiestaPagamentiIndividuale.cs:					origineDati = "SELECT t_Docenti.IDdocente, (Cognome + ' ' + Nome + ' (I)') AS StrDOC, (2) AS Ordinale FROM t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE FK_Tipo=2 AND IncaricoBloccato=1 AND PagamentoIndividuale=1 AND DataInizioIncarico>=" + FunzStringa.StrDataSQL(value, FlagSqlServer: true) + " AND ((SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0)<OreAssegnate OR (SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) IS NULL) GROUP BY IDdocente, IDincarico, Cognome, Nome, OreAssegnate ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:					VariabiliClassi.CmdSQL.CopiaIncollaTblDati(origineDati, Variabili.ConnSQL2000, "SELECT Numerico_1, Testo_1, Numerico_2 FROM t_StampaTbl_1 ", Variabili.pathLog, "int,nd,int");
PerseoNET/frmRichiestaPagamentiIndividuale.cs:					origineDati = "SELECT (Numerico_1) AS IDdocente, (Testo_1) AS StrDOC FROM t_StampaTbl_1 GROUP BY Numerico_1, Testo_1, Numerico_2 ORDER BY Numerico_2, Testo_1 ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:						origineDati = "SELECT IDpagaindiv, IDpagainc, FK_Incarico, DataPagamento, FK_Docente, DataRichiestaInizio, DataRichiestaFine, Autorizzazione FROM t_PagamentiIndividuali LEFT OUTER JOIN t_PagamentiIndividualiIncarichi ON t_PagamentiIndividuali.IDpagaindiv = t_PagamentiIndividualiIncarichi.FK_Pagamento WHERE Autorizzazione=0 AND Sospeso=0 AND DataPagamento IS NULL";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi,OraInizio,OraFine)) AS TotaleMinuti FROM t_CalendarioAttivita WHERE DataAttivita>=" + FunzStringa.StrDataSQL(value, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND FK_Incarico=", clsTblDatiDR.get_Campo((object)"FK_Incarico")), " "));
PerseoNET/frmRichiestaPagamentiIndividuale.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi,OraInizio,OraFine)) AS TotaleMinuti FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE DataAttivita>=" + FunzStringa.StrDataSQL(value, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND t_CalendarioCodocenza.FK_Incarico=", clsTblDatiDR.get_Campo((object)"FK_Incarico")), " "));
PerseoNET/frmRichiestaPagamentiIndividuale.cs:						string text5 = "SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) HAVING IDincarico " + text3 + " ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:						text5 = text5 + "UNION SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) HAVING IDincarico " + text3 + " ORDER BY IDdocente, IDincarico, YEAR(DataAttivita), MONTH(DataAttivita) ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:						string text6 = "(SELECT FK_CodicePF FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE (FK_IncaricoEdizione=IDincarico AND DataInizioIncarico<='" + text2 + "' AND DataFineIncarico>='" + text + "' AND DataProlungamento IS NULL) OR (FK_IncaricoEdizione=IDincarico AND DataInizioIncarico<='" + text2 + "' AND DataProlungamento>='" + text + "' AND DataProlungamento IS NOT NULL) GROUP BY FK_CodicePF) AS FK_ParFiscaleAttuale, ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:						string text7 = "(SELECT MAX(sngAliquotaPrevSepa) FROM t_PagamentiIndividuali WHERE FK_Docente=IDdocente) AS FK_AliquotaPrevSepa, ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:						string text8 = "(SELECT FK_Azienda FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE (FK_IncaricoEdizione=IDincarico AND DataInizioIncarico<='" + text2 + "' AND DataFineIncarico>='" + text + "' AND DataProlungamento IS NULL) OR (FK_IncaricoEdizione=IDincarico AND DataInizioIncarico<='" + text2 + "' AND DataProlungamento>='" + text + "' AND DataProlungamento IS NOT NULL) GROUP BY FK_Azienda) AS FK_Azienda, ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:						string text9 = "(SELECT DescrAzienda FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE (FK_IncaricoEdizione=IDincarico AND DataInizioIncarico<='" + text2 + "' AND DataFineIncarico>='" + text + "' AND DataProlungamento IS NULL) OR (FK_IncaricoEdizione=IDincarico AND DataInizioIncarico<='" + text2 + "' AND DataProlungamento>='" + text + "' AND DataProlungamento IS NOT NULL) GROUP BY DescrAzienda) AS DescrAzienda, ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:						text5 = "SELECT t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, " + text6 + "IDtattivita, " + text8 + "Aula, Secondaria, " + text9 + " (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, (NULL) AS DescrParFiscale, " + text7 + "DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, (0) AS TotOreFatte, " + vStrMesi + "(SELECT QuotaOraIncarico FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico GROUP BY QuotaOraIncarico) AS QuotaOraIncarico, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS Autorizzazione, (NULL) AS DataAutorizzazione, (NULL) DataPagatoInizio, (NULL) DataPagatoFine, (NULL) AS DataPagamento, (NULL) AS StrFattura FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDincarico " + text3 + " AND IncaricoGenericoGratuito=0 ORDER BY (Cognome + ' ' + Nome), IndTA, TipoAttivita ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:						clsTblDatiDR.OrigineDati = "SELECT IDfattura, NumeroFattura, DataFattura FROM t_DocentiFatture WHERE IDfattura " + rsTblPag.StringaFiltroIN("FK_Fattura") + "  ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:							text5 = "SELECT t_Docenti.IDdocente, FK_Azienda, IDprogetto, FK_ParFiscaleAttuale, StrDOC, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, IDmwp, CodiceProgetto, SiglaSede, (NULL) DataPagatoInizio, (NULL) DataPagatoFine, (0) AS TotOreFatte, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (NULL) AS StrFattura FROM t_ProgettiPagamentiCompensiOneri ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:						left = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(Minuti) AS TotaleMinuti FROM v_DettaglioCalendarioAttivita WHERE  DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND FK_Incarico=", rsTblPag.get_Campo((object)"IDincarico")), " "));
PerseoNET/frmRichiestaPagamentiIndividuale.cs:				string text = "SELECT t_DocentiFatture.IDfattura, t_DocentiFatture.FK_Docente, t_DocentiFatture.FK_Azienda, NumeroFattura, DataFattura, ((SELECT COUNT(IDprogfatt) AS NRich FROM t_ProgettiPagamentiFatture WHERE FK_Fattura=IDfattura)+(SELECT COUNT(IDpagainc) AS NRich FROM t_PagamentiIndividualiIncarichi WHERE FK_Fattura=IDfattura))AS NumRichieste, (CASE WHEN FK_Azienda IS NULL THEN (SELECT MAX(DataPagamento) AS MaxData FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.NumeroFattura=t_DocentiFatture.NumeroFattura AND t_ProgettiPagamentiCompensiOneri.DataFattura=t_DocentiFatture.DataFattura AND IDdocente=t_DocentiFatture.FK_Docente) ELSE (SELECT MAX(DataPagamento) AS MaxData FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.NumeroFattura=t_DocentiFatture.NumeroFattura AND t_ProgettiPagamentiCompensiOneri.DataFattura=t_DocentiFatture.DataFattura AND t_ProgettiPagamentiCompensiOneri.FK_Azienda=t_DocentiFatture.FK_Azienda) END) AS UltimoPag FROM t_DocentiFatture " + str;
PerseoNET/frmRichiestaPagamentiIndividuale.cs:												origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, MIN(DataPagatoInizio) AS DataPagatoInizio, MAX(DataPagatoFine) AS DataPagatoFine FROM t_ProgettiPagamentiCompensiOneri GROUP BY IDincarico HAVING IDincarico=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "ORDER BY DataPagatoFine DESC "));
PerseoNET/frmRichiestaPagamentiIndividuale.cs:										origineDati = ((!Information.IsNothing(RuntimeHelpers.GetObjectValue(tblInc.get_Campo((object)"FK_Azienda", vFlagUpdateDB: false)))) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDpagaindiv FROM t_PagamentiIndividuali LEFT OUTER JOIN t_PagamentiIndividualiIncarichi ON t_PagamentiIndividuali.IDpagaindiv = t_PagamentiIndividualiIncarichi.FK_Pagamento WHERE t_PagamentiIndividuali.DataRec>=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " AND FK_Docente=", tblInc.get_Campo((object)"FK_Docente", vFlagUpdateDB: false)), " "), "AND FK_Azienda="), tblInc.get_Campo((object)"FK_Azienda", vFlagUpdateDB: false)), " AND IDpagainc IS NULL ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDpagaindiv FROM t_PagamentiIndividuali LEFT OUTER JOIN t_PagamentiIndividualiIncarichi ON t_PagamentiIndividuali.IDpagaindiv = t_PagamentiIndividualiIncarichi.FK_Pagamento WHERE t_PagamentiIndividuali.DataRec>=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " AND FK_Docente=", tblInc.get_Campo((object)"FK_Docente", vFlagUpdateDB: false)), " AND IDpagainc IS NULL ")));
PerseoNET/frmRichiestaPagamentiIndividuale.cs:										vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDfattura, NumeroFattura, DataFattura FROM t_DocentiFatture WHERE IDfattura=", tblPag.get_Campo((object)"FK_Fattura", vFlagUpdateDB: false)));
PerseoNET/frmRichiestaPagamentiIndividuale.cs:								vSQL = (clsTblDatiDR.OrigineDati = "SELECT t_Docenti.IDdocente, FK_Azienda, IDprogetto, FK_ParFiscaleAttuale, StrDOC, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, IDmwp, CodiceProgetto, SiglaSede, (NULL) DataPagatoInizio, (NULL) DataPagatoFine, (0) AS TotOreFatte, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (NULL) AS StrFattura FROM t_ProgettiPagamentiCompensiOneri ");
PerseoNET/frmRichiestaPagamentiIndividuale.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDpagaindiv, FK_Docente, FK_Azienda, AltriRedditiOccasionale, DataStampaAutorizzazione, Autorizzazione, Sospeso, FK_AltraAssINPS, sngAliquotaPrevSepa, DataRec, DataModifica, Bloccato FROM t_PagamentiIndividuali WHERE IDpagaindiv=", tblPag.get_Campo((object)"IDpagaindiv", vFlagUpdateDB: false)));
PerseoNET/frmRichiestaPagamentiIndividuale.cs:							origineDati = "SELECT IDtaltrainps, (TipoAltraAssINPS + ' [' + CodiceAssINPS + ']') AS AltraAss FROM t_TipoAltraAssicurazioneINPS WHERE Obsoleto=0 ORDER BY CodiceAssINPS";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:									origineDati = ((!Information.IsNothing(RuntimeHelpers.GetObjectValue(tblPag.get_Campo((object)"FK_Fattura", vFlagUpdateDB: false)))) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDfattura, FK_Docente, FK_Azienda, DataFattura, NumeroFattura, DataRec, DataModifica, Bloccato FROM t_DocentiFatture WHERE IDfattura=", tblPag.get_Campo((object)"FK_Fattura", vFlagUpdateDB: false)), " ")) : "SELECT IDfattura, FK_Docente, FK_Azienda, DataFattura, NumeroFattura, DataRec, DataModifica, Bloccato FROM t_DocentiFatture WHERE IDfattura=0 ");
PerseoNET/frmRichiestaPagamentiIndividuale.cs:								origineDati = "SELECT IDtaliquosepa, TipoAliquotaPrevSepa FROM t_TipoAliquotaPrevidenzaSeparata WHERE Obsoleto=False ORDER BY TipoAliquotaPrevSepa";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocente, SUM(sngCostoInc) AS TotaleImponibile FROM t_ProgettiPagamentiCompensiOneri WHERE YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin)) + " AND IDdocente=", tblPag.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " GROUP BY IDdocente "));
PerseoNET/frmRichiestaPagamentiIndividuale.cs:							text = ((!txtNumeroFattura.Enabled) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDfattura, FK_Docente FROM t_DocentiFatture WHERE DataFattura='" + txtDataFattura.Text + "' AND FK_Docente=", tblPag.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "), "AND IDfattura<>"), FormFatt.ChiavePrimaria)) : ((!Information.IsNothing(RuntimeHelpers.GetObjectValue(tblPag.get_Campo((object)"IDazienda", vFlagUpdateDB: false)))) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDfattura, FK_Azienda FROM t_DocentiFatture WHERE DataFattura='" + txtDataFattura.Text + "' AND FK_Azienda=", tblPag.get_Campo((object)"IDazienda", vFlagUpdateDB: false)), " "), "AND NumeroFattura='"), txtNumeroFattura.Text), "' AND IDfattura<>"), FormFatt.ChiavePrimaria)) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDfattura, FK_Docente FROM t_DocentiFatture WHERE DataFattura='" + txtDataFattura.Text + "' AND FK_Docente=", tblPag.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "), "AND NumeroFattura='"), txtNumeroFattura.Text), "' AND IDfattura<>"), FormFatt.ChiavePrimaria))));
PerseoNET/frmRichiestaPagamentiIndividuale.cs:							text = ((!Information.IsNothing(RuntimeHelpers.GetObjectValue(tblPag.get_Campo((object)"IDazienda", vFlagUpdateDB: false)))) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDfattura, FK_Docente FROM t_DocentiFatture WHERE DataFattura='" + txtDataFattura.Text + "' AND FK_Azienda=", tblPag.get_Campo((object)"IDazienda", vFlagUpdateDB: false)), " "), "AND NumeroFattura='"), txtNumeroFattura.Text), "' ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDfattura, FK_Docente FROM t_DocentiFatture WHERE DataFattura='" + txtDataFattura.Text + "' AND FK_Docente=", tblPag.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "), "AND NumeroFattura='"), txtNumeroFattura.Text), "' ")));
PerseoNET/frmRichiestaPagamentiIndividuale.cs:								string origineDati = "SELECT t_IncarichiEdizioni.IDincarico, SUM(Minuti) AS TotOreSvolte FROM t_IncarichiEdizioni INNER JOIN v_DettaglioCalendarioAttivita ON t_IncarichiEdizioni.IDincarico = v_DettaglioCalendarioAttivita.FK_Incarico WHERE PagamentoIndividuale=1 AND DataAttivita>=" + FunzStringa.StrDataSQL(value, FlagSqlServer: true) + " AND FK_Docente=" + Conversions.ToString(ComboCollProf.PKSelezionatoCombo) + " GROUP BY t_IncarichiEdizioni.IDincarico ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:								origineDati = "SELECT t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente, FK_Azienda, IDedizione, DescrEdizione, CodiceEdizione, CodiceProgetto, SiglaSede, TipoFormativoInterno, DataAvvio, DataFine, (CASE WHEN DescrArgomento IS NOT NULL THEN DescrArgomento ELSE TipoAttivita END) AS TipoAttivita, DescrArgomento, OreAssegnate, (0) AS TotOreSvolte, (CASE WHEN (SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) IS NOT NULL THEN (SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) ELSE 0 END) AS TotOrePagate, (SELECT MAX(DataPagatoFine) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) AS DataPagatoFine, (0) AS Pagare, IncaricoGenericoGratuito FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE PagamentoIndividuale=1 AND GestionePersonale=1 " + text + "GROUP BY t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente, FK_Azienda, IDedizione, DescrEdizione, CodiceEdizione, CodiceProgetto, SiglaSede, TipoFormativoInterno, DataAvvio, DataFine, TipoAttivita, DescrArgomento, OreAssegnate, IndTA, IncaricoGenericoGratuito HAVING NOT(t_IncarichiEdizioni.IDincarico " + tblPag.StringaFiltroIN("IDincarico") + ") ORDER BY t_IncarichiEdizioni.IDincarico DESC ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:							vSQL = "SELECT IDfattura, FK_Docente, FK_Azienda, DataFattura, NumeroFattura, DataRec, DataModifica, Bloccato FROM t_DocentiFatture WHERE IDfattura=0 ";
PerseoNET/frmRichiestaPagamentiIndividuale.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDfattura, FK_Docente, FK_Azienda, DataFattura, NumeroFattura, DataRec, DataModifica, Bloccato FROM t_DocentiFatture WHERE IDfattura=", tblFatt.get_Campo((object)0, vFlagUpdateDB: false)));
PerseoNET/frmTblRiferimentiSicurezza.cs:				string origineDati = "SELECT t_TipoSicurezzaLivello.IDtoresicurezza, TipoLivello, Titolo, SottoTitolo, DescrSettore, OrePreviste, NoteCertificato, LivelloGenerale, LivelloSpecifico, Aggiornamento, Obsoleto FROM t_TipoSicurezzaLivello ORDER BY (CASE WHEN Obsoleto=0 THEN 1 ELSE 2 END), LivelloGenerale DESC, OrePreviste, DescrSettore ";
PerseoNET/frmTblRiferimentiSicurezza.cs:				string origineDati = "SELECT IDtoresicurezza, TipoLivello, Titolo, SottoTitolo, FileLoghi, DescrSettore, OrePreviste, NoteCertificato, LivelloGenerale, LivelloSpecifico, RiferimentoLegge, DataObsoleto, Aggiornamento, Obsoleto FROM t_TipoSicurezzaLivello WHERE IDtoresicurezza=" + Conversions.ToString(vID);
PerseoNET/frmTblRiferimentiSicurezza.cs:				string origineDati = "SELECT IDtcertsicurezza, FK_Livello, Ordinale, DescrContenuto, DescrContenutoDettaglio, DescrRiferimento, Obsoleto FROM t_TipoSicurezzaContenuti WHERE IDtcertsicurezza=" + Conversions.ToString(vID);
PerseoNET/frmTblRiferimentiSicurezza.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT COUNT(IDedizione) AS NumeroRec FROM t_PianoServizi WHERE FK_LivelloSpecificoSicurezza=", tblLIV.get_Campo((object)0, vFlagUpdateDB: false)));
PerseoNET/frmTblRiferimentiSicurezza.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT COUNT(IDconvenzione) AS NumeroRec FROM t_ConvenzioniStage WHERE FK_LivelloSpecificoSicurezza=", tblLIV.get_Campo((object)0, vFlagUpdateDB: false)));
PerseoNET/frmTblRiferimentiSicurezza.cs:						string vSQL = "SELECT COUNT(IDedizione) AS NumeroRec FROM t_PianoServizi WHERE FK_LivelloSpecificoSicurezza=" + Conversions.ToString(FormLIV.ChiavePrimaria);
PerseoNET/frmTblRiferimentiSicurezza.cs:							vSQL = "SELECT COUNT(IDconvenzione) AS NumeroRec FROM t_ConvenzioniStage WHERE FK_LivelloSpecificoSicurezza=" + Conversions.ToString(FormLIV.ChiavePrimaria);
PerseoNET/frmTblRiferimentiSicurezza.cs:						string str = "SELECT IDtoresicurezza, TipoLivello, LivelloGenerale, Obsoleto FROM t_TipoSicurezzaLivello ";
PerseoNET/frmTblRiferimentiSicurezza.cs:								string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_TipoSicurezzaContenuti.IDtcertsicurezza, FK_Livello, Ordinale, DescrContenuto, DescrContenutoDettaglio, DescrRiferimento, OrePreviste FROM t_TipoSicurezzaContenuti WHERE FK_Livello=", tblLIV.get_Campo((object)0, vFlagUpdateDB: false)), " "), "ORDER BY Ordinale, DescrContenuto "));
PerseoNET/frmTblRiferimentiSicurezza.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_TipoSicurezzaContenuti.IDtcertsicurezza, FK_Livello, Ordinale, DescrContenuto, DescrContenutoDettaglio, DescrRiferimento, OrePreviste FROM t_TipoSicurezzaContenuti WHERE FK_Livello=", tblLIV.get_Campo((object)0, vFlagUpdateDB: false)), " "), "ORDER BY Ordinale, DescrContenuto "));
PerseoNET/frmTblRiferimentiSicurezza.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_TipoSicurezzaContenuti.IDtcertsicurezza, FK_Livello, Ordinale, DescrContenuto, DescrContenutoDettaglio, DescrRiferimento, OrePreviste FROM t_TipoSicurezzaContenuti WHERE FK_Livello=", tblLIV.get_Campo((object)0, vFlagUpdateDB: false)), " "), "ORDER BY Ordinale, DescrContenuto "));
PerseoNET/frmTblRiferimentiSicurezza.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("INSERT INTO t_TipoSicurezzaLivello(TipoLivello, Titolo, SottoTitolo, FileLoghi, DescrSettore, OrePreviste, NoteCertificato, LivelloGenerale, LivelloSpecifico, RiferimentoLegge, DataObsoleto, Aggiornamento, Obsoleto) SELECT (TipoLivello + ' AGGIORNAMENTO') AS TLiv, Titolo, SottoTitolo, FileLoghi, DescrSettore, OrePreviste, NoteCertificato, LivelloGenerale, LivelloSpecifico, RiferimentoLegge, DataObsoleto, Aggiornamento, Obsoleto FROM t_TipoSicurezzaLivello WHERE IDtoresicurezza=", tblLIV.get_Campo((object)"IDtoresicurezza", vFlagUpdateDB: false)));
PerseoNET/frmStatoBloccoRecord.cs:				string origineDati = "SELECT IDutente, (Cognome + ' ' + Nome) AS NomeUtente, IDrecord, Tabella, NomeCampoPK, NoteBlocco, zt_RecordBloccati.DataRec FROM zt_RecordBloccati LEFT OUTER JOIN t_Personale ON zt_RecordBloccati.IDutente = t_Personale.IDpers ORDER BY (Cognome + ' ' + Nome), zt_RecordBloccati.DataRec DESC";
PerseoNET/frmStatoBloccoRecord.cs:				origineDati = "SELECT IDpers, (Cognome + ' ' + Nome) AS NomeUtente, MIN(zt_Intrusi.DataRec) AS DataEvento, COUNT(IDintruso) AS NumeroCmd FROM zt_Intrusi INNER JOIN t_Personale ON zt_Intrusi.FK_Persona = t_Personale.IDpers WHERE ButtaFuori=1 GROUP BY IDpers, (Cognome + ' ' + Nome) ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmCreaNuoveIscrizioni.cs:				string origineDati = "SELECT t_Utenti.IDutente, (Cognome + ' ' + Nome) AS Studente, CodFiscale, TipoNazionalita, ComResidenza, ProvResidenza, CAPresidenza, IndirResidenza, (CASE WHEN (Tel_1 IS NOT NULL AND Tel_2 IS NULL) THEN Tel_1 WHEN (Tel_1 IS NULL AND Tel_2 IS NOT NULL) THEN Tel_2 WHEN (Tel_1 IS NOT NULL AND Tel_2 IS NOT NULL) THEN (Tel_1 + ' - ' + Tel_2) END) AS Telefoni, (SELECT COUNT(IDdotestud) FROM t_StudentiDoti WHERE FK_Studente=IDutente) AS ndoti, (SELECT COUNT(FK_Edizione) AS ni FROM t_Iscrizioni WHERE FK_Utente=IDutente) AS Niscr, (SELECT COUNT(FK_Edizione) AS nis FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Utente=IDutente AND FK_SedeEdizione " + Variabili.FiltroSedi + ") AS IscrSede, CFProvvisorio FROM t_Utenti INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz WHERE t_Utenti.IDutente=0 ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmCreaNuoveIscrizioni.cs:				origineDati = "SELECT IDdotestud, FK_Studente, ID_Dote, ImportoTotaleDote, SUM(QuotaDoteIscrizione) AS TotaleImpegnato, IgnoraRegoleProgetto FROM t_IscrizioniDoti RIGHT OUTER JOIN t_Iscrizioni ON t_IscrizioniDoti.FK_Iscrizione = t_Iscrizioni.IDiscrizione RIGHT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud GROUP BY IDdotestud, FK_Studente, ID_Dote, ImportoTotaleDote, IgnoraRegoleProgetto ";
PerseoNET/frmCreaNuoveIscrizioni.cs:				origineDati = "SELECT IDutente, (NULL) AS Studente, (NULL) AS CodFiscale, (NULL) AS IDdotestud, (NULL) AS ID_Dote, (NULL) AS ImportoTotaleDote, (NULL) AS TotaleImpegnato, (NULL) AS IDmwiscr, IgnoraRegoleProgetto, FK_IscrizioneAmpliamento FROM t_Utenti ";
PerseoNET/frmCreaNuoveIscrizioni.cs:					text = (opConIscrizioni.Checked ? ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(FK_Edizione) AS ni FROM t_Iscrizioni WHERE FK_Utente=IDutente)>0 ") : "WHERE (SELECT COUNT(FK_Edizione) AS ni FROM t_Iscrizioni WHERE FK_Utente=IDutente)>0 ") : ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(FK_Edizione) AS ni FROM t_Iscrizioni WHERE FK_Utente=IDutente)=0 ") : "WHERE (SELECT COUNT(FK_Edizione) AS ni FROM t_Iscrizioni WHERE FK_Utente=IDutente)=0 "));
PerseoNET/frmCreaNuoveIscrizioni.cs:						text = (opConDoti.Checked ? ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDdotestud) FROM t_StudentiDoti WHERE FK_Studente=IDutente)>0 ") : "WHERE (SELECT COUNT(IDdotestud) FROM t_StudentiDoti WHERE FK_Studente=IDutente)>0 ") : ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDdotestud) FROM t_StudentiDoti WHERE FK_Studente=IDutente)=0 ") : "WHERE (SELECT COUNT(IDdotestud) FROM t_StudentiDoti WHERE FK_Studente=IDutente)=0 "));
PerseoNET/frmCreaNuoveIscrizioni.cs:					text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDdotestud) FROM t_StudentiDoti WHERE FK_Studente=IDutente AND ID_Dote='" + txtID_Dote.Text + "')>0 ") : ("WHERE (SELECT COUNT(IDdotestud) FROM t_StudentiDoti WHERE FK_Studente=IDutente AND ID_Dote='" + txtID_Dote.Text + "')>0 "));
PerseoNET/frmCreaNuoveIscrizioni.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdotestud, FK_Studente, ID_Dote, ImportoTotaleDote, SUM(QuotaDoteIscrizione) AS TotaleImpegnato, IgnoraRegoleProgetto FROM t_IscrizioniDoti RIGHT OUTER JOIN t_Iscrizioni ON t_IscrizioniDoti.FK_Iscrizione = t_Iscrizioni.IDiscrizione RIGHT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud GROUP BY IDdotestud, FK_Studente, ID_Dote, ImportoTotaleDote, DataAvvioDote, DataFineDote, IgnoraRegoleProgetto HAVING (FK_Studente=", tblUtenti.get_Campo((object)"IDutente", vFlagUpdateDB: false)), ") "), "AND (DataAvvioDote >= '"), right), "') AND (DataAvvioDote < '"), right2), "') "), "OR "), "(FK_Studente="), tblUtenti.get_Campo((object)"IDutente", vFlagUpdateDB: false)), ") "), "AND (DataFineDote >= '"), right), "') AND (DataFineDote < '"), right2), "') "), "OR "), "(FK_Studente="), tblUtenti.get_Campo((object)"IDutente", vFlagUpdateDB: false)), ") "), "AND (DataAvvioDote <= '"), right), "') AND (DataFineDote > '"), right), "') "), "OR "), "(FK_Studente="), tblUtenti.get_Campo((object)"IDutente", vFlagUpdateDB: false)), ") "), "AND (DataAvvioDote <= '"), right2), "') AND (DataFineDote > '"), right2), "') "), "ORDER BY FK_Studente, ID_Dote "));
PerseoNET/frmCreaNuoveIscrizioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento, FK_TipoDoc, FK_Studente, FK_Iscrizione, DescrDocumento, DataPubblicazione, DurataMesiMax FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE TipoDocumento='Rilascio CF Provvisorio' AND FK_Studente=", tblUtenti.get_Campo((object)"IDutente", vFlagUpdateDB: false)), " "));
PerseoNET/frmCreaNuoveIscrizioni.cs:									string vSQL = "SELECT IDiscrizione, (IDmwiscr) AS ID_Iscrizione FROM t_Iscrizioni WHERE IDmwiscr='" + txtIDmwiscr.Text + "' ";
PerseoNET/frmCreaNuoveIscrizioni.cs:										string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Iscrizioni.IDiscrizione, IDutente, DescrEdizione, CodiceEdizione, IDsede, SiglaSede FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione=t_Sedi.IDsede WHERE FK_Edizione<>", Variabili.Edizione.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "AND DataAvvio<="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataFine")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataFine>="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataAvvio")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND FK_TipoFormativoInterno=1 AND DataRitiro IS NULL AND IDutente="), tblUtenti.get_Campo((object)"IDutente", vFlagUpdateDB: false)));
PerseoNET/frmPianoIncarichiEdizione.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ArgomentiModuli.IDargomento, t_ModuliEdizioni.FK_Attivita, IndModulo, IndArgomento, DescrArgomento, DescrBreveArgomento, OreArgomento, SUM(OreAssegnate) AS TotOreAss, (0) AS DiscResidue FROM t_ModuliEdizioni INNER JOIN t_ArgomentiModuli ON t_ModuliEdizioni.IDmodulo = t_ArgomentiModuli.FK_Modulo LEFT OUTER JOIN t_IncarichiEdizioni ON t_ArgomentiModuli.IDargomento = t_IncarichiEdizioni.FK_Argomento WHERE FK_TipoArgomento<>" + Conversions.ToString(Variabili.PK_TipoArgomentoStage) + " GROUP BY IDargomento, t_ModuliEdizioni.FK_Edizione, t_ModuliEdizioni.FK_Attivita, IndModulo, IndArgomento, DescrArgomento, DescrBreveArgomento, OreArgomento HAVING t_ModuliEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY IndModulo, IndArgomento, DescrBreveArgomento "));
PerseoNET/frmPianoIncarichiEdizione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, IDargomento, IDedizione, IDdocente, FK_Tipo, DescrIncarico, (Cognome + ' ' + Nome) AS StrDOC, DescrArgomento, OreAssegnate, (SUM(Minuti)/60) AS OrePianificate, IncaricoGenericoGratuito, DescrGratuito, (CASE WHEN FK_Tipo > 2 THEN(SELECT SUM(OreSvolgere) FROM t_IncarichiEdizioniContratti WHERE ApprovaIncarico=1 AND FK_IncaricoEdizione=IDincarico) ELSE NULL END) AS TotContr, FK_IncaricoClassiRiunite, (CASE WHEN FK_IncaricoClassiRiunite IS NULL THEN 0 ELSE 1 END) AS IncClassiRiunite FROM v_DettaglioOreSvoltePerIncarico GROUP BY IDincarico, IDargomento, IDedizione, IDdocente, FK_Tipo, DescrIncarico, DescrArgomento, Cognome, Nome, OreAssegnate, FK_Tipo, FK_IncaricoClassiRiunite, IncaricoGenericoGratuito, DescrGratuito HAVING IDedizione=", Variabili.Edizione.get_Campo((object)0)), " AND IDargomento IS NOT NULL "), "ORDER BY (Cognome + ' ' + Nome), DescrArgomento, IDincarico "));
PerseoNET/frmPianoIncarichiEdizione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_AttivitaEdizioni.IDattedi, FK_TipoAttivita, IndTA, TipoAttivita, ContrattoAula, (CASE WHEN DeltaOreAttivita=0 THEN OreAttivita ELSE (OreAttivita + DeltaOreAttivita) END) AS OreAttivita, SUM(t_IncarichiEdizioni.OreAssegnate) AS TotOreAss, (0) AS AttResidue FROM t_IncarichiEdizioni RIGHT OUTER JOIN t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi WHERE (FK_Argomento IS NULL AND Aula=1 AND Primaria=1 AND MonteOreEdizione=0 AND t_AttivitaEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), ") "), "OR (FK_Argomento IS NULL AND Aula=0 AND Primaria=0 AND VincoloOrario=0 AND MonteOreEdizione=0 "), "AND t_AttivitaEdizioni.FK_Edizione="), Variabili.Edizione.get_Campo((object)0)), ") "), "OR (FK_Argomento IS NULL AND Aula=1 AND Primaria=0 AND Secondaria=1 "), "AND t_AttivitaEdizioni.FK_Edizione="), Variabili.Edizione.get_Campo((object)0)), ") "), "GROUP BY t_AttivitaEdizioni.IDattedi, FK_TipoAttivita, IndTG, IndTA, "), "TipoAttivita, OreAttivita, ContrattoAula, DeltaOreAttivita "), "ORDER BY IndTG, IndTA, TipoAttivita"));
PerseoNET/frmPianoIncarichiEdizione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, IDattedi, IDedizione, (IDtattivita) AS FK_TipoAttivita, IDdocente, FK_Tipo, (Cognome + ' ' + Nome) AS StrDOC, IndTA, TipoAttivita, DescrIncarico, OreAssegnate, (SUM(Minuti)/60) AS OrePianificate, IncaricoGenericoGratuito, DescrGratuito, (CASE WHEN FK_Tipo > 2 THEN(SELECT SUM(OreSvolgere) FROM t_IncarichiEdizioniContratti WHERE ApprovaIncarico=1 AND FK_IncaricoEdizione=IDincarico) ELSE NULL END) AS TotContr FROM v_DettaglioOreSvoltePerIncarico WHERE IDargomento IS NULL GROUP BY IDincarico, IDattedi, IDtattivita, IDedizione, IDdocente, IndTA, TipoAttivita, Cognome, Nome, DescrIncarico, OreAssegnate, FK_Tipo, IncaricoGenericoGratuito, DescrGratuito HAVING IDedizione=", Variabili.Edizione.get_Campo((object)0)), " ORDER BY (Cognome + ' ' + Nome), IndTA, IDincarico "));
PerseoNET/frmPianoIncarichiEdizione.cs:					text = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiAttivi WHERE FK_Tipo=2 ";
PerseoNET/frmPianoIncarichiEdizione.cs:					text = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiAttivi WHERE FK_Tipo=3 ";
PerseoNET/frmPianoIncarichiEdizione.cs:					text = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiAttivi WHERE FK_Tipo=1 ";
PerseoNET/frmPianoIncarichiEdizione.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico FROM t_IncarichiEdizioni WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND FK_Docente="), tblDoc.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "), "AND FK_Argomento="), tblDisc.get_Campo((object)"IDargomento", vFlagUpdateDB: false)), " AND OreAssegnate="), txtAssegnate.Text), " "));
PerseoNET/frmPianoIncarichiEdizione.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT COUNT(IDoremese) AS NumeroRecord FROM t_IncarichiEdizioniOrePerMese WHERE FK_Incarico=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND OreSvolte>0 "));
PerseoNET/frmPianoIncarichiEdizione.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_IncaricoEdizione, FK_Contratto, ApprovaIncarico FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " ORDER BY FK_Contratto "));
PerseoNET/frmPianoIncarichiEdizione.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico FROM t_IncarichiEdizioni WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND FK_Docente="), tblDoc.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "), "AND FK_Argomento IS NULL AND FK_Attivita="), tblAltro.get_Campo((object)"IDattedi", vFlagUpdateDB: false)), " AND OreAssegnate="), txtAssegnateAltro.Text), " "));
PerseoNET/frmDettOrdineFatture.cs:				string origineDati = "SELECT IDordine, FK_TipoOrdineSpesa, FK_Sede, FK_Fornitore, NumeroRichiesta, DescrOrdine, DataOrdineEvaso, DataRichiesta, DescrRichiedente, DescrCausale, Provvisorio, FK_TempoPagamento, DataRec, DataModifica, Bloccato FROM t_RichiesteOrdini WHERE IDordine=" + Conversions.ToString(Variabili.Ordine.PKOrdine);
PerseoNET/frmDettOrdineFatture.cs:				origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi ";
PerseoNET/frmDettOrdineFatture.cs:				origineDati = "SELECT IDtipospesa, (TipoOrdine + ' ' + TipoSpesa) AS TipoSpesa FROM t_TipoOrdine INNER JOIN t_TipoSpesa ON t_TipoOrdine.IDtordine = t_TipoSpesa.FK_TipoOrdine ORDER BY IndSpesa, TipoSpesa  ";
PerseoNET/frmDettOrdineFatture.cs:				origineDati = "SELECT t_RichiesteOrdiniFatture.IDfattord, FK_Ordine, DataRegistrazione, ProtocolloRegistrazione, NoteRegistrazione, TotaleImponibile FROM t_RichiesteOrdiniFatture WHERE FK_Ordine=" + Conversions.ToString(Variabili.Ordine.PKOrdine) + " ORDER BY DataRegistrazione ";
PerseoNET/frmDettOrdineFatture.cs:				string origineDati = "SELECT IDfattord, FK_Ordine, DataRegistrazione, ProtocolloRegistrazione, NoteRegistrazione, TotaleImponibile, Registra, DataRec, DataModifica FROM t_RichiesteOrdiniFatture WHERE IDfattord=" + Conversions.ToString(vID);
PerseoNET/frmDettOrdineFatture.cs:									string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT MAX(NumeroRichiesta) AS MaxNR FROM t_RichiesteOrdini WHERE FK_Sede=", FormOrd.get_ValoreSelezioneCombo(cmbFK_Sede)), " "), "AND DataRichiesta>='"), right), "' AND DataRichiesta<='"), right2), "' "));
PerseoNET/frmDettOrdineFatture.cs:									string origineDati = "SELECT t_RichiesteOrdiniFatture.IDfattord, FK_Ordine, DataRegistrazione, ProtocolloRegistrazione, NoteRegistrazione, TotaleImponibile FROM t_RichiesteOrdiniFatture WHERE FK_Ordine=" + Conversions.ToString(Variabili.Ordine.PKOrdine) + " ORDER BY DataRegistrazione ";
PerseoNET/frmDettDocente.cs:											string vSQL = "SELECT t_Documenti.IDdocumento, DataPubblicazione, DescrDocumento FROM t_Documenti WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND DescrDocumento='" + StrNomeFileCV + "' ";
PerseoNET/frmDettDocente.cs:												long value = Conversions.ToLong(VariabiliClassi.CmdSQL.CreaRecordset("SELECT IDtdoc FROM t_TipoDocumento WHERE CV=True AND Obsoleto=False ", Variabili.pathLog, "IDtdoc", "int"));
PerseoNET/frmDettDocente.cs:										string vSQL = "SELECT t_Documenti.IDdocumento, DataPubblicazione, DescrDocumento FROM t_Documenti WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND DescrDocumento='" + StrNomeFileCV + "' ";
PerseoNET/frmDettDocente.cs:											long value = Conversions.ToLong(VariabiliClassi.CmdSQL.CreaRecordset("SELECT IDtdoc FROM t_TipoDocumento WHERE CV=True AND Obsoleto=False ", Variabili.pathLog, "IDtdoc", "int"));
PerseoNET/frmDettDocente.cs:					VariabiliClassi.Vedetta.ControlloMancanzaProtezioneRecord("SELECT IDdocente, Bloccato FROM t_Docenti WHERE IDdocente=" + Conversions.ToString(FormDoc.ChiavePrimaria));
PerseoNET/frmDettDocente.cs:				string origineDati = "SELECT t_Docenti.IDdocente, FK_Tipo, FK_Ruolo, FK_Nazionalita, FK_TipoLavoroAttuale, Cognome, Nome, Sesso, CodFiscale, PIVA, DataNascita, LuogoNascita, NazNascita, ProvNascita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, NazResidenza, ComAbitazione, IndirAbitazione, CAPabitazione, ProvAbitazione, Tel_1, Tel_2, Tel_3, Fax, Email, Attivo, DocenteTest, CodiceDipendente, FK_SedePrimaria, FK_TipoStudio, DescrTitoloStudio, TelTutorStage, EmailTutorStage, DataUltimoCV, DataUploadCV, DataDownloadCV, DataRec, DataModifica, Bloccato FROM t_Docenti WHERE IDdocente=" + Conversions.ToString(Variabili.Docente.PKDocente);
PerseoNET/frmDettDocente.cs:				origineDati = "SELECT IDtruolodoc, TipoRuoloDocente FROM t_TipoRuoloDocente WHERE Obsoleto=False ORDER BY IndTRD, TipoRuoloDocente ";
PerseoNET/frmDettDocente.cs:				origineDati = "SELECT IDtestdipe, TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE Obsoleto=False ORDER BY IndTDIP, TipoDipendente";
PerseoNET/frmDettDocente.cs:				origineDati = "SELECT IDtdoc, TipoDocente FROM t_TipoDocente WHERE Obsoleto=False ORDER BY IndTDoc, TipoDocente";
PerseoNET/frmDettDocente.cs:				origineDati = "SELECT IDtnaz, TipoNazionalita FROM t_TipoNazionalita WHERE Obsoleto=False ORDER BY IndNaz, TipoNazionalita";
PerseoNET/frmDettDocente.cs:				origineDati = "SELECT IDtlivstudioMW, TipoLivelloMW FROM t_TipoLivelloTitoloMW WHERE Obsoleto=False ORDER BY LivelloMW, TipoLivelloMW";
PerseoNET/frmDettDocente.cs:				origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " AND FK_TipoSede=3 AND Attiva=True ORDER BY FK_TipoSede DESC, SiglaSede ";
PerseoNET/frmDettDocente.cs:							origineDati = "SELECT IDdocente FROM t_Docenti INNER JOIN t_DecodificatoreParametroFiscale ON t_Docenti.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc WHERE IDdocente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND TipoCococo=1 ";
PerseoNET/frmDettDocente.cs:						origineDati = "SELECT IDcontratto, FK_Docente, DataDimissioneDipendente FROM t_DocentiContratti WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND DataDimissioneDipendente IS NOT NULL ORDER BY DataDimissioneDipendente DESC";
PerseoNET/frmDettDocente.cs:				origineDati = ((iD_Cliente2 != FunzPerseo.PerseoClienti.CIOFS) ? ("SELECT IDdocumento, (CASE WHEN AnnoSolare IS NULL THEN TipoDocumento ELSE (TipoDocumento + ' - anno ' + AnnoSolare) END) AS TipoDocumento, (CASE WHEN AnnoSolare IS NULL THEN DataPubblicazione ELSE NULL END) As DataPubblicazione, (CASE WHEN DurataMesiMax>0 THEN DurataMesiMax ELSE NULL END) AS DurataMesiMax, CodiceInterno FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE (FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND CodiceInterno IS NULL AND TipoDocumento<>'CV (dipendente/coll.professionale)') OR (FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND CodiceInterno<>'DIDE00000.pdf' AND TipoDocumento<>'CV (dipendente/coll.professionale)') ORDER BY TipoDocumento, DataPubblicazione DESC ") : ("SELECT IDdocumento, TipoDocumento, DataPubblicazione, DurataMesiMax, CodiceInterno FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " ORDER BY TipoDocumento, DataPubblicazione DESC "));
PerseoNET/frmDettDocente.cs:							origineDati = "SELECT IDincarico FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Docente=" + Conversions.ToString(Variabili.Docente.PKDocente) + " AND FK_SedeEdizione " + Variabili.FiltroSedi;
PerseoNET/frmDettDocente.cs:								origineDati = "SELECT FK_Docente, FK_Sede FROM t_CommissioniEsame INNER JOIN t_CommissioniEsameComponenti ON t_CommissioniEsame.IDcommissione = t_CommissioniEsameComponenti.FK_Commissione WHERE FK_Docente=" + Conversions.ToString(Variabili.Docente.PKDocente) + " AND FK_Sede " + Variabili.FiltroSedi + " ";
PerseoNET/frmDettDocente.cs:				origineDati = "SELECT IDcomune, Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni ORDER BY Attivo DESC, Comune ";
PerseoNET/frmDettDocente.cs:				origineDati = "SELECT t_Documenti.IDdocumento, DataPubblicazione, DescrDocumento FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE CV=1 AND FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " ORDER BY DataPubblicazione DESC ";
PerseoNET/frmDettDocente.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtestdipe, TipoDipendente, SenzaCF FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=", FormDoc.get_ValoreSelezioneCombo(cmbFK_TipoLavoroAttuale)));
PerseoNET/frmDettDocente.cs:							origineDati = "SELECT IDcomune, CodiceComune, Comune FROM t_TipoComuni WHERE Comune='" + FunzStringa.StringaSQL(txtLuogoNascita.Text) + "' ";
PerseoNET/frmDettDocente.cs:							origineDati = "SELECT IDtnazione, CodiceNazione, DescrNazione FROM t_TipoNazioniCF WHERE DescrNazione='" + FunzStringa.StringaSQL(txtNazNascita.Text) + "' ";
PerseoNET/frmDettDocente.cs:								origineDati = "SELECT t_Docenti.IDdocente, EsclusioneIVA, EsenzioneIVA_No, RegimeFiscAgevolato, DataScadeFiscAgevolato, RivalsaGestSeparata, IscrittoRegImprese, FK_ContributoCassaPrev, FK_AltraAssINPS, DescrProfessione, FK_TipoFascia, FK_ParFiscaleAttuale, FK_AliquotaPrevSepa, DescrDatoreLavoro, IndirDatoreLavoro, ComDatoreLavoro, DataVariazionePF, ContribuenteMinimo, DescrIscrizioneAlbo, NumeroIscrizioneAlbo, FK_TipoIscrAlbo, CognomeIBAN, NomeIBAN, CodiceIBAN, Assegno, IndirizzoPEC, DataRec, DataModifica FROM t_Docenti WHERE IDdocente=" + Conversions.ToString(Variabili.Docente.PKDocente);
PerseoNET/frmDettDocente.cs:								origineDati = "SELECT IDparfisc, (DescrParFiscale + ' [codice ' + CodiceParFiscale + ']') AS StrCodice FROM t_DecodificatoreParametroFiscale WHERE Attivo=True AND PF_PersonaFisica=True AND NOT(TipoContratto LIKE  '%allievo%') ORDER BY TipoContratto, DescrParFiscale ";
PerseoNET/frmDettDocente.cs:								origineDati = "SELECT IDtfasciadoc, TipoFasciaDOC FROM t_TipoFasciaDocenteEsterno WHERE Obsoleto=False ORDER BY IndFDOC";
PerseoNET/frmDettDocente.cs:								origineDati = "SELECT IDtaltrainps, (TipoAltraAssINPS + ' [' + CodiceAssINPS + ']') AS StrAltraAss FROM t_TipoAltraAssicurazioneINPS WHERE Obsoleto=False ORDER BY CodiceAssINPS, TipoAltraAssINPS ";
PerseoNET/frmDettDocente.cs:								origineDati = "SELECT IDtalbo, TipoIscrizioneAlbo FROM t_TipoIscrizioneAlbo WHERE Obsoleto=False ORDER BY IndTIA ";
PerseoNET/frmDettDocente.cs:								origineDati = "SELECT IDtaliquosepa, (TipoAliquotaPrevSepa  & '%') AS TipoAliquotaPrevSepa FROM t_TipoAliquotaPrevidenzaSeparata WHERE Obsoleto=False ORDER BY TipoAliquotaPrevSepa";
PerseoNET/frmDettDocente.cs:								origineDati = "SELECT IDtcassaprev, (TipoContributoCassaPrev & '%') AS TipoContributoCassaPrev FROM t_TipoContributoCassaPrev WHERE Obsoleto=False ORDER BY TipoContributoCassaPrev";
PerseoNET/frmDettDocente.cs:								origineDati = "SELECT t_Docenti.IDdocente, FK_ParFiscaleAttuale, DescrDatoreLavoro, IndirDatoreLavoro, ComDatoreLavoro, CognomeIBAN, NomeIBAN, CodiceIBAN, Assegno, IndirizzoPEC, DataRec, DataModifica FROM t_Docenti WHERE IDdocente=" + Conversions.ToString(FormDoc.ChiavePrimaria);
PerseoNET/frmDettDocente.cs:							origineDati = "SELECT IDparfisc, CodiceParFiscale, TipoContratto, DescrParFiscale FROM t_DecodificatoreParametroFiscale WHERE Attivo=True AND NOT(TipoContratto LIKE 'allievo%') AND NOT(TipoContratto LIKE 'commissario esame%') AND PF_PersonaFisica=True ORDER BY DescrParFiscale, CodiceParFiscale ";
PerseoNET/frmDettDocente.cs:							string origineDati = "SELECT IDaltriredd, FK_Docente, AnnoSolare, AltriRedditi FROM t_DocentiOccasionaliAltriRedditi WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " ORDER BY AnnoSolare DESC ";
PerseoNET/frmDettDocente.cs:							string origineDati = "SELECT t_DocentiContratti.IDcontratto, FK_Docente, FK_TipoFormaContratto, TipoFormaContratto, (SELECT (TipoLivelloDocInterno + ' (' + CodiceLivelloDOC + ')') FROM t_TipoLivelloDocenteInterno WHERE IDtlivcontrdoc=FK_LivelloInterno) AS Livello, DataInizioContratto, DataFineContratto, OreContratto, Orelavorate, OreMeno, DataVariazioni, CostoDocenza, CostoCoordTutor, CostoAltreFunzioni, (CASE WHEN DataDimissioneDipendente IS NOT NULL THEN 'X' ELSE NULL END) AS Dimesso, DataDimissioneDipendente FROM t_DocentiContratti INNER JOIN t_TipoFormaContrattuale ON t_DocentiContratti.FK_TipoFormaContratto = t_TipoFormaContrattuale.IDtformacontr WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND FK_TipoFormaContratto IS NOT NULL AND Interno=1 " + text + "ORDER BY DataInizioContratto DESC";
PerseoNET/frmDettDocente.cs:							origineDati = "SELECT IDincarico, SiglaSede, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, TipoFormativoInterno, DataAvvio, DataFine, Durata, (CASE WHEN DescrArgomento IS NOT NULL THEN DescrArgomento ELSE TipoAttivita END) AS TipoAttivita, OreAssegnate, IncaricoBloccato, SbloccoTemporaneo FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento ";
PerseoNET/frmDettDocente.cs:							string origineDati = "SELECT t_DocentiPeriodiIndisponibili.IDnondispo, FK_Docente, DataDAL, DataAL, Dalle, Alle, Lun, Mar, Mer, Gio, Ven, Sab, Dom, DescrCausale, TipoCausaNonDispo FROM t_DocentiPeriodiIndisponibili INNER JOIN t_TipoCausaNonDisponibile ON t_DocentiPeriodiIndisponibili.FK_TipoCausaNonDispo = t_TipoCausaNonDisponibile.IDtnondispo WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND DataDal>=" + FunzStringa.StrDataSQL(Variabili.Annualita.GeneraStringaAvvioAnnoAmministrativo(VariabiliClassi.DataLogin), FlagSqlServer: true) + " ORDER BY DataDAL, Dalle ";
PerseoNET/frmDettDocente.cs:							origineDati = "SELECT COUNT(IDincarico) AS Contratti FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " ";
PerseoNET/frmDettDocente.cs:							origineDati = "SELECT IDincarico FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " ";
PerseoNET/frmDettDocente.cs:						origineDati = "SELECT IDincarico, SiglaSede, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, TipoFormativoInterno, DataAvvio, DataFine, Durata, (CASE WHEN DescrArgomento IS NOT NULL THEN DescrArgomento ELSE TipoAttivita END) AS TipoAttivita, OreAssegnate, (SELECT SUM(OreSvolgere) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico AND ApprovaIncarico=1) AS OreApprovate, PagamentoIndividuale, IncaricoGenericoGratuito, IncaricoBloccato, SbloccoTemporaneo FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE (DataAvvio<'" + text2 + "' AND DataFine>='" + text2 + "' AND IDdocente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + ") OR (DataAvvio>='" + text2 + "' AND DataAvvio<='" + text3 + "' AND DataFine>'" + text2 + "' AND IDdocente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + ") OR (DataAvvio<'" + text2 + "' AND DataFineFA>='" + text2 + "'  AND IDdocente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + ") OR (DataAvvio>'" + text3 + "' AND DataInizioFA<='" + text3 + "'  AND IDdocente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + ") ORDER BY SiglaSede, CodiceEdizione, IndTA, DescrArgomento ";
PerseoNET/frmDettDocente.cs:							string origineDati = "SELECT t_Documenti.IDdocumento, FK_Iscrizione, DescrDocumento, TipoDocumento, DataPubblicazione, DataScadenza, (CASE WHEN CodiceInterno IS NOT NULL THEN CodiceInterno ELSE CodiceDoc END) AS CodiceDoc, Redattore, (CASE WHEN (IndTipoDoc>=100 AND CertificazioneStudente=1) THEN 1 ELSE 0 END) AS RilascioCertificazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND (CertificazioneStudente=1 OR AttestatoPercorso=1) ORDER BY DataPubblicazione ";
PerseoNET/frmDettDocente.cs:							string origineDati = "SELECT IDiscrizione, IDedizione, SiglaSede, DescrEdizione, CodiceEdizione, (CASE WHEN TipoAnnualita IS NOT NULL THEN (CAST(IDtanno AS VARCHAR) + 'Â°') ELSE NULL END) AS TipoAnnualita, CodiceProgetto, TipoFormativoInterno, DataAvvio, DataFine, DataIscr, DataRitiro, Durata, OreAttivitaIndividuali FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_Docenti ON t_Utenti.CodFiscale = t_Docenti.CodFiscale LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno WHERE IDdocente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND DataAvvio>=t_Docenti.DataRec ORDER BY DataAvvio ";
PerseoNET/frmDettDocente.cs:				string origineDati = "SELECT IDnondispo, FK_Docente, FK_TipoCausaNonDispo, DataDAL, DataAL, DescrCausale, Dalle, Alle, Lun, Mar, Mer, Gio, Ven, Sab, Dom, DataRec, DataModifica FROM t_DocentiPeriodiIndisponibili WHERE IDnondispo=" + Conversions.ToString(vIDnodispo);
PerseoNET/frmDettDocente.cs:				origineDati = "SELECT IDtnondispo, TipoCausaNonDispo FROM t_TipoCausaNonDisponibile WHERE Obsoleto=0 ORDER BY IndTCND";
PerseoNET/frmDettDocente.cs:				string origineDati = "SELECT IDimpiegoprev, FK_Docente, FK_TipoAttivita, FK_Sede, DescrImpiego, DataInizioPeriodo, DataFinePeriodo, OrePreviste, DataRec, DataModifica FROM t_DocentiPrevisioneImpiego WHERE IDimpiegoprev=" + Conversions.ToString(vIDimpiegoprev);
PerseoNET/frmDettDocente.cs:				origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " AND FK_TipoSede=3 AND Attiva=True ORDER BY FK_TipoSede DESC, SiglaSede ";
PerseoNET/frmDettDocente.cs:				origineDati = "SELECT IDtattivita, TipoAttivita FROM t_TipoAttivitaEdizione WHERE Obsoleto=False ORDER BY IndTG, IndTA, TipoAttivita ";
PerseoNET/frmDettDocente.cs:				vSQL = "SELECT IDdocente, DataSvolgimento FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE IDdocente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND DataSvolgimento>=" + FunzStringa.StrDataSQL(txtDataDimissioneDipendente.Text, FlagSqlServer: true);
PerseoNET/frmDettDocente.cs:					string origineDati = ((Operators.CompareString(txtCercaCodiceCF.Text, "", TextCompare: false) == 0) ? ("SELECT IDcomune, Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni WHERE Comune LIKE '%" + FunzStringa.StringaSQL(txtLuogoNascita.Text) + "%' ORDER BY Attivo DESC, Comune ") : ("SELECT IDcomune, Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni WHERE CodiceComune='" + txtCercaCodiceCF.Text + "' ORDER BY Attivo DESC, Comune "));
PerseoNET/frmDettDocente.cs:					string origineDati = ((Operators.CompareString(txtCercaCodiceCF.Text, "", TextCompare: false) == 0) ? ("SELECT IDtnazione, CodiceNazione, DescrNazione, (TipoNazionalita) AS ProvenienzaGeografica, DataIstat, Attiva FROM t_TipoNazioniCF LEFT OUTER JOIN t_TipoNazionalita ON t_TipoNazioniCF.FK_ProvenienzaGeo = t_TipoNazionalita.IDtnaz WHERE CodiceNazione IS NOT NULL AND DescrNazione LIKE '%" + FunzStringa.StringaSQL(txtNazNascita.Text) + "%' ORDER BY DescrNazione") : ("SELECT IDtnazione, CodiceNazione, DescrNazione, (TipoNazionalita) AS ProvenienzaGeografica, DataIstat, Attiva FROM t_TipoNazioniCF LEFT OUTER JOIN t_TipoNazionalita ON t_TipoNazioniCF.FK_ProvenienzaGeo = t_TipoNazionalita.IDtnaz WHERE CodiceNazione IS NOT NULL AND CodiceNazione='" + txtCercaCodiceCF.Text + "' ORDER BY DescrNazione"));
PerseoNET/frmDettDocente.cs:				string origineDati = "SELECT IDcomune, Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni WHERE Comune LIKE '%" + FunzStringa.StringaSQL(txtComResidenza.Text) + "%' AND Attivo=1 ORDER BY Attivo DESC, Comune ";
PerseoNET/frmDettDocente.cs:							vNotifica = "SELECT t_Documenti.IDdocumento, DataPubblicazione, DescrDocumento FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE CV=1 AND FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " ORDER BY DataPubblicazione DESC ";
PerseoNET/frmDettDocente.cs:							vNotifica = "SELECT IDdocumento, TipoDocumento, DataPubblicazione, (CASE WHEN DurataMesiMax>0 THEN DurataMesiMax ELSE NULL END) AS DurataMesiMax, CodiceInterno FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE (AttestazioneAnnuale=1 AND TipoDocumento LIKE '%P.IVA%' AND FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND CodiceInterno<>'DIDE00000.pdf') OR (DocRiconoscimento=1 AND FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND CodiceInterno<>'DIDE00000.pdf') ORDER BY DataPubblicazione DESC, TipoDocumento ";
PerseoNET/frmDettDocente.cs:					vNotifica = ((FormDoc.ChiavePrimaria <= 0) ? ("SELECT IDdocente, CodFiscale, Cognome, Nome FROM t_Docenti WHERE CodFiscale='" + txtCodFiscale.Text + "'") : ("SELECT IDdocente, CodFiscale, Cognome, Nome FROM t_Docenti WHERE IDdocente<>" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND CodFiscale='" + txtCodFiscale.Text + "'"));
PerseoNET/frmDettDocente.cs:					vNotifica = ((FormDoc.ChiavePrimaria <= 0) ? ("SELECT IDdocente, CodFiscale, Cognome, Nome FROM t_Docenti WHERE Cognome='" + FunzStringa.StringaSQL(txtCognome.Text) + "' AND Nome='" + FunzStringa.StringaSQL(txtNome.Text) + "' ") : ("SELECT IDdocente, CodFiscale, Cognome, Nome FROM t_Docenti WHERE IDdocente<>" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND Cognome='" + FunzStringa.StringaSQL(txtCognome.Text) + "' AND Nome='" + FunzStringa.StringaSQL(txtNome.Text) + "' "));
PerseoNET/frmDettDocente.cs:						vNotifica = ((FormDoc.ChiavePrimaria == 0) ? ("SELECT IDdocente, CodFiscale, Cognome, Nome FROM t_Docenti WHERE PIVA='" + txtPIVA.Text + "'") : ("SELECT IDdocente, CodFiscale, Cognome, Nome FROM t_Docenti WHERE IDdocente<>" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND PIVA='" + txtPIVA.Text + "'"));
PerseoNET/frmDettDocente.cs:							string origineDati = "SELECT t_Documenti.IDdocumento, FK_Docente, DescrDocumento, AnnoSolare, AttestazioneAnnuale FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE AttestazioneAnnuale=1 AND AnnoSolare='" + text + "' AND DescrDocumento LIKE '%P.IVA%' AND FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria);
PerseoNET/frmDettDocente.cs:										long value2 = Conversions.ToLong(VariabiliClassi.CmdSQL.CreaRecordset("SELECT IDtdoc FROM t_TipoDocumento WHERE AttestazioneAnnuale=True AND Obsoleto=False ", Variabili.pathLog, "IDtdoc", "int"));
PerseoNET/frmDettDocente.cs:										string vSQL = "SELECT t_Documenti.IDdocumento, FK_Docente, DescrDocumento, AnnoSolare, AttestazioneAnnuale FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE AttestazioneAnnuale=1 AND AnnoSolare='" + text + "' AND DescrDocumento LIKE '%P.IVA%' AND FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria);
PerseoNET/frmDettDocente.cs:					string vSQL = "SELECT t_Documenti.IDdocumento, FK_Docente, DescrDocumento, AnnoSolare, AttestazioneAnnuale FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE AttestazioneAnnuale=1 AND AnnoSolare='" + text + "' AND DescrDocumento LIKE '%P.IVA%' AND FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria);
PerseoNET/frmDettDocente.cs:					string origineDati = "SELECT IDcomune, Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni WHERE Comune LIKE '%" + FunzStringa.StringaSQL(txtComAbitazione.Text) + "%' AND Attivo=1 ORDER BY Attivo DESC, Comune ";
PerseoNET/frmDettDocente.cs:					string vRelazione = Conversions.ToString(Operators.ConcatenateObject("SELECT IDincacontra, FK_Contratto FROM t_IncarichiEdizioniContratti WHERE FK_Contratto=", tblContrInterno.get_Campo((object)0, vFlagUpdateDB: false)));
PerseoNET/frmDettDocente.cs:					vRelazione = Conversions.ToString(Operators.ConcatenateObject("SELECT IDcontrest, FK_DocenteContratto FROM t_DocentiContrattiEsterni WHERE FK_DocenteContratto=", tblContrInterno.get_Campo((object)0, vFlagUpdateDB: false)));
PerseoNET/frmDettDocente.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiPagamenti.IDprogpagamento, IDprogfatt, Autorizzazione, Sospeso FROM t_ProgettiPagamenti INNER JOIN t_ProgettiPagamentiFatture ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiFatture.FK_ProgPagamento WHERE (FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND FK_Progetto=", Variabili.Progetto.get_Campo((object)"IDprogetto")), " AND FK_Sede="), tblContr.get_Campo((object)"IDsede", vFlagUpdateDB: false)), " "), "AND Sospeso=1) "), "OR (FK_Docente="), FormDoc.ChiavePrimaria), " AND FK_Progetto="), Variabili.Progetto.get_Campo((object)"IDprogetto")), " AND FK_Sede="), tblContr.get_Campo((object)"IDsede", vFlagUpdateDB: false)), " "), "AND Autorizzazione=0 AND Sospeso=0) "));
PerseoNET/frmDettDocente.cs:								string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT COUNT(IDcompensi) AS NumeroRecord FROM t_ProgettiPagamentiCompensiOneri WHERE IDincarico=", tblContr.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND FK_PagamentoIndividuale IS NOT NULL "));
PerseoNET/frmDettDocente.cs:					origineDati = "SELECT IDcontratto, FK_Docente, FK_TipoFormaContratto, FK_LivelloInterno, DataInizioContratto, DataFineContratto, OreContratto, OreLavorate, DataDimissioneDipendente, OreMeno, DataVariazioni, DataRec, DataModifica FROM t_DocentiContratti WHERE IDcontratto=" + Conversions.ToString(vIDcontr);
PerseoNET/frmDettDocente.cs:					origineDati = "SELECT IDcontratto, FK_Docente, FK_TipoFormaContratto, FK_LivelloInterno, DataInizioContratto, DataFineContratto, OreContratto, OreLavorate, DataDimissioneDipendente, CostoDocenza, CostoCoordTutor, CostoAltreFunzioni, OreMeno, DataVariazioni, DataRec, DataModifica FROM t_DocentiContratti WHERE IDcontratto=" + Conversions.ToString(vIDcontr);
PerseoNET/frmDettDocente.cs:				origineDati = "SELECT IDtformacontr, TipoFormaContratto FROM t_TipoFormaContrattuale WHERE Obsoleto=0 AND Interno=1 ORDER BY IndTFA, TipoFormaContratto";
PerseoNET/frmDettDocente.cs:				origineDati = "SELECT IDtlivcontrdoc, (TipoLivelloDocInterno + ' [' + CodiceLivelloDoc + ']') AS StrLivello FROM t_TipoLivelloDocenteInterno WHERE Obsoleto=False ORDER BY CodiceLivelloDoc ";
PerseoNET/frmDettDocente.cs:						string origineDati = "SELECT IDincarico, SiglaSede, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, TipoFormativoInterno, DataAvvio, DataFine, Durata, (CASE WHEN DescrArgomento IS NOT NULL THEN DescrArgomento ELSE TipoAttivita END) AS TipoAttivita, OreAssegnate, IncaricoBloccato, SbloccoTemporaneo FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione=t_IncarichiEdizioni.IDincarico WHERE (IDincacontra IS NULL AND DataAvvio<'" + text + "' AND DataFine>='" + text + "' AND IDdocente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + ") OR (IDincacontra IS NULL AND DataAvvio>='" + text + "' AND DataAvvio<='" + text2 + "' AND DataFine>'" + text + "' AND IDdocente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + ") OR (IDincacontra IS NULL AND DataAvvio<'" + text + "' AND DataFineFA>='" + text + "'  AND IDdocente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + ") OR (IDincacontra IS NULL AND DataAvvio>'" + text2 + "' AND DataInizioFA<='" + text2 + "'  AND IDdocente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + ") ORDER BY SiglaSede, CodiceEdizione, IndTA, DescrArgomento ";
PerseoNET/frmDettDocente.cs:						string origineDati = "SELECT t_DocentiPrevisioneImpiego.IDimpiegoprev, FK_Docente, FK_TipoAttivita, FK_Sede, SiglaSede, TipoAttivita, DescrImpiego, DataInizioPeriodo, DataFinePeriodo, OrePreviste FROM t_DocentiPrevisioneImpiego INNER JOIN t_Sedi ON t_DocentiPrevisioneImpiego.FK_Sede = t_Sedi.IDsede INNER JOIN t_TipoAttivitaEdizione ON t_DocentiPrevisioneImpiego.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND DataInizioPeriodo>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataInizioPeriodo<" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " ";
PerseoNET/frmDettDocente.cs:				string origineDati = "SELECT t_IncarichiEdizioni.IDincarico, FK_Docente, t_PianoServizi.IDedizione, IDsede, DescrEdizione, TipoFormativoInterno, CodiceEdizione, CodiceProgetto, SiglaSede, DataAvvio, DataFine, (CASE WHEN DescrArgomento IS NULL THEN TipoAttivita ELSE DescrArgomento END) AS DescrAttivita, DescrIncarico, t_IncarichiEdizioni.OreAssegnate, (0) AS OreAppr, (0) AS QuotaOraIncarico, (0) AS OreFatteInc, (SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) AS OrePagate, (SELECT MIN(DataInizioIncarico) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico) AS PrimaData, (SELECT MAX(DataFineIncarico) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico) AS UltimaData, (SELECT MAX(DataProlungamento) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico) AS Prolunga, PagamentoIndividuale, SbloccoTemporaneo, (SELECT MAX(DataPagatoFine) FROM t_ProgettiPagamentiCompensiOneri WHERE IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) AS DataPagatoFine, IncaricoBloccato, DataFineFA FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE (FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND DataAvvio<'" + strd + "' AND DataFine>='" + strd + "') OR (FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND DataAvvio>='" + strd + "' AND DataAvvio<='" + stra + "') ORDER BY t_PianoServizi.DataAvvio, IndTA, t_IncarichiEdizioni.IDincarico ";
PerseoNET/frmDettDocente.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT FK_Incarico, MAX(DataAttivita) AS UltimaData FROM t_CalendarioAttivita GROUP BY FK_Incarico HAVING FK_Incarico=", clsTblDatiDR.get_Campo((object)"IDincarico")));
PerseoNET/frmDettDocente.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT t_CalendarioCodocenza.FK_Incarico, MAX(DataAttivita) AS UltimaData FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario=t_CalendarioAttivita.IDcalatt GROUP BY t_CalendarioCodocenza.FK_Incarico HAVING t_CalendarioCodocenza.FK_Incarico=", clsTblDatiDR.get_Campo((object)"IDincarico")));
PerseoNET/frmDettDocente.cs:					string vSQL = "SELECT FK_IncaricoEdizione, SUM(OreSvolgere) AS OreAppr FROM t_IncarichiEdizioniContratti WHERE ApprovaIncarico=1 GROUP BY FK_IncaricoEdizione HAVING FK_IncaricoEdizione " + str + " ";
PerseoNET/frmDettDocente.cs:					vSQL = "SELECT FK_IncaricoEdizione, AVG(QuotaOraIncarico) AS QuotaOraIncarico FROM t_IncarichiEdizioniContratti WHERE ApprovaIncarico=1 GROUP BY FK_IncaricoEdizione HAVING FK_IncaricoEdizione " + str + " ";
PerseoNET/frmDettDocente.cs:					vSQL = "SELECT IDincarico, (SUM(Minuti)/60) AS OreFatteInc FROM v_DettaglioOreSvoltePerIncaricoRidotta GROUP BY IDincarico HAVING IDincarico " + str + " ";
PerseoNET/frmDettDocente.cs:						text = "SELECT IDcontratto, DataInizioContratto, DataDimissioneDipendente FROM t_DocentiContratti WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND DataDimissioneDipendente IS NOT NULL ORDER BY DataDimissioneDipendente DESC";
PerseoNET/frmDettDocente.cs:						text = "SELECT IDcontratto, DataInizioContratto, DataDimissioneDipendente FROM t_DocentiContratti LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioniContratti.FK_Contratto=t_DocentiContratti.IDcontratto WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND IDincacontra IS NULL ORDER BY DataInizioContratto DESC";
PerseoNET/frmDettDocente.cs:						text = "SELECT IDincarico, FK_Docente FROM t_IncarichiEdizioni WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND (SELECT COUNT(IDincacontra) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione = IDincarico)>0 ";
PerseoNET/frmDettDocente.cs:				text = "SELECT IDincarico, FK_Docente FROM t_IncarichiEdizioni WHERE FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " AND (SELECT COUNT(IDincacontra) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione = IDincarico)=0 ";
PerseoNET/frmDettDocente.cs:							string str2 = "SELECT t_Docenti.IDdocente, IDcontratto, IDincarico, (Cognome + ' ' + Nome) AS StrDOC, DescrAzienda, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE (CASE WHEN t_Aziende.PIVA IS NULL THEN t_Aziende.CodFiscale ELSE t_Aziende.PIVA END) END) AS StrFiscale, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.PIVA ELSE NULL END) AS StrPIVA, SiglaSede, CodiceEdizione, DescrEdizione, CodiceProgetto, IDmwp, DescrProgetto, IDmwa, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, (DescrLetteraIncarico) AS DescrizioneIncarico, (CASE WHEN TipoAttivita='DOCENZA' THEN DescrArgomento ELSE DescrIncarico END) AS DescrizioneAttivita, OreSvolgere, QuotaOraIncarico, DataInizioIncarico, DataFineIncarico, DataProlungamento, BloccoValutazione, ContrattoApprovato, Respinto, DescrParFiscale, TipoDipendente, DescrPubblicaAmm, DataAutorizzaPubblicaAmm, ProtAutorizzaPubblicaAmm, (NULL) AS DescrDimesso, (SELECT MAX(DataGenerazione) FROM t_DocentiLettereIncarichi WHERE FK_Progetto=IDprogetto AND FK_Contratto=IDcontratto AND FK_Attivita=IDtattivita AND FK_Sede=FK_SedeEdizione) AS DataLettera, t_DocentiContrattiEsterni.DescrProfessione, t_Docenti.DescrDatoreLavoro, TipoFasciaDOC, FilePAmmPDF FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_TipoFasciaDocenteEsterno ON t_DocentiContrattiEsterni.FK_TipoFasciaContr = t_TipoFasciaDocenteEsterno.IDtfasciadoc LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda RIGHT OUTER JOIN t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento ";
PerseoNET/frmDettDocente.cs:									long value2 = Conversions.ToLong(VariabiliClassi.CmdSQL.CreaRecordset("SELECT IDtdoc FROM t_TipoDocumento WHERE TipoDocumento='Carta di identitÃ ' AND DocRiconoscimento=True AND Obsoleto=False ", Variabili.pathLog, "IDtdoc", "int"));
PerseoNET/frmDettDocente.cs:									string origineDati = "SELECT t_Documenti.IDdocumento, FK_Docente, DescrDocumento FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE DocRiconoscimento=1  AND DescrDocumento LIKE '% " + text + "%' AND FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria);
PerseoNET/frmDettDocente.cs:					string vSQL = "SELECT t_Documenti.IDdocumento, FK_Docente, DescrDocumento FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE DocRiconoscimento=1 AND DescrDocumento LIKE '% " + text + "%' AND FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria);
PerseoNET/frmDettDocente.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtestdipe, TipoDipendente, SenzaCF FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=", FormDoc.get_ValoreSelezioneCombo(cmbFK_TipoLavoroAttuale)));
PerseoNET/frmDettDocente.cs:								string text = "SELECT t_DocentiPrevisioneImpiego.IDimpiegoprev, FK_Docente, FK_TipoAttivita, FK_Sede, SiglaSede, TipoAttivita, DescrImpiego, DataInizioPeriodo, DataFinePeriodo, OrePreviste FROM t_DocentiPrevisioneImpiego INNER JOIN t_Sedi ON t_DocentiPrevisioneImpiego.FK_Sede = t_Sedi.IDsede INNER JOIN t_TipoAttivitaEdizione ON t_DocentiPrevisioneImpiego.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ";
PerseoNET/frmDettDocente.cs:										vSQL = "SELECT IDtdoc FROM t_TipoDocumento WHERE Personale=1 AND TipoDocumento LIKE '%richiesta%' AND TipoDocumentoBreve LIKE '%collaborazione%' AND Obsoleto=0 ";
PerseoNET/frmDettDocente.cs:										vSQL = "SELECT t_Documenti.IDdocumento, FK_Docente, DescrDocumento, DataPubblicazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE Personale=1  AND DescrDocumento LIKE '% " + text + "%' AND FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria) + " ORDER BY DataPubblicazione DESC ";
PerseoNET/frmDettDocente.cs:										string vSQL = "SELECT IDtdoc FROM t_TipoDocumento WHERE DocRiconoscimento=True AND Personale=True AND TipoDocumento LIKE '%identitÃ %' AND Obsoleto=False ";
PerseoNET/frmDettDocente.cs:										vSQL = "SELECT t_Documenti.IDdocumento, FK_Docente, DescrDocumento FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE DocRiconoscimento=1  AND DescrDocumento LIKE '% " + text + "%' AND FK_Docente=" + Conversions.ToString(FormDoc.ChiavePrimaria);
PerseoNET/frmDettDocente.cs:					string origineDati = "SELECT IDiscrizione, CodiceEdizione, SiglaSede, TipoLivello, DescrSettore, OrePreviste FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_TipoSicurezzaLivello ON t_PianoServizi.FK_LivelloSpecificoSicurezza = t_TipoSicurezzaLivello.IDtoresicurezza WHERE IDiscrizione " + text;
PerseoNET/frmDettDocente.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, TipoLivello, OrePreviste, DescrSettore FROM t_ConvenzioniStage INNER JOIN t_TipoSicurezzaLivello ON t_ConvenzioniStage.FK_LivelloSpecificoSicurezza = t_TipoSicurezzaLivello.IDtoresicurezza WHERE FK_Iscrizione=", tblCertificazioni.get_Campo((object)"FK_Iscrizione", vFlagUpdateDB: false)), " ORDER BY OrePreviste DESC"));
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT IDvers, DataVersSW, Login, OraRipristino, DataGuidaRapida, DeltaAvvioContratto, ContrattoPregresso, FK_Pagatore, BloccoPagamento, BloccoContratti, BloccoRichiedePagamento, DataRec, DataModifica FROM zt_Versione ";
PerseoNET/frmPannelloAmministratoreSistema.cs:				origineDati = "SELECT IDvers, DataGPR FROM zt_Versione";
PerseoNET/frmPannelloAmministratoreSistema.cs:					text = "SELECT Persona, (CASE WHEN Persona=-1 THEN 'admin' ELSE (Cognome + ' ' + Nome) END) AS Utente, Data, Tipo, Azione FROM t_Personale RIGHT OUTER JOIN t_StoricoEventi ON t_Personale.IDpers = t_StoricoEventi.Persona WHERE t_StoricoEventi.Tipo LIKE '%CONNESSO%' AND t_StoricoEventi.Data>= " + FunzStringa.StrDataSQL(txtDataLog.Text + " 00.00.00", FlagSqlServer: true) + " AND t_StoricoEventi.Data<= " + FunzStringa.StrDataSQL(txtDataLog.Text + " 23.59.59", FlagSqlServer: true) + " ORDER BY (CASE WHEN Persona=-1 THEN 'admin' ELSE (Cognome + ' ' + Nome) END), Data DESC ";
PerseoNET/frmPannelloAmministratoreSistema.cs:				string vSQL = "SELECT Persona, (CASE WHEN Persona=-1 THEN 'admin' ELSE (Cognome + ' ' + Nome) END) AS Utente, Data, Tipo, Azione FROM t_Personale RIGHT OUTER JOIN t_StoricoEventi ON t_Personale.IDpers = t_StoricoEventi.Persona WHERE t_StoricoEventi.Tipo LIKE '%CONNESSO%' AND t_StoricoEventi.Data>= " + FunzStringa.StrDataSQL(txtDataLog.Text + " 00.00.00", FlagSqlServer: true) + " AND t_StoricoEventi.Data<= " + FunzStringa.StrDataSQL(txtDataLog.Text + " 23.59.59", FlagSqlServer: true) + " ORDER BY (CASE WHEN Persona=-1 THEN '-1 GN' ELSE (Cognome + ' ' + Nome + ' [ID.' + CAST(Persona AS VARCHAR) + ']') END), Data DESC ";
PerseoNET/frmPannelloAmministratoreSistema.cs:							vSQL = "SELECT FK_Attivita, FK_Iscrizione,  COUNT(DataAssenza) nreg FROM t_AssenzeAttivita WHERE DataAssenza>=" + FunzStringa.StrDataSQL(txtControllaPagatiDAL.Text, FlagSqlServer: true) + " AND DataAssenza<=" + FunzStringa.StrDataSQL(txtControllaPagatiAL.Text, FlagSqlServer: true) + " GROUP BY FK_Attivita, FK_Iscrizione HAVING COUNT(DataAssenza)>1 ORDER BY FK_Attivita, FK_Iscrizione ";
PerseoNET/frmPannelloAmministratoreSistema.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDassenza, FK_Attivita, FK_Iscrizione FROM t_AssenzeAttivita WHERE FK_Attivita=", clsTblDatiDR.get_Campo((object)"FK_Attivita")), " "), "AND FK_Iscrizione="), clsTblDatiDR.get_Campo((object)"FK_Iscrizione")), " "));
PerseoNET/frmPannelloAmministratoreSistema.cs:						string vSQL = "SELECT IDassenza FROM t_CalendarioAttivita INNER JOIN t_AssenzeAttivita ON t_CalendarioAttivita.IDcalatt = t_AssenzeAttivita.FK_Attivita WHERE DataAttivita <> DataAssenza ";
PerseoNET/frmPannelloAmministratoreSistema.cs:						vSQL = "SELECT IDassenza FROM t_AssenzeAttivita INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione AND t_AssenzeAttivita.DataAssenza >= t_Iscrizioni.DataRitiro WHERE t_Iscrizioni.DataRitiro IS NOT NULL ";
PerseoNET/frmPannelloAmministratoreSistema.cs:						vSQL = "SELECT IDassenza FROM t_AssenzeAttivita INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione AND t_AssenzeAttivita.DataAssenza < t_Iscrizioni.DataIscr WHERE t_Iscrizioni.DataRitiro IS NOT NULL ";
PerseoNET/frmPannelloAmministratoreSistema.cs:						vSQL = "SELECT FK_Attivita, FK_Iscrizione,  COUNT(DataAssenza) nreg FROM t_AssenzeAttivita WHERE DataAssenza>=" + FunzStringa.StrDataSQL(txtControllaPagatiDAL.Text, FlagSqlServer: true) + " AND DataAssenza<=" + FunzStringa.StrDataSQL(txtControllaPagatiAL.Text, FlagSqlServer: true) + " GROUP BY FK_Attivita, FK_Iscrizione HAVING COUNT(DataAssenza)>1 ORDER BY FK_Attivita, FK_Iscrizione ";
PerseoNET/frmPannelloAmministratoreSistema.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDassenza, FK_Attivita, FK_Iscrizione FROM t_AssenzeAttivita WHERE FK_Attivita=", clsTblDatiDR.get_Campo((object)"FK_Attivita")), " "), "AND FK_Iscrizione="), clsTblDatiDR.get_Campo((object)"FK_Iscrizione")), " "));
PerseoNET/frmPannelloAmministratoreSistema.cs:						string origineDati = "SELECT t_PianoServizi.IDedizione, DescrEdizione, CodiceEdizione FROM t_PianoServizi WHERE DataAvvio>'31/08/2007'";
PerseoNET/frmPannelloAmministratoreSistema.cs:						origineDati = (clsTblDatiDR.OrigineDati = "SELECT t_Azioni.IDazione, DescrAzione, CodiceAzione FROM t_Azioni ");
PerseoNET/frmPannelloAmministratoreSistema.cs:						origineDati = (clsTblDatiDR.OrigineDati = "SELECT t_Progetti.IDprogetto, DescrProgetto, CodiceProgetto FROM t_Progetti ");
PerseoNET/frmPannelloAmministratoreSistema.cs:						string origineDati = "SELECT IDdocente, IDincarico, StrDOC, IDazienda, DataPagatoInizio, DataPagatoFine, DataPagamento, OrePagate, OreRilevate FROM t_ProgettiPagamentiCompensiOneri ";
PerseoNET/frmPannelloAmministratoreSistema.cs:						origineDati = "SELECT t_Docenti.IDdocente, FK_Azienda, IDincarico, SUM(TotOreFatte) AS OrePagate, DataPagatoInizio, DataPagatoFine, DataPagamento, (Cognome + ' ' + Nome) AS StrDocente, DescrAzienda, SiglaSede, t_TipoAttivitaEdizione.TipoAttivita, DescrArgomento, Aula, Secondaria, CorrezionePagamento, CausaleCorrezione, (0) AS Rilevate, (0) AS Verificare FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_TipoAttivitaEdizione ON t_ProgettiPagamentiCompensiOneri.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE Reso=0 AND DataPagamento>='" + txtControllaPagatiDAL.Text + "' AND DataPagamento<='" + txtControllaPagatiAL.Text + "' GROUP BY DataPagatoInizio, DataPagatoFine, DataPagamento, Aula, Secondaria, CorrezionePagamento, CausaleCorrezione, t_Docenti.IDdocente, FK_Azienda, IDincarico, Cognome, Nome, DescrAzienda, SiglaSede, t_TipoAttivitaEdizione.TipoAttivita, DescrArgomento ORDER BY IDincarico, t_Docenti.IDdocente ";
PerseoNET/frmPannelloAmministratoreSistema.cs:						origineDati = "SELECT t_IncarichiEdizioni.IDincarico, SUM(TotOreFatte) AS TotOreFatte FROM t_IncarichiEdizioniOrePerMese INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniOrePerMese.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_IncarichiEdizioni.IDincarico = t_ProgettiPagamentiCompensiOneri.IDincarico GROUP BY t_IncarichiEdizioni.IDincarico ORDER BY t_IncarichiEdizioni.IDincarico ";
PerseoNET/frmPannelloAmministratoreSistema.cs:							origineDati = ((!Conversions.ToBoolean(Operators.AndObject(Operators.CompareObjectEqual(clsTblDatiDR2.get_Campo((object)"Aula"), true, TextCompare: false), Operators.CompareObjectEqual(clsTblDatiDR2.get_Campo((object)"Secondaria"), true, TextCompare: false)))) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE DataAttivita>='" + Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR2.get_Campo((object)"DataPagatoInizio")), "dd/MM/yyyy") + "' AND DataAttivita<='" + Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR2.get_Campo((object)"DataPagatoFine")), "dd/MM/yyyy") + "' AND IDincarico=", clsTblDatiDR2.get_Campo((object)"IDincarico")), " ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE DataAttivita>='" + Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR2.get_Campo((object)"DataPagatoInizio")), "dd/MM/yyyy") + "' AND DataAttivita<='" + Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR2.get_Campo((object)"DataPagatoFine")), "dd/MM/yyyy") + "' AND IDincarico=", clsTblDatiDR2.get_Campo((object)"IDincarico")), " ")));
PerseoNET/frmPannelloAmministratoreSistema.cs:									origineDati = ((!Operators.ConditionalCompareObjectEqual(clsTblDatiDR2.get_Campo((object)"CorrezionePagamento"), false, TextCompare: false)) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocente, FK_Azienda, IDincarico, SUM(TotOreFatte) AS OrePagate FROM t_ProgettiPagamentiCompensiOneri WHERE Reso=0 AND DataPagatoInizio=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR2.get_Campo((object)"DataPagatoInizio")), "dd/MM/yyyy"), FlagSqlServer: true) + "AND DataPagatoFine=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR2.get_Campo((object)"DataPagatoFine")), "dd/MM/yyyy"), FlagSqlServer: true) + "AND DataPagamento<'" + Conversions.ToString(txtControllaPagatiDAL.Value) + "' GROUP BY IDdocente, FK_Azienda, IDincarico HAVING IDincarico=", clsTblDatiDR2.get_Campo((object)"IDincarico")), " ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocente, FK_Azienda, IDincarico, SUM(TotOreFatte) AS OrePagate FROM t_ProgettiPagamentiCompensiOneri WHERE Reso=0 AND DataPagatoInizio=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR2.get_Campo((object)"DataPagatoInizio")), "dd/MM/yyyy"), FlagSqlServer: true) + "AND DataPagatoFine=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR2.get_Campo((object)"DataPagatoFine")), "dd/MM/yyyy"), FlagSqlServer: true) + "AND DataPagamento>'" + Conversions.ToString(txtControllaPagatiAL.Value) + "' GROUP BY IDdocente, FK_Azienda, IDincarico HAVING IDincarico=", clsTblDatiDR2.get_Campo((object)"IDincarico")), " ")));
PerseoNET/frmPannelloAmministratoreSistema.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, MezzaOra FROM  t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE IDincarico=", clsTblDatiDR2.get_Campo((object)"IDincarico")), " AND MezzaOra=1"));
PerseoNET/frmPannelloAmministratoreSistema.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, MezzaOra FROM  t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE IDincarico=", clsTblDatiDR2.get_Campo((object)"IDincarico")), " AND PagaConsuntivoMese=1"));
PerseoNET/frmPannelloAmministratoreSistema.cs:					string origineDati = "SELECT IDcontrest, ProtAutorizzaPubblicaAmm, DataUploadPAmm, DataLetturaPAmm, FilePAmmPDF FROM t_DocentiContrattiEsterni WHERE ProtAutorizzaPubblicaAmm IS NOT NULL AND DataUploadPAmm IS NOT NULL AND FilePAmmPDF IS NULL";
PerseoNET/frmPannelloAmministratoreSistema.cs:						txtSQL.Text = Strings.Replace(txtSQL.Text, "select ", "SELECT ", 1, -1, CompareMethod.Text);
PerseoNET/frmPannelloAmministratoreSistema.cs:						if (Strings.InStr(1, txtSQL.Text, "SELECT ", CompareMethod.Text) != 1)
PerseoNET/frmPannelloAmministratoreSistema.cs:							if (Strings.InStr(txtSQL.Text, "SELECT *", CompareMethod.Text) == 1)
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT FK_Docente, FK_Azienda, FK_Contratto, FK_Sede, FK_Progetto, FK_Attivita, QuotaOraRaggruppa, COUNT(IDlettinc) AS NLett FROM t_DocentiLettereIncarichi GROUP BY FK_Docente, FK_Azienda, FK_Contratto, FK_Sede, FK_Progetto, FK_Attivita, QuotaOraRaggruppa HAVING COUNT(IDlettinc)>1 ORDER BY FK_Contratto DESC";
PerseoNET/frmPannelloAmministratoreSistema.cs:								string origineDati = "SELECT IDlogbe, Tabella, IndComando, Comando, Attivo FROM zt_AlterTblLog_be ORDER BY Tabella, IndComando ";
PerseoNET/frmPannelloAmministratoreSistema.cs:								string origineDati = "SELECT IDstoreproc, ComandoSQL, IDaccesso_1, IDaccesso_2, IDaccesso_3, IDaccesso_4, IDaccesso_5, DescrNote, Attiva FROM zt_StoreProc ORDER BY Attiva ";
PerseoNET/frmPannelloAmministratoreSistema.cs:								string origineDati = "SELECT zt_Help.IDaiuto, Pannello, CmdAiuto, Sezione, RigaMenu, DescrRigaMenu, AiutoAttivo FROM zt_Help ORDER BY Pannello, CmdAiuto, Sezione, RigaMenu";
PerseoNET/frmPannelloAmministratoreSistema.cs:								string origineDati = "SELECT IDproc, Gruppo, Ind, Procedura, Obsoleto FROM t_TipoDirittiDB ORDER BY Gruppo, Obsoleto, Ind, Procedura ";
PerseoNET/frmPannelloAmministratoreSistema.cs:			string origineDati = "SELECT IDlogbe, IndComando, Tabella, Comando, Attivo FROM zt_AlterTblLog_be WHERE IDlogbe=" + Conversions.ToString(vID);
PerseoNET/frmPannelloAmministratoreSistema.cs:			string origineDati = "SELECT IDstoreproc, ComandoSQL, IDaccesso_1, IDaccesso_2, IDaccesso_3, IDaccesso_4, IDaccesso_5, DescrNote, Attiva, DataRec, DataModifica FROM zt_StoreProc WHERE IDstoreproc=" + Conversions.ToString(vID);
PerseoNET/frmPannelloAmministratoreSistema.cs:			string origineDati = "SELECT IDaiuto, Pannello, CmdAiuto, DescrAiuto, Sezione, RigaMenu, DescrRigaMenu, AiutoAttivo, DataRec, DataModifica FROM zt_Help WHERE IDaiuto=" + Conversions.ToString(vID);
PerseoNET/frmPannelloAmministratoreSistema.cs:			string origineDati = "SELECT IDproc, Ind, Gruppo, Procedura, Note, Obsoleto, DataRec, DataModifica FROM t_TipoDirittiDB WHERE IDproc=" + Conversions.ToString(vID);
PerseoNET/frmPannelloAmministratoreSistema.cs:					string text = "SELECT IDaiuto, Pannello, CmdAiuto, Sezione, RigaMenu FROM zt_Help WHERE Pannello='" + txtPannello.Text + "' AND CmdAiuto='" + txtCmdAiuto.Text + "' AND Sezione=" + Conversions.ToString(Conversions.ToInteger(txtSezione.Text)) + " AND RigaMenu=" + Conversions.ToString(Conversions.ToInteger(txtRigaMenu.Text)) + " ";
PerseoNET/frmPannelloAmministratoreSistema.cs:					string text = "SELECT IDproc, Procedura FROM t_TipoDirittiDB WHERE Procedura='" + FunzStringa.StringaSQL(txtProcedura.Text) + "' ";
PerseoNET/frmPannelloAmministratoreSistema.cs:					string text = "SELECT IDparfisc, CodiceParFiscale, DescrParFiscale, MaxOreAnno, chbEsclusioneIVA, chbRivalsaGestSeparata, cmbFK_AliquotaPrevSepa, cmbFK_ContributoCassaPrev, chbIscrittoRegImprese, chbRegimeFiscAgevolato, chbParasubordinato, chbContribuenteMinimo, ObbligoDataScadenza, CommissioneEsame, Gruppo, AliquotaIva, ImponibileIva, IvaAggiuntaAnticipo, IvaAggiuntaVitto, IvaAggiuntaViaggio, AliquotaRitenutaAcconto, ImponibileRitenutaAcconto, RitenutaAggiuntaAnticipo, RitenutaAggiuntaVitto, RitenutaAggiuntaViaggio, Allievi, ContributoCassaPrev, ImponibileCassaPrev, CassaPrevIncludeRivalsa, AliquotaRivalsa, ImponibileRivalsa, AliquotaRivalsa_old, AliquotaTrattenutaINPS, ImponibileTrattenutaINPS, QuotaPercipiente, QuotaCommittente, VersamentoInps, IvaRivalsa, IrpefRivalsa, CodiceTributo, SedeInps, Irap, TipoContratto, CodiceRedditoCertificazione, TipoCococo, ModelloLetteraIncarico, AccettazioneCIGCUP, DettaglioEdizione_LI, ModelloNotula, ResidenteEstero, PF_PersonaFisica, PF_Azienda, ObbligoIscrizioneAlbo, ObbligoAttestazioneProf, DataFatturaValida, FK_PFSuccessore, FK_PFPredecessore, Attivo FROM t_DecodificatoreParametroFiscale ";
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT IDcontratto, IDcontrest, FK_Docente, DescrPubblicaAmm, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, FilePAmmPDF FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE ProtAutorizzaPubblicaAmm IS NOT NULL AND FilePAmmPDF IS NULL AND DataInizioContratto>='01/01/2012' ";
PerseoNET/frmPannelloAmministratoreSistema.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcontratto, IDcontrest, FK_Docente, DescrPubblicaAmm, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, FilePAmmPDF FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE FK_Docente=", clsTblDatiDR.get_Campo((object)"FK_Docente")), " AND DescrPubblicaAmm='"), FunzStringa.StringaSQL(Conversions.ToString(clsTblDatiDR.get_Campo((object)"DescrPubblicaAmm")))), "' "), "AND t_DocentiContrattiEsterni.FilePAmmPDF IS NOT NULL "), "AND ProtAutorizzaPubblicaAmm='"), FunzStringa.StringaSQL(Conversions.ToString(clsTblDatiDR.get_Campo((object)"ProtAutorizzaPubblicaAmm")))), "' "), "AND DataAutorizzaPubblicaAmm="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataAutorizzaPubblicaAmm")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataInizioContratto>='01/06/2011' AND IDcontrest<>"), clsTblDatiDR.get_Campo((object)"IDcontrest")));
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT IDdocente, Cognome, Nome, CodiceIBAN, (0) AS Errore FROM t_Docenti WHERE CodiceIBAN IS NOT NULL";
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT IDedizione, CodiceEdizione, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, DataAvvio, DataFine, DataInizioFA, DataFineFA, FAGiorniDopo, FAGiorniPrima, (NULL) AS NuovaDataInizioFA, (NULL) AS NuovaDataFineFA FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto WHERE DataFine>='01/09/2016' AND t_PianoServizi.DataModifica>='05/02/2019' ORDER BY (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione), DataAvvio ";
PerseoNET/frmPannelloAmministratoreSistema.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.FK_Edizione, MIN(DataAttivita) AS PrimaData, MAX(DataAttivita) AS UltimaData FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE RegistrazioneEstesa=1 GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione=", clsTblDatiDR.get_Campo((object)"IDedizione")));
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT Pannello, CmdAiuto, Sezione, RigaMenu, DescrRigaMenu, DescrAiuto, AiutoAttivo FROM zt_Help ";
PerseoNET/frmPannelloAmministratoreSistema.cs:					string text = "SELECT Pannello, CmdAiuto, Sezione, RigaMenu, DescrRigaMenu, DescrAiuto FROM zt_Help ";
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT (FK_IncaricoEdizione) AS IDincarico, DataInizioIncarico, DataFineIncarico, DataProlungamento, OreSvolgere, (0) AS OreAutorizzateMIN, (0) AS OreAutorizzateMAX, (0) AS OreAutorizzate, (0) AS OreFatte, (NULL) Controllare FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_DocentiContrattiEsterni ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE DataAvvio>='01/09/2015' ORDER BY FK_IncaricoEdizione, DataInizioIncarico ";
PerseoNET/frmPannelloAmministratoreSistema.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDincarico, SUM(Minuti) AS TotaleMinuti, MIN(DataSvolgimento) AS PrimaData, MAX(DataSvolgimento) AS UltimaData FROM v_DettaglioOreSvoltePerIncarico WHERE DataSvolgimento>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico=", clsTblDatiDR.get_Campo((object)"IDincarico")));
PerseoNET/frmPannelloAmministratoreSistema.cs:						string origineDati = "SELECT Categoria, Lavorazione, LavorazioneDettaglio, Classificazione FROM t_TipoINAIL ";
PerseoNET/frmPannelloAmministratoreSistema.cs:					string origineDati = "SELECT Categoria, DescrLavorazione, DescrDettLavorazione, Classificazione FROM t_TipoINAIL ";
PerseoNET/frmPannelloAmministratoreSistema.cs:							origineDati = "SELECT IDtinail, Categoria, DescrLavorazione, DescrDettLavorazione, Classificazione FROM t_TipoClasseINAIL WHERE Categoria='" + FunzStringa.StringaSQL(Conversions.ToString(clsTblDatiDR.get_Campo((object)"Categoria"))) + "' AND DescrLavorazione='" + FunzStringa.StringaSQL(Conversions.ToString(clsTblDatiDR.get_Campo((object)"DescrLavorazione"))) + "' AND DescrDettLavorazione='" + FunzStringa.StringaSQL(Conversions.ToString(clsTblDatiDR.get_Campo((object)"DescrDettLavorazione"))) + "' ";
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT IDtinail, DescrLavorazione, DescrDettLavorazione FROM t_TipoClasseINAIL WHERE DescrDettLavorazione LIKE '%di - in%' OR DescrDettLavorazione LIKE '%per - %' OR DescrDettLavorazione LIKE '%da - %' OR DescrDettLavorazione LIKE '% - %' ";
PerseoNET/frmPannelloAmministratoreSistema.cs:					string text = "SELECT Gruppo, Indice, Sezione, Tabella, Descrizione, Etichette, EtichetteDescrEstesa, LarghezzaColonne, FormatoColonne, Allineamento, CampiModificabili, DimensioneCampi, FonteDati, CampiUnivoci, CampiNonObbligatori, RecordDuplicabile, SubQuery, CampoSubQuery, EtichettaCampoSubquery, FattoreAltezzaRiga, SoloAggiornamento, SoloAdmin, ComboTesto2, ConsentireProfilo, ComboTesto1, UpdateCampoVersione, CampoEvidenziaRighe, CampoDataModifica, InfoAiuto FROM zt_MenuRiferimenti ";
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT Gruppo, Indice, Sezione, Tabella, Descrizione, Etichette, EtichetteDescrEstesa, LarghezzaColonne, FormatoColonne, Allineamento, CampiModificabili, DimensioneCampi, FonteDati, CampiUnivoci, CampiNonObbligatori, RecordDuplicabile, SubQuery, CampoSubQuery, EtichettaCampoSubquery, FattoreAltezzaRiga, SoloAggiornamento, SoloAdmin, ComboTesto2, ConsentireProfilo, ComboTesto1, UpdateCampoVersione, CampoEvidenziaRighe, CampoDataModifica, InfoAiuto FROM zt_MenuRiferimenti ORDER BY Gruppo, Indice, Tabella ";
PerseoNET/frmPannelloAmministratoreSistema.cs:						string origineDati = "SELECT Ind, Gruppo, Procedura, Note, Obsoleto, DataRec, DataModifica FROM t_TipoDirittiDB ";
PerseoNET/frmPannelloAmministratoreSistema.cs:						origineDati = "SELECT IDproc, Ind, Gruppo, Procedura, Note, Obsoleto, DataRec, DataModifica FROM t_TipoDirittiDB ";
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT Ind, Gruppo, Procedura, Note, Obsoleto, DataRec, DataModifica FROM t_TipoDirittiDB WHERE Gruppo<>'zzz' ";
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT IDtcausaleavv, Enumerazione, TipoCausaleAvviso, Conservare, Obsoleto FROM t_TipoCausaleAvviso ORDER BY Enumerazione ";
PerseoNET/frmPannelloAmministratoreSistema.cs:						string origineDati = "SELECT IDtcausaleavv, Enumerazione, TipoCausaleAvviso, Conservare, Obsoleto FROM t_TipoCausaleAvviso ORDER BY Enumerazione ";
PerseoNET/frmPannelloAmministratoreSistema.cs:						origineDati = "SELECT IDtcausaleavv, Enumerazione, TipoCausaleAvviso, Conservare, Obsoleto FROM t_TipoCausaleAvviso ORDER BY Enumerazione ";
PerseoNET/frmPannelloAmministratoreSistema.cs:					string origineDati = "SELECT IDutente, Cognome, Nome, CodFiscale, DataNascita, Sesso, LuogoNascita, NazNascita, ProvNascita, (NULL) AS Esito FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente WHERE DataIscr>=" + FunzStringa.StrDataSQL(Strings.Format(txtControllaPagatiDAL.Value, "dd/MM/yyyy"), FlagSqlServer: true) + " AND DataIscr<=" + FunzStringa.StrDataSQL(Strings.Format(txtControllaPagatiAL.Value, "dd/MM/yyyy"), FlagSqlServer: true) + " AND CFProvvisorio=0 AND Omocodia=0 GROUP BY IDutente, Cognome, Nome, CodFiscale, DataNascita, Sesso, LuogoNascita, NazNascita, ProvNascita ORDER BY Cognome, Nome ";
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT IDrefute, Cognome, Nome, CodFiscale, Sesso FROM t_ReferentiUtente WHERE CodFiscale IS NOT NULL ";
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT IDlettinc, DataGenerazione, DataModifica FROM t_DocentiLettereIncarichi WHERE DataGenerazione Is NULL ";
PerseoNET/frmPannelloAmministratoreSistema.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDlettinc, DataModifica FROM t_DocentiLettereIncarichi WHERE IDlettinc=", clsTblDatiDR.get_Campo((object)"IDlettinc")));
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT IDedizione, SiglaSede, CodiceEdizione, DataAvvio, DataFine, Gruppo, Durata, (0) AS Modificare FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione GROUP BY IDedizione, SiglaSede, CodiceEdizione, DataAvvio, DataFine, Gruppo, Durata HAVING Gruppo=1 ORDER BY DataAvvio DESC, SiglaSede ";
PerseoNET/frmPannelloAmministratoreSistema.cs:				origineDati = "SELECT IDedizione, CodiceEdizione, SiglaSede FROM t_PianoServizi INNER JOIN t_AttivitaEdizioni ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE Gruppo=1 AND (TipoAttivita = 'docenza' OR TipoAttivita = 'stage') GROUP BY IDedizione, CodiceEdizione, SiglaSede ";
PerseoNET/frmPannelloAmministratoreSistema.cs:				string origineDati = "SELECT IDreferaz, Cognome, Nome, CF_RapprLegale, RapprLegale, TutorStage, DescrAzienda, ComSedeAz, ProvSedeAz, IndirSedeAz, (NULL) AS DataNascita, (NULL) AS Verificare FROM t_ReferentiAziende INNER JOIN t_SediAziende ON t_ReferentiAziende.FK_SedeAzienda = t_SediAziende.IDsedeaz INNER JOIN t_Aziende ON t_SediAziende.FK_Azienda = t_Aziende.IDazienda WHERE t_ReferentiAziende.CF_RapprLegale IS NOT NULL AND (NazNascita='ITALIA' OR NazNascita IS NULL) AND AziendaTest=0 ORDER BY DescrAzienda, Cognome ";
PerseoNET/frmPannelloAmministratoreSistema.cs:					string origineDati = "SELECT IDavviso, DescrAvviso, DataGenerazione FROM t_AvvisiUtentiPerseo WHERE FK_Causale=" + Conversions.ToString(6) + " AND DescrAvviso LIKE '%presenza studente iscrizione ID%' ORDER BY DataGenerazione ";
PerseoNET/frmPannelloAmministratoreSistema.cs:					origineDati = "SELECT IDavviso, DescrAvviso, DataGenerazione FROM t_AvvisiUtentiPerseo WHERE FK_Causale=" + Conversions.ToString(6) + " AND DescrAvviso LIKE '%presenza studenti edizione ID%' ORDER BY DataGenerazione ";
PerseoNET/frmControlloSovrapposizioniPersonale.cs:				vSQL = "SELECT IDcalatt, Docente, DataAttivita, OraInizio, OraFine, CodiceEdizione, DescrEdizione, SiglaSede, TipoAttivita, DescrArgomento FROM zt_SovraPersonale ORDER BY Docente, DataAttivita, OraInizio ";
PerseoNET/frmControlloSovrapposizioniPersonale.cs:				vSQL = "SELECT IDdocente, (Cognome + ' ' + Nome) AS StrDOC FROM v_DettaglioOreSvoltePerIncarico WHERE DataAttivita>=" + FunzStringa.StrDataSQL(txtDal.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtAl.Text, FlagSqlServer: true) + " AND FK_Tipo>1 GROUP BY IDdocente, Cognome, Nome ORDER BY (Cognome + ' ' + Nome)";
PerseoNET/frmControlloSovrapposizioniPersonale.cs:							vSQL = "SELECT IDcalatt, Docente, DataAttivita, OraInizio, OraFine, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, DescrArgomento, (False) AS Sovra FROM t_PianificazioneDocente ORDER BY DataAttivita, OraInizio ";
PerseoNET/frmControlloSovrapposizioniPersonale.cs:								vSQL = "SELECT IDcalatt, Docente, DataAttivita, OraInizio, OraFine, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, DescrArgomento, Sovra FROM zt_SovraPersonale ";
PerseoNET/clsGradimento.cs:				string origineDati = "SELECT IDgradimento, FK_Modello, FK_Edizione, CodiceTipo, DataGrad, BloccoReferenteSQ, DataRec, DataModifica, Bloccato FROM t_GradimentoServizi WHERE FK_Edizione=" + Conversions.ToString(mvIDedizione);
PerseoNET/clsGradimento.cs:				string origineDati = "SELECT IDrisposta, IDitemgrad, CodiceSez, IndItem, (CodiceSez + '.' + CAST(IndItem AS VARCHAR)) AS CodItem, DescrItem, DescrEstesaItem, t_GradimentoServiziRisposte.FK_Opzione, IndOpzione, FK_Questionario FROM t_GradimentoServiziRisposte INNER JOIN t_ModelloGradimentoItem ON t_GradimentoServiziRisposte.FK_Item = t_ModelloGradimentoItem.IDitemgrad INNER JOIN t_ModelloGradimentoSezioni ON t_ModelloGradimentoItem.FK_Sezione = t_ModelloGradimentoSezioni.IDsezmodgr LEFT OUTER JOIN t_ModelloGradimentoItemOpzioni ON t_GradimentoServiziRisposte.FK_Opzione = t_ModelloGradimentoItemOpzioni.IDopzgrad WHERE FK_Questionario=" + Conversions.ToString(mvIDquest) + " ORDER BY CodiceSez, IndItem, DescrItem";
PerseoNET/clsGradimento.cs:				string origineDati = "SELECT t_GradimentoServizi.IDgradimento, FK_Iscrizione, COUNT(t_GradimentoServiziRisposte.FK_Item) AS nitem, COUNT(t_GradimentoServiziRisposte.FK_Opzione) As nrisp FROM t_GradimentoServizi INNER JOIN t_GradimentoServiziQuest ON t_GradimentoServizi.IDgradimento = t_GradimentoServiziQuest.FK_Gradimento INNER JOIN t_GradimentoServiziRisposte ON t_GradimentoServiziQuest.IDquest = t_GradimentoServiziRisposte.FK_Questionario GROUP BY t_GradimentoServizi.IDgradimento, t_GradimentoServiziQuest.FK_Iscrizione HAVING t_GradimentoServizi.IDgradimento=" + Conversions.ToString(mvIDgradimento);
PerseoNET/clsGradimento.cs:				string origineDati = "SELECT t_GradimentoServizi.IDgradimento, FK_Iscrizione, COUNT(t_GradimentoServiziRisposte.FK_Item) AS nitem, COUNT(t_GradimentoServiziRisposte.FK_Opzione) As nrisp FROM t_GradimentoServizi INNER JOIN t_GradimentoServiziQuest ON t_GradimentoServizi.IDgradimento = t_GradimentoServiziQuest.FK_Gradimento INNER JOIN t_GradimentoServiziRisposte ON t_GradimentoServiziQuest.IDquest = t_GradimentoServiziRisposte.FK_Questionario GROUP BY t_GradimentoServizi.IDgradimento, t_GradimentoServiziQuest.FK_Iscrizione HAVING t_GradimentoServizi.IDgradimento=" + Conversions.ToString(mvIDgradimento);
PerseoNET/clsGradimento.cs:					origineDati = "SELECT IDrisposta, IDitemgrad, IDsezmodgr, FK_Iscrizione, CodiceSez, IndItem, (CodiceSez + '.' + CAST(IndItem AS VARCHAR)) AS CodItem, DescrItem, DescrEstesaItem, t_GradimentoServiziRisposte.FK_Opzione, IndOpzione, FK_Questionario FROM t_GradimentoServiziRisposte INNER JOIN t_ModelloGradimentoItem ON t_GradimentoServiziRisposte.FK_Item = t_ModelloGradimentoItem.IDitemgrad INNER JOIN t_ModelloGradimentoSezioni ON t_ModelloGradimentoItem.FK_Sezione = t_ModelloGradimentoSezioni.IDsezmodgr INNER JOIN t_GradimentoServiziQuest ON t_GradimentoServiziRisposte.FK_Questionario = t_GradimentoServiziQuest.IDquest INNER JOIN t_Iscrizioni ON t_GradimentoServiziQuest.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_GradimentoServizi ON t_GradimentoServiziQuest.FK_Gradimento = t_GradimentoServizi.IDgradimento LEFT OUTER JOIN t_ModelloGradimentoItemOpzioni ON t_GradimentoServiziRisposte.FK_Opzione = t_ModelloGradimentoItemOpzioni.IDopzgrad WHERE IDgradimento=" + Conversions.ToString(mvIDgradimento) + " ORDER BY CodiceSez, IndItem, DescrItem, FK_Iscrizione";
PerseoNET/clsGradimento.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ModelloGradimentoItem.IDitemgrad, FK_Modello, FK_Sezione, IndItem, DescrItem, PesoItem, ItemAttivo, IDopzgrad, FK_Item, IndOpzione, DescrOpzione, OpzioneAttiva FROM t_ModelloGradimentoItem INNER JOIN t_ModelloGradimentoItemOpzioni ON t_ModelloGradimentoItem.IDitemgrad = t_ModelloGradimentoItemOpzioni.FK_Item WHERE FK_Modello=", this.get_CampoModello((object)"FK_Modello")), " "), "ORDER BY FK_Sezione, IndItem, IDitemgrad, IndOpzione"));
PerseoNET/clsGradimento.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ModelloGradimentoItem.IDitemgrad, CodiceSez, IndItem, DescrItem, PesoItem, CoeffRating, (0) AS Punt_1, (0) AS Punt_2, (0) AS Punt_3, (0) AS Punt_4, (0) AS Punt_5, (0) AS Totale, (0) AS Media, (0) AS RatingPonderato FROM t_ModelloGradimentoItem LEFT OUTER JOIN t_ModelloGradimentoSezioni ON t_ModelloGradimentoItem.FK_Sezione = t_ModelloGradimentoSezioni.IDsezmodgr WHERE FK_ModelloGR=", this.get_CampoModello((object)"FK_Modello")), " "), "ORDER BY CodiceSez, IndItem, DescrItem"));
PerseoNET/clsGradimento.cs:					origineDati = "SELECT IDitem, CodiceSez, IndItem, DescrItem, PesoItem, CoeffRating, Punt_1, Punt_2, Punt_3, Punt_4, Punt_5, Totale, Media, RatingPonderato FROM t_Rating ";
PerseoNET/clsGradimento.cs:				string origineDati = "SELECT IDmodgtipof, FK_TipoFormativo, FK_Modello, DescrModello, DescrEstesaModello, PuntMinimo, PuntMassimo, CompilaMetaOre, MinDurataEdizione, MaxDurataEdizione, Attivo  FROM t_ModelliGradimentoTipoForm INNER JOIN t_ModelliGradimento ON t_ModelliGradimentoTipoForm.FK_Modello = t_ModelliGradimento.IDmodgr ORDER BY FK_TipoFormativo, FK_Modello ";
PerseoNET/frmPersonaleEsternoParcelle.cs:					vSQL = "SELECT t_DocentiParcelle.IDparcella, t_DocentiParcelle.Bloccato, IDdocente, IDazienda, IDcomponente, FK_Causale, IDprogetto, IDazione, IDedizione, IDsede, FK_PF, t_CommissioniEsameComponenti.FK_Commissione, (CASE WHEN IDazienda IS NOT NULL THEN DescrAzienda ELSE (Cognome + ' ' + Nome) END) AS Collaboratore, DescrParFiscale, (CASE WHEN (IDprogetto IS NOT NULL AND IDcomponente IS NULL) THEN (DescrProgetto + ' - ' + CodiceProgetto) WHEN IDedizione IS NOT NULL THEN (DescrEdizione + ' - ' + CodiceEdizione) WHEN (IDsede IS NOT NULL AND IDcomponente IS NULL AND DescrParcella IS NOT NULL) THEN DescrParcella WHEN (IDsede IS NOT NULL AND IDcomponente IS NULL AND DescrParcella IS NULL) THEN (TipoCausaleParcella + ' - '  + SiglaSede) WHEN IDcomponente IS NOT NULL THEN ('Parcella componente commissione esame') ELSE '??? ???' END) AS OggettoParcella, SiglaSede, DescrCostiAggiuntivi, DescrParcella, TipoCausaleParcella, DataParcella, ApprovaParcella, DescrAmmNomina, DescrDatoreLavoro, DataPagamento, ImportoParcella, CostiAnticipo, CostiVitto, CostiViaggio, (0) AS Selezione  FROM t_Progetti RIGHT OUTER JOIN t_DocentiParcelle INNER JOIN t_TipoCausaleParcella ON t_DocentiParcelle.FK_Causale = t_TipoCausaleParcella.IDtcausaparce LEFT OUTER JOIN t_CommissioniEsameComponenti ON t_DocentiParcelle.FK_Commissione = t_CommissioniEsameComponenti.IDcomponente LEFT OUTER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Sedi ON t_DocentiParcelle.FK_Sede = t_Sedi.IDsede ON t_Progetti.IDprogetto = t_DocentiParcelle.FK_Progetto LEFT OUTER JOIN t_Azioni ON t_DocentiParcelle.FK_Azione = t_Azioni.IDazione LEFT OUTER JOIN t_PianoServizi ON t_DocentiParcelle.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda WHERE DataParcella>='" + text + "' AND DataParcella<='" + text2 + "' AND IDsede " + Variabili.FiltroSedi + " AND DataPagamento IS NULL ORDER BY (CASE WHEN FK_Azienda IS NOT NULL THEN DescrAzienda ELSE (Cognome + ' ' + Nome) END), DataParcella ";
PerseoNET/frmPersonaleEsternoParcelle.cs:				string origineDati = "SELECT DataPagamento FROM t_DocentiParcelle WHERE DataPagamento>='01/09/" + Strings.Left(cmbAnno.Text, 4) + "' AND DataPagamento<='31/08/" + Strings.Right(cmbAnno.Text, 4) + "' GROUP BY DataPagamento ORDER BY DataPagamento";
PerseoNET/frmPersonaleEsternoParcelle.cs:						string origineDati = "SELECT IDparcella, sngCostoInc, sngRiva, sngCassaPrev, CostiAnticipo, CostiViaggio, CostiVitto, CostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, MatricolaTracciatoAssegni, GenerareAssegno, DataPagamento, DataModifica FROM t_DocentiParcelle WHERE IDparcella " + str + " ";
PerseoNET/frmPersonaleEsternoParcelle.cs:								string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcomponente, DescrAmmNomina FROM t_CommissioniEsameComponenti WHERE IDcomponente=", tblParc.get_Campo((object)"IDcomponente", vFlagUpdateDB: false)), " "));
PerseoNET/frmPersonaleEsternoParcelle.cs:								vSQL = ((!Operators.ConditionalCompareObjectEqual(Variabili.Docente.get_Campo((object)"DescrDatoreLavoro"), clsTblDatiDR.get_Campo((object)"DescrAmmNomina"), TextCompare: false)) ? "SELECT IDparfisc, DescrParFiscale, CodiceParFiscale FROM t_DecodificatoreParametroFiscale WHERE CodiceTributo='1040' AND CommissioneEsame=True AND Attivo=True " : "SELECT IDparfisc, DescrParFiscale, CodiceParFiscale FROM t_DecodificatoreParametroFiscale WHERE CodiceTributo='1004' AND CommissioneEsame=True AND Attivo=True ");
PerseoNET/frmPersonaleEsternoParcelle.cs:				string origineDati = "SELECT t_DocentiParcelle.IDparcella, t_Docenti.IDdocente, FK_Azienda, FK_Progetto, FK_Azione, FK_Edizione, FK_Sede, FK_Commissione, FK_Causale, FK_PF, FK_ParFiscaleAttuale, (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, DescrParFiscale, TipoCausaleParcella, (NULL) AS StrOggetto, sngAliquotaPrevSepa, ImportoParcella, CostiAnticipo, CostiViaggio, CostiVitto, sngCostoInc, sngRiva, sngCassaPrev, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, Autorizzazione, DataAutorizzazione, DataPagamento, MatricolaTracciatoAssegni, GenerareAssegno, CodiceTributo FROM t_DecodificatoreParametroFiscale INNER JOIN t_DocentiParcelle ON t_DecodificatoreParametroFiscale.IDparfisc = t_DocentiParcelle.FK_PF INNER JOIN t_TipoCausaleParcella ON t_DocentiParcelle.FK_Causale = t_TipoCausaleParcella.IDtcausaparce LEFT OUTER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente WHERE IDparcella " + str + " ORDER BY (Cognome + ' ' + Nome), TipoCausaleParcella ";
PerseoNET/frmPersonaleEsternoParcelle.cs:						origineDati = "SELECT FK_Parcella, IDdocente, FK_Azienda, FK_Progetto, FK_Azione, IDedizione, FK_SedeEdizione, FK_Commissione, FK_Causale, FK_PF, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, TipoCausaleParcella, StrOggetto, FK_AliquotaPrevSepa, ImportoParcella, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostoInc, sngRiva, sngCassaPrev, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, Autorizzazione, DataAutorizzazione, DataPagamento, MatricolaTracciatoAssegni, GenerareAssegno FROM t_Pagamenti ";
PerseoNET/frmPersonaleEsternoParcelle.cs:							origineDati = "SELECT FK_Parcella, IDdocente, FK_Azienda, FK_Progetto, FK_Azione, IDedizione, FK_SedeEdizione, FK_Commissione, FK_Causale, FK_PF, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, TipoCausaleParcella, StrOggetto, FK_AliquotaPrevSepa, ImportoParcella, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostoInc, sngRiva, sngCassaPrev, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, Autorizzazione, DataAutorizzazione, DataPagamento, MatricolaTracciatoAssegni, GenerareAssegno, CodiceTributo FROM t_Pagamenti ";
PerseoNET/frmEdizioneQuestGrad.cs:						string origineDati = "SELECT IDgradimento, FK_Modello, FK_Edizione, CodiceTipo, DataGrad, BloccoReferenteSQ, DataRec, DataModifica FROM t_GradimentoServizi WHERE IDgradimento=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmEdizioneQuestGrad.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDmodgr, DescrModello, PuntMinimo, PuntMassimo, MinDurataEdizione, MaxDurataEdizione, Attivo FROM t_ModelliGradimento INNER JOIN t_ModelliGradimentoTipoForm ON t_ModelliGradimento.IDmodgr = t_ModelliGradimentoTipoForm.FK_Modello WHERE FK_TipoFormativo=", Variabili.Edizione.get_Campo((object)"FK_TipoFormativoInterno")), " "), "ORDER BY Attivo DESC, DescrEstesaModello "));
PerseoNET/frmEdizioneQuestGrad.cs:						origineDati = "SELECT t_GradimentoServiziQuest.IDquest, FK_Iscrizione, FK_Gradimento, IndQuest, CodiceQuest, (SELECT COUNT(FK_Opzione) FROM t_GradimentoServiziRisposte WHERE FK_Questionario=IDquest) AS NRisp FROM t_GradimentoServiziQuest WHERE t_GradimentoServiziQuest.FK_Gradimento=" + Conversions.ToString(FormQED.ChiavePrimaria) + " ORDER BY t_GradimentoServiziQuest.IndQuest, t_GradimentoServiziQuest.CodiceQuest ";
PerseoNET/frmEdizioneQuestGrad.cs:								string origineDati = "SELECT t_GradimentoServiziQuest.IDquest, FK_Iscrizione, FK_Gradimento, IndQuest, CodiceQuest, (SELECT COUNT(FK_Opzione) FROM t_GradimentoServiziRisposte WHERE FK_Questionario=IDquest) AS NRisp FROM t_GradimentoServiziQuest WHERE t_GradimentoServiziQuest.FK_Gradimento=" + Conversions.ToString(FormQED.ChiavePrimaria) + " ORDER BY t_GradimentoServiziQuest.IndQuest, t_GradimentoServiziQuest.CodiceQuest ";
PerseoNET/frmEdizioneQuestGrad.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_GradimentoServiziRisposte(FK_Item, FK_Questionario) SELECT IDitemgrad, (", tblQuest.get_Campo((object)0, vFlagUpdateDB: false)), ") AS FKQ FROM t_ModelloGradimentoItem "), "WHERE FK_Modello="), Variabili.Gradimento.get_CampoModello((object)"FK_Modello")));
PerseoNET/frmEdizioneQuestGrad.cs:									string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_GradimentoServiziRisposte.IDrisposta, t_GradimentoServiziRisposte.FK_Item, FK_Opzione, CodiceSez, IndItem, DescrItem, DescrOpzione, IndOpzione FROM t_GradimentoServiziRisposte INNER JOIN t_ModelloGradimentoItem ON t_GradimentoServiziRisposte.FK_Item = t_ModelloGradimentoItem.IDitemgrad INNER JOIN t_ModelloGradimentoSezioni ON t_ModelloGradimentoItem.FK_Sezione = t_ModelloGradimentoSezioni.IDsezmodgr LEFT OUTER JOIN t_ModelloGradimentoItemOpzioni ON t_GradimentoServiziRisposte.FK_Opzione = t_ModelloGradimentoItemOpzioni.IDopzgrad WHERE FK_Questionario=", tblQuest.get_Campo((object)"IDquest", vFlagUpdateDB: false)), " "), "ORDER BY CodiceSez, IndItem "));
PerseoNET/frmEdizioneQuestGrad.cs:							string origineDati = "SELECT Domanda, Risposta, CodFiscale FROM t_Risposte ";
PerseoNET/frmEdizioneQuestGrad.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_GradimentoServiziRisposte(FK_Item, FK_Questionario) SELECT IDitemgrad, (", tblQuest.get_Campo((object)0, vFlagUpdateDB: false)), ") AS FKQ FROM t_ModelloGradimentoItem "), "WHERE FK_Modello="), Variabili.Gradimento.get_CampoModello((object)"FK_Modello")));
PerseoNET/frmEdizioneQuestGrad.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT CodiceQuest, CodiceSez, IndItem, CodiceItem, DescrItem, PesoItem, PuntPesato, IndOpzione FROM v_DettRisposteGradimento WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY IndQuest, CodiceSez, CodiceItem "));
PerseoNET/frmEdizioneQuestGrad.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT CodiceSez, IndItem, CodiceItem, DescrItem, SUM(Scelto1) AS Freq1, SUM(Scelto2) AS Freq2, SUM(Scelto3) AS Freq3, SUM(Scelto4) AS Freq4, SUM(Scelto5) AS Freq5 FROM v_DettRisposteGradimento WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " GROUP BY CodiceSez, IndItem, CodiceItem, DescrItem "), "ORDER BY CodiceSez, CodiceItem "));
PerseoNET/frmEdizioneQuestGrad.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT CodiceSez, IndItem, CodiceItem, DescrItem, SUM(IndOpzione) AS Totale, COUNT(IndOpzione) AS NRisp, ((SUM(IndOpzione)*1.0)/COUNT(IndOpzione)) AS Media FROM v_DettRisposteGradimento WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " GROUP BY CodiceSez, IndItem, CodiceItem, DescrItem "), "ORDER BY CodiceSez, CodiceItem "));
PerseoNET/frmEdizioneQuestGrad.cs:							origineDati = "SELECT t_Rating.IDitem, CodiceSez, IndItem, DescrItem, PesoItem, CoeffRating, Punt_1, Punt_2, Punt_3, Punt_4, Punt_5, Totale, Media, RatingPonderato FROM t_Rating ORDER BY  CodiceSez, IndItem";
PerseoNET/frmEdizioneQuestGrad.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT CodiceQuest, SUM(IndOpzione) AS PuntGrezzo, ((SUM(IndOpzione)*1.0)/COUNT(IndOpzione)) AS PuntMedio, SUM(PuntPesato) AS PuntPesato FROM v_DettRisposteGradimento WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " GROUP BY CodiceQuest "), "ORDER BY CodiceQuest "));
PerseoNET/frmEdizioneQuestGrad.cs:				vSQL = "SELECT t_Rating.IDitem, CodiceSez, IndItem, DescrItem, PesoItem, CoeffRating, Punt_1, Punt_2, Punt_3, Punt_4, Punt_5, Totale, Media, RatingPonderato FROM t_Rating ORDER BY  CodiceSez, IndItem";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtconvenzione, Comunicazioni FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoConvenzione")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtconvenzione, Comunicazioni FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoConvenzione")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtconvenzione, Comunicazioni FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoConvenzione")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (Cognome + ' ' + Nome) AS ResponsabileSede FROM t_ReferentiAziende WHERE FK_SedeAzienda=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDsedeaz")), " "), "AND ResponsabileSede=1 AND Attivo=1 ORDER BY (Cognome + ' ' + Nome) "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = "SELECT IDreferaz, (Cognome + ' ' + Nome) AS ResponsabileSede, TipoRuoloAz FROM t_ReferentiAziende LEFT OUTER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz WHERE (Cognome + ' ' + Nome)='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FirmatarioAzienda"))) + "' AND TipoRuoloAz<>'Altro' ORDER BY TipoRuoloAz ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DescrAvviso FROM t_AvvisiUtentiPerseo WHERE DescrAvviso LIKE '% progetto ID=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), ", %' "), "AND DescrAvviso LIKE '% regola %' AND DescrAvviso LIKE '% proroga %' "), "AND DescrAvviso LIKE '%, Studente %' AND FK_Causale="), clsNotificaEvento.TipoNotificaEvento.NotificaConvenzioneStage), " "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvob, IDcompestd, FK_Convenzione, DescrConoAbi, Tipo, IndCA, t_ProfessioniCompetenzeRL.DescrCompetenza, LivelloEQF, DescrProfessione, ProfessioneISTAT FROM t_ConvenzioniStageObiettivi INNER JOIN t_ProfessioniConoAbiRL ON t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita = t_ProfessioniConoAbiRL.IDconoabi INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniConoAbiRL.FK_Competenza = t_ProfessioniCompetenzeRL.IDcompestd INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl WHERE FK_Convenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "ORDER BY DescrProfessione, t_ProfessioniCompetenzeRL.DescrCompetenza, Tipo DESC, IndCA, DescrConoAbi "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcompestd, COUNT(IDconoabi) AS Numero FROM t_ConvenzioniStageObiettivi INNER JOIN t_ProfessioniConoAbiRL ON t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita = t_ProfessioniConoAbiRL.IDconoabi INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniConoAbiRL.FK_Competenza = t_ProfessioniCompetenzeRL.IDcompestd INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl WHERE FK_Convenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "GROUP BY IDcompestd "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = "SELECT IDcompestd, DescrCompetenza, COUNT(IDconoabi) AS Numero FROM t_ProfessioniCompetenzeRL INNER JOIN t_ProfessioniConoAbiRL ON t_ProfessioniCompetenzeRL.IDcompestd = t_ProfessioniConoAbiRL.FK_Competenza WHERE ConoAbilitaAttiva=1 GROUP BY IDcompestd, DescrCompetenza HAVING IDcompestd " + clsTblDatiDR2.StringaFiltroIN("IDcompestd");
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = "SELECT Svantaggio FROM t_TipoStatoTirocinante WHERE TipoStatoTirocinante='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"TipoStatoTirocinante"))) + "' ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvob, IDcompestd, FK_Convenzione, DescrConoAbi, Tipo, IndCA, t_ProfessioniCompetenzeRL.DescrCompetenza, LivelloEQF, DescrProfessione, ProfessioneISTAT FROM t_ConvenzioniStageObiettivi INNER JOIN t_ProfessioniConoAbiRL ON t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita = t_ProfessioniConoAbiRL.IDconoabi INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniConoAbiRL.FK_Competenza = t_ProfessioniCompetenzeRL.IDcompestd INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl WHERE FK_Convenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "ORDER BY DescrProfessione, t_ProfessioniCompetenzeRL.DescrCompetenza, Tipo DESC, IndCA, DescrConoAbi "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ConvenzioniStageObiettivi.IDconvob, (IDconvob) AS IDcompestd, DescrCompetenza, (DescrObiettivoStage) AS DescrConoAbi, ('X') AS Tipo FROM t_ConvenzioniStageObiettivi INNER JOIN t_TipoObiettivoStage ON t_ConvenzioniStageObiettivi.FK_TipoObiettivo = t_TipoObiettivoStage.IDtobstage WHERE FK_Convenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "ORDER BY IndObStage "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDprogetto, RilevanzaProgetto FROM t_Progetti WHERE IDprogetto=", Variabili.Progetto.get_Campo((object)0)));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = "SELECT Svantaggio FROM t_TipoStatoTirocinante WHERE TipoStatoTirocinante='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"TipoStatoTirocinante"))) + "' ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = "SELECT IDtdipedesestage, MaxExtraCurrAttivi FROM t_TipoDipendentiSedeStage WHERE TipoDipendentiSedeStage='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"NumeroDipendentiSedeStage"))) + "' ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDrefute, (Cognome + ' ' + Nome) AS RapprMinore, TipoReferenteUte FROM t_ReferentiUtente INNER JOIN t_TipoReferenteUtente ON t_ReferentiUtente.FK_TipoRef = t_TipoReferenteUtente.IDtrefute WHERE FirmaStageMinore=1 AND Attivo=1 AND FK_Utente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, DataAvvio, DataFine, DurataStage, DataSospesoDal, DataSospesoAl FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda WHERE FK_Iscrizione=", Variabili.Edizione.get_CampoIscrizione((object)"IDiscrizione")), " "), "AND FK_Azienda="), Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"IDazienda")), " "), "AND DataFine>="), FunzStringa.StrDataSQL(Strings.Format(DateAndTime.DateAdd(DateInterval.Day, -7.0, Conversions.ToDate(Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"DataAvvio"))), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND IDconvenzione<>"), Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "ORDER BY DataFine DESC "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT NomeFileLogo, NomeFileLogoEntePiccolo FROM t_TipoLogoRegistroStage WHERE IDtlogoregstage=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoLogo")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDrefute, (Cognome + ' ' + Nome) AS RapprMinore, TipoReferenteUte FROM t_ReferentiUtente INNER JOIN t_TipoReferenteUtente ON t_ReferentiUtente.FK_TipoRef = t_TipoReferenteUtente.IDtrefute WHERE FirmaStageMinore=1 AND Attivo=1 AND FK_Utente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					string vSQL = "SELECT IDreferaz, (Cognome + ' ' + Nome) AS ResponsabileSede, TipoRuoloAz FROM t_ReferentiAziende LEFT OUTER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz WHERE (Cognome + ' ' + Nome)='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FirmatarioAzienda"))) + "' AND TipoRuoloAz<>'Altro' ORDER BY TipoRuoloAz ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtconvenzione, ObbligoIndennita, IndennitaMIN, IndennitaMAX FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoConvenzione")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (Cognome + ' ' + Nome) AS ResponsabileSede FROM t_ReferentiAziende WHERE FK_SedeAzienda=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDsedeaz")), " "), "AND ResponsabileSede=1 AND Attivo=1 ORDER BY (Cognome + ' ' + Nome) "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ConvenzioniStageObiettivi.IDconvob, (IDconvob) AS IDcompestd, DescrAttivitaStage, (DescrObiettivoStage) AS DescrConoAbi, DescrCompetenza, DescrQuadroRiferimento FROM t_ConvenzioniStageObiettivi LEFT OUTER JOIN t_TipoObiettivoStage ON t_ConvenzioniStageObiettivi.FK_TipoObiettivo = t_TipoObiettivoStage.IDtobstage WHERE FK_Convenzione=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), " AND FK_ConoscenzaAbilita IS NULL "), "ORDER BY IndObStage "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvob, IDcompestd, FK_Convenzione, ('" + FunzStringa.StringaSQL(stringa) + "') AS DescrAttivitaStage, DescrConoAbi, Tipo, IndCA, t_ProfessioniCompetenzeRL.DescrCompetenza, LivelloEQF, DescrProfessione, ProfessioneISTAT FROM t_ConvenzioniStageObiettivi INNER JOIN t_ProfessioniConoAbiRL ON t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita = t_ProfessioniConoAbiRL.IDconoabi INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniConoAbiRL.FK_Competenza = t_ProfessioniCompetenzeRL.IDcompestd INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl WHERE FK_Convenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "ORDER BY DescrProfessione, t_ProfessioniCompetenzeRL.DescrCompetenza, Tipo DESC, IndCA, DescrConoAbi "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = "SELECT t_TipoSicurezzaContenuti.IDtcertsicurezza, DescrContenuto, DescrRiferimento, Ordinale, t_TipoSicurezzaContenuti.OrePreviste, (t_TipoSicurezzaLivello.OrePreviste) AS TotaleOrePreviste, NoteCertificato, SottoTitolo FROM t_TipoSicurezzaContenuti INNER JOIN t_TipoSicurezzaLivello ON t_TipoSicurezzaContenuti.FK_Livello = t_TipoSicurezzaLivello.IDtoresicurezza WHERE LivelloGenerale=1 AND t_TipoSicurezzaLivello.Obsoleto=0 ORDER BY Ordinale";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtoresicurezza, (TipoLivello & ' - ' & ' (' & OrePreviste & ' ore)') AS TipoLivello, OrePreviste FROM t_TipoSicurezzaLivello WHERE IDtoresicurezza=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"FK_LivelloSpecificoSicurezza")), " "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtoresicurezza, TipoLivello, DescrSettore, OrePreviste FROM t_TipoSicurezzaLivello WHERE IDtoresicurezza=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"FK_LivelloSpecificoSicurezza")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, DataAvvio, DataFine, DurataStage, DataSospesoDal, DataSospesoAl FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda WHERE FK_Iscrizione=", tblIscr.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " "), "AND FK_Azienda="), Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"IDazienda")), " "), "AND DataFine>="), FunzStringa.StrDataSQL(Strings.Format(DateAndTime.DateAdd(DateInterval.Day, -7.0, Conversions.ToDate(tblIscr.get_Campo((object)"DataAvvio", vFlagUpdateDB: false))), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND IDconvenzione<>"), Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "ORDER BY DataFine DESC "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DescrAvviso FROM t_AvvisiUtentiPerseo WHERE DescrAvviso LIKE '% progetto ID=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), ", %' "), "AND DescrAvviso LIKE '% regola %' AND DescrAvviso LIKE '% proroga %' "), "AND DescrAvviso LIKE '%, Studente %' AND FK_Causale="), clsNotificaEvento.TipoNotificaEvento.NotificaConvenzioneStage), " "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (Cognome + ' ' + Nome) AS ResponsabileSede FROM t_ReferentiAziende WHERE FK_SedeAzienda=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDsedeaz")), " "), "AND ResponsabileSede=1 AND Attivo=1 ORDER BY (Cognome + ' ' + Nome) "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ConvenzioniStageObiettivi.IDconvob, DescrAttivitaStage, DescrObiettivoStage, DescrCompetenza, DescrQuadroRiferimento FROM t_ConvenzioniStageObiettivi INNER JOIN t_TipoObiettivoStage ON t_ConvenzioniStageObiettivi.FK_TipoObiettivo = t_TipoObiettivoStage.IDtobstage WHERE FK_Convenzione=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), " "), "ORDER BY IndObStage "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DescrAvviso FROM t_AvvisiUtentiPerseo WHERE DescrAvviso LIKE '% progetto ID=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), ", %' "), "AND DescrAvviso LIKE '% regola %' AND DescrAvviso LIKE '% proroga %' "), "AND DescrAvviso LIKE '%, Studente %' AND FK_Causale="), clsNotificaEvento.TipoNotificaEvento.NotificaConvenzioneStage), " "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtlogoregstage, NomeFileLogo, LogoPromotorePiePagina FROM t_TipoLogoRegistroStage WHERE IDtlogoregstage=", Variabili.Progetto.get_Campo((object)"FK_TipoLogoRegistroStage")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = "SELECT t_TipoSicurezzaContenuti.IDtcertsicurezza, DescrContenuto, DescrRiferimento, Ordinale, t_TipoSicurezzaContenuti.OrePreviste, (t_TipoSicurezzaLivello.OrePreviste) AS TotaleOrePreviste, NoteCertificato, SottoTitolo FROM t_TipoSicurezzaContenuti INNER JOIN t_TipoSicurezzaLivello ON t_TipoSicurezzaContenuti.FK_Livello = t_TipoSicurezzaLivello.IDtoresicurezza WHERE LivelloGenerale=1 AND t_TipoSicurezzaLivello.Obsoleto=0 ORDER BY Ordinale";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtoresicurezza, (TipoLivello & ' - ' & ' (' & OrePreviste & ' ore)') AS TipoLivello, OrePreviste FROM t_TipoSicurezzaLivello WHERE IDtoresicurezza=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"FK_LivelloSpecificoSicurezza")), " "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtoresicurezza, TipoLivello, DescrSettore, OrePreviste FROM t_TipoSicurezzaLivello WHERE IDtoresicurezza=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"FK_LivelloSpecificoSicurezza")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (Cognome + ' ' + Nome) AS ResponsabileSede FROM t_ReferentiAziende WHERE FK_SedeAzienda=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDsedeaz")), " "), "AND ResponsabileSede=1 AND Attivo=1 ORDER BY (Cognome + ' ' + Nome) "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ConvenzioniStageObiettivi.IDconvob, DescrAttivitaStage, DescrObiettivoStage, DescrCompetenza, DescrQuadroRiferimento FROM t_ConvenzioniStageObiettivi INNER JOIN t_TipoObiettivoStage ON t_ConvenzioniStageObiettivi.FK_TipoObiettivo = t_TipoObiettivoStage.IDtobstage WHERE FK_Convenzione=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), " "), "ORDER BY IndObStage "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				vSQL = "SELECT IDtslav, TipoStatoLav FROM t_TipoStatoLav WHERE Obsoleto=False ORDER BY TipoStatoLav";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = "SELECT t_TipoSicurezzaContenuti.IDtcertsicurezza, DescrContenuto, DescrRiferimento, Ordinale, t_TipoSicurezzaContenuti.OrePreviste, (t_TipoSicurezzaLivello.OrePreviste) AS TotaleOrePreviste, NoteCertificato, SottoTitolo FROM t_TipoSicurezzaContenuti INNER JOIN t_TipoSicurezzaLivello ON t_TipoSicurezzaContenuti.FK_Livello = t_TipoSicurezzaLivello.IDtoresicurezza WHERE LivelloGenerale=1 AND t_TipoSicurezzaLivello.Obsoleto=0 ORDER BY Ordinale";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtoresicurezza, (TipoLivello & ' - ' & ' (' & OrePreviste & ' ore)') AS TipoLivello, OrePreviste FROM t_TipoSicurezzaLivello WHERE IDtoresicurezza=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"FK_LivelloSpecificoSicurezza")), " "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, IDiscrizione FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE (FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND StagePagamento=1 AND FileAccordoEconomicoPDF IS NULL "), "AND t_ConvenzioniStage.DataRec>="), FunzStringa.StrDataSQL(Variabili.StrDataAttivazioneAccordoEconomicoPDF, FlagSqlServer: true)), " "), "AND IDconvenzione="), tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), ") "), "OR (FK_Edizione="), Variabili.Edizione.get_Campo((object)0)), " AND StagePagamento=1 AND FileAccordoEconomicoPDF IS NULL "), "AND t_ConvenzioniStage.DataAvvio>="), FunzStringa.StrDataSQL(Variabili.StrDataAttivazioneAccordoEconomicoPDF, FlagSqlServer: true)), " "), "AND IDconvenzione="), tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), ") "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DescrAvviso FROM t_AvvisiUtentiPerseo WHERE DescrAvviso LIKE '% progetto ID=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), ", %' "), "AND DescrAvviso LIKE '% regola %' AND DescrAvviso LIKE '% proroga %' "), "AND DescrAvviso LIKE '%, Studente %' AND FK_Causale="), clsNotificaEvento.TipoNotificaEvento.NotificaConvenzioneStage), " "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								text = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtlogoregstage, NomeFileLogo, LogoPromotorePiePagina FROM t_TipoLogoRegistroStage WHERE IDtlogoregstage=", Variabili.Progetto.get_Campo((object)"FK_TipoLogoRegistroStage")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								text = Conversions.ToString(Operators.ConcatenateObject("SELECT NomeFileLogo, NomeFileLogoEntePiccolo FROM t_TipoLogoRegistroStage WHERE IDtlogoregstage=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoLogo")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, IDiscrizione FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE (FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND StagePagamento=1 AND FileAccordoEconomicoPDF IS NULL "), "AND t_ConvenzioniStage.DataRec>="), FunzStringa.StrDataSQL(Variabili.StrDataAttivazioneAccordoEconomicoPDF, FlagSqlServer: true)), " "), "AND IDconvenzione="), tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), ") "), "OR (FK_Edizione="), Variabili.Edizione.get_Campo((object)0)), " AND StagePagamento=1 AND FileAccordoEconomicoPDF IS NULL "), "AND t_ConvenzioniStage.DataAvvio>="), FunzStringa.StrDataSQL(Variabili.StrDataAttivazioneAccordoEconomicoPDF, FlagSqlServer: true)), " "), "AND IDconvenzione="), tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), ") "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DescrAvviso FROM t_AvvisiUtentiPerseo WHERE DescrAvviso LIKE '% progetto ID=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), ", %' "), "AND DescrAvviso LIKE '% regola %' AND DescrAvviso LIKE '% proroga %' "), "AND DescrAvviso LIKE '%, Studente %' AND FK_Causale="), clsNotificaEvento.TipoNotificaEvento.NotificaConvenzioneStage), " "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							text = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtlogoregstage, NomeFileLogo, LogoPromotorePiePagina FROM t_TipoLogoRegistroStage WHERE IDtlogoregstage=", Variabili.Progetto.get_Campo((object)"FK_TipoLogoRegistroStage")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Tutor, (Cognome + ' ' + Nome) AS StrTutor FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Docenti ON t_ConvenzioniStage.FK_Tutor = t_Docenti.IDdocente WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " GROUP BY FK_Tutor, (Cognome + ' ' + Nome) "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				vSQL = "SELECT IDconvenzione, IDiscrizione, IDutente, IDazienda, IDconvazienda, IDsedeaz, FK_TutorAzienda, FK_Tutor, FK_TipoConvenzione, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, DataIscr, DataRitiro, DataAvvio, DataFine, (CASE WHEN DataRipresaProroga IS NOT NULL THEN DataRipresaProroga ELSE DataProlungamento END) AS DataProlungamento, DataInterruzione, DurataStage, VariazioneDurataStage, (CASE WHEN DataRipresa IS NOT NULL THEN 1 ELSE 0 END) AS Ripresa, (IDconvenzione) AS ProgettoTirocinio, (IDconvazienda) AS ConvenzioneAzienda, DescrAzienda, (ComSedeAz + ' (' + ProvSedeAz + ')' + ' - ' + IndirSedeAz) AS IndirSedeStage, ProtocolloConv, DataProtocollo, StagePagamento, ResidenteEstero, NoteInterruzione, GeneratoRegistro, (0) AS RichiestaSchedaStage, FileAccordoEconomicoPDF, PKLettoAccordoEconomico, DataRipresa, (DescrVariazioni) AS NoteRipresa, t_ConvenzioniStage.DataRec FROM t_ConvenzioniStage LEFT OUTER JOIN t_SediAziende ON t_ConvenzioniStage.FK_SedeStage = t_SediAziende.IDsedeaz RIGHT OUTER JOIN t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione LEFT OUTER JOIN t_Aziende RIGHT OUTER JOIN t_AziendeSediFormativeConvenzioni ON t_Aziende.IDazienda = t_AziendeSediFormativeConvenzioni.FK_Azienda ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtsettin, StageModelloDedicato FROM t_TipoSettoreInterno WHERE IDtsettin=", Variabili.Edizione.get_Campo((object)"FK_SettoreEdizione")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDregstage FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE DataStage>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblIscr.get_Campo((object)"DataFine", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true) + " AND Stage=1 AND FK_Iscrizione=", tblIscr.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDregstage FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE DataStage>=" + FunzStringa.StrDataSQL(txtDataProlungamento.Text, FlagSqlServer: true) + " AND Stage=1 AND FK_Iscrizione=", tblIscr.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDregstage FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE DataStage>=" + FunzStringa.StrDataSQL(txtDataInterruzione.Text, FlagSqlServer: true) + " AND Stage=1 AND FK_Iscrizione=", tblIscr.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					string orientamentoEtichette = "SELECT IDtconvenzione, IndTCS, TipoConvenzione, Comunicazioni, DescrRifDecreto FROM t_TipoConvenzioneStage ORDER BY IndTCS ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:									string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDrefute, (Cognome + ' ' + Nome) AS RapprMinore, TipoReferenteUte FROM t_ReferentiUtente INNER JOIN t_TipoReferenteUtente ON t_ReferentiUtente.FK_TipoRef = t_TipoReferenteUtente.IDtrefute WHERE FirmaStageMinore=1 AND Attivo=1 AND FK_Utente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDrefute, (Cognome + ' ' + Nome) AS RapprMinore, TipoReferenteUte FROM t_ReferentiUtente INNER JOIN t_TipoReferenteUtente ON t_ReferentiUtente.FK_TipoRef = t_TipoReferenteUtente.IDtrefute WHERE FirmaStageMinore=1 AND Attivo=1 AND FK_Utente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (Cognome + ' ' + Nome) AS ResponsabileSede FROM t_ReferentiAziende WHERE FK_SedeAzienda=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDsedeaz")), " "), "AND ResponsabileSede=1 AND Attivo=1 ORDER BY (Cognome + ' ' + Nome) "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ConvenzioniStageObiettivi.IDconvob, DescrAttivitaStage, DescrObiettivoStage, DescrCompetenza, DescrQuadroRiferimento FROM t_ConvenzioniStageObiettivi INNER JOIN t_TipoObiettivoStage ON t_ConvenzioniStageObiettivi.FK_TipoObiettivo = t_TipoObiettivoStage.IDtobstage WHERE FK_Convenzione=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), " "), "ORDER BY IndObStage "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = "SELECT t_TipoSicurezzaContenuti.IDtcertsicurezza, DescrContenuto, DescrRiferimento, Ordinale, t_TipoSicurezzaContenuti.OrePreviste, (t_TipoSicurezzaLivello.OrePreviste) AS TotaleOrePreviste, NoteCertificato, SottoTitolo FROM t_TipoSicurezzaContenuti INNER JOIN t_TipoSicurezzaLivello ON t_TipoSicurezzaContenuti.FK_Livello = t_TipoSicurezzaLivello.IDtoresicurezza WHERE LivelloGenerale=1 AND t_TipoSicurezzaLivello.Obsoleto=0 ORDER BY Ordinale";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtoresicurezza, (TipoLivello & ' - ' & ' (' & OrePreviste & ' ore)') AS TipoLivello, OrePreviste FROM t_TipoSicurezzaLivello WHERE IDtoresicurezza=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"FK_LivelloSpecificoSicurezza")), " "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT TipoDipendentiSedeStage FROM t_TipoDipendentiSedeStage WHERE IDtdipedesestage=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"FK_TipoDipendentiSede")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				vSQL = "SELECT IDtslav, TipoStatoLav FROM t_TipoStatoLav WHERE Obsoleto=False ORDER BY TipoStatoLav";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				string origineDati = "SELECT IDiscrizione, IDconvenzione, (Cognome + ' ' + Nome) AS Studente, t_Utenti.CodFiscale, DescrAzienda, DescrProfessione, t_ProfessioniCompetenzeRL.DescrCompetenza, DescrConoAbi, Tipo, DescrAttivitaPreviste FROM t_ProfessioniCompetenzeRL INNER JOIN t_ProfessioniConoAbiRL ON t_ProfessioniCompetenzeRL.IDcompestd = t_ProfessioniConoAbiRL.FK_Competenza INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl INNER JOIN t_ConvenzioniStageObiettivi ON t_ProfessioniConoAbiRL.IDconoabi = t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita INNER JOIN t_ConvenzioniStage ON t_ConvenzioniStageObiettivi.FK_Convenzione = t_ConvenzioniStage.IDconvenzione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDconvenzione, (Cognome + ' ' + Nome) AS Studente, t_Utenti.CodFiscale, DescrAzienda, DescrProfessione, t_ProfessioniCompetenzeRL.DescrCompetenza, DescrConoAbi, Tipo, DescrAttivitaPreviste FROM t_ProfessioniCompetenzeRL INNER JOIN t_ProfessioniConoAbiRL ON t_ProfessioniCompetenzeRL.IDcompestd = t_ProfessioniConoAbiRL.FK_Competenza INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl INNER JOIN t_ConvenzioniStageObiettivi ON t_ProfessioniConoAbiRL.IDconoabi = t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita INNER JOIN t_ConvenzioniStage ON t_ConvenzioniStageObiettivi.FK_Convenzione = t_ConvenzioniStage.IDconvenzione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE FK_Convenzione=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), " "), "ORDER BY DescrProfessione, IndCompe, t_ProfessioniCompetenzeRL.DescrCompetenza, Tipo DESC, IndCA "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDconvenzione, (Cognome + ' ' + Nome) AS Studente, t_Utenti.CodFiscale, DescrAzienda,(NULL) AS DescrProfessione, DescrCompetenza, (DescrObiettivoStage) AS DescrConoAbi, (TipoObiettivoStage) AS Tipo, (DescrAttivitaStage) AS DescrAttivitaPreviste FROM t_Aziende INNER JOIN t_AziendeSediFormativeConvenzioni ON t_Aziende.IDazienda = t_AziendeSediFormativeConvenzioni.FK_Azienda INNER JOIN t_ConvenzioniStage ON t_AziendeSediFormativeConvenzioni.IDconvazienda = t_ConvenzioniStage.FK_ConvenzioneAzienda INNER JOIN t_ConvenzioniStageObiettivi INNER JOIN t_TipoObiettivoStage ON t_ConvenzioniStageObiettivi.FK_TipoObiettivo = t_TipoObiettivoStage.IDtobstage ON t_ConvenzioniStage.IDconvenzione = t_ConvenzioniStageObiettivi.FK_Convenzione INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY Cognome, ConvenzioneAzienda, IndObStage "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (Cognome + ' ' + Nome) AS ResponsabileSede FROM t_ReferentiAziende WHERE FK_SedeAzienda=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDsedeaz")), " "), "AND ResponsabileSede=1 AND Attivo=1 ORDER BY (Cognome + ' ' + Nome) "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ConvenzioniStageObiettivi.IDconvob, DescrAttivitaStage, DescrObiettivoStage, DescrCompetenza, DescrQuadroRiferimento FROM t_ConvenzioniStageObiettivi INNER JOIN t_TipoObiettivoStage ON t_ConvenzioniStageObiettivi.FK_TipoObiettivo = t_TipoObiettivoStage.IDtobstage WHERE FK_Convenzione=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), " "), "ORDER BY IndObStage "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ConvenzioniStageObiettivi.IDconvob, DescrAttivitaStage, DescrObiettivoStage, DescrCompetenza, DescrQuadroRiferimento FROM t_ConvenzioniStageObiettivi INNER JOIN t_TipoObiettivoStage ON t_ConvenzioniStageObiettivi.FK_TipoObiettivo = t_TipoObiettivoStage.IDtobstage WHERE FK_Convenzione=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), " "), "ORDER BY IndObStage "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtlogoregstage, NomeFileLogo, LogoPromotorePiePagina FROM t_TipoLogoRegistroStage WHERE IDtlogoregstage=", Variabili.Progetto.get_Campo((object)"FK_TipoLogoRegistroStage")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT TipoDipendentiSedeStage FROM t_TipoDipendentiSedeStage WHERE IDtdipedesestage=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"FK_TipoDipendentiSede")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = "SELECT t_TipoSicurezzaContenuti.IDtcertsicurezza, DescrContenuto, DescrRiferimento, Ordinale, t_TipoSicurezzaContenuti.OrePreviste, (t_TipoSicurezzaLivello.OrePreviste) AS TotaleOrePreviste, NoteCertificato, SottoTitolo FROM t_TipoSicurezzaContenuti INNER JOIN t_TipoSicurezzaLivello ON t_TipoSicurezzaContenuti.FK_Livello = t_TipoSicurezzaLivello.IDtoresicurezza WHERE LivelloGenerale=1 AND t_TipoSicurezzaLivello.Obsoleto=0 ORDER BY Ordinale";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtoresicurezza, (TipoLivello & ' - ' & ' (' & OrePreviste & ' ore)') AS TipoLivello, OrePreviste FROM t_TipoSicurezzaLivello WHERE IDtoresicurezza=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"FK_LivelloSpecificoSicurezza")), " "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT NomeFileLogo, NomeFileLogoEntePiccolo FROM t_TipoLogoRegistroStage WHERE IDtlogoregstage=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoLogo")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDrefute, (Cognome + ' ' + Nome) AS RapprMinore, TipoReferenteUte FROM t_ReferentiUtente INNER JOIN t_TipoReferenteUtente ON t_ReferentiUtente.FK_TipoRef = t_TipoReferenteUtente.IDtrefute WHERE FirmaStageMinore=1 AND Attivo=1 AND FK_Utente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				string origineDati = "SELECT Categoria, DescrLavorazione, DescrDettLavorazione, Classificazione, Obsoleto, (CASE WHEN Obsoleto=1 THEN 'OBSOLETO (non utilizzabile)' ELSE NULL END) AS Nota FROM t_TipoClasseINAIL ORDER BY Obsoleto, Categoria, DescrLavorazione ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, FileAccordoEconomicoPDF FROM t_ConvenzioniStage WHERE IDconvenzione=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), " AND FileAccordoEconomicoPDF IS NOT NULL "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				string origineDati = "SELECT IDpers, Cognome, Nome, Email FROM t_Personale WHERE Cognome='birolini' OR cognome='cagna' AND Email IS NOT NULL ORDER BY Cognome ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				string str = "SELECT IDvartir, (FK_ConvenzioneProgetto) AS IDconvenzione, Tipo, (CASE WHEN Tutor=1 THEN (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE IDdocente=FK_Precedente) WHEN TutorAzienda=1 THEN (SELECT (Cognome + ' ' + Nome) FROM t_ReferentiAziende WHERE IDreferaz=FK_Precedente) WHEN SedeTirocinio=1 THEN (SELECT (IndirSedeAz + ' ' + ComSedeAz + ' (' + ProvSedeAz + ')') FROM t_SediAziende WHERE IDsedeaz=FK_Precedente) ELSE NULL END) AS Precedente, (CASE WHEN Tutor=1 THEN (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE IDdocente=FK_Corrente) WHEN TutorAzienda=1 THEN (SELECT (Cognome + ' ' + Nome) FROM t_ReferentiAziende WHERE IDreferaz=FK_Corrente) WHEN SedeTirocinio=1 THEN (SELECT (IndirSedeAz + ' ' + ComSedeAz + ' (' + ProvSedeAz + ')') FROM t_SediAziende WHERE IDsedeaz=FK_Corrente)  ELSE NULL END) AS Attuale, DataVariazione, Tutor, TutorAzienda, SedeTirocinio, FK_Precedente, FK_Corrente FROM t_ConvenzioniStageVariazioni ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					string origineDati = "SELECT IDpers, Cognome, Nome, Email FROM t_Personale WHERE Cognome='birolini' OR cognome='cagna' AND Email IS NOT NULL ORDER BY Cognome ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				text = "SELECT IndennitaFacoltativa FROM t_TipoStatoTirocinante WHERE TipoStatoTirocinante='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"TipoStatoTirocinante"))) + "' AND IndennitaFacoltativa=1 ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDregstage, DataStage FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE Stage=1 AND DataStage>=" + FunzStringa.StrDataSQL(txtDataSospeso.Text, FlagSqlServer: true) + " " + text2 + "AND FK_Iscrizione=", tblIscr.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					string vSQL = "SELECT IDreferaz, (Cognome + ' ' + Nome) AS ResponsabileSede, TipoRuoloAz FROM t_ReferentiAziende LEFT OUTER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz WHERE (Cognome + ' ' + Nome)='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FirmatarioAzienda"))) + "' AND TipoRuoloAz<>'Altro' ORDER BY TipoRuoloAz ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DescrAvviso, DataGenerazione FROM t_AvvisiUtentiPerseo WHERE FK_Causale=" + Conversions.ToString(9) + " AND PKRecord=", Variabili.Edizione.get_Campo((object)0)), " ORDER BY DataGenerazione"));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (Cognome + ' ' + Nome) AS ResponsabileSede FROM t_ReferentiAziende WHERE FK_SedeAzienda=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDsedeaz")), " "), "AND ResponsabileSede=1 AND Attivo=1 ORDER BY (Cognome + ' ' + Nome) "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = "SELECT IDreferaz, (Cognome + ' ' + Nome) AS ResponsabileSede, TipoRuoloAz FROM t_ReferentiAziende LEFT OUTER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz WHERE (Cognome + ' ' + Nome)='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FirmatarioAzienda"))) + "' AND TipoRuoloAz<>'Altro' ORDER BY TipoRuoloAz ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DescrAvviso FROM t_AvvisiUtentiPerseo WHERE DescrAvviso LIKE '% progetto ID=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), ", %' "), "AND DescrAvviso LIKE '% regola %' AND DescrAvviso LIKE '% proroga %' "), "AND DescrAvviso LIKE '%, Studente %' AND FK_Causale="), clsNotificaEvento.TipoNotificaEvento.NotificaConvenzioneStage), " "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvob, IDcompestd, FK_Convenzione, DescrConoAbi, Tipo, IndCA, t_ProfessioniCompetenzeRL.DescrCompetenza, LivelloEQF, DescrProfessione, ProfessioneISTAT FROM t_ConvenzioniStageObiettivi INNER JOIN t_ProfessioniConoAbiRL ON t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita = t_ProfessioniConoAbiRL.IDconoabi INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniConoAbiRL.FK_Competenza = t_ProfessioniCompetenzeRL.IDcompestd INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl WHERE FK_Convenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "ORDER BY DescrProfessione, t_ProfessioniCompetenzeRL.DescrCompetenza, Tipo DESC, IndCA, DescrConoAbi "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:									vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcompestd, COUNT(IDconoabi) AS Numero FROM t_ConvenzioniStageObiettivi INNER JOIN t_ProfessioniConoAbiRL ON t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita = t_ProfessioniConoAbiRL.IDconoabi INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniConoAbiRL.FK_Competenza = t_ProfessioniCompetenzeRL.IDcompestd INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl WHERE FK_Convenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "GROUP BY IDcompestd "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:									vSQL = "SELECT IDcompestd, DescrCompetenza, COUNT(IDconoabi) AS Numero FROM t_ProfessioniCompetenzeRL INNER JOIN t_ProfessioniConoAbiRL ON t_ProfessioniCompetenzeRL.IDcompestd = t_ProfessioniConoAbiRL.FK_Competenza WHERE ConoAbilitaAttiva=1 GROUP BY IDcompestd, DescrCompetenza HAVING IDcompestd " + clsTblDatiDR2.StringaFiltroIN("IDcompestd");
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								vSQL = "SELECT Svantaggio FROM t_TipoStatoTirocinante WHERE TipoStatoTirocinante='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"TipoStatoTirocinante"))) + "' ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvob, IDcompestd, FK_Convenzione, DescrConoAbi, Tipo, IndCA, t_ProfessioniCompetenzeRL.DescrCompetenza, LivelloEQF, DescrProfessione, ProfessioneISTAT FROM t_ConvenzioniStageObiettivi INNER JOIN t_ProfessioniConoAbiRL ON t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita = t_ProfessioniConoAbiRL.IDconoabi INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniConoAbiRL.FK_Competenza = t_ProfessioniCompetenzeRL.IDcompestd INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl WHERE FK_Convenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "ORDER BY DescrProfessione, t_ProfessioniCompetenzeRL.DescrCompetenza, Tipo DESC, IndCA, DescrConoAbi "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ConvenzioniStageObiettivi.IDconvob, (IDconvob) AS IDcompestd, DescrCompetenza, (DescrObiettivoStage) AS DescrConoAbi, ('X') AS Tipo FROM t_ConvenzioniStageObiettivi INNER JOIN t_TipoObiettivoStage ON t_ConvenzioniStageObiettivi.FK_TipoObiettivo = t_TipoObiettivoStage.IDtobstage WHERE FK_Convenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "ORDER BY IndObStage "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDrefute, (Cognome + ' ' + Nome) AS RapprMinore, TipoReferenteUte FROM t_ReferentiUtente INNER JOIN t_TipoReferenteUtente ON t_ReferentiUtente.FK_TipoRef = t_TipoReferenteUtente.IDtrefute WHERE FirmaStageMinore=1 AND Attivo=1 AND FK_Utente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, DataAvvio, DataFine, DurataStage, DataSospesoDal, DataSospesoAl FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda WHERE FK_Iscrizione=", Variabili.Edizione.get_CampoIscrizione((object)"IDiscrizione")), " "), "AND FK_Azienda="), Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"IDazienda")), " "), "AND DataFine>="), FunzStringa.StrDataSQL(Strings.Format(DateAndTime.DateAdd(DateInterval.Day, -7.0, Conversions.ToDate(Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"DataAvvio"))), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND IDconvenzione<>"), Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "ORDER BY DataFine DESC "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDprogetto, RilevanzaProgetto FROM t_Progetti WHERE IDprogetto=", Variabili.Progetto.get_Campo((object)0)));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = "SELECT Svantaggio FROM t_TipoStatoTirocinante WHERE TipoStatoTirocinante='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"TipoStatoTirocinante"))) + "' ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								vSQL = "SELECT IDtdipedesestage, MaxExtraCurrAttivi FROM t_TipoDipendentiSedeStage WHERE TipoDipendentiSedeStage='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"NumeroDipendentiSedeStage"))) + "' ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (Cognome + ' ' + Nome) AS ResponsabileSede FROM t_ReferentiAziende WHERE FK_SedeAzienda=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDsedeaz")), " "), "AND ResponsabileSede=1 AND Attivo=1 ORDER BY (Cognome + ' ' + Nome) "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = "SELECT IDreferaz, (Cognome + ' ' + Nome) AS ResponsabileSede, TipoRuoloAz FROM t_ReferentiAziende LEFT OUTER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz WHERE (Cognome + ' ' + Nome)='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FirmatarioAzienda"))) + "' AND TipoRuoloAz<>'Altro' ORDER BY TipoRuoloAz ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DescrAvviso FROM t_AvvisiUtentiPerseo WHERE DescrAvviso LIKE '% progetto ID=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), ", %' "), "AND DescrAvviso LIKE '% regola %' AND DescrAvviso LIKE '% proroga %' "), "AND DescrAvviso LIKE '%, Studente %' AND FK_Causale="), clsNotificaEvento.TipoNotificaEvento.NotificaConvenzioneStage), " "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvob, IDcompestd, FK_Convenzione, DescrConoAbi, Tipo, IndCA, t_ProfessioniCompetenzeRL.DescrCompetenza, LivelloEQF, DescrProfessione, ProfessioneISTAT FROM t_ConvenzioniStageObiettivi INNER JOIN t_ProfessioniConoAbiRL ON t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita = t_ProfessioniConoAbiRL.IDconoabi INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniConoAbiRL.FK_Competenza = t_ProfessioniCompetenzeRL.IDcompestd INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl WHERE FK_Convenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "ORDER BY DescrProfessione, t_ProfessioniCompetenzeRL.DescrCompetenza, Tipo DESC, IndCA, DescrConoAbi "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcompestd, COUNT(IDconoabi) AS Numero FROM t_ConvenzioniStageObiettivi INNER JOIN t_ProfessioniConoAbiRL ON t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita = t_ProfessioniConoAbiRL.IDconoabi INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniConoAbiRL.FK_Competenza = t_ProfessioniCompetenzeRL.IDcompestd INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl WHERE FK_Convenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "GROUP BY IDcompestd "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = "SELECT IDcompestd, DescrCompetenza, COUNT(IDconoabi) AS Numero FROM t_ProfessioniCompetenzeRL INNER JOIN t_ProfessioniConoAbiRL ON t_ProfessioniCompetenzeRL.IDcompestd = t_ProfessioniConoAbiRL.FK_Competenza WHERE ConoAbilitaAttiva=1 GROUP BY IDcompestd, DescrCompetenza HAVING IDcompestd " + clsTblDatiDR2.StringaFiltroIN("IDcompestd");
PerseoNET/frmEdizioneStudentiConvenzioni.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT NomeFileLogo, NomeFileLogoEntePiccolo FROM t_TipoLogoRegistroStage WHERE IDtlogoregstage=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoLogo")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:						vSQL = "SELECT Svantaggio FROM t_TipoStatoTirocinante WHERE TipoStatoTirocinante='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"TipoStatoTirocinante"))) + "' ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvob, (IDconvob) AS IDcompestd, FK_Convenzione, (DescrObiettivoStage) AS DescrConoAbi, (NULL) AS Tipo, (IndObStage) AS IndCA, DescrCompetenza, (NULL) AS LivelloEQF, (NULL) AS DescrProfessione, (NULL) AS ProfessioneISTAT FROM t_ConvenzioniStageObiettivi WHERE FK_Convenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "ORDER BY DescrCompetenza, IndObStage, DescrObiettivoStage "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ConvenzioniStageObiettivi.IDconvob, (IDconvob) AS IDcompestd, DescrCompetenza, (DescrObiettivoStage) AS DescrConoAbi, ('X') AS Tipo FROM t_ConvenzioniStageObiettivi INNER JOIN t_TipoObiettivoStage ON t_ConvenzioniStageObiettivi.FK_TipoObiettivo = t_TipoObiettivoStage.IDtobstage WHERE FK_Convenzione=", tblIscr.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), " "), "ORDER BY IndObStage "));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT NomeFileLogo, NomeFileLogoEntePiccolo FROM t_TipoLogoRegistroStage WHERE IDtlogoregstage=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoLogo")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDprogetto, RilevanzaProgetto FROM t_Progetti WHERE IDprogetto=", Variabili.Progetto.get_Campo((object)0)));
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = "SELECT Svantaggio FROM t_TipoStatoTirocinante WHERE TipoStatoTirocinante='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"TipoStatoTirocinante"))) + "' ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:							vSQL = "SELECT IDtdipedesestage, MaxExtraCurrAttivi FROM t_TipoDipendentiSedeStage WHERE TipoDipendentiSedeStage='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaStudente((object)"NumeroDipendentiSedeStage"))) + "' ";
PerseoNET/frmEdizioneStudentiConvenzioni.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/frmDettTblRif.cs:					Interaction.MsgBox("Indicare l'istruzione SELECT!", MsgBoxStyle.Exclamation, "Attenzione");
PerseoNET/frmDettTblRif.cs:						txtFonteDati.Text = Strings.Replace(txtFonteDati.Text, "SELECT ", "");
PerseoNET/frmDettTblRif.cs:						txtFonteDati.Text = "SELECT " + txtTabella.Text + "." + txtFonteDati.Text;
PerseoNET/frmDettTblRif.cs:				string origineDati = "SELECT IDmr, Gruppo, Indice, Tabella, Sezione, FonteDati, Descrizione, Etichette, LarghezzaColonne, Allineamento, CampiModificabili, DimensioneCampi, FormatoColonne, CampiUnivoci, SoloAggiornamento, SoloAdmin, SubQuery, CampoSubQuery, EtichettaCampoSubquery, CampiNonObbligatori, FattoreAltezzaRiga, CampoEvidenziaRighe, DataRec, DataModifica, Bloccato FROM zt_MenuRiferimenti WHERE IDmr=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/clsComandoSQL.cs:					text = "Classe ComandoSQL. Metodo CreaDataTbl. Istruzione SELECT errata nella clausola WHERE - " + text2;
PerseoNET/clsComandoSQL.cs:					text = "Classe ComandoSQL. Metodo CreaRecordset. Istruzione SELECT errata nella clausola WHERE - " + text2;
PerseoNET/clsComandoSQL.cs:								string str = "SELECT Bloccato " + Strings.Mid(cmd, num3, Strings.Len(cmd) - num3);
PerseoNET/frmDettSboccoOccupazionale.cs:				string origineDati = "SELECT IDesplav, FK_Utente, FK_SettoreProduttivo, FK_TipoContratto, FK_EsitoOccupazionale, DataInizioRapp, DataFineRapp, DescrMansione, DescrAzienda, ComuneAzienda, IndirizzoAzienda, CAPazienda, ProvAzienda, TutorAziendale, TipoContrattoCollettivo, NoteContatti, FK_SedeAzienda, NoteAltro, DescrATECO, CodiceATECO, AttivaCertificazione, DataRec, DataModifica FROM t_EsperienzeLavoro WHERE IDesplav=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettSboccoOccupazionale.cs:				origineDati = "SELECT IDtsetprod, TipoSettoreProd FROM t_TipoSettoreProduttivo WHERE Obsoleto=0 ORDER BY OrdSett, OrdArea ";
PerseoNET/frmDettSboccoOccupazionale.cs:				origineDati = "SELECT IDcontr, TipoContratto FROM t_TipoContratto WHERE Obsoleto=0 ORDER BY TipoContratto";
PerseoNET/frmDettSboccoOccupazionale.cs:				origineDati = "SELECT IDtesitoocc, TipoEsitoOccupazione FROM t_TipoEsitoOccupazione WHERE Obsoleto=0 ORDER BY Ind, TipoEsitoOccupazione";
PerseoNET/frmDettSboccoOccupazionale.cs:				origineDati = "SELECT t_Aziende.IDazienda, IDsedeaz, DescrAzienda, IndirSedeAz, ComSedeAz, ProvSedeAz, CAPSedeAz FROM t_Aziende INNER JOIN t_SediAziende ON t_SediAziende.FK_Azienda = t_Aziende.IDazienda ORDER BY DescrAzienda, ComSedeAz ";
PerseoNET/frmDocenti.cs:				string origineDati = "SELECT IDtestdipe, TipoDipendente FROM t_TipoDipendenteDocEsterno ORDER BY IndTDIP, TipoDipendente ";
PerseoNET/frmDocenti.cs:				origineDati = "SELECT IDparfisc, IIf(Attivo=True,DescrParFiscale & ' (' & CodiceParFiscale & ')','* ' & DescrParFiscale & ' (' & CodiceParFiscale & ')') AS DescrParFiscale FROM t_DecodificatoreParametroFiscale WHERE NOT(TipoContratto LIKE  '%allievo%') ORDER BY Attivo, TipoContratto, DescrParFiscale ";
PerseoNET/frmDocenti.cs:				origineDati = "SELECT IDtruolodoc, TipoRuoloDocente FROM t_TipoRuoloDocente ORDER BY IndTRD ";
PerseoNET/frmDocenti.cs:				origineDati = "SELECT t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS StrDoc, (CASE WHEN FK_Tipo=2 THEN 'I' ELSE 'E' END) AS TipoDocente, TipoRuoloDocente, CodFiscale, PIVA, (CASE WHEN FK_Tipo=2 THEN NULL ELSE CodiceParFiscale END) AS CodiceParFiscale, (CASE WHEN FK_Tipo=2 THEN 'Contratto FP' ELSE DescrParFiscale END) AS TipoContratto, ComResidenza, ProvResidenza, Tel_1, Tel_2, Email, t_Docenti.Attivo FROM t_Docenti LEFT OUTER JOIN t_DecodificatoreParametroFiscale ON t_Docenti.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_TipoRuoloDocente ON t_Docenti.FK_Ruolo = t_TipoRuoloDocente.IDtruolodoc ";
PerseoNET/frmDocenti.cs:								str = "AND (CASE WHEN FK_Tipo=3 THEN (SELECT COUNT(FK_Contratto) FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE FK_Docente=IDdocente AND DataInizioIncarico>=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + ") ELSE 1 END)>0 ";
PerseoNET/frmDocenti.cs:						string origineDati = "SELECT IDdocente, Cognome, Nome, (CASE WHEN FK_Tipo=3 THEN 'Esterno' ELSE 'Interno' END) AS Tipo, DataNascita, LuogoNascita, ProvNascita, NazNascita, Sesso, TipoRuoloDocente, CodFiscale, PIVA, ComResidenza, IndirResidenza, ProvResidenza, CAPresidenza, ComAbitazione, ProvAbitazione, CAPabitazione, IndirAbitazione, Tel_1, Tel_2, Tel_3, Fax, Email, (TipoLivelloMW) AS TipolLivelloTitoloStudio, DescrTitoloStudio, TipoDipendente, DescrProfessione, CodiceParFiscale, DescrParFiscale, TipoFasciaDOC, TipoIscrizioneAlbo, DescrIscrizioneAlbo, NumeroIscrizioneAlbo, CodiceIBAN, CognomeIBAN, NomeIBAN, DescrDatoreLavoro, IndirDatoreLavoro, ComDatoreLavoro, IndirizzoPEC, DataUltimoCV, CodiceDipendente, (NULL) AS DataDocIdentita, (NULL) AS NumeroIncarichi, (NULL) AS OreAssegnate, t_Docenti.Attivo FROM t_Docenti LEFT OUTER JOIN t_TipoRuoloDocente ON t_Docenti.FK_Ruolo = t_TipoRuoloDocente.IDtruolodoc LEFT OUTER JOIN t_TipoFasciaDocenteEsterno ON t_Docenti.FK_TipoFascia = t_TipoFasciaDocenteEsterno.IDtfasciadoc LEFT OUTER JOIN t_TipoLivelloTitoloMW ON t_Docenti.FK_TipoStudio = t_TipoLivelloTitoloMW.IDtlivstudioMW LEFT OUTER JOIN t_TipoDipendenteDocEsterno ON t_Docenti.FK_TipoLavoroAttuale = t_TipoDipendenteDocEsterno.IDtestdipe LEFT OUTER JOIN t_DecodificatoreParametroFiscale ON t_Docenti.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_TipoIscrizioneAlbo ON t_Docenti.FK_TipoIscrAlbo = t_TipoIscrizioneAlbo.IDtalbo " + StrFiltroDoc + " ORDER BY Cognome, Nome ";
PerseoNET/frmDocenti.cs:								origineDati = "SELECT IDdocente, COUNT(IDincarico) AS NumeroIncarichi, SUM(OreAssegnate) AS OreAssegnate FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione " + StrFiltroDoc + "AND DataAvvio<='" + text2 + "' AND DataFine>='" + text + "' GROUP BY IDdocente ";
PerseoNET/frmDocenti.cs:								origineDati = "SELECT IDdocumento, IDdocente, DataPubblicazione, DocRiconoscimento, CV FROM t_Docenti INNER JOIN t_Documenti ON t_Documenti.FK_Docente=t_Docenti.IDdocente INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc " + StrFiltroDoc + " AND CV=1 AND CodiceInterno IS NOT NULL ORDER BY IDdocente, DataPubblicazione DESC ";
PerseoNET/frmDocenti.cs:								origineDati = "SELECT IDdocumento, IDdocente, DataPubblicazione, DocRiconoscimento, CV FROM t_Docenti INNER JOIN t_Documenti ON t_Documenti.FK_Docente=t_Docenti.IDdocente INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc " + StrFiltroDoc + " AND DocRiconoscimento=1 AND CodiceInterno IS NOT NULL AND CodiceInterno<>'DIDE00000.pdf' ORDER BY IDdocente, DataPubblicazione DESC ";
PerseoNET/frmDocenti.cs:				string str = "SELECT (t_Documenti.IDdocumento) AS PKdoc, (Cognome + ' ' + Nome) AS Collaboratore, CodFiscale, PIVA, (CASE WHEN FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS Tipo, (DescrDocumento) AS NomeFile, TipoDocumento, DataPubblicazione FROM t_Docenti INNER JOIN t_Documenti ON t_Docenti.IDdocente = t_Documenti.FK_Docente INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc ";
PerseoNET/frmDocenti.cs:				string origineDati = "SELECT IDdocente, (Cognome + ' ' + Nome) AS Nominativo, (CASE WHEN FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS Tipo, CodFiscale, PIVA, (IDdocumento) AS PKdoc, (DescrDocumento) AS NomeFile, TipoDocumento, (DataPubblicazione) AS DataCV FROM t_Docenti LEFT OUTER JOIN t_Documenti ON t_Docenti.IDdocente = t_Documenti.FK_Docente LEFT OUTER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE (IDdocumento IS NULL AND FK_Tipo>1 AND t_Docenti.Attivo=1 " + text + ") OR (CV=1 AND FK_Tipo>1 AND t_Docenti.Attivo=1 " + text + ") ORDER BY (Cognome + ' ' + Nome), IDdocente, DataPubblicazione ";
PerseoNET/frmDocenti.cs:							string origineDati = "SELECT Cognome, Nome, CodFiscale, FK_Tipo, PIVA, IndirResidenza, ComResidenza, CAPresidenza, ProvResidenza, NazResidenza, Tel_1, Tel_2, Email, FK_TipoStudio, DescrTitoloStudio FROM t_Docenti ";
PerseoNET/frmDocenti.cs:							origineDati = "SELECT Cognome, Nome, CodFiscale, FK_Tipo, PIVA, Sesso, DataNascita, LuogoNascita, ProvNascita, NazNascita, IndirResidenza, ComResidenza, CAPresidenza, ProvResidenza, NazResidenza, Tel_1, Tel_2, Email, FK_TipoStudio, DescrTitoloStudio, FK_Nazionalita, FK_Ruolo FROM t_Docenti ";
PerseoNET/frmDocenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocente, CodFiscale FROM t_Docenti WHERE CodFiscale='", clsTblDatiDR2.get_Campo((object)"CodFiscale")), "' "));
PerseoNET/frmDocenti.cs:									origineDati = "SELECT IDtlivstudioMW, TipoLivelloMW FROM t_TipoLivelloTitoloMW WHERE Obsoleto=False AND TipoLivelloMW='" + FunzStringa.StringaSQL(Conversions.ToString(clsTblDatiDR2.get_Campo((object)"FK_TipoStudio"))) + "' ";
PerseoNET/frmDocenti.cs:								origineDati = "SELECT Cognome, Nome, CodFiscale, FK_Tipo, PIVA, Sesso, DataNascita, LuogoNascita, ProvNascita, NazNascita, IndirResidenza, ComResidenza, CAPresidenza, ProvResidenza, NazResidenza, Tel_1, Tel_2, Email, FK_TipoStudio, DescrTitoloStudio, FK_Nazionalita, FK_Ruolo FROM t_Docenti ";
PerseoNET/clsAnnoAmministrativo.cs:				string origineDati = "SELECT YEAR(DataAvvio) AS Anno, (NULL) AS StrAnno, (1) AS Tipo FROM t_PianoServizi GROUP BY YEAR(DataAvvio) ORDER BY YEAR(DataAvvio) DESC ";
PerseoNET/clsStringhe.cs:				string origineDati = ((Operators.CompareString(Strings.Mid(strCF, 12, 1), "Z", TextCompare: false) == 0) ? ("SELECT CodiceNazione, DescrNazione, (TipoNazionalita) AS ProvenienzaGeografica, FK_ProvenienzaGeo, Attiva FROM t_TipoNazioniCF LEFT OUTER JOIN t_TipoNazionalita ON t_TipoNazioniCF.FK_ProvenienzaGeo = t_TipoNazionalita.IDtnaz WHERE CodiceNazione='" + Strings.Mid(strCF, 12, 4) + "' ") : ("SELECT CodiceComune, Comune, Prov, (1) AS FK_ProvenienzaGeo, Attivo FROM t_TipoComuni WHERE CodiceComune='" + Strings.Mid(strCF, 12, 4) + "' "));
PerseoNET/FunzPerseo.cs:						string origineDati = "SELECT IDutente, (Cognome + ' ' + Nome) AS NomeUtente, IDrecord, Tabella, NomeCampoPK, NoteBlocco, zt_RecordBloccati.DataRec FROM zt_RecordBloccati LEFT OUTER JOIN t_Personale ON zt_RecordBloccati.IDutente = t_Personale.IDpers ORDER BY (Cognome + ' ' + Nome), zt_RecordBloccati.DataRec DESC";
PerseoNET/FunzPerseo.cs:						origineDati = "SELECT IDedizione, ('t_PianoServizi') AS Tabella, ('IDedizione') AS StrPK, ('edizione ' + CodiceEdizione) AS Descrizione FROM t_PianoServizi WHERE Bloccato=1 UNION SELECT IDprogetto, ('t_Progetti') AS Tabella, ('IDprogetto') AS StrPK, ('progetto ' + CodiceProgetto) AS Descrizione FROM T_Progetti WHERE Bloccato=1 UNION SELECT IDdocente, ('t_Docenti') AS Tabella, ('IDdocente') AS StrPK, ('anagrafica personale ' + Cognome + ' ' + Nome) AS Descrizione FROM t_Docenti WHERE Bloccato=1 UNION SELECT IDazienda, ('t_Aziende') AS Tabella, ('IDazienda') AS StrPK, ('azienda ' + DescrAzienda) AS Descrizione FROM t_Aziende WHERE Bloccato=1 UNION SELECT IDutente, ('t_Utenti') AS Tabella, ('IDutente') AS StrPK, ('studente ' + Cognome + ' ' + Nome) AS Descrizione FROM t_Utenti WHERE Bloccato=1 UNION SELECT IDiscrizione, ('t_Iscrizioni') AS Tabella, ('IDiscrizione') AS StrPK, ('iscritto ' + CAST(IDiscrizione AS VARCHAR)) AS Descrizione FROM t_Iscrizioni WHERE Bloccato=1 ";
PerseoNET/FunzPerseo.cs:						text2 = "SELECT Gruppo, Indice, Sezione, Tabella, Descrizione, Etichette, EtichetteDescrEstesa, LarghezzaColonne, FormatoColonne, Allineamento, CampiModificabili, DimensioneCampi, FonteDati, CampiUnivoci, CampiNonObbligatori, RecordDuplicabile, SubQuery, CampoSubQuery, EtichettaCampoSubquery, FattoreAltezzaRiga, SoloAggiornamento, SoloAdmin, ConsentireProfilo, ComboTesto1, ComboTesto2, UpdateCampoVersione FROM zt_MenuRiferimenti ";
PerseoNET/FunzPerseo.cs:				text2 = "SELECT Pannello, CmdAiuto, Sezione, RigaMenu, DescrRigaMenu, DescrAiuto FROM zt_Help ";
PerseoNET/FunzPerseo.cs:				string origineDati = "SELECT IDdocente, Cognome, Nome, CodiceIBAN, (0) AS Errore FROM t_Docenti WHERE CodiceIBAN IS NOT NULL AND DocenteTest=0 ";
PerseoNET/FunzPerseo.cs:					origineDati = (clsTblDatiDR.OrigineDati = "SELECT IDazienda, IDsedeaz, DescrAzienda, PIVA, CodFiscale, CodiceIBAN, (0) AS Errore FROM t_Aziende INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda WHERE CodiceIBAN IS NOT NULL AND Aziendatest=0 ");
PerseoNET/FunzPerseo.cs:				string origineDati = "SELECT FK_Incarico, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotMinutiFatti FROM t_CalendarioAttivita WHERE DataAttivita<='" + Strings.Format(vDataAl, "dd/MM/yyyy") + "' GROUP BY FK_Incarico HAVING FK_Incarico=" + Conversions.ToString(vIDincarico) + " ";
PerseoNET/FunzPerseo.cs:					origineDati = "SELECT IDincarico, SUM(TotOreFatte) AS TotOrePagate FROM t_ProgettiPagamentiCompensiOneri WHERE Reso=0 GROUP BY IDincarico HAVING IDincarico=" + Conversions.ToString(vIDincarico) + " ";
PerseoNET/FunzPerseo.cs:				string vSQL = "SELECT IDazione, CodiceAzione FROM t_Azioni WHERE CodiceAzione like 'Az.%' AND DataRec>=" + FunzStringa.StrDataSQL("01/09/2011 00.00.00", FlagSqlServer: true) + " ";
PerseoNET/FunzPerseo.cs:					string origineDati = "SELECT IDvers, ParPFAgg FROM zt_Versione";
PerseoNET/FunzPerseo.cs:				string origineDati = "SELECT IDtbl, Tabella FROM zt_PuliziaTabelle ORDER BY Tabella ";
PerseoNET/FunzPerseo.cs:				string origineDati = "SELECT COUNT(IDassenza) AS NumRec FROM t_AssenzeAttivita LEFT OUTER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt WHERE t_CalendarioAttivita.IDcalatt IS NULL ";
PerseoNET/FunzPerseo.cs:					string vSQL = "SELECT IDcomune, Prov, Comune FROM t_TipoComuni WHERE Prov='" + vProv + "' ";
PerseoNET/FunzPerseo.cs:				string origineDati = "SELECT IDlogbe, Tabella, IndComando, Comando, Attivo FROM zt_AlterTblLog_be WHERE Attivo=1 ORDER BY Tabella, IndComando, IDlogbe ";
PerseoNET/FunzPerseo.cs:			string origineDati = "SELECT t_ArgomentiModuli.IDargomento, DescrArgomento, DescrBreveArgomento FROM t_ModuliEdizioni INNER JOIN t_ArgomentiModuli ON t_ModuliEdizioni.IDmodulo = t_ArgomentiModuli.FK_Modulo WHERE DescrBreveArgomento IS NULL AND FK_Edizione=" + Conversions.ToString(vIDedizione);
PerseoNET/FunzPerseo.cs:				string origineDati = "SELECT IDcomune, Comune, Prov, Cap, CodiceComune, DescrRegione, DescrProvincia, Attivo FROM t_TipoComuni WHERE Attivo=1 ORDER BY Attivo DESC, Comune ";
PerseoNET/FunzPerseo.cs:				origineDati = "SELECT IDtnazione, CodiceNazione, DescrNazione, DescrCittadinanza, Attiva, FK_ProvenienzaGeo, TipoNazionalita, DataIstat FROM t_TipoNazioniCF LEFT OUTER JOIN t_TipoNazionalita ON t_TipoNazioniCF.FK_ProvenienzaGeo = t_TipoNazionalita.IDtnaz WHERE Attiva=1 ORDER BY DescrNazione";
PerseoNET/FunzPerseo.cs:						string vSQL = "SELECT IDassenza, DataAssenza, (SELECT CodiceEdizione FROM t_PianoServizi WHERE IDedizione=FK_Edizione) AS CodiceEdizione FROM t_AssenzeAttivita INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione AND t_AssenzeAttivita.DataAssenza >= t_Iscrizioni.DataRitiro WHERE t_Iscrizioni.DataRitiro IS NOT NULL AND t_AssenzeAttivita.DataRec>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " " + text + "ORDER BY DataAssenza ";
PerseoNET/FunzPerseo.cs:						vSQL = "SELECT IDassenza, DataAssenza, (SELECT CodiceEdizione FROM t_PianoServizi WHERE IDedizione=FK_Edizione) AS CodiceEdizione FROM t_AssenzeAttivita INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione AND t_AssenzeAttivita.DataAssenza < t_Iscrizioni.DataIscr WHERE t_Iscrizioni.DataRitiro IS NOT NULL AND t_AssenzeAttivita.DataRec>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " " + text + "ORDER BY DataAssenza ";
PerseoNET/FunzPerseo.cs:							vSQL = "SELECT FK_Attivita, FK_Iscrizione, COUNT(DataAssenza) nreg FROM t_AssenzeAttivita WHERE t_AssenzeAttivita.DataRec>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " GROUP BY FK_Attivita, FK_Iscrizione HAVING COUNT(DataAssenza)>1 ORDER BY FK_Attivita, FK_Iscrizione ";
PerseoNET/FunzPerseo.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDassenza, FK_Attivita, FK_Iscrizione, DataAssenza, (SELECT CodiceEdizione FROM t_PianoServizi WHERE IDedizione=FK_Edizione) AS CodiceEdizione FROM t_AssenzeAttivita INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione=t_Iscrizioni.IDiscrizione WHERE FK_Attivita=", clsTblDatiDR.get_Campo((object)"FK_Attivita")), " "), "AND FK_Iscrizione="), clsTblDatiDR.get_Campo((object)"FK_Iscrizione")), " "));
PerseoNET/FunzPerseo.cs:				string origineDati = "SELECT t_PianoServizi.IDedizione, IDprogetto, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, CodiceCIG, CodiceCUP FROM  t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN v_PianificazioneDocenteGenerico ON t_PianoServizi.IDedizione = v_PianificazioneDocenteGenerico.IDedizioneGenerico WHERE IDincarico=" + Conversions.ToString(vIDincarico) + " AND IDincaricoGenerico IS NOT NULL GROUP BY t_PianoServizi.IDedizione, IDprogetto, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, CodiceCIG, CodiceCUP ";
PerseoNET/FunzPerseo.cs:				string origineDati = "SELECT t_PianoServizi.IDedizione, IDprogetto, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, CodiceCIG, CodiceCUP FROM  t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN v_PianificazioneDocenteGenerico ON t_PianoServizi.IDedizione = v_PianificazioneDocenteGenerico.IDedizioneGenerico WHERE IDincarico=" + Conversions.ToString(vIDincarico) + " AND IDincaricoGenerico IS NOT NULL GROUP BY t_PianoServizi.IDedizione, IDprogetto, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, CodiceCIG, CodiceCUP ";
PerseoNET/FunzPerseo.cs:				string vSQL = "SELECT CodiceTARG FROM t_TipoArgomento ";
PerseoNET/FunzPerseo.cs:				string origineDati = "SELECT (IDaccesso) AS PKRec, Data, Tipo, Azione, (Persona) AS PKUtente, (CASE WHEN Persona=-1 THEN 'admin-1' ELSE (Cognome + ' ' + Nome) END) AS NomeUtente FROM t_Personale RIGHT JOIN t_StoricoEventi ON t_Personale.IDpers = t_StoricoEventi.Persona WHERE Data>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " ORDER BY IDaccesso ";
PerseoNET/FunzPerseo.cs:				origineDati = (clsTblDatiDR.OrigineDatiUnione = "SELECT (IDavviso) AS PKRec, DataRec, (TipoCausaleAvviso + ' (a)') AS TipoCausaleAvviso, DescrAvviso, FK_Persona, (CASE WHEN FK_Persona=-1 THEN 'admin-1' ELSE (SELECT (Cognome + ' ' + Nome) AS Persona FROM t_Personale WHERE IDpers=FK_Persona) END) AS NomeUtente FROM t_AvvisiUtentiPerseo INNER JOIN t_TipoCausaleAvviso ON t_AvvisiUtentiPerseo.FK_Causale = t_TipoCausaleAvviso.IDtcausaleavv WHERE DataRec>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " ORDER BY IDavviso ");
PerseoNET/frmRichiestaPagamentiSedeOreMese.cs:					string text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, IDoremese, IDdocente, FK_Progetto, FK_SedeEdizione, IndTA, (Cognome + ' ' + Nome) AS StrDOC, CodiceEdizione, TipoAttivita, DescrArgomento, OreAssegnate, (SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) AS TotalePagato, OreSvolte, DataSvolteDAL, DataSvolteAL FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi AND t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniOrePerMese ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniOrePerMese.FK_Incarico LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE FK_Progetto=", MyProject.Forms.frmRichiestaPagamentiSede.tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " "), "AND FK_SedeEdizione="), MyProject.Forms.frmRichiestaPagamentiSede.tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "AND DataSvolteDAL="), FunzStringa.StrDataSQL(StrDAL, FlagSqlServer: true)), " "), "AND DataSvolteAL="), FunzStringa.StrDataSQL(StrAL, FlagSqlServer: true)), " "), "AND ((SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri "), "WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) IS NULL OR "), "(SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri "), "WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0)<OreAssegnate) "));
PerseoNET/frmRichiestaPagamentiSedeOreMese.cs:					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(text + "UNION SELECT IDincarico, (NULL) AS IDoremese, IDdocente, FK_Progetto, FK_SedeEdizione, IndTA, (Cognome + ' ' + Nome) AS StrDOC, CodiceEdizione, TipoAttivita, DescrArgomento, OreAssegnate, (SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) AS TotalePagato, (0) OreSvolte, ('" + StrDAL + "') AS DataSvolteDAL, ('" + StrAL + "') AS DataSvolteAL FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi AND t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE FK_Progetto=", MyProject.Forms.frmRichiestaPagamentiSede.tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " "), "AND FK_SedeEdizione="), MyProject.Forms.frmRichiestaPagamentiSede.tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "AND ((SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri "), "WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) IS NULL OR "), "(SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri "), "WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0)<OreAssegnate) "), "ORDER BY (Cognome + ' ' + Nome), IndTA, IDincarico, DescrArgomento "));
PerseoNET/frmRichiestaPagamentiSedeOreMese.cs:					text = "SELECT IDincarico, IDoremese, IDdocente, FK_Progetto, FK_SedeEdizione, IndTA, (Cognome + ' ' + Nome) AS StrDOC, CodiceEdizione, TipoAttivita, DescrArgomento, OreAssegnate, (SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico) AS TotalePagato, OreSvolte, DataSvolteDAL, DataSvolteAL FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi AND t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniOrePerMese ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniOrePerMese.FK_Incarico LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento ";
PerseoNET/frmRichiestaPagamentiSedeOreMese.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_IncaricoEdizione, MIN(DataInizioIncarico) AS DataInizioIncarico, MAX(DataFineIncarico) AS DataFineIncarico, MAX(DataProlungamento) AS DataProlungamento FROM t_IncarichiEdizioniContratti WHERE ApprovaIncarico=1 GROUP BY FK_IncaricoEdizione HAVING FK_IncaricoEdizione=", tblOre.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "));
PerseoNET/frmRichiestaPagamentiSedeOreMese.cs:				string origineDati = "SELECT IDoremese, FK_Incarico, DataSvolteDAL, DataSvolteAL, OreSvolte, DataRec, DataModifica FROM t_IncarichiEdizioniOrePerMese WHERE IDoremese=" + Conversions.ToString(vID);
PerseoNET/clsParFiscale.cs:				string text = "SELECT IDparfisc, CodiceParFiscale, DescrParFiscale, Attivo, Gruppo, AliquotaIva, ImponibileIva, IvaAggiuntaAnticipo, IvaAggiuntaVitto, IvaAggiuntaViaggio, AliquotaRitenutaAcconto, ImponibileRitenutaAcconto, RitenutaAggiuntaAnticipo, RitenutaAggiuntaVitto, RitenutaAggiuntaViaggio, Allievi, ContributoCassaPrev, ImponibileCassaPrev, CassaPrevIncludeRivalsa, AliquotaRivalsa, ImponibileRivalsa, AliquotaTrattenutaINPS, ImponibileTrattenutaINPS, QuotaPercipiente, QuotaCommittente, VersamentoInps, ParasubSenzaFranchigia, IvaRivalsa, IrpefRivalsa, CodiceTributo, TipoContratto, SedeInps, Irap, chbEsclusioneIVA, chbRivalsaGestSeparata, chbIscrittoRegImprese, chbRegimeFiscAgevolato, chbParasubordinato, cmbFK_AliquotaPrevSepa, cmbFK_ContributoCassaPrev, CommissioneEsame, ModelloLetteraIncarico, ModelloNotula, TipoCococo, CodiceRedditoCertificazione, ResidenteEstero, PF_PersonaFisica, PF_Azienda, chbContribuenteMinimo, DataFatturaValida, FK_PFSuccessore, FK_PFPredecessore, AccettazioneCIGCUP, DettaglioEdizione_LI, ObbligoDataScadenza, ObbligoIscrizioneAlbo, ObbligoAttestazioneProf, RegolaAnnoSolare, GiorniAnnoSolare FROM t_DecodificatoreParametroFiscale ORDER BY Attivo DESC, TipoContratto, CodiceParFiscale ";
PerseoNET/clsParFiscale.cs:				string origineDati = "SELECT IDparfisc, CodiceParFiscale, DescrParFiscale, Attivo, Gruppo, AliquotaIva, ImponibileIva, IvaAggiuntaAnticipo, IvaAggiuntaVitto, IvaAggiuntaViaggio, AliquotaRitenutaAcconto, ImponibileRitenutaAcconto, RitenutaAggiuntaAnticipo, RitenutaAggiuntaVitto, RitenutaAggiuntaViaggio, Allievi, ContributoCassaPrev, ImponibileCassaPrev, CassaPrevIncludeRivalsa, AliquotaRivalsa, ImponibileRivalsa, AliquotaTrattenutaINPS, ImponibileTrattenutaINPS, QuotaPercipiente, QuotaCommittente, VersamentoInps, ParasubSenzaFranchigia, IvaRivalsa, IrpefRivalsa, CodiceTributo, TipoContratto, SedeInps, Irap, chbEsclusioneIVA, chbRivalsaGestSeparata, chbIscrittoRegImprese, chbRegimeFiscAgevolato, chbParasubordinato, cmbFK_AliquotaPrevSepa, cmbFK_ContributoCassaPrev, CommissioneEsame, ModelloLetteraIncarico, ModelloNotula, TipoCococo, CodiceRedditoCertificazione, ResidenteEstero, PF_PersonaFisica, PF_Azienda, chbContribuenteMinimo, DataFatturaValida, FK_PFSuccessore, FK_PFPredecessore, AccettazioneCIGCUP, DettaglioEdizione_LI, ObbligoDataScadenza, ObbligoIscrizioneAlbo, ObbligoAttestazioneProf, RegolaAnnoSolare, GiorniAnnoSolare FROM t_DecodificatoreParametroFiscale ORDER BY CodiceParFiscale ";
PerseoNET/clsParFiscale.cs:				origineDati = "SELECT IDparfisc, CodiceParFiscale, DescrParFiscale, Attivo, Gruppo, AliquotaIva, ImponibileIva, IvaAggiuntaAnticipo, IvaAggiuntaVitto, IvaAggiuntaViaggio, AliquotaRitenutaAcconto, ImponibileRitenutaAcconto, RitenutaAggiuntaAnticipo, RitenutaAggiuntaVitto, RitenutaAggiuntaViaggio, Allievi, ContributoCassaPrev, ImponibileCassaPrev, CassaPrevIncludeRivalsa, AliquotaRivalsa, ImponibileRivalsa, AliquotaTrattenutaINPS, ImponibileTrattenutaINPS, QuotaPercipiente, QuotaCommittente, VersamentoInps, ParasubSenzaFranchigia, IvaRivalsa, IrpefRivalsa, CodiceTributo, TipoContratto, SedeInps, Irap, chbEsclusioneIVA, chbRivalsaGestSeparata, chbIscrittoRegImprese, chbRegimeFiscAgevolato, chbParasubordinato, cmbFK_AliquotaPrevSepa, cmbFK_ContributoCassaPrev, CommissioneEsame, ModelloLetteraIncarico, ModelloNotula, TipoCococo, CodiceRedditoCertificazione, ResidenteEstero, PF_PersonaFisica, PF_Azienda, chbContribuenteMinimo, DataFatturaValida, FK_PFSuccessore, FK_PFPredecessore, AccettazioneCIGCUP, DettaglioEdizione_LI, ObbligoDataScadenza, ObbligoIscrizioneAlbo, ObbligoAttestazioneProf, RegolaAnnoSolare, GiorniAnnoSolare FROM t_DecodificatoreParametroFiscale ";
PerseoNET/clsParFiscale.cs:				origineDati = "SELECT IDtaliquosepa, TipoAliquotaPrevSepa, Obsoleto FROM t_TipoAliquotaPrevidenzaSeparata ORDER BY TipoAliquotaPrevSepa ";
PerseoNET/clsParFiscale.cs:				origineDati = "SELECT IDtaliquosepa, TipoAliquotaPrevSepa, Obsoleto FROM t_TipoAliquotaPrevidenzaSeparata ";
PerseoNET/clsParFiscale.cs:				origineDati = "SELECT IDtcassaprev, TipoContributoCassaPrev, Obsoleto FROM t_TipoContributoCassaPrev ORDER BY TipoContributoCassaPrev ";
PerseoNET/clsParFiscale.cs:				origineDati = "SELECT IDtcassaprev, TipoContributoCassaPrev, Obsoleto FROM t_TipoContributoCassaPrev ";
PerseoNET/clsParFiscale.cs:				origineDati = "SELECT IDtfasciadoc, IndFDOC, TipoFasciaDOC, MaxCostoDocenza, MaxCostoCodocenza, MaxCostoAltro, Obsoleto FROM t_TipoFasciaDocenteEsterno ORDER BY IndFDOC";
PerseoNET/clsParFiscale.cs:				origineDati = "SELECT IDtaltrainps, TipoAltraAssINPS, CodiceAssINPS, Obsoleto FROM t_TipoAltraAssicurazioneINPS ORDER BY CodiceAssINPS";
PerseoNET/clsParFiscale.cs:				origineDati = "SELECT IDtestdipe, IndTDIP, TipoDipendente, Obsoleto FROM t_TipoDipendenteDocEsterno ORDER BY IndTDIP ";
PerseoNET/frmPrincipale.cs:						text = "SELECT IDtarg, TipoArgomento FROM t_TipoArgomento WHERE TipoArgomento='STAGE' ";
PerseoNET/frmPrincipale.cs:							text = "SELECT IDprogpagamento, (SELECT COUNT(IDprogfatt) FROM t_ProgettiPagamentiFatture WHERE FK_ProgPagamento=IDprogpagamento) AS nfatt, DataRec FROM t_ProgettiPagamenti WHERE DataPagamento IS NULL AND (SELECT COUNT(IDprogfatt) FROM t_ProgettiPagamentiFatture WHERE FK_ProgPagamento=IDprogpagamento)=0 AND DataRec<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " ";
PerseoNET/frmPrincipale.cs:						text = "SELECT IDtprefindir, TipoPrefissoIndirizzo, Obsoleto FROM t_TipoPrefissoIndirizzo ORDER BY TipoPrefissoIndirizzo";
PerseoNET/frmPrincipale.cs:							text = "SELECT IDattedi, (t_AttivitaEdizioni.FK_Edizione) AS IDedizione, (t_IncarichiEdizioni.FK_Edizione) AS FKED_Inc, IDincarico FROM t_AttivitaEdizioni INNER JOIN t_IncarichiEdizioni ON t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita AND t_AttivitaEdizioni.FK_Edizione <> t_IncarichiEdizioni.FK_Edizione ";
PerseoNET/frmPrincipale.cs:							text = "SELECT t_ModuliEdizioni.IDmodulo, (t_ModuliEdizioni.FK_Edizione) AS PKED_Modulo, IDattedi, (t_AttivitaEdizioni.FK_Edizione) AS PKED_Att, t_ModuliEdizioni.FK_Attivita, DescrModulo, t_AttivitaEdizioni.DataRec, t_ModuliEdizioni.DataRec FROM t_ModuliEdizioni INNER JOIN t_AttivitaEdizioni ON t_ModuliEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi AND t_ModuliEdizioni.FK_Edizione <> t_AttivitaEdizioni.FK_Edizione ";
PerseoNET/frmPrincipale.cs:					string vSQL = "SELECT IDpers, Avviso FROM t_Personale WHERE IDpers=" + Conversions.ToString(VariabiliClassi.IDaccesso);
PerseoNET/frmPrincipale.cs:				string origineDati = "SELECT Cognome, Nome, Attivo FROM t_Studenti ";
PerseoNET/frmPrincipale.cs:							string vSQL = "SELECT COUNT(IDavviso) AS NumeroRecord FROM t_AvvisiUtentiPerseo INNER JOIN t_TipoCausaleAvviso ON t_AvvisiUtentiPerseo.FK_Causale = t_TipoCausaleAvviso.IDtcausaleavv WHERE Enumerazione=" + Conversions.ToString(28) + " AND TipoCausaleAvviso LIKE '%tirocini%' AND DataRec>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.drOperatore.get_Campo((object)"DataLetturaNotifiche")), "dd/MM/yyyy HH.mm.ss"), FlagSqlServer: true) + " ";
PerseoNET/frmPrincipale.cs:						string vSQL = "SELECT COUNT(IDavviso) AS NumeroRecord FROM t_AvvisiUtentiPerseo  WHERE DataRec>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.drOperatore.get_Campo((object)"DataLetturaNotifiche")), "dd/MM/yyyy HH.mm.ss"), FlagSqlServer: true);
PerseoNET/frmPrincipale.cs:					string vSQL = "SELECT DescrAvviso, DataGenerazione FROM t_AvvisiUtentiPerseo INNER JOIN t_TipoCausaleAvviso ON t_AvvisiUtentiPerseo.FK_Causale = t_TipoCausaleAvviso.IDtcausaleavv WHERE FK_Causale=" + Conversions.ToString(VariabiliClassi.Notifica.get_PKCausale(clsNotificaEvento.TipoNotificaEvento.NotificaSovraStudente)) + " AND DescrAvviso LIKE '% " + FunzStringa.StringaSQL(VariabiliClassi.UtenteLog) + "%'";
PerseoNET/frmCalendarioStudenteAttivita.cs:						origineDati = "SELECT t_IscrittiEdizione.IDiscrizione, IDutente, Studente, ID_Dote, DataAvvioDote, DataFineDote, DoteChiusa, (0) AS OreStage, OreAttivitaIndividuali, DataRitiro, (0) AS OreStageSvolte, (0) AS OreStageAssenza, (0) AS OreIndivSvolte, (0) AS OreSvolte, (0) AS OreSvolteNonOFA, (0) AS MinutiStage, (0) AS MinutiIndiv, (0) AS MinutiStudente, (0) AS MaxMinutiStage, (0) AS MaxMinutiIndividuali, (0) AS MaxMinutiStudente FROM t_IscrittiEdizione LEFT JOIN t_DescrAttivitaAltreFunzioni ON t_IscrittiEdizione.IDiscrizione = t_DescrAttivitaAltreFunzioni.IDiscrizione WHERE DataIscr IS NOT NULL GROUP BY t_IscrittiEdizione.IDiscrizione, IDutente, Studente, ID_Dote, DataAvvioDote, DataFineDote, DoteChiusa, OreAttivitaIndividuali, OreStage, PosRegistro, DataRitiro ORDER BY PosRegistro ";
PerseoNET/frmCalendarioStudenteAttivita.cs:						origineDati = "SELECT t_IscrittiEdizione.IDiscrizione, IDutente, Studente, ID_Dote, (NULL) AS DataInizioStage, (NULL) AS DataFineStage, DoteChiusa, (0) AS OreStage, OreAttivitaIndividuali, DataRitiro, (0) AS OreStageSvolte, (0) AS OreStageAssenza, (0) AS OreIndivSvolte, (0) AS OreSvolte, (0) AS OreSvolteNonOFA, (0) AS MinutiStage, (0) AS MinutiIndiv, (0) AS MinutiStudente, (0) AS MaxMinutiStage, (0) AS MaxMinutiIndividuali, (0) AS MaxMinutiStudente FROM t_IscrittiEdizione WHERE DataIscr IS NOT NULL ORDER BY PosRegistro ";
PerseoNET/frmCalendarioStudenteAttivita.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_RegistroStage.IDregstage, IDiscrizione, FK_Edizione, FK_Attivita, FK_AttivitaDotePF, DataStage, OraIngresso, OraUscita, DATEDIFF(mi, OraIngresso, OraUscita) AS Minuti, OFA, TipoAttivitaStage, DescrAttivitaStage, FK_TipoStage, Gruppo, Stage, PagaINAIL FROM t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " ORDER BY IDiscrizione "));
PerseoNET/frmCalendarioStudenteAttivita.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (t_CalendarioAttivita.IDcalatt) AS IDregstage, IDiscrizione, t_Iscrizioni.FK_Edizione, (NULL) AS FK_Attivita, (NULL) AS FK_AttivitaDotePF, (DataAttivita) AS DataStage, (OraInizio) AS OraIngresso, (OraFine) AS OraUscita, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, (1) AS OFA, (TipoAttivita) AS TipoaAttivitaStage, (t_CalendarioAttivita.DescrAttivita) AS DescrAttivitaStage, (0) AS FK_TipoStage FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " "), "AND t_Iscrizioni.FK_Edizione="), Variabili.Edizione.get_Campo((object)"IDedizione")), " AND LavoroPIP=1 AND PresenzaStudentePIP=1 "), "ORDER BY IDiscrizione "));
PerseoNET/frmCalendarioStudenteAttivita.cs:					origineDati = "SELECT (FK_Iscrizione) AS IDiscrizione, MIN(DataAvvio) AS DataInizioStage, MAX(DataFine) AS DataFineStage, MAX(DataProlungamento) AS DataProlungato, MAX(DataRipresaproroga) AS DataProrogato, MAX(DataInterruzione) AS DataInterrotto FROM t_ConvenzioniStage GROUP BY FK_Iscrizione HAVING FK_Iscrizione " + clsTblDatiDR.StringaFiltroIN("IDiscrizione");
PerseoNET/frmCalendarioStudenteAttivita.cs:					origineDati = "SELECT t_RegistroStage.IDregstage, (FK_Utente) AS IDutente, IDiscrizione, FK_Edizione, FK_Attivita, FK_AttivitaDotePF, (NULL) AS Studente, (NULL) AS Tutor, (NULL) AS OrdDataStage, DataStage, OraIngresso, OraUscita, DATEDIFF(mi, OraIngresso, OraUscita) AS Minuti, OFA, TipoAttivitaStage, DescrAttivitaStage, FK_TipoStage, (0) AS LavoroPIP, (0) AS PresenzaStudentePIP, FK_ProgettoTirocinio FROM t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage ";
PerseoNET/frmCalendarioStudenteAttivita.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.FK_Edizione, FK_Iscrizione, IDdocente, IDtattivita, TipoAttivita, (Cognome + ' ' + Nome) AS StrDOC, DataAttivita, OraInizio, OraFine, CodiceEdizione, MaxStudenti, (SELECT COUNT(IDregstage) FROM t_RegistroStage WHERE FK_Attivita=IDcalatt) AS NumeroStudenti FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE Aula=0 AND t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY DataAttivita, OraInizio "));
PerseoNET/frmCalendarioStudenteAttivita.cs:					origineDati = "SELECT t_Iscrizioni.IDiscrizione, t_StudentiDotiPianiFormativi.IDpfdote, FK_TipoAttivitaPF, t_StudentiDotiPianiFormativi.DescrAttivita, MaxOrePreviste, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotaleOre FROM t_Iscrizioni ";
PerseoNET/frmCalendarioStudenteAttivita.cs:					origineDati = "SELECT IDpfdote, IDiscrizione, t_ProgettiServiziPIP.FK_TipoAttivitaPF, SovrapponibileStage FROM t_Iscrizioni INNER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud INNER JOIN t_StudentiDotiPianiFormativi ON t_StudentiDoti.IDdotestud = t_StudentiDotiPianiFormativi.FK_Dote INNER JOIN t_Progetti ON t_StudentiDoti.FK_ProgettoRendiconta = t_Progetti.IDprogetto INNER JOIN t_ProgettiServiziPIP ON t_Progetti.IDprogetto = t_ProgettiServiziPIP.FK_Progetto AND t_StudentiDotiPianiFormativi.FK_TipoAttivitaPF = t_ProgettiServiziPIP.FK_TipoAttivitaPF WHERE IDiscrizione " + strFiltroIN_PKIscritti + " AND SovrapponibileStage=1 ORDER BY IDiscrizione ";
PerseoNET/frmCalendarioStudenteAttivita.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Iscrizioni.IDiscrizione, t_StudentiDotiPianiFormativi.IDpfdote, FK_TipoAttivitaPF, t_StudentiDotiPianiFormativi.DescrAttivita, MaxOrePreviste, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotaleOre FROM t_Iscrizioni INNER JOIN t_StudentiDotiPianiFormativi ON t_Iscrizioni.FK_DoteStudente = t_StudentiDotiPianiFormativi.FK_Dote LEFT OUTER JOIN v_StudentiDettaglioSvolteAttivitaPIP ON t_StudentiDotiPianiFormativi.IDpfdote = v_StudentiDettaglioSvolteAttivitaPIP.IDpfdote AND t_Iscrizioni.IDiscrizione = v_StudentiDettaglioSvolteAttivitaPIP.IDiscrizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY t_Iscrizioni.IDiscrizione, FK_TipoAttivitaPF, t_StudentiDotiPianiFormativi.DescrAttivita, MaxOrePreviste, IndPIP, t_StudentiDotiPianiFormativi.IDpfdote "), "HAVING t_Iscrizioni.IDiscrizione="), PKIscrittoAttuale), " ORDER BY IndPIP "));
PerseoNET/frmCalendarioStudenteAttivita.cs:				string text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_RegistroStage.IDregstage, (FK_Utente) AS IDutente, (", tblStud.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), ") AS IDiscrizione, "), "FK_Edizione, FK_Attivita, FK_AttivitaDotePF, "), "('"), FunzStringa.StringaSQL(Conversions.ToString(tblStud.get_Campo((object)"Studente", vFlagUpdateDB: false)))), "') AS Studente, (NULL) AS Tutor, "), "(NULL) AS OrdDataStage, DataStage, OraIngresso, OraUscita, DATEDIFF(mi, OraIngresso, OraUscita) AS Minuti, OFA, "), "TipoAttivitaStage, DescrAttivitaStage, FK_TipoStage, (0) AS LavoroPIP, (0) AS PresenzaStudentePIP, FK_ProgettoTirocinio "), "FROM t_RegistroStage INNER JOIN "), "t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN "), "t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage "), "WHERE IDiscrizione="), tblStud.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " "));
PerseoNET/frmCalendarioStudenteAttivita.cs:					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(text + "UNION SELECT (t_CalendarioAttivita.IDcalatt) AS IDregstage, (0) AS IDutente, (", tblStud.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), ") AS FK_Iscrizione, "), "("), Variabili.Edizione.get_Campo((object)0)), ") AS FK_Edizione, (NULL) AS FK_Attivita, (NULL) AS FK_AttivitaDotePF, "), "('"), FunzStringa.StringaSQL(Conversions.ToString(tblStud.get_Campo((object)"Studente", vFlagUpdateDB: false)))), "') AS Studente,  (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE IDdocente=t_IncarichiEdizioni.FK_Docente) AS Tutor, "), "(NULL) AS OrdDataStage, (DataAttivita) AS DataStage, (OraInizio) AS OraIngresso, (OraFine) AS OraUscita, "), "DATEDIFF(mi, OraInizio, OraFine) AS Minuti, (1) AS OFA, "), "(TipoAttivita) AS TipoaAttivitaStage, (t_CalendarioAttivita.DescrAttivita) AS DescrAttivitaStage, (0) AS FK_TipoStage, "), "LavoroPIP, PresenzaStudentePIP, (NULL) AS FK_ProgettoTirocinio "), "FROM t_CalendarioAttivita INNER JOIN "), "t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN "), "t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN "), "t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN "), "t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN "), "t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale "), "WHERE FK_Iscrizione="), tblStud.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " AND LavoroPIP=1 AND PresenzaStudentePIP=1 "));
PerseoNET/frmCalendarioStudenteAttivita.cs:							text = "SELECT IDtstage, TipoAttivitaStage FROM t_TipoAttivitaStage WHERE (Obsoleto=False AND Stage=False AND PIP=False AND Individuale=True) " + text2 + "ORDER BY IndTAS ";
PerseoNET/frmCalendarioStudenteAttivita.cs:					text = ((!Operators.ConditionalCompareObjectEqual(Variabili.Edizione.get_Campo((object)"Gruppo"), true, TextCompare: false)) ? "SELECT IDtstage, TipoAttivitaStage FROM t_TipoAttivitaStage WHERE Obsoleto=False AND Stage=True AND PagaINAIL=True ORDER BY IndTAS " : "SELECT IDtstage, TipoAttivitaStage FROM t_TipoAttivitaStage WHERE Obsoleto=False AND Stage=True ORDER BY IndTAS ");
PerseoNET/frmCalendarioStudenteAttivita.cs:					text = "SELECT IDtstage, TipoAttivitaStage FROM t_TipoAttivitaStage WHERE Obsoleto=False AND PIP=True ";
PerseoNET/frmCalendarioStudenteAttivita.cs:					text = "SELECT IDtstage, TipoAttivitaStage FROM t_TipoAttivitaStage WHERE IDtstage<0 ";
PerseoNET/frmCalendarioStudenteAttivita.cs:						text2 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDregstage FROM t_RegistroStage WHERE FK_Iscrizione=", tblStud.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " "), "AND DataStage="), FunzStringa.StrDataSQL(txtDataStage.Text, FlagSqlServer: true)), " "), "AND OraIngresso="), FunzStringa.StrOrarioSQL(txtOraIngresso.Text, FlagSqlServer: true)), " "), "AND OraUscita="), FunzStringa.StrOrarioSQL(txtOraUscita.Text, FlagSqlServer: true)), " "));
PerseoNET/frmCalendarioStudenteAttivita.cs:					string origineDati = "SELECT DataStage, OraIngresso, OraUscita, DescrAttivitaStage, TipoAttivitaStage, OFA, Esito FROM t_RegistroStage ";
PerseoNET/frmCalendarioStudenteAttivita.cs:					origineDati = "SELECT DataStage, OraIngresso, OraUscita, DescrAttivitaStage, TipoAttivitaStage, OFA, Esito FROM t_RegistroStage ";
PerseoNET/frmCalendarioStudenteAttivita.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtstage FROM t_TipoAttivitaStage WHERE IDtstage=", tblCal.get_Campo((object)"FK_TipoStage", vFlagUpdateDB: false)), " And Obsoleto=True "));
PerseoNET/frmCalendarioStudenteAttivita.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDregstage FROM t_RegistroStage WHERE FK_Iscrizione=", tblCal.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " "), "And DataStage="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblCal.get_Campo((object)"DataStage", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "And OraIngresso="), FunzStringa.StrOrarioSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblCal.get_Campo((object)"OraIngresso", vFlagUpdateDB: false)), "HH.mm"), FlagSqlServer: true)), " "), "And OraUscita="), FunzStringa.StrOrarioSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblCal.get_Campo((object)"OraUscita", vFlagUpdateDB: false)), "HH.mm"), FlagSqlServer: true)), " "));
PerseoNET/clsCommissioneEsame.cs:					string origineDati = "SELECT IDcommissione, FK_Sede, FK_TipoCommissione, DataRichiesta, DataRiunionePreliminare, RecuperoAssenti FROM t_CommissioniEsame WHERE IDcommissione=" + Conversions.ToString(mvIDcommissione);
PerseoNET/frmPannelloStampeDoti.cs:				string origineDati = "SELECT t_StudentiDoti.IDdotestud, IDutente, (Cognome + ' ' + Nome) AS Studente, ID_Dote, SiglaSede, CodiceProgetto, TipoDote, DataAvvioDote, DataFineDote, DoteChiusa, ImportoTotaleDote, (CASE WHEN (SELECT COUNT(IDpfdote) FROM t_StudentiDotiPianiFormativi WHERE FK_Dote=t_StudentiDoti.IDdotestud)>0 THEN 1 ELSE 0 END) AS AttivitaPIP, (CASE WHEN (SELECT SUM(MaxOrePreviste) FROM t_StudentiDotiPianiFormativi WHERE FK_Dote=t_StudentiDoti.IDdotestud)>0 THEN (SELECT SUM(MaxOrePreviste) FROM t_StudentiDotiPianiFormativi WHERE FK_Dote=t_StudentiDoti.IDdotestud) ELSE (SELECT SUM(OreUtente + OreAttivitaIndividuali) FROM t_Iscrizioni WHERE FK_DoteStudente=t_StudentiDoti.IDdotestud) END) AS OrePreviste, (SELECT COUNT(IDiscrizione) AS NIscr FROM t_Iscrizioni WHERE FK_DoteStudente=t_StudentiDoti.IDdotestud) AS NumeroIscr FROM t_StudentiDoti INNER JOIN t_Utenti ON t_StudentiDoti.FK_Studente = t_Utenti.IDutente INNER JOIN t_TipoDoteStudente ON t_StudentiDoti.FK_TipoDote = t_TipoDoteStudente.IDtdote LEFT OUTER JOIN t_Progetti ON t_StudentiDoti.FK_ProgettoRendiconta = t_Progetti.IDprogetto LEFT OUTER JOIN t_Sedi ON t_StudentiDoti.FK_SedePrimaria = t_Sedi.IDsede ";
PerseoNET/frmPannelloStampeDoti.cs:				origineDati = "SELECT IDiscrizione, IDedizione, SiglaSede, DescrEdizione, Gruppo, DataAvvio, DataFine, DataIscr, (CASE WHEN DataRitiro IS NOT NULL THEN 'R' ELSE NULL END) AS Ritiro, OreUtente, OreAttivitaIndividuali, (SELECT SUM(QuotaDoteIscrizione*NumeroVoucher) FROM t_IscrizioniDoti WHERE FK_Iscrizione=IDiscrizione) AS QuotaDote, t_PianoServizi.Bloccato, (SELECT IDutente FROM zt_RecordBloccati WHERE IDrecord=IDedizione AND Tabella='t_PianoServizi') AS UtenteBloccante FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud ORDER BY DataAvvio DESC ";
PerseoNET/frmPannelloStampeDoti.cs:				origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi ORDER BY OrdGruppo, SiglaSede ";
PerseoNET/frmPannelloStampeDoti.cs:				origineDati = "SELECT IDtdote, (CASE WHEN Obsoleto=0 THEN TipoDote ELSE (TipoDote + ' (*)') END) AS TipoDote FROM t_TipoDoteStudente ORDER BY Obsoleto, TipoDote ";
PerseoNET/frmPannelloStampeDoti.cs:					string origineDati = "SELECT IDutente, IDiscrizione, IDedizione, (Cognome + ' ' + Nome) AS Studente, SiglaSede, TipoAnnualita, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataIscr, DataRitiro, ID_Dote, ImportoTotaleDote, Sostegno, IscrizioneSenzaDote FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE FK_TipoFormativoInterno=1 AND YEAR(DataAvvio)=" + Conversions.ToString(Conversions.ToInteger(Strings.Mid(cmbAnnoAmm.Text, 1, 4)) - 1) + " AND Durata>=800 AND IDsede " + Variabili.FiltroSedi + " AND SedeTest=0 AND TipoAnnualita='1Â° ANNO' ORDER BY SiglaSede, DescrEdizione, (Cognome + ' ' + Nome) ";
PerseoNET/frmPannelloStampeDoti.cs:					origineDati = "SELECT IDutente, IDiscrizione, IDedizione, (Cognome + ' ' + Nome) AS Studente, SiglaSede, TipoAnnualita, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataIscr, DataRitiro, ID_Dote, ImportoTotaleDote, Sostegno, IscrizioneSenzaDote FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE FK_TipoFormativoInterno=1 AND YEAR(DataAvvio)=" + Conversions.ToString(Conversions.ToInteger(Strings.Mid(cmbAnnoAmm.Text, 1, 4))) + " AND Durata>=800 AND IDsede " + Variabili.FiltroSedi + " AND SedeTest=0 AND IDutente " + clsTblDatiDR.StringaFiltroIN("IDutente") + " ORDER BY SiglaSede, DescrEdizione, (Cognome + ' ' + Nome) ";
PerseoNET/frmPannelloStampeDoti.cs:					origineDati = "SELECT IDutente, Studente, SiglaSede, DotePrimoAnno, Prosegue, DoteSecondoAnno, Altro ProseguePerdeDote, ProsegueOttieneDote FROM t_Utenti ";
PerseoNET/frmPannelloStampeDoti.cs:					string origineDati = "SELECT IDutente, IDiscrizione, IDedizione, (Cognome + ' ' + Nome) AS Studente, SiglaSede, TipoAnnualita, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataIscr, DataRitiro, ID_Dote, ImportoTotaleDote, Sostegno, IscrizioneSenzaDote FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE FK_TipoFormativoInterno=1 AND YEAR(DataAvvio)=" + Conversions.ToString(Conversions.ToInteger(Strings.Mid(cmbAnnoAmm.Text, 1, 4)) - 2) + " AND Durata>=800 AND IDsede " + Variabili.FiltroSedi + " AND SedeTest=0 AND TipoAnnualita='1Â° ANNO' ORDER BY SiglaSede, DescrEdizione, (Cognome + ' ' + Nome) ";
PerseoNET/frmPannelloStampeDoti.cs:					origineDati = "SELECT IDutente, IDiscrizione, IDedizione, (Cognome + ' ' + Nome) AS Studente, SiglaSede, TipoAnnualita, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataIscr, DataRitiro, ID_Dote, ImportoTotaleDote, Sostegno, IscrizioneSenzaDote FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE FK_TipoFormativoInterno=1 AND YEAR(DataAvvio)=" + Conversions.ToString(Conversions.ToInteger(Strings.Mid(cmbAnnoAmm.Text, 1, 4))) + " AND Durata>=800 AND IDsede " + Variabili.FiltroSedi + " AND SedeTest=0 AND IDutente " + clsTblDatiDR.StringaFiltroIN("IDutente") + " ORDER BY SiglaSede, DescrEdizione, (Cognome + ' ' + Nome) ";
PerseoNET/frmPannelloStampeDoti.cs:					origineDati = "SELECT IDutente, Studente, SiglaSede, DotePrimoAnno, Prosegue, DoteTerzoAnno, Altro ProseguePerdeDote, ProsegueOttieneDote FROM t_Utenti ";
PerseoNET/clsAiuto.cs:				string origineDati = "SELECT IDaiuto, Pannello, CmdAiuto, Sezione, RigaMenu, DescrRigaMenu, DescrAiuto, AiutoAttivo FROM zt_Help WHERE Pannello='" + mvPannello + "' AND CmdAiuto='" + vCmdName + "' ORDER BY Pannello, CmdAiuto, RigaMenu ";
PerseoNET/clsAiuto.cs:				string origineDati = "SELECT RigaMenu, DescrRigaMenu FROM zt_Help WHERE Pannello='" + vPannello + "' AND CmdAiuto='" + vCmdName + "' AND RigaMenu>0 ";
PerseoNET/clsAiuto.cs:				string vSQL = "SELECT IDaiuto FROM zt_Help WHERE IDaiuto=0 ";
PerseoNET/clsAiuto.cs:				vSQL = "SELECT DataGuidaRapida FROM zt_Versione  ";
PerseoNET/clsAiuto.cs:				vSQL = "SELECT IDaiuto, Pannello, CmdAiuto, Sezione, RigaMenu, DescrRigaMenu, DescrAiuto, AiutoAttivo, DataRec, DataModifica FROM zt_Help WHERE AiutoAttivo=1 ORDER BY Pannello, CmdAiuto, RigaMenu ";
PerseoNET/clsAiuto.cs:					vSQL = "SELECT IDaiuto, Pannello, CmdAiuto, Sezione, RigaMenu, DescrRigaMenu, DescrAiuto, AiutoAttivo, DataRec, DataModifica  FROM zt_Help ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:					string origineDati = "SELECT IDcontratto, FK_Docente, FK_TipoFormaContratto, DataInizioContratto, DataFineContratto, BloccoValutazione, RespintoCausale, Respinto, NoteContratto, ContrattoApprovato, DescrLetteraIncarico, DataRec, DataModifica, Bloccato FROM t_DocentiContratti WHERE IDcontratto=" + Conversions.ToString(Variabili.Contratto.PKContratto);
PerseoNET/frmDettContrattoDocenteEsterno.cs:					origineDati = ((Variabili.Contratto.PKContratto != 0L) ? ("SELECT IDcontrest, FK_DocenteContratto, FK_TipoDipendente, FK_Azienda, FK_CodicePF, NumeroGiorniLavorativi, FK_ContributoCassaPrev, FK_AltraAssINPS, FK_AliquotaPrevSepa, FK_TipoFasciaContr, DataAutorizzaPubblicaAmm, ProtAutorizzaPubblicaAmm, DataUploadPAmm, FilePAmmPDF, DataRec, DataModifica FROM t_DocentiContrattiEsterni WHERE FK_DocenteContratto=" + Conversions.ToString(FormContr.ChiavePrimaria) + " ") : "SELECT IDcontrest, FK_DocenteContratto, FK_TipoDipendente, FK_Azienda, FK_CodicePF, NumeroGiorniLavorativi, FK_ContributoCassaPrev, FK_AltraAssINPS, FK_AliquotaPrevSepa, FK_TipoFasciaContr, DataAutorizzaPubblicaAmm, ProtAutorizzaPubblicaAmm, DataUploadPAmm, FilePAmmPDF, DataRec, DataModifica FROM t_DocentiContrattiEsterni WHERE IDcontrest=0 ");
PerseoNET/frmDettContrattoDocenteEsterno.cs:					origineDati = "SELECT t_IncarichiEdizioniContratti.IDincacontra, IDprogetto, IDincarico, FK_IncaricoEdizione, FK_Contratto, FK_SedeEdizione, FK_Docente, DescrEdizione, MassimaleDDIF, TipoFormativoInterno, CodiceEdizione, SiglaSede, (CASE WHEN TipoAnnualita IS NOT NULL THEN LEFT(TipoAnnualita,2) ELSE NULL END) AS TipoAnnualita, t_Progetti.DelegaAzienda, DataAvvio, DataFine, (NULL) AS DataSvolg, IndTA, TipoAttivita, DescrArgomento, DataInizioIncarico, DataFineIncarico, (NULL) AS DateInca, OreAssegnate, OreSvolgere, (OreSvolgere) AS MaxOreSvolgere, QuotaOraIncarico, ApprovaIncarico, DataApprovaIncarico, (0) AS Variato FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno WHERE FK_Contratto=" + Conversions.ToString(FormContr.ChiavePrimaria) + " ORDER BY t_PianoServizi.DataAvvio, t_TipoAttivitaEdizione.IndTA, t_ArgomentiModuli.DescrArgomento ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Docente, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, DescrPubblicaAmm, IndirPubblicaAmm, ComPubblicaAmm, FilePAmmPDF, DataUploadPAmm FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto GROUP BY FK_Docente, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, DescrPubblicaAmm, IndirPubblicaAmm, ComPubblicaAmm, DataUploadPAmm, FilePAmmPDF HAVING FK_Docente=", Variabili.Docente.get_Campo((object)0)), " AND DataAutorizzaPubblicaAmm>="), FunzStringa.StrDataSQL(value, FlagSqlServer: true)), " "), "AND ProtAutorizzaPubblicaAmm IS NOT NULL AND DataUploadPAmm IS NOT NULL "), "ORDER BY DataAutorizzaPubblicaAmm DESC, FilePAmmPDF DESC "));
PerseoNET/frmDettContrattoDocenteEsterno.cs:							string vSQL = "SELECT IDtattivita, IDprogetto, IDsede FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE FK_Contratto=" + Conversions.ToString(FormContr.ChiavePrimaria) + " GROUP BY IDtattivita, IDprogetto,IDsede ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:				string origineDati = "SELECT IDcontratto, t_DocentiContratti.FK_Docente, FK_CodicePF, SiglaSede, CodiceParFiscale, DescrParFiscale, DataInizioContratto, DataFineContratto, QuotaOraIncarico, (CASE WHEN SUM(OreAssegnate)<SUM(OreSvolgere) THEN 1 ELSE 0 END) AS Inferiore, SUM(OreAssegnate) AS TotOreAssegnate, SUM(OreSvolgere) AS TotOreContratto, SUM(OreSvolgere) AS TotCostoContratto, SUM(OreSvolgere) AS TotNettoContratto, COUNT(IDincarico) AS Ninca FROM t_DocentiContratti INNER JOIN  t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN  t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede GROUP BY IDcontratto, t_DocentiContratti.FK_Docente, FK_CodicePF, DescrParFiscale, DataInizioContratto,  CodiceParFiscale, DataFineContratto, QuotaOraIncarico, SiglaSede HAVING IDcontratto=" + Conversions.ToString(FormContr.ChiavePrimaria) + " ORDER BY DataInizioContratto DESC";
PerseoNET/frmDettContrattoDocenteEsterno.cs:				string str = "SELECT IDcontratto, t_DocentiContratti.FK_Docente, FK_CodicePF, SiglaSede, CodiceParFiscale, DescrParFiscale, DataInizioContratto, DataFineContratto, QuotaOraIncarico, (CASE WHEN SUM(OreAssegnate)<SUM(OreSvolgere) THEN 1 ELSE 0 END) AS Inferiore, SUM(OreAssegnate) AS TotOreAssegnate, SUM(OreSvolgere) AS TotOreContratto, SUM(OreSvolgere) AS TotCostoContratto, SUM(OreSvolgere) AS TotNettoContratto, COUNT(IDincarico) AS Ninca, NumeroGiorniLavorativi FROM t_DocentiContratti INNER JOIN  t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN  t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE ContrattoApprovato=1 AND Respinto=0 GROUP BY IDcontratto, t_DocentiContratti.FK_Docente, FK_CodicePF, DescrParFiscale, DataInizioContratto, NumeroGiorniLavorativi, CodiceParFiscale, DataFineContratto, QuotaOraIncarico, SiglaSede, IDsede, t_DocentiContrattiEsterni.FK_Azienda HAVING IDcontratto<>" + Conversions.ToString(FormContr.ChiavePrimaria) + " AND IDsede " + Variabili.FiltroSedi + " ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:				string str = "SELECT IDcontratto, t_DocentiContratti.FK_Docente, FK_CodicePF, SiglaSede, CodiceParFiscale, DescrParFiscale, DataInizioContratto, DataFineContratto, QuotaOraIncarico, (CASE WHEN SUM(OreAssegnate)<SUM(OreSvolgere) THEN 1 ELSE 0 END) AS Inferiore, SUM(OreAssegnate) AS TotOreAssegnate, SUM(OreSvolgere) AS TotOreContratto, SUM(OreSvolgere) AS TotCostoContratto, SUM(OreSvolgere) AS TotNettoContratto, COUNT(IDincarico) AS Ninca, NumeroGiorniLavorativi, BloccoValutazione FROM t_DocentiContratti INNER JOIN  t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN  t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE ContrattoApprovato=0 AND Respinto=0 GROUP BY IDcontratto, t_DocentiContratti.FK_Docente, FK_CodicePF, DescrParFiscale, DataInizioContratto, NumeroGiorniLavorativi, CodiceParFiscale, DataFineContratto, QuotaOraIncarico, SiglaSede, IDsede, t_DocentiContrattiEsterni.FK_Azienda, BloccoValutazione HAVING IDcontratto<>" + Conversions.ToString(FormContr.ChiavePrimaria) + " AND IDsede " + Variabili.FiltroSedi + " ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:					VariabiliClassi.Vedetta.ControlloMancanzaProtezioneRecord(Conversions.ToString(Operators.ConcatenateObject("SELECT IDdocente, Bloccato FROM t_Docenti WHERE IDdocente=", Variabili.Docente.get_Campo((object)0))));
PerseoNET/frmDettContrattoDocenteEsterno.cs:						VariabiliClassi.Vedetta.ControlloMancanzaProtezioneRecord("SELECT IDcontratto, Bloccato FROM t_DocentiContratti WHERE IDcontratto=" + Conversions.ToString(FormContr.ChiavePrimaria));
PerseoNET/frmDettContrattoDocenteEsterno.cs:							string origineDati = "SELECT t_IncarichiEdizioniContratti.IDincacontra, IDprogetto, IDincarico, FK_IncaricoEdizione, FK_Contratto, FK_SedeEdizione, FK_Docente, DescrEdizione, MassimaleDDIF, TipoFormativoInterno, CodiceEdizione, SiglaSede, (CASE WHEN TipoAnnualita IS NOT NULL THEN LEFT(TipoAnnualita,2) ELSE NULL END) AS TipoAnnualita, t_Progetti.DelegaAzienda, DataAvvio, DataFine, (NULL) AS DataSvolg, IndTA, TipoAttivita, DescrArgomento, DataInizioIncarico, DataFineIncarico, (NULL) AS DateInca, OreAssegnate, OreSvolgere, (OreSvolgere) AS MaxOreSvolgere, QuotaOraIncarico, ApprovaIncarico, DataApprovaIncarico, (0) AS Variato FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno WHERE FK_Contratto=" + Conversions.ToString(FormContr.ChiavePrimaria) + " ORDER BY t_PianoServizi.DataAvvio, t_TipoAttivitaEdizione.IndTA, t_ArgomentiModuli.DescrArgomento ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:								origineDati = "SELECT IDincarico, MAX(QuotaOraIncarico) AS MaxQuotaOraIncarico, COUNT(DISTINCT QuotaOraIncarico) AS ContatoreQuota FROM t_IncarichiEdizioniContratti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico WHERE FK_Contratto<>" + Conversions.ToString(FormContr.ChiavePrimaria) + " GROUP BY IDincarico HAVING IDincarico " + tblIncarichi.StringaFiltroIN("IDincarico") + " ORDER BY IDincarico";
PerseoNET/frmDettContrattoDocenteEsterno.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT AnnoAmm, SUM(MonteOre) AS TotaleOre, SUM(MonteOre * CostoOrario) AS Importo, Fisco, Descrizione, Dipendente, Pensionato FROM wt_PrestatoriStoricoContratti WHERE Cf='", Variabili.Docente.get_Campo((object)"CodFiscale")), "' GROUP BY AnnoAmm, Nominativo, Fisco, Descrizione, Dipendente, Pensionato "), "ORDER BY AnnoAmm DESC, Fisco"));
PerseoNET/frmDettContrattoDocenteEsterno.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente, OreAssegnate, DataInizioIncarico, DataFineIncarico, OreSvolgere, QuotaOraIncarico, CodiceParFiscale, DescrParFiscale, TipoDipendente, DescrProfessione, (NULL) AS AnnoAmministrativo FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe WHERE t_IncarichiEdizioni.FK_Docente=", Variabili.Docente.get_Campo((object)"IDdocente")), " AND ApprovaIncarico=1 "));
PerseoNET/frmDettContrattoDocenteEsterno.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente, OreAssegnate, DataInizioIncarico, DataFineIncarico, OreSvolgere, QuotaOraIncarico, CodiceParFiscale, DescrParFiscale, (NULL) AS TipoDipendente, (NULL) AS DescrProfessione, (NULL) AS AnnoAmministrativo FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE t_DocentiContrattiEsterni.FK_Azienda=", FormEst.get_Campo((object)"FK_Azienda")), " AND ApprovaIncarico=1 "));
PerseoNET/frmDettContrattoDocenteEsterno.cs:						origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT IDincarico, IDdocente, OreAssegnate, DataInizioIncarico, DataFineIncarico, OreSvolgere, QuotaOraIncarico, CodParFiscale, DescrParFiscale, TipoDipendente, DescrProfessione, AnnoAmministrativo FROM t_ContrattiIncarichi ");
PerseoNET/frmDettContrattoDocenteEsterno.cs:						origineDati = (clsTblDatiDR.OrigineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (", Variabili.Docente.get_Campo((object)0)), ") AS IDdocente, ("), Variabili.Azienda.PKAzienda), ") AS IDazienda, AnnoAmministrativo, OreAssegnate, SUM(OreSvolgere) AS OreSvolgere, "), "QuotaOraIncarico, (0) AS Imponibile, CodParFiscale, DescrParFiscale, TipoDipendente, DescrProfessione "), "FROM t_ContrattiIncarichi "), "GROUP BY IDincarico, AnnoAmministrativo, OreAssegnate, QuotaOraIncarico, CodParFiscale, DescrParFiscale, TipoDipendente, DescrProfessione ")));
PerseoNET/frmDettContrattoDocenteEsterno.cs:						origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT IDdocente, IDazienda, AnnoAmministrativo, OreAssegnate, OreSvolgere, QuotaOraIncarico, Imponibile, CodParFiscale, DescrParFiscale, TipoDipendente, DescrProfessione FROM t_StoricoContrattiCollaboratore ");
PerseoNET/frmDettContrattoDocenteEsterno.cs:						origineDati = "SELECT IDdocente, IDazienda, AnnoAmministrativo, SUM(OreSvolgere) AS OreSvolgere, SUM(Imponibile) AS Imponibile, CodParFiscale, DescrParFiscale, TipoDipendente, DescrProfessione FROM t_StoricoContrattiCollaboratore GROUP BY IDdocente, IDazienda, AnnoAmministrativo, CodParFiscale, DescrParFiscale, TipoDipendente, DescrProfessione ORDER BY AnnoAmministrativo DESC, CodParFiscale ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:						string str = "(SELECT SUM(DATEDIFF(mi, OraInizio, OraFine))/60 FROM t_CalendarioAttivita WHERE FK_Incarico=IDincarico AND DataAttivita<='" + Strings.Format(VariabiliClassi.DataLogin, VariabiliClassi.StrFormatoDataPC) + "') AS OreFatteInc, ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:						string str2 = "(SELECT SUM(DATEDIFF(mi, OraInizio, OraFine))/60 FROM t_CalendarioAttivita INNER JOIN t_CalendarioCodocenza ON t_CalendarioAttivita.IDcalatt = t_CalendarioCodocenza.FK_Calendario WHERE t_CalendarioCodocenza.FK_Incarico=IDincarico AND DataAttivita<='" + Strings.Format(VariabiliClassi.DataLogin, VariabiliClassi.StrFormatoDataPC) + "') AS OreFatteIncCOD, ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, FK_Contratto, FK_Docente, IDedizione, IDsede, DescrEdizione, TipoFormativoInterno, CodiceEdizione, CodiceProgetto, SiglaSede, DataAvvio, DataFine, (NULL) AS Periodo, (CASE WHEN DescrArgomento IS NULL THEN TipoAttivita ELSE DescrArgomento END) AS DescrAttivita, DescrIncarico, OreAssegnate, (SELECT SUM (OreSvolgere) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico) AS OreAppr, " + str + str2 + "(SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico) AS OrePagate, MIN(DataInizioIncarico) AS PrimaData, MAX(DataFineIncarico) AS UltimaData, MAX(DataProlungamento) AS Prolunga, PagamentoIndividuale, SbloccoTemporaneo, (SELECT MAX(DataPagatoFine) FROM t_ProgettiPagamentiCompensiOneri WHERE IDincarico=t_IncarichiEdizioni.IDincarico) AS DataPagatoFine FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento GROUP BY t_IncarichiEdizioni.IDincarico, FK_Contratto, FK_Docente, IDedizione, IDsede, DescrEdizione, TipoFormativoInterno, CodiceEdizione,  CodiceProgetto, SiglaSede, DataAvvio, DataFine, TipoAttivita, DescrArgomento, OreAssegnate, PagamentoIndividuale, DescrIncarico, IndTA, SbloccoTemporaneo HAVING (FK_Docente=", Variabili.Docente.get_Campo((object)0)), " AND DataAvvio<'"), right), "' "), "AND DataFine>='"), right), "' AND FK_Contratto<>"), FormContr.ChiavePrimaria), ") "), "OR (FK_Docente="), Variabili.Docente.get_Campo((object)0)), " AND DataAvvio>='"), right), "' "), "AND DataAvvio<='"), right2), "' AND FK_Contratto<>"), FormContr.ChiavePrimaria), ") "), "ORDER BY t_PianoServizi.DataAvvio, IndTA, IDincarico "));
PerseoNET/frmDettContrattoDocenteEsterno.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, IDdocente, OreAssegnate, SUM(OreSvolgere) AS TotaleOreContratto, (0) AS DaInserire FROM t_IncarichiContrattiEdizioni GROUP BY IDincarico, IDdocente, OreAssegnate HAVING IDdocente=", FormContr.get_Campo((object)"FK_Docente")), " "));
PerseoNET/frmDettContrattoDocenteEsterno.cs:						vSQL = "SELECT IDincarico, MAX(QuotaOraIncarico) AS MaxQuotaOraIncarico, COUNT(DISTINCT QuotaOraIncarico) AS ContatoreQuota FROM t_IncarichiEdizioniContratti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico GROUP BY IDincarico HAVING IDincarico " + clsTblDatiDR.StringaFiltroIN("IDincarico") + " ORDER BY IDincarico";
PerseoNET/frmDettContrattoDocenteEsterno.cs:							string vSQL = ((Operators.CompareString(text, "", TextCompare: false) == 0) ? Conversions.ToString(Operators.ConcatenateObject("INSERT INTO t_DocentiContrattiEsterni (FK_DocenteContratto, FK_CodicePF, FK_TipoDipendente, DescrProfessione, EsclusioneIVA, RegimeFiscAgevolato, DataScadeFiscAgevolato, RivalsaGestSeparata, IscrittoRegImprese, FK_ContributoCassaPrev, FK_AltraAssINPS, FK_AliquotaPrevSepa, FK_TipoFasciaContr, NumeroGiorniLavorativi, DescrPubblicaAmm, IndirPubblicaAmm, ComPubblicaAmm, IndirizzoPECPubblAmm) SELECT (" + Conversions.ToString(FormContr.ChiavePrimaria) + ") AS FKC, FK_ParFiscaleAttuale, FK_TipoLavoroAttuale, DescrProfessione, EsclusioneIVA, RegimeFiscAgevolato, DataScadeFiscAgevolato, RivalsaGestSeparata, IscrittoRegImprese, FK_ContributoCassaPrev, FK_AltraAssINPS, FK_AliquotaPrevSepa, FK_TipoFascia, (" + Conversions.ToString(Conversions.ToInteger(txtNumeroGiorniLavorativi.Text)) + ") AS NGLav, DescrDatoreLavoro, IndirDatoreLavoro, ComDatoreLavoro, IndirizzoPEC FROM t_Docenti WHERE IDdocente=", Variabili.Docente.get_Campo((object)"IDdocente"))) : Conversions.ToString(Operators.ConcatenateObject("INSERT INTO t_DocentiContrattiEsterni (FK_DocenteContratto, FK_CodicePF, FK_TipoDipendente, DescrProfessione, EsclusioneIVA, RegimeFiscAgevolato, DataScadeFiscAgevolato, RivalsaGestSeparata, IscrittoRegImprese, FK_ContributoCassaPrev, FK_AltraAssINPS, FK_AliquotaPrevSepa, FK_TipoFasciaContr, NumeroGiorniLavorativi, DescrPubblicaAmm, IndirPubblicaAmm, ComPubblicaAmm, IndirizzoPECPubblAmm, DataAutorizzaPubblicaAmm, ProtAutorizzaPubblicaAmm) SELECT (" + Conversions.ToString(FormContr.ChiavePrimaria) + ") AS FKC, FK_ParFiscaleAttuale, FK_TipoLavoroAttuale, DescrProfessione, EsclusioneIVA, RegimeFiscAgevolato, DataScadeFiscAgevolato, RivalsaGestSeparata, IscrittoRegImprese, FK_ContributoCassaPrev, FK_AltraAssINPS, FK_AliquotaPrevSepa, FK_TipoFascia, (" + Conversions.ToString(Conversions.ToInteger(txtNumeroGiorniLavorativi.Text)) + ") AS NGLav, DescrDatoreLavoro, IndirDatoreLavoro, ComDatoreLavoro, IndirizzoPEC, ('" + text2 + "') AS strProt, ('" + text + "') AS strDataProt FROM t_Docenti WHERE IDdocente=", Variabili.Docente.get_Campo((object)"IDdocente"))));
PerseoNET/frmDettContrattoDocenteEsterno.cs:							vSQL = "SELECT IDcontrest, FK_DocenteContratto, FK_TipoDipendente, FK_Azienda, FK_CodicePF, FK_ContributoCassaPrev, FK_AltraAssINPS, FK_AliquotaPrevSepa, FK_TipoFasciaContr, DataAutorizzaPubblicaAmm, ProtAutorizzaPubblicaAmm, DataUploadPAmm, NumeroGiorniLavorativi, DataRec, DataModifica FROM t_DocentiContrattiEsterni WHERE FK_DocenteContratto=" + Conversions.ToString(FormContr.ChiavePrimaria) + " ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcontratto, IDcontrest, FK_Docente, DescrPubblicaAmm, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, FilePAmmPDF FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE FK_Docente=", Variabili.Docente.get_Campo((object)"IDdocente")), " AND DescrPubblicaAmm='"), FunzStringa.StringaSQL(Conversions.ToString(Variabili.Docente.get_Campo((object)"DescrDatoreLavoro")))), "' "), "AND FilePAmmPDF IS NOT NULL "), "AND ProtAutorizzaPubblicaAmm='"), FunzStringa.StringaSQL(txtProtAutorizzaPubblicaAmm.Text)), "' "), "AND DataAutorizzaPubblicaAmm="), FunzStringa.StrDataSQL(txtDataAutorizzaPubblicaAmm.Text, FlagSqlServer: true)), " "), "AND DataInizioContratto>='01/06/2011' AND IDcontrest<>"), FormEst.get_Campo((object)"IDcontrest")));
PerseoNET/frmDettContrattoDocenteEsterno.cs:				string vSQL = ((FormContr.ChiavePrimaria != 0L) ? ("SELECT TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=" + Conversions.ToString(Conversions.ToLong(FormEst.get_Campo((object)"FK_TipoDipendente"))) + " AND TipoDipendente LIKE '%PUBBLIC%' ") : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=", Variabili.Docente.get_Campo((object)"FK_TipoLavoroAttuale")), " "), "AND TipoDipendente LIKE '%PUBBLIC%' ")));
PerseoNET/frmDettContrattoDocenteEsterno.cs:					string origineDati = "SELECT IDdocente, IDazienda, AnnoAmministrativo, SUM(OreSvolgere) AS OreSvolgere, SUM(Imponibile) AS Imponibile, CodParFiscale, DescrParFiscale, TipoDipendente, DescrProfessione FROM t_StoricoContrattiCollaboratore GROUP BY IDdocente, IDazienda, AnnoAmministrativo, CodParFiscale, DescrParFiscale, TipoDipendente, DescrProfessione ORDER BY AnnoAmministrativo DESC, CodParFiscale ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:					string origineDati = "SELECT IDdocente, IDazienda, AnnoAmministrativo, DataInizioIncarico, DataFineIncarico, OreAssegnate, SUM(OreSvolgere) AS OreSvolgere, QuotaOraIncarico, IIf(OreAssegnate<SUM(OreSvolgere),OreAssegnate,SUM(OreSvolgere)) AS TotaleOre, IIf(OreAssegnate<SUM(OreSvolgere),(OreAssegnate*QuotaOraIncarico),SUM(OreSvolgere)*QuotaOraIncarico) AS Imponibile, CodParFiscale, DescrParFiscale, TipoDipendente, DescrProfessione FROM t_ContrattiIncarichi GROUP BY IDdocente, IDazienda, AnnoAmministrativo, DataInizioIncarico, DataFineIncarico, OreAssegnate, QuotaOraIncarico, CodParFiscale, DescrParFiscale, TipoDipendente, DescrProfessione ORDER BY AnnoAmministrativo DESC, DataInizioIncarico, CodParFiscale ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:						string origineDati = "SELECT IDincarico, TipoFormativoInterno, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, (SELECT SUM(OreSvolgere) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico) AS OreApprovate, (SELECT QuotaOraIncarico FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico AND ApprovaIncarico=1 GROUP BY QuotaOraIncarico) AS QuotaOraIncarico, (SUM(Minuti)/60) AS OreSvolte, ((SELECT QuotaOraIncarico FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico AND ApprovaIncarico=1 GROUP BY QuotaOraIncarico)*SUM(Minuti)/60) AS Imponibile FROM v_DettaglioOreSvoltePerIncarico INNER JOIN t_PianoServizi ON v_DettaglioOreSvoltePerIncarico.IDedizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint WHERE IDdocente=" + Conversions.ToString(Conversions.ToLong(FormContr.get_Campo((object)"FK_Docente"))) + " AND DataSvolgimento>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " GROUP BY IDincarico, TipoFormativoInterno, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, IndTA ORDER BY TipoFormativoInterno, DescrEdizione, CodiceEdizione, IndTA ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:								string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=", Variabili.Docente.get_Campo((object)"FK_TipoLavoroAttuale")));
PerseoNET/frmDettContrattoDocenteEsterno.cs:					string vSQL = "SELECT FK_Docente, SUM(NumeroGiorniLavorativi) AS TotaleGiorniLav FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE YEAR(DataInizioContratto)=" + Conversions.ToString(Conversions.ToInteger(Strings.Mid(txtDataInizioContratto.Text, 7, 4))) + " ";
PerseoNET/frmDettContrattoDocenteEsterno.cs:					string origineDati = "SELECT IDsegnalazione, FK_Contratto, FK_Crea, DescrSegnalazione, DataSegnalazione, FK_Risponde, DescrRisposta, DataRisposta, DataChiusura, DataRec, DataModifica FROM wt_SegnalazioneContratti WHERE IDsegnalazione=" + Conversions.ToString(vID);
PerseoNET/frmDettContrattoDocenteEsterno.cs:							string origineDati = "SELECT IDsegnalazione, FK_Contratto, FK_Crea, FK_Risponde, (SELECT Login FROM t_Personale WHERE IDpers=FK_Crea) AS Crea, DescrSegnalazione, DataSegnalazione, (CASE WHEN FK_Risponde IS NOT NULL THEN (SELECT Login FROM t_Personale WHERE IDpers=FK_Risponde) ELSE NULL END) AS Risponde, DescrRisposta, DataRisposta, DataChiusura FROM wt_SegnalazioneContratti WHERE FK_Contratto=" + Conversions.ToString(vID) + " ORDER BY DataSegnalazione ";
PerseoNET/frmEdizioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDavviso FROM t_AvvisiUtentiPerseo INNER JOIN t_TipoCausaleAvviso ON t_AvvisiUtentiPerseo.FK_Causale = t_TipoCausaleAvviso.IDtcausaleavv WHERE Enumerazione IN(" + Conversions.ToString(33) + "," + Conversions.ToString(32) + ") AND PKRecord=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/frmEdizioni.cs:				string str = "SELECT (t_PianoServizi.IDedizione) AS PKEd, SiglaSede, DescrEdizione, CodiceEdizione, (CAST(IDtanno AS VARCHAR) + 'Â°') AS TipoAnnualita, (CASE WHEN EdizioneAttiva=1 THEN 'Attiva' ELSE 'Chiusa' END) AS Stato, (TipoFormativoInterno) AS TipoFormativo, (TipoSettoreInt) AS Settore, IDmwe, IDmwp, CodiceProgetto, DescrProgetto, CodiceCIG, CodiceCUP, CodiceBando, (NULL) AS AnnoAmm, DataAvvio, DataFine, (DataInizioEsame) AS EsameDal, (DataFineEsame) AS EsameAl, (DataInizioFA) AS FADal, (DataFineFA) AS FAAl, DataBloccoPagato, DataBloccoEdizione, (DataBloccoSCO) AS DataBloccoRichiestaPagamento, DataBloccoStudenti, Durata, (SELECT OreAttivita FROM t_AttivitaEdizioni WHERE FK_Edizione=IDedizione AND FK_TipoAttivita=1) AS OreAula, (SELECT OreAttivita FROM t_AttivitaEdizioni WHERE FK_Edizione=IDedizione AND FK_TipoAttivita=2) AS OreStage, (NULL) AS NIscr, (NULL) AS NRit, (NULL) AS UltimaDataAula, DataAggRegistro FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando INNER JOIN t_TipoBando ON t_Bandi.FK_TipoBando = t_TipoBando.IDtbando LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_TipoSettoreInterno ON t_PianoServizi.FK_SettoreEdizione = t_TipoSettoreInterno.IDtsettin LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint ";
PerseoNET/frmEdizioni.cs:				string vSQL = "SELECT FK_Edizione, MAX(DataAttivita) AS UltimaDataAula FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Argomento IS NOT NULL AND DataAttivita<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " GROUP BY FK_Edizione HAVING FK_edizione " + tblEdizioni.StringaFiltroIN(0);
PerseoNET/frmEdizioni.cs:				vSQL = "SELECT FK_Edizione, COUNT(IDiscrizione) AS NIscr FROM t_Iscrizioni WHERE DataIscr IS NOT NULL GROUP BY FK_Edizione HAVING FK_edizione " + tblEdizioni.StringaFiltroIN(0);
PerseoNET/frmEdizioni.cs:				vSQL = "SELECT FK_Edizione, COUNT(IDiscrizione) AS NRit FROM t_Iscrizioni WHERE DataRitiro IS NOT NULL GROUP BY FK_Edizione HAVING FK_edizione " + tblEdizioni.StringaFiltroIN(0);
PerseoNET/frmEdizioni.cs:					string vSQL = "SELECT IDedp, (FK_Edizione) AS IDedizione FROM t_PersonaleEdizioniVisibili WHERE FK_Persona=" + Conversions.ToString(VariabiliClassi.IDaccesso);
PerseoNET/frmEdizioni.cs:					vSQL = "SELECT IDtprogetto, TipoProgetto FROM t_TipoProgetto ORDER BY TipoProgetto ";
PerseoNET/frmEdizioni.cs:					vSQL = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " ";
PerseoNET/frmEdizioni.cs:					vSQL = "SELECT IDtformaint, TipoFormativoInterno FROM t_TipoFormativoInterno ORDER BY TipoFormativoInterno";
PerseoNET/frmEdizioni.cs:					vSQL = "SELECT IDtanno, TipoAnnualita FROM t_TipoAnnualita ORDER BY TipoAnnualita";
PerseoNET/frmEdizioni.cs:					vSQL = "SELECT t_PianoServizi.IDedizione, IDsede, IDazione, IDprogetto, IDtformaint, FK_SedeEdizione, ConsuntivoStagePagamento, EdizioneAttiva, SiglaSede, DescrEdizione, ModelloEdizione, (CAST(IDtanno AS VARCHAR) + 'Â°') AS TipoAnnualita, CodiceEdizione, TipoFormativoInterno, IDmwe, IDmwp, CodiceProgetto, CodiceAzione, CodiceBando, DataAvvio, DataFine, DataBloccoPagato, DataBloccoEdizione, DataBloccoSCO, DataBloccoStudenti, Durata, (0) AS NIscr, DataAggRegistro, DataInizioEsame, DataFineEsame, Gruppo, GiorniINAIL FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint ORDER BY SiglaSede, DataAvvio, CodiceEdizione ";
PerseoNET/frmEdizioni.cs:					string vSQL2 = "SELECT IDedizione, COUNT(IDiscrizione) AS NIscr FROM t_PianoServizi INNER JOIN t_Iscrizioni ON t_Iscrizioni.FK_Edizione=t_PianoServizi.IDedizione WHERE Dataiscr IS NOT NULL GROUP BY IDedizione HAVING IDedizione IN() ";
PerseoNET/frmEdizioni.cs:							vSQL = "SELECT IDavviso FROM t_AvvisiUtentiPerseo WHERE FK_Causale=" + Conversions.ToString(31) + " AND FK_Persona=" + Conversions.ToString(VariabiliClassi.IDaccesso) + " AND DataGenerazione=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " ";
PerseoNET/frmEdizioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDavviso FROM t_AvvisiUtentiPerseo INNER JOIN t_TipoCausaleAvviso ON t_AvvisiUtentiPerseo.FK_Causale = t_TipoCausaleAvviso.IDtcausaleavv WHERE Enumerazione IN(" + Conversions.ToString(33) + "," + Conversions.ToString(32) + ") AND PKRecord=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/frmEdizioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDaccesso, Data, Azione FROM t_StoricoEventi WHERE Azione LIKE '%edizione ID=", tblEdizioni.get_Campo((object)0, vFlagUpdateDB: false)), "%' AND Azione LIKE '%ore assegnate%' "), "AND Tipo='"), VariabiliClassi.Evento.ConversioneTipoStringaTipo(clsGestioneEventi.TipoEvento.DatoCritico)), "' "), "AND Data>="), FunzStringa.StrDataSQL(Strings.Format(DateAndTime.DateAdd(DateInterval.Day, -8.0, VariabiliClassi.DataLogin), "dd/MM/yyyy") + " 00:00:00", FlagSqlServer: true)));
PerseoNET/frmEdizioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Edizione, TipoAttivita FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE Aula=1 AND MonteOreEdizione=1 AND FK_Edizione=", tblEdizioni.get_Campo((object)"IDedizione", vFlagUpdateDB: false)), " "));
PerseoNET/frmEdizioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Edizione, TipoAttivita FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE Aula=1 AND MonteOreEdizione=0 AND FK_Edizione=", tblEdizioni.get_Campo((object)"IDedizione", vFlagUpdateDB: false)), " "));
PerseoNET/frmEdizioni.cs:					text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE FK_Edizione=IDedizione AND DataIscr IS NOT NULL)>=" + txtIscrMIN.Text + " ") : ("WHERE (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE FK_Edizione=IDedizione AND DataIscr IS NOT NULL)>=" + txtIscrMIN.Text + " "));
PerseoNET/frmEdizioni.cs:					text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE FK_Edizione=IDedizione AND DataIscr IS NOT NULL)<=" + txtIscrMAX.Text + " ") : ("WHERE (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE FK_Edizione=IDedizione AND DataIscr IS NOT NULL)<=" + txtIscrMAX.Text + " "));
PerseoNET/frmEdizioni.cs:						text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDconvenzione) FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE CurriculareDDIF=1 AND FK_Edizione=IDedizione)>0 ") : "WHERE (SELECT COUNT(IDconvenzione) FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE CurriculareDDIF=1 AND FK_Edizione=IDedizione)>0 ");
PerseoNET/frmEdizioni.cs:						text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDconvenzione) FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE Curriculare=1 AND FK_Edizione=IDedizione)>0 ") : "WHERE (SELECT COUNT(IDconvenzione) FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE Curriculare=1 AND FK_Edizione=IDedizione)>0 ");
PerseoNET/frmEdizioni.cs:						text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDconvenzione) FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE ExtraCurriculare=1 AND FK_Edizione=IDedizione)>0 ") : "WHERE (SELECT COUNT(IDconvenzione) FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE ExtraCurriculare=1 AND FK_Edizione=IDedizione)>0 ");
PerseoNET/frmEdizioni.cs:						text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDconvenzione) FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE ResidenteEstero=1 AND FK_Edizione=IDedizione)>0 ") : "WHERE (SELECT COUNT(IDconvenzione) FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE ResidenteEstero=1 AND FK_Edizione=IDedizione)>0 ");
PerseoNET/frmEdizioni.cs:						text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND Gruppo=0 AND (SELECT TipoAttivita \r\n                              FROM t_AttivitaEdizioni INNER JOIN \r\n                              t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita \r\n                              WHERE TipoAttivita='DOCENZA' AND t_AttivitaEdizioni.FK_Edizione=IDedizione)='DOCENZA' ") : "WHERE Gruppo=0 AND (SELECT TipoAttivita \r\n                              FROM t_AttivitaEdizioni INNER JOIN \r\n                              t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita \r\n                              WHERE TipoAttivita='DOCENZA' AND t_AttivitaEdizioni.FK_Edizione=IDedizione)='DOCENZA' ");
PerseoNET/frmEdizioni.cs:				string origineDati = "SELECT SiglaSede, DescrEdizione, CodiceEdizione, TipoAnnualita, TipoAttivita, DescrModulo, OreModulo, DescrArgomento, DescrBreveArgomento, TipoArgomento, OreArgomento FROM t_ModuliArgomenti ";
PerseoNET/frmEdizioni.cs:					string origineDati = "SELECT IDincarico, IDedizione, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, DataAvvio, DataFine, Durata, (NULL) AS OreStage, (Cognome + ' ' + Nome) AS Docente, (CASE WHEN FK_Tipo=1 THEN 'Generico' WHEN FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS TipoDocente, TipoAttivita, DescrArgomento, (0) AS TotaleFattePeriodo, OreAssegnate, (0) TotaleFatte, (0) AS Residue FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni On t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione On t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_ArgomentiModuli On t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDedizione " + text + " ORDER BY SiglaSede, TipoFormativoInterno, FK_Anno, DescrEdizione, Cognome, Nome, IndTA ";
PerseoNET/frmEdizioni.cs:					string vSQL = "SELECT (FK_Edizione) AS IDedizione, (OreAttivita) AS OreStage FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE Primaria=1 And FK_Edizione " + text + " And TipoAttivita='STAGE' ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, DATEDIFF(mi,OraInizio,OraFine) AS Minuti FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Edizione " + text + " AND DataAttivita<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " UNION SELECT IDincarico, DataAttivita, OraInizio, OraFine, DATEDIFF(mi,OraInizio,OraFine) AS Minuti FROM t_IncarichiEdizioni INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE FK_Edizione " + text + " ORDER BY IDincarico, DataAttivita, OraInizio ";
PerseoNET/frmEdizioni.cs:								string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDavviso FROM t_AvvisiUtentiPerseo INNER JOIN t_TipoCausaleAvviso ON t_AvvisiUtentiPerseo.FK_Causale = t_TipoCausaleAvviso.IDtcausaleavv WHERE Enumerazione IN(" + Conversions.ToString(33) + "," + Conversions.ToString(32) + ") AND PKRecord=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/frmEdizioni.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT COUNT(IDregstage) AS NumeroRecord FROM t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE FK_Edizione=", tblEdizioni.get_Campo((object)0, vFlagUpdateDB: false)), " "));
PerseoNET/frmEdizioni.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT COUNT(IDcalatt) AS NumeroRecord FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Edizione=", tblEdizioni.get_Campo((object)0, vFlagUpdateDB: false)), " AND FK_Argomento IS NOT NULL "));
PerseoNET/frmEdizioni.cs:									vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT COUNT(IDconvenzione) AS NumeroRecord FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)));
PerseoNET/frmEdizioni.cs:						string origineDati = "SELECT t_Iscrizioni.IDiscrizione, IDiscrfatt, IDedizione, (Cognome + ' ' + Nome) AS Studente, Cognome, Nome, t_Utenti.CodFiscale, t_Utenti.PIVA, Sesso, DataNascita, LuogoNascita, ProvNascita, NazNascita, ComResidenza, IndirResidenza, ProvResidenza, CAPresidenza, NazResidenza, SiglaSede, CodiceEdizione, DescrEdizione, (QuotaIscr+QuotaInteg) AS QuotaPrevista, NumeroFatturaMago, DataFatturaMago, (NULL) AS VersamentiCollegati, DescrAzienda, t_Aziende.PIVA, FatturaElettronicaCD, ComSedeAz, ProvSedeAz, CompensoStage, GiorniPagare, ProtocolloAccordo, OrdineAzienda, t_ConvenzioniStage.DataAvvio, t_ConvenzioniStage.DataFine FROM t_SediAziende INNER JOIN t_ConvenzioniStage ON t_SediAziende.IDsedeaz = t_ConvenzioniStage.FK_SedeStage INNER JOIN t_Aziende ON t_SediAziende.FK_Azienda = t_Aziende.IDazienda RIGHT OUTER JOIN t_PianoServizi INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_IscrizioniFatture ON t_Iscrizioni.IDiscrizione = t_IscrizioniFatture.FK_Iscrizione ON t_ConvenzioniStage.IDconvenzione = t_IscrizioniFatture.FK_ConvenzioneStage WHERE IDsede " + Variabili.FiltroSedi + " AND DataFatturaMago>='" + txtStampaDal.Text + "' AND DataFatturaMago<='" + txtStampaAl.Text + "' ORDER BY SiglaSede, DescrEdizione, (Cognome + ' ' + Nome), t_Iscrizioni.IDiscrizione, IDiscrfatt ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT IDversaiscr, FK_Iscrizione, FK_Fattura, DataVersamento, Quota, NoteVersamento FROM t_IscrizioniVersamenti INNER JOIN t_Iscrizioni ON t_IscrizioniVersamenti.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE IDedizione " + clsTblDatiDR.StringaFiltroIN("IDedizione") + " ORDER BY FK_Iscrizione, FK_Fattura ";
PerseoNET/frmEdizioni.cs:				string origineDati = "SELECT (IDiscrizione) AS MatrIscrizione, IDsede, (Cognome + ' ' + Nome) AS Studente, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, t_PianoServizi.DataAvvio, t_PianoServizi.DataFine, (IDconvenzione) AS NumeroConvenzione, (IDconvazienda) AS ProgettoTirocinio, (t_ConvenzioniStage.DataAvvio) AS DataInizioStage, (t_ConvenzioniStage.DataFine) AS DataFineStage, DurataStage, DescrTipoConvenzione, DataInterruzione, DataProlungamento, t_ConvenzioniStage.StagePagamento, CompensoStage, DataAccordoEconomico, ProtocolloAccordo, OrdineAzienda, GiorniPagare, DescrAzienda, t_Aziende.PIVA, t_Aziende.CodFiscale, FatturaElettronicaCD, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, TelSedeAz_1, FaxSedeAz, EmailSedeAz, DataFatturaMago, NumeroFatturaMago, ImponibileFattura FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_IscrizioniFatture ON t_ConvenzioniStage.IDconvenzione = t_IscrizioniFatture.FK_ConvenzioneStage WHERE IDsede " + Variabili.FiltroSedi + " AND t_ConvenzioniStage.StagePagamento=1 AND t_SediAziende.FK_TipoSede=1  and t_SediAziende.Attiva=1 AND t_ConvenzioniStage.DataAvvio>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND t_ConvenzioniStage.DataAvvio<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " ORDER BY SiglaSede, t_ConvenzioniStage.DataAvvio, (Cognome + ' ' + Nome) ";
PerseoNET/frmEdizioni.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Utenti.Nome, Cognome, CodFiscale, Sesso, DataNascita, LuogoNascita, ProvNascita, NazNascita, IDtnazMW, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, Tel_1, Tel_2, ID_MW, ComAbitazione, IndirAbitazione, CAPabitazione, ProvAbitazione, NazResidenza, LivelloMW FROM t_TipoNazionalita INNER JOIN t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente ON t_TipoNazionalita.IDtnaz = t_Utenti.FK_Nazionalita LEFT OUTER JOIN t_TipoLivelloTitoloMW INNER JOIN t_PercorsoStudi ON t_TipoLivelloTitoloMW.IDtlivstudioMW = t_PercorsoStudi.FK_LivelloStudioMW ON t_Utenti.IDutente = t_PercorsoStudi.FK_Utente WHERE FK_Edizione=", tblEdizioni.get_Campo((object)0, vFlagUpdateDB: false)), " AND DataIscr IS NOT NULL "), "ORDER BY Cognome, Nome, LivelloMW DESC "));
PerseoNET/frmEdizioni.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (t_Iscrizioni.IDiscrizione) AS MatrIscrizione, (PosRegistro) AS PR, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, DataAttivita, OraInizio, OraFine, DescrArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS Docente, FK_CalAttivita FROM t_AssenzeAttivita INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE t_IncarichiEdizioni.FK_Edizione=", tblEdizioni.get_Campo((object)0, vFlagUpdateDB: false)), " "), "AND DataAttivita>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " "), "ORDER BY DataAttivita, OraInizio, OraFine, PosRegistro "));
PerseoNET/frmEdizioni.cs:					string origineDati2 = "SELECT IDcalatt, (Cognome + ' ' + Nome) AS Docente FROM t_CalendarioAttivita INNER JOIN  t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN  t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE IDcalatt " + clsTblDatiDR.StringaFiltroIN("FK_CalAttivita");
PerseoNET/frmEdizioni.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (IDiscrizione) AS PKiscrizione, (Cognome + ' ' + Nome) AS Studente, ('" + FunzStringa.StringaSQL(Conversions.ToString(tblEdizioni.get_Campo((object)"SiglaSede", vFlagUpdateDB: false))) + "') AS Sede, ('" + FunzStringa.StringaSQL(Conversions.ToString(tblEdizioni.get_Campo((object)"CodiceEdizione", vFlagUpdateDB: false))) + "') AS CodiceEdizione, ('" + FunzStringa.StringaSQL(Conversions.ToString(tblEdizioni.get_Campo((object)"DescrEdizione", vFlagUpdateDB: false))) + "') AS DescrEdizione, ('" + FunzStringa.StringaSQL(Conversions.ToString(tblEdizioni.get_Campo((object)"TipoFormativoInterno", vFlagUpdateDB: false))) + "') AS TipoFormativo, (" + FunzStringa.StringaSQL(Conversions.ToString(tblEdizioni.get_Campo((object)"Durata", vFlagUpdateDB: false))) + ") AS Durata, ('", tblEdizioni.get_Campo((object)"DataAvvio", vFlagUpdateDB: false)), "') AS DataAvvio, ('"), tblEdizioni.get_Campo((object)"DataFine", vFlagUpdateDB: false)), "') AS DataFine, "), "DataIscr, DataRitiro, OreAttivitaIndividuali, "), "(CASE WHEN DescrArgomento IS NOT NULL THEN DescrArgomento ELSE TipoAttivitaStage END) AS DescrAttivita, "), "SUM(OreAttivita) AS Ore, SUM(GiorniINAIL) AS INAIL "), "FROM t_Iscrizioni INNER JOIN "), "t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN "), "t_IscrizioniConsuntivoAttivita ON t_Iscrizioni.IDiscrizione = t_IscrizioniConsuntivoAttivita.FK_Iscrizione LEFT OUTER JOIN "), "t_TipoAttivitaStage ON t_IscrizioniConsuntivoAttivita.FK_TipoStage = t_TipoAttivitaStage.IDtstage LEFT OUTER JOIN "), "t_ArgomentiModuli ON t_IscrizioniConsuntivoAttivita.FK_Argomento = t_ArgomentiModuli.IDargomento "), "WHERE t_Iscrizioni.FK_Edizione="), tblEdizioni.get_Campo((object)0, vFlagUpdateDB: false)), " "), "GROUP BY IDiscrizione, FK_Edizione, Cognome, Nome, DataIscr, DataRitiro, PosRegistro, DescrArgomento, "), "OreAttivitaIndividuali, TipoAttivitaStage "), "HAVING DataIscr IS NOT NULL "), "ORDER BY PosRegistro "));
PerseoNET/frmEdizioni.cs:				string origineDati = "SELECT IDiscrizione, FK_EdizioneRecupero, (Cognome + ' ' + Nome) AS Studente, CodiceEdizione, DescrEdizione, SiglaSede, DataAvvio, DataFine, Durata, DataAttivita, OraInizio, OraFine, DescrArgomento, DataRecupero, OraInizioRecupero, OraFineRecupero, (NULL) AS SiglaSedeRecupero, SedeRecupero FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AssenzeAttivita ON t_Iscrizioni.IDiscrizione = t_AssenzeAttivita.FK_Iscrizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE t_PianoServizi.IDedizione " + str + " AND DataRecupero IS NOT NULL ORDER BY t_PianoServizi.DataAvvio, t_PianoServizi.CodiceEdizione, (Cognome + ' ' + Nome), DataRecupero ";
PerseoNET/frmEdizioni.cs:				clsTblDatiDR2.OrigineDati = "SELECT IDedizione, CodiceEdizione, DescrEdizione, SiglaSede FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDedizione " + clsTblDatiDR.StringaFiltroIN("FK_EdizioneRecupero");
PerseoNET/frmEdizioni.cs:				string origineDati = "SELECT Studente, Cognome, Nome, CodFiscale, PIVA, Sesso, PosRegistro, IDmwiscr, ID_Dote, DataNascita, LuogoNascita, ProvNascita, NazNascita, TipoNazionalita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, ComAbitazione, CAPabitazione, IndirAbitazione, ProvAbitazione, DataIscr, DataRitiro, OreUtente, OreCredito, OreAttivitaIndividuali, OreStage, OreAulaPianificate, OreAula, OreAssenza, PresenzaStage, PresenzaIndiv, PresenzaServ, OrePresenza, OreRecuperate, EsameINAIL, PresenzaEsame, (NULL) AS Controllare, IdoneoAmmesso, PuntFinale, SedeEsternaRecupero, DescrCertAttivitaApprendista, Sostegno, OreSostegno, OreSostegnoIndividuale, DescrProgetto, CodiceProgetto, DescrEdizione, CodiceEdizione, ID_Fin, DataAvvio, DataFine, Durata, DescrSede, IndirizzoSede, ComuneSede, CAPsede, ProvSede, AziendaProvenienza, ComuneAzienda, IndirizzoAzienda, Disabile, (Svantaggio) AS DSA FROM t_IscrittiEdizione ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT (FK_Iscrizione) AS IDiscrizione, SUM(Minuti) AS TotaleRecupero FROM t_AssenzeAttivita WHERE DataRecupero IS NOT NULL GROUP BY FK_Iscrizione HAVING FK_Iscrizione " + Variabili.Edizione.StrFiltroIN_PKIscritti + " ";
PerseoNET/frmEdizioni.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, TipoSettoreProd, TipoContratto, DescrMansione, TipoEsitoOccupazione, DataInizioRapp, DataFineRapp, DescrAzienda, ComuneAzienda, IndirizzoAzienda FROM t_Iscrizioni INNER JOIN t_EsperienzeLavoro INNER JOIN t_TipoSettoreProduttivo ON t_EsperienzeLavoro.FK_SettoreProduttivo = t_TipoSettoreProduttivo.IDtsetprod ON t_Iscrizioni.FK_Utente = t_EsperienzeLavoro.FK_Utente LEFT OUTER JOIN t_TipoContratto ON t_EsperienzeLavoro.FK_TipoContratto = t_TipoContratto.IDcontr LEFT OUTER JOIN t_TipoEsitoOccupazione ON t_EsperienzeLavoro.FK_EsitoOccupazionale = t_TipoEsitoOccupazione.IDtesitoocc WHERE (IDiscrizione " + Variabili.Edizione.StrFiltroIN_PKIscritti + " AND DataInizioRapp IS NOT NULL AND DataInizioRapp<'", Variabili.Edizione.get_Campo((object)"DataAvvio")), "' AND DataFineRapp IS NULL) "), "OR "), "(IDiscrizione "), Variabili.Edizione.StrFiltroIN_PKIscritti), " AND DataInizioRapp IS NOT NULL "), "AND DataInizioRapp<'"), Variabili.Edizione.get_Campo((object)"DataAvvio")), "' AND DataFineRapp IS NOT NULL "), "AND DataFineRapp>'"), Variabili.Edizione.get_Campo((object)"DataAvvio")), "') "), "ORDER BY DataInizioRapp DESC "));
PerseoNET/frmEdizioni.cs:							string origineDati = "SELECT IDiscrizione, PosRegistro, Studente, ID_Dote, IDmwiscr, DataIscr, DataRitiro, PresenzaEsame, EsameINAIL, IdoneoAmmesso, PuntFinale FROM t_RegistroStudente ";
PerseoNET/frmEdizioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDgradimento, FK_Edizione FROM t_GradimentoServizi WHERE FK_Edizione=", tblEdizioni.get_Campo((object)0, vFlagUpdateDB: false)), " "));
PerseoNET/frmEdizioni.cs:						string origineDati = "SELECT IDedizione, IDsede, SiglaSede, DescrEdizione, TipoAnnualita, CodiceEdizione, TipoFormativoInterno, DataAvvio, DataFine, Durata, DataGrad, BloccoReferenteSQ, (0) AS NumeroIscritti, COUNT(DISTINCT IDquest) AS NumCompilati FROM v_DettRisposteGradimento GROUP BY IDedizione, SiglaSede, DescrEdizione, TipoAnnualita, CodiceEdizione, TipoFormativoInterno, DataAvvio, DataFine, Durata, DataGrad, BloccoReferenteSQ, IDsede HAVING IDedizione " + tblEdizioni.StringaFiltroIN(0) + " AND IDsede " + Variabili.FiltroSedi + " ORDER BY SiglaSede, TipoFormativoInterno, TipoAnnualita, DescrEdizione ";
PerseoNET/frmEdizioni.cs:								vSQL = "SELECT IDutente, (Cognome + ' ' + Nome) AS Studente, CodFiscale FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione " + text + "GROUP BY IDutente, Cognome, Nome, CodFiscale HAVING (Cognome + ' ' + Nome) LIKE '" + FunzStringa.StringaSQL(txtCerca.Text) + "%' ";
PerseoNET/frmEdizioni.cs:							vSQL = "SELECT IDutente FROM t_Utenti WHERE IDutente=" + Conversions.ToString(Conversions.ToLong(txtCerca.Text)) + " ";
PerseoNET/frmEdizioni.cs:							vSQL = "SELECT IDutente FROM t_Utenti WHERE CodFiscale='" + txtCerca.Text + "' ";
PerseoNET/frmEdizioni.cs:				vSQL = "SELECT IDedizione FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Utente " + VariabiliClassi.CmdSQL.StringaFiltroIN_DataTbl(0) + " AND FK_SedeEdizione " + text2 + " ";
PerseoNET/frmEdizioni.cs:					string origineDati = "SELECT (IDiscrizione) AS MatricolaIscr, IDedizione, (Cognome + ' ' + Nome) AS Studente, Cognome, Nome, CodFiscale, SiglaSede, DescrEdizione, CodiceEdizione, IDmwe, TipoAnnualita, TipoFormativoInterno, DataAvvio, DataFine, Durata, Uditore, IDmwiscr, (DataIscr) AS DataIscrizione, DataRitiro, PosRegistro, (NULL) AS Destinatario, (NULL) AS EmailDestinatario FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno WHERE IDedizione " + tblEdizioni.StringaFiltroIN("IDedizione") + " ORDER BY IDedizione, IDiscrizione ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDiscrizione, (t_ReferentiUtente.Cognome + ' ' + t_ReferentiUtente.Nome) AS Destinatario, EmailRef FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_ReferentiUtente ON t_Utenti.IDutente = t_ReferentiUtente.FK_Utente WHERE ConsenteNotificheMail=1 AND FK_Edizione " + tblEdizioni.StringaFiltroIN("IDedizione") + " AND t_ReferentiUtente.Attivo=1 ";
PerseoNET/frmEdizioni.cs:					origineDati = (clsTblDatiDR.OrigineDati = "SELECT IDiscrizione, DataAttivita, OraInizio, OraFine, Minuti, Giustificata FROM t_AssenzeAttivita INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt WHERE IDedizione " + tblEdizioni.StringaFiltroIN("IDedizione") + " ORDER BY IDedizione, IDiscrizione, DataAttivita, OraInizio ");
PerseoNET/frmEdizioni.cs:						string origineDati = "SELECT (IDiscrizione) AS MatricolaIscr, (t_Utenti.IDutente) AS MatricolaStud, IDedizione, (Cognome + ' ' + Nome) AS Studente, Cognome, Nome, CodFiscale, Sesso, DataNascita, (DATEDIFF(d,DataNascita,DataAvvio)/365) AS Eta, LuogoNascita, ProvNascita, NazNascita, TipoNazionalita, StatoCivile, LuogoNascitaStraniero, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, (IDsede) AS StrIDSede, SiglaSede, DescrEdizione, CodiceEdizione, IDmwe, TipoAnnualita, TipoFormativoInterno, TipoSettoreInt, (NULL) AS AnnoAmministrativo, DataAvvio, DataFine, Durata, CodiceProgetto, DescrProgetto, IDmwp, ID_Dote, Uditore, IDmwiscr, (DataIscr) AS DataIscrizione, DataRitiro, TipoMotivoRitiro, OreCredito, OreAttivitaIndividuali, Sostegno, OreSostegno, Disabile, (Svantaggio) AS DSA, DropOut, StatoDisagioSociale, CittadinanzaNonAcquisita, (NULL) AS DoppiaCittadinanza,(SELECT TipoLivelloMW FROM t_PercorsoStudi INNER JOIN t_TipoLivelloTitoloMW ON t_PercorsoStudi.FK_LivelloStudioMW = t_TipoLivelloTitoloMW.IDtlivstudioMW WHERE FK_Utente=t_Utenti.IDutente) AS TipoTitoloStudio, (Tel_1) AS Telefono, (Tel_2) AS Cellulare, Email, PosRegistro, NoteProvenienza FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando LEFT OUTER JOIN t_TipoSettoreInterno ON t_PianoServizi.FK_SettoreEdizione = t_TipoSettoreInterno.IDtsettin LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_TipoMotivoRitiro ON t_Iscrizioni.FK_MotivoRitiro = t_TipoMotivoRitiro.IDtritiro LEFT OUTER JOIN t_TipoStatoLav ON t_Utenti.FK_StatoLav = t_TipoStatoLav.IDtslav LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud LEFT OUTER JOIN v_StudentiDocumentoRiconoscimentoAttivo ON t_Utenti.IDutente = v_StudentiDocumentoRiconoscimentoAttivo.IDutente WHERE IDedizione " + tblEdizioni.StringaFiltroIN("IDedizione") + " AND Gruppo=1 AND Durata>0 ORDER BY SiglaSede, TipoFormativoInterno, TipoAnnualita, DescrEdizione, Cognome, Nome ";
PerseoNET/frmEdizioni.cs:							origineDati = "SELECT IDdocumento, FK_Studente, DescrDocumento, DataPubblicazione, Redattore FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE TipoDocumento LIKE '%cittadinanza%' AND DescrDocumento LIKE '%italia%' ";
PerseoNET/frmEdizioni.cs:					string vSQL = "SELECT MAX(DataBloccoIncassi) AS DataBloccoIncassi FROM t_Sedi WHERE Attiva=1 ";
PerseoNET/frmEdizioni.cs:							string origineDati = "SELECT IDiscrizione, Studente, ID_Dote, IDmwiscr, SiglaSede, DescrEdizione, TipoFormativoInterno, DataAvvio, DataFine, Durata, DataIscr, DataRitiro, PrevisteAula, PrevisteStage, OreAttivitaIndividuali, OreCredito, StatoStud, PresenzaAula, OreAssenza, PresenzaStage, PresenzaIndiv, PresenzaServ, PresenzaTotale FROM t_IscrittiEdizione ";
PerseoNET/frmEdizioni.cs:								vSQL = ((Strings.StrComp(txtCerca.Text, "docente generico", CompareMethod.Text) != 0) ? ("SELECT IDdocente, (Cognome + ' ' + Nome) AS Docente, CodFiscale FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_SedeEdizione " + text2 + " GROUP BY IDdocente, Cognome, Nome, CodFiscale HAVING (Cognome + ' ' + Nome) LIKE '" + FunzStringa.StringaSQL(txtCerca.Text) + "%' ") : ("SELECT IDdocente, (Cognome + ' ' + Nome) AS Docente, CodFiscale FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_SedeEdizione " + text2 + " GROUP BY IDdocente, Cognome, Nome, CodFiscale HAVING IDdocente<=3 "));
PerseoNET/frmEdizioni.cs:							vSQL = "SELECT IDdocente FROM t_Docenti WHERE IDdocente=" + Conversions.ToString(Conversions.ToLong(txtCerca.Text)) + " ";
PerseoNET/frmEdizioni.cs:							vSQL = "SELECT IDdocente FROM t_Docenti WHERE CodFiscale='" + txtCerca.Text + "' ";
PerseoNET/frmEdizioni.cs:				vSQL = "SELECT IDedizione FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione  WHERE IDdocente " + VariabiliClassi.CmdSQL.StringaFiltroIN_DataTbl(0) + " AND FK_SedeEdizione " + text2 + " ";
PerseoNET/frmEdizioni.cs:				string origineDati = "SELECT IDutente, IDdocumento, (Cognome + ' ' + Nome) AS Studente, CodFiscale, LuogoNascita, ProvNascita, NazNascita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, TipoDocumento, DescrDocumento, DataPubblicazione, (Redattore) AS RilasciatoDa, CodiceDoc, DataScadenza, NoteDocumento FROM t_Documenti INNER JOIN t_Utenti ON t_Documenti.FK_Studente = t_Utenti.IDutente INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE IDedizione " + tblEdizioni.StringaFiltroIN(0) + " GROUP BY IDutente, IDdocumento, Cognome, Nome, CodFiscale, LuogoNascita, ProvNascita, NazNascita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, TipoDocumento, DescrDocumento, DataPubblicazione, Redattore, CodiceDoc, DataScadenza, NoteDocumento ORDER BY (Cognome + ' ' + Nome), CodFiscale ";
PerseoNET/frmEdizioni.cs:							string origineDati = "SELECT IDdocente, (Cognome + ' ' + Nome) AS StrDOC FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN v_DettaglioCalendarioAttivita ON t_IncarichiEdizioni.IDincarico = v_DettaglioCalendarioAttivita.FK_Incarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE FK_SedeEdizione=" + Conversions.ToString(ListaSedi.get_PKSelezioneLista(vFlagMsgMultiSelezione: true)) + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " AND DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND FK_TIPO>1 GROUP BY IDdocente, Cognome, Nome ORDER BY Cognome, Nome ";
PerseoNET/frmEdizioni.cs:				string origineDati = "SELECT (IDiscrizione) AS MatricolaIscritto, (Cognome + ' ' + Nome) AS Studente, CodiceEdizione, DescrEdizione, t_PianoServizi.DataAvvio, t_PianoServizi.DataFine, SiglaSede, (IDconvenzione) AS ProgettoTirocinio, ID_Dote, DataIscr, DataRitiro, (CASE WHEN DataRitiro IS NULL THEN 'A' ELSE 'R' END) AS Stato, (t_ConvenzioniStage.DataAvvio) AS StageDAL, (CASE WHEN DataProlungamento IS NOT NULL THEN t_ConvenzioniStage.DataProlungamento ELSE t_ConvenzioniStage.DataFine END) AS StageAL, (OreAttivitaIndividuali) AS OrePreviste, SUM(OreAttivita) AS OrePresenza, SUM(t_IscrizioniConsuntivoAttivita.GiorniINAIL) AS StageINAIL, MAX(t_IscrizioniConsuntivoAttivita.DataFine) AS UltimaData FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud LEFT OUTER JOIN t_IscrizioniConsuntivoAttivita ON t_Iscrizioni.IDiscrizione = t_IscrizioniConsuntivoAttivita.FK_Iscrizione AND t_ConvenzioniStage.IDconvenzione = t_IscrizioniConsuntivoAttivita.FK_Convenzione WHERE ConsuntivoStagePagamento=1 GROUP BY IDiscrizione, IDedizione, IDutente, IDconvenzione, PosRegistro, Cognome, Nome, ID_Dote, DataIscr, DataRitiro, OreAttivitaIndividuali, t_ConvenzioniStage.DataAvvio, t_ConvenzioniStage.DataFine, t_ConvenzioniStage.DataProlungamento, NumeroConv, CodiceEdizione, DescrEdizione, SiglaSede, t_PianoServizi.DataAvvio, t_PianoServizi.DataFine " + str + "ORDER BY SiglaSede, t_PianoServizi.DataAvvio, (Cognome + ' ' + Nome), t_ConvenzioniStage.DataAvvio ";
PerseoNET/frmEdizioni.cs:				string origineDati = "SELECT (IDiscrizione) AS MatricolaIscritto, (Cognome + ' ' + Nome) AS Studente, CodiceEdizione, DescrEdizione, t_PianoServizi.DataAvvio, t_PianoServizi.DataFine, SiglaSede, (IDconvenzione) AS ProgettoTirocinio, ID_Dote, DataIscr, DataRitiro, (CASE WHEN DataRitiro IS NULL THEN 'A' ELSE 'R' END) AS Stato, (t_ConvenzioniStage.DataAvvio) AS StageDAL, (CASE WHEN DataProlungamento IS NOT NULL THEN t_ConvenzioniStage.DataProlungamento ELSE t_ConvenzioniStage.DataFine END) AS StageAL, (OreAttivitaIndividuali) AS OrePreviste, SUM(OreAttivita) AS OrePresenza, SUM(t_IscrizioniConsuntivoAttivita.GiorniINAIL) AS StageINAIL, MAX(t_IscrizioniConsuntivoAttivita.DataFine) AS UltimaData, (NULL) AS DescrQualificaUscitaStage, (NULL) AS DescrAmbitoStage, (NULL) AS AziendaCodiceATECO FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud LEFT OUTER JOIN t_IscrizioniConsuntivoAttivita ON t_Iscrizioni.IDiscrizione = t_IscrizioniConsuntivoAttivita.FK_Iscrizione AND t_ConvenzioniStage.IDconvenzione = t_IscrizioniConsuntivoAttivita.FK_Convenzione WHERE ConsuntivoStagePagamento=1 AND t_PianoServizi.GiorniINAIL=1 AND t_IscrizioniConsuntivoAttivita.DataInizio>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND t_IscrizioniConsuntivoAttivita.DataFine<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND IDsede " + Variabili.FiltroSedi + " GROUP BY IDiscrizione, IDedizione, IDutente, IDconvenzione, PosRegistro, Cognome, Nome, ID_Dote, DataIscr, DataRitiro, OreAttivitaIndividuali, t_ConvenzioniStage.DataAvvio, t_ConvenzioniStage.DataFine, t_ConvenzioniStage.DataProlungamento, NumeroConv, CodiceEdizione, DescrEdizione, SiglaSede, t_PianoServizi.DataAvvio, t_PianoServizi.DataFine ORDER BY SiglaSede, t_PianoServizi.DataAvvio, (Cognome + ' ' + Nome), t_ConvenzioniStage.DataAvvio ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT FK_Iscrizione, DescrQualificaUscita, DescrCCNL, CodiceATECO, DescrAmbitoStage FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda WHERE FK_Iscrizione " + clsTblDatiDR.StringaFiltroIN("MatricolaIscritto") + " ORDER BY FK_Iscrizione ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT IDiscrizione, TipoLivello, DescrSettore, OreSicurezzaSpecifica FROM v_ElencoStageSediEdizioni WHERE IDiscrizione " + clsTblDatiDR.StringaFiltroIN("MatricolaIscritto") + " ORDER BY IDiscrizione ";
PerseoNET/frmEdizioni.cs:				string vSQL = "SELECT IDedizione FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione  WHERE IDincarico=" + Conversions.ToString(Conversions.ToLong(txtCerca.Text)) + " ";
PerseoNET/frmEdizioni.cs:				string origineDati = "SELECT IDiscrizione, SiglaSede, Studente, Cognome, Nome, CodFiscale, GiorniINAIL, GiorniAulaINAIL, GiorniEsameINAIL, GiorniStageINAIL, GiorniAlternanzaINAIL, GiorniPagatiAzienda, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataAggRegistro, TipoFormativo, DescrQualificaUscitaStage, DescrINAIL, DescrAzienda, AziendaCodiceATECO, NoteStage, NoteTipo FROM t_IscrittiEdizione ";
PerseoNET/frmEdizioni.cs:										origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDiscrizione, TipoConvenzione, PagareGiorniINAIL FROM t_Iscrizioni INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE PagareGiorniINAIL=1 AND FK_Edizione=", tblEdizioni.get_Campo((object)"IDedizione", vFlagUpdateDB: false)));
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT FK_Iscrizione, DataAvvio, (CASE WHEN DataInterruzione IS NOT NULL THEN DataInterruzione WHEN DataProlungamento IS NOT NULL THEN DataProlungamento ELSE DataFine END) AS DataFine, DurataStage, DescrQualificaUscita, DescrAzienda, DescrCCNL, CodiceATECO, Categoria, DescrLavorazione, DescrDettLavorazione, Classificazione, AziendaPosizioneINAIL FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_TipoClasseINAIL ON t_ConvenzioniStage.FK_ClasseINAIL = t_TipoClasseINAIL.IDtinail WHERE FK_Iscrizione " + clsTblDatiDR.StringaFiltroIN("IDiscrizione") + " AND DataAvvio<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND (CASE WHEN DataInterruzione IS NOT NULL THEN DataInterruzione WHEN DataProlungamento IS NOT NULL THEN DataProlungamento ELSE DataFine END)>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " ORDER BY FK_Iscrizione ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT IDiscrizione, TipoLivello, DescrSettore, OreSicurezzaSpecifica FROM v_ElencoStageSediEdizioni WHERE IDiscrizione " + clsTblDatiDR.StringaFiltroIN("IDiscrizione") + " AND DataAvvio<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND DataFine>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " ORDER BY IDiscrizione ";
PerseoNET/frmEdizioni.cs:							vSQL = "SELECT IDedizione, IDcalatt, FK_Incarico, FK_Locale, IDdocente, IDargomento, FK_CalAttivita, (DataAttivita) AS StrGiorno, DataAttivita, (DataAttivita) AS StrDataGiorno, (0) AS IndGiorno,OraInizio, OraFine, DocenzaFAD, DescrBreveArgomento, StrDOC, CodiceLocale, ncod, (NULL) AS CodiceEdizione FROM zt_GrigliaSettimana ";
PerseoNET/frmEdizioni.cs:								vSQL = "SELECT IDedizione, IDcalatt, FK_Incarico, FK_Locale, IDdocente, IDargomento, FK_CalAttivita, StrGiorno, DataAttivita, StrDataGiorno, IndGiorno, OraInizio, OraFine, DocenzaFAD, DescrBreveArgomento, StrDOC, CodiceLocale, ncod, CodiceEdizione FROM zt_GrigliaSettimanaEdizioni ";
PerseoNET/frmEdizioni.cs:					vSQL = "SELECT zt_GrigliaSettimanaEdizioni.IDedizione, CodiceEdizione FROM zt_GrigliaSettimanaEdizioni GROUP BY zt_GrigliaSettimanaEdizioni.IDedizione, CodiceEdizione ORDER BY CodiceEdizione ";
PerseoNET/frmEdizioni.cs:					vSQL = "SELECT IndGiorno, StrGiorno, OraInizio, OraFine, StrDataGiorno ";
PerseoNET/frmEdizioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, IndGiorno, CodiceEdizione, StrGiorno, DataAttivita, StrDataGiorno, OraInizio, OraFine, DocenzaFAD, IIf(DocenzaFAD=TRUE,'(FAD) ' & DescrBreveArgomento,DescrBreveArgomento) AS DescrBreveArgomento, StrDOC, CodiceLocale FROM zt_GrigliaSettimanaEdizioni WHERE IDedizione=", clsTblDatiDR2.get_Campo((object)"IDedizione")), " "), "ORDER BY IndGiorno, StrGiorno, OraInizio "));
PerseoNET/frmEdizioni.cs:					string text = "SELECT IDcalatt, IDincarico, IDedizione, FK_Attivita, IDiscrizione, DataAttivita, OraInizio, OraFine, T_Ore, DescrEdizione, CodiceEdizione, CodiceEdizioneCR, SiglaSede, TipoAttivita, Aula, DescrModulo, DescrArgomento, TipoAreaFormativa, TipoArgomento, Docente, Studente, Locale, INAIL, LavoroPIP, PresenzaStudentePIP, MinutiStudente, AltriStudentiCoaching, IDdocente, TipoAnnualita, DocenzaFAD, ID_Dote, DocenzaFAD FROM t_PianificazioneDocente ";
PerseoNET/frmEdizioni.cs:						text = Conversions.ToString(Operators.ConcatenateObject("SELECT IDcalatt FROM t_PianificazioneDocente WHERE IDedizione=", clsTblDatiDR.get_Campo((object)"IDedizione")));
PerseoNET/frmEdizioni.cs:					text = "SELECT Giorno, OraInizio, OraFine";
PerseoNET/frmEdizioni.cs:					text = "SELECT (DataAttivita) AS Giorno, DataAttivita, MIN(OraInizio) AS MinOraInizio, MAX(OraInizio) AS MaxOraInizio, MAX(OraFine) AS MaxOraFine FROM t_PianificazioneDocente GROUP BY DataAttivita ORDER BY DataAttivita ";
PerseoNET/frmEdizioni.cs:					text = "SELECT IDedizione, (DataAttivita) AS Giorno, OraInizio, OraFine, DocenzaFAD, Docente, Studente, IIf(DocenzaFAD=TRUE,'(FAD) ' & DescrArgomento,DescrArgomento) AS DescrArgomento, Locale FROM t_PianificazioneDocente ORDER BY DataAttivita, OraInizio, IDedizione ";
PerseoNET/frmEdizioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, DataAttivita FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Argomento IS NOT NULL AND FK_Edizione=", clsTblDatiDR.get_Campo((object)"IDedizione")), " "), "AND DataAttivita>="), FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true)));
PerseoNET/frmEdizioni.cs:						vSQL = "SELECT IDedizione, IDcalatt, FK_Incarico, FK_Locale, IDdocente, IDargomento, FK_CalAttivita, (DataAttivita) AS StrGiorno, DataAttivita, (DataAttivita) AS StrDataGiorno, (0) AS IndGiorno,OraInizio, OraFine, DescrBreveArgomento, StrDOC, CodiceLocale, ncod, (NULL) AS CodiceEdizione FROM zt_GrigliaSettimana ";
PerseoNET/frmEdizioni.cs:							vSQL = "SELECT IDedizione, IDcalatt, FK_Incarico, FK_Locale, IDdocente, IDargomento, FK_CalAttivita, StrGiorno, DataAttivita, StrDataGiorno, IndGiorno, OraInizio, OraFine, DescrBreveArgomento, StrDOC, CodiceLocale, ncod, CodiceEdizione FROM zt_GrigliaSettimanaEdizioni ";
PerseoNET/frmEdizioni.cs:					vSQL = "SELECT zt_GrigliaSettimanaEdizioni.IDedizione, CodiceEdizione FROM zt_GrigliaSettimanaEdizioni GROUP BY zt_GrigliaSettimanaEdizioni.IDedizione, CodiceEdizione ORDER BY CodiceEdizione ";
PerseoNET/frmEdizioni.cs:					vSQL = "SELECT IndGiorno, StrGiorno, OraInizio, OraFine, StrDataGiorno ";
PerseoNET/frmEdizioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, IndGiorno, CodiceEdizione, StrGiorno, DataAttivita, StrDataGiorno, OraInizio, OraFine, DescrBreveArgomento, StrDOC, CodiceLocale FROM zt_GrigliaSettimanaEdizioni WHERE IDedizione=", clsTblDatiDR3.get_Campo((object)"IDedizione")), " "), "ORDER BY IndGiorno, StrGiorno, OraInizio "));
PerseoNET/frmEdizioni.cs:							string origineDati = "SELECT t_IscrittiEdizione.IDiscrizione, (NULL) AS Sede, (NULL) AS CodiceEdizione, (NULL) AS Anno, Studente, ID_Dote, DataAvvioDote, DataFineDote, DoteChiusa, OreStage, OreAttivitaIndividuali, (0) AS OreProgTir, DataRitiro, (0) AS OreStageSvolte, (0) AS OreIndivSvolte, (0) AS OreSvolte, (0) AS MinutiStage, (0) AS MinutiIndiv, (0) AS MinutiStudente, (0) AS MaxMinutiStage, (0) AS MaxMinutiIndividuali, (0) AS MaxMinutiStudente FROM t_IscrittiEdizione WHERE DataIscr IS NOT NULL ORDER BY PosRegistro ";
PerseoNET/frmEdizioni.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_RegistroStage.IDregstage, IDiscrizione, FK_Edizione, FK_Attivita, FK_AttivitaDotePF, DataStage, OraIngresso, OraUscita, DATEDIFF(mi, OraIngresso, OraUscita) AS Minuti, OFA, TipoAttivitaStage, DescrAttivitaStage, FK_TipoStage FROM t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " ORDER BY IDiscrizione "));
PerseoNET/frmEdizioni.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (t_CalendarioAttivita.IDcalatt) AS IDregstage, IDiscrizione, t_Iscrizioni.FK_Edizione, (NULL) AS FK_Attivita, (NULL) AS FK_AttivitaDotePF, (DataAttivita) AS DataStage, (OraInizio) AS OraIngresso, (OraFine) AS OraUscita, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, (1) AS OFA, (TipoAttivita) AS TipoaAttivitaStage, (t_CalendarioAttivita.DescrAttivita) AS DescrAttivitaStage, (0) AS FK_TipoStage FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " "), "AND t_Iscrizioni.FK_Edizione="), Variabili.Edizione.get_Campo((object)"IDedizione")), " AND LavoroPIP=1 AND PresenzaStudentePIP=1 "), "ORDER BY IDiscrizione "));
PerseoNET/frmEdizioni.cs:							vSQL = "SELECT IDdocente, IDincarico, StrDOC, CodFiscale, TipoDocente, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, DescrArgomento, OreAssegnate, OreSvolte, CostoAttivita, CostoPersona, DescrEdizioneCR, CodiceEdizioneCR, DocenteCR FROM t_EdizioniCostiPersonale";
PerseoNET/frmEdizioni.cs:								vSQL = "SELECT IDedizione, SUM(Minuti) AS TotaleMinuti FROM v_DettaglioOreSvoltePerIncarico WHERE DataSvolgimento>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " GROUP BY IDedizione HAVING IDedizione " + tblEdizioni.StringaFiltroIN("IDedizione");
PerseoNET/frmEdizioni.cs:								vSQL = "SELECT SiglaSede, CodiceEdizione, DescrEdizione, TipoAnnualita, Periodo FROM t_Edizioni ";
PerseoNET/frmEdizioni.cs:							vSQL = "SELECT SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, TipoDocente, TipoAttivita, SUM(OreSvolte) AS OreSvolte, SUM(CostoPersona) AS CostoPersona, SUM(CostoAttivita) AS CostoAttivita FROM t_EdizioniCostiPersonale GROUP BY SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, TipoDocente, TipoAttivita, IndTA ORDER BY SiglaSede, TipoFormativoInterno, DescrEdizione, IndTA ";
PerseoNET/frmEdizioni.cs:				string origineDati = "SELECT IDdocente, IDincarico, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN Cognome <>'DOCENTE' then (SELECT CodFiscale FROM t_Docenti WHERE t_Docenti.IDdocente=v_DettaglioOreSvoltePerIncarico.IDdocente) ELSE NULL END) AS CodFiscale, TipoDocente, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, DescrArgomento, OreAssegnate, SUM(Minuti) AS OreSvolte, (NULL) AS CostoAttivita, (NULL) AS CostoPersona, (NULL) AS DescrEdizioneCR, (NULL) AS CodiceEdizioneCR, (NULL) AS DocenteCR FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN v_DettaglioOreSvoltePerIncarico ON t_PianoServizi.IDedizione = v_DettaglioOreSvoltePerIncarico.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint WHERE DataSvolgimento>=" + FunzStringa.StrDataSQL(vStrDAL, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(vStrAL, FlagSqlServer: true) + " AND t_PianoServizi.IDedizione=" + Conversions.ToString(vID) + " GROUP BY IDdocente, IDincarico, Cognome, Nome, TipoDocente, IndTA, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, DescrArgomento, OreAssegnate ORDER BY Cognome, Nome, IDdocente, IndTA, IDincarico ";
PerseoNET/frmEdizioni.cs:				origineDati = "SELECT IDdocente, FK_Tipo, IDedizione, IDincarico, IDtattivita, TipoAttivita, Aula, DataSvolgimento, Minuti, DocenzaFAD, IDcalatt, IDcalcod, IDcalatt_CR, (0) AS CostoAttivita, (0) AS CostoPersona, (NULL) AS DocenteCR FROM v_DettaglioOreSvoltePerIncarico WHERE IDedizione=" + Conversions.ToString(vID) + " AND DataSvolgimento>=" + FunzStringa.StrDataSQL(vStrDAL, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(vStrAL, FlagSqlServer: true) + " ORDER BY IDdocente, DataSvolgimento";
PerseoNET/frmEdizioni.cs:				origineDati = "SELECT (FK_Docente) AS IDdocente, t_DocentiInterniCostoMese.CostoDocenza, t_DocentiInterniCostoMese.CostoCoordTutor, t_DocentiInterniCostoMese.CostoAltreFunzioni FROM t_DocentiContratti INNER JOIN t_DocentiInterniCostoMese ON t_DocentiContratti.IDcontratto = t_DocentiInterniCostoMese.FK_Contratto WHERE DataInizioContratto<=" + FunzStringa.StrDataSQL(vStrAL, FlagSqlServer: true) + " AND DataFineContratto>=" + FunzStringa.StrDataSQL(vStrDAL, FlagSqlServer: true) + " AND Mese=" + Conversions.ToString(DateAndTime.Month(Conversions.ToDate(vStrDAL))) + "  AND FK_Docente " + clsTblDatiDR.StringaFiltroIN("IDdocente");
PerseoNET/frmEdizioni.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDcalatt FROM t_CalendarioAttivita WHERE FK_CalAttivita=", clsTblDatiDR2.get_Campo((object)"IDcalatt")));
PerseoNET/frmEdizioni.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT t_CalendarioAttivita.IDcalatt, FK_Docente FROM t_CalendarioAttivita INNER JOIN t_CalendarioAttivita AS t_CalendarioAttivita_1 ON t_CalendarioAttivita.FK_CalAttivita = t_CalendarioAttivita_1.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita_1.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE t_CalendarioAttivita.FK_CalAttivita=", clsTblDatiDR2.get_Campo((object)"IDcalatt_CR")));
PerseoNET/frmEdizioni.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT (FK_Docente) AS IDdocente, t_DocentiInterniCostoMese.CostoDocenza, t_DocentiInterniCostoMese.CostoCoordTutor, t_DocentiInterniCostoMese.CostoAltreFunzioni FROM t_DocentiContratti INNER JOIN t_DocentiInterniCostoMese ON t_DocentiContratti.IDcontratto = t_DocentiInterniCostoMese.FK_Contratto WHERE DataInizioContratto<=" + FunzStringa.StrDataSQL(vStrDAL, FlagSqlServer: true) + " AND DataFineContratto>=" + FunzStringa.StrDataSQL(vStrAL, FlagSqlServer: true) + " AND Mese=" + Conversions.ToString(DateAndTime.Month(Conversions.ToDate(vStrDAL))) + "  AND FK_Docente=", VariabiliClassi.CmdSQL.get_CampoDataTbl((object)"FK_Docente")));
PerseoNET/frmEdizioni.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDdocente, (Cognome + ' ' + Nome) AS StrDOC FROM t_Docenti WHERE IDdocente=", VariabiliClassi.CmdSQL.get_CampoDataTbl((object)"IDdocente")));
PerseoNET/frmEdizioni.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CalendarioAttivita.FK_Incarico, IDedizione, CodiceEdizione, DescrEdizione FROM t_CalendarioAttivita INNER JOIN t_CalendarioAttivita AS t_CalendarioAttivita_1 ON t_CalendarioAttivita.FK_CalAttivita = t_CalendarioAttivita_1.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita_1.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE t_CalendarioAttivita.FK_CalAttivita IS NOT NULL GROUP BY t_CalendarioAttivita.FK_Incarico, t_PianoServizi.IDedizione, t_PianoServizi.CodiceEdizione, t_PianoServizi.DescrEdizione HAVING t_CalendarioAttivita.FK_Incarico=", clsTblDatiDR.get_Campo((object)"IDincarico")), " "), "ORDER BY CodiceEdizione, DescrEdizione "));
PerseoNET/frmEdizioni.cs:						string origineDati = "SELECT IDlocale, CodiceLocale FROM (t_Locali INNER JOIN t_LocaliEdizioni ON t_Locali.IDlocale = t_LocaliEdizioni.FK_LocaleAssegnato) INNER JOIN t_CalendarioAttivita ON t_LocaliEdizioni.IDloced = t_CalendarioAttivita.FK_Locale WHERE FK_Sede " + text + " AND FK_Sede " + Variabili.FiltroSedi + " AND DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND FK_TIPO>1 GROUP BY IDlocale, CodiceLocale ORDER BY CodiceLocale ";
PerseoNET/frmEdizioni.cs:					string origineDati = "SELECT IDlocale, FK_TipoSede, SiglaSede, CodiceLocale, DescrLocale, TipoLocale, Posti, Sovrapponibile, INAIL, LocaleEsterno, LocaleAttivo FROM t_TipoLocale INNER JOIN (t_Sedi INNER JOIN t_Locali ON t_Sedi.IDsede = t_Locali.FK_Sede) ON t_TipoLocale.IDtloc = t_Locali.FK_Tipo WHERE IDsede " + text + " AND IDsede " + Variabili.FiltroSedi + " ORDER BY CodiceLocale, DescrLocale";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDlocale, CodiceEdizione, FK_Anno, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine FROM t_Docenti INNER JOIN (t_Locali INNER JOIN (t_LocaliEdizioni INNER JOIN ((t_ArgomentiModuli INNER JOIN (t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione) ON t_ArgomentiModuli.IDargomento = t_IncarichiEdizioni.FK_Argomento) INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico) ON (t_PianoServizi.IDedizione = t_LocaliEdizioni.FK_Edizione) AND (t_LocaliEdizioni.IDloced = t_CalendarioAttivita.FK_Locale)) ON t_Locali.IDlocale = t_LocaliEdizioni.FK_LocaleAssegnato) ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente WHERE DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND IDlocale " + clsTblDatiDR.StringaFiltroIN("IDlocale") + " ORDER BY CodiceLocale, IDlocale, OraInizio, DataAttivita ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDlocale, CodiceEdizione, FK_Anno, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine FROM t_PianificazioneAula ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDlocale, CodiceEdizione, FK_Anno, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine FROM t_PianificazioneAula ORDER BY CodiceLocale, IDlocale, OraInizio, DataAttivita ";
PerseoNET/frmEdizioni.cs:						origineDati = (flag ? "SELECT Ore, LunedÃ¬, MartedÃ¬, MercoledÃ¬, GiovedÃ¬, VenerdÃ¬, Sabato, Domenica FROM t_Settimana" : "SELECT Ore, LunedÃ¬, MartedÃ¬, MercoledÃ¬, GiovedÃ¬, VenerdÃ¬, Sabato FROM t_Settimana");
PerseoNET/frmEdizioni.cs:						string origineDati = "SELECT IDdocente, IDcalatt, CodiceEdizione, DescrEdizione, (CASE WHEN DocenzaFAD=1 THEN ('(FAD) ' + DescrBreveArgomento) ELSE DescrBreveArgomento END) AS DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, (FK_Iscrizione) AS IDiscrizione FROM t_Docenti INNER JOIN (t_Locali INNER JOIN (t_LocaliEdizioni INNER JOIN ((t_ArgomentiModuli INNER JOIN (t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione) ON t_ArgomentiModuli.IDargomento = t_IncarichiEdizioni.FK_Argomento) INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico) ON (t_PianoServizi.IDedizione = t_LocaliEdizioni.FK_Edizione) AND (t_LocaliEdizioni.IDloced = t_CalendarioAttivita.FK_Locale)) ON t_Locali.IDlocale = t_LocaliEdizioni.FK_LocaleAssegnato) ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente WHERE DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND FK_SedeEdizione " + text + " AND t_Docenti.FK_Tipo>1 UNION SELECT IDdocente, IDcalcod, CodiceEdizione, DescrEdizione, (CASE WHEN DocenzaFAD=1 THEN ('(FAD) ' + TipoAttivita) ELSE TipoAttivita END) AS TipoAttivita, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, (NULL) AS IDiscrizione FROM t_TipoAttivitaEdizione INNER JOIN (t_PianoServizi INNER JOIN (t_Locali INNER JOIN (t_LocaliEdizioni INNER JOIN ((t_Docenti INNER JOIN (t_AttivitaEdizioni INNER JOIN t_IncarichiEdizioni ON t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita) ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente) INNER JOIN (t_CalendarioAttivita INNER JOIN t_CalendarioCodocenza ON t_CalendarioAttivita.IDcalatt = t_CalendarioCodocenza.FK_Calendario) ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico) ON t_LocaliEdizioni.IDloced = t_CalendarioAttivita.FK_Locale) ON t_Locali.IDlocale = t_LocaliEdizioni.FK_LocaleAssegnato) ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione) ON t_TipoAttivitaEdizione.IDtattivita = t_AttivitaEdizioni.FK_TipoAttivita WHERE DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND FK_SedeEdizione " + text + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " ORDER BY Cognome, Nome, IDdocente, OraInizio, DataAttivita ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT IDdocente, IDcalatt, CodiceEdizione, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, IDiscrizione FROM t_PianificazioneAula ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT IDdocente, IDcalatt, CodiceEdizione, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, IDiscrizione, (NULL) AS Studente FROM t_PianificazioneAula ORDER BY Cognome, Nome, IDdocente, DataAttivita, OraInizio ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT IDiscrizione, Cognome, Nome FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT IDcalcod, Cognome, Nome FROM t_Docenti INNER JOIN (t_IncarichiEdizioni INNER JOIN (t_CalendarioAttivita INNER JOIN t_CalendarioCodocenza ON t_CalendarioAttivita.IDcalatt = t_CalendarioCodocenza.FK_Calendario) ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico) ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente " + text;
PerseoNET/frmEdizioni.cs:						origineDati = (Funzioni.UtenteGN() ? ("SELECT IDdocente, (Cognome + ' ' + Nome) AS StrDoc, CodFiscale, Email, (NULL) AS NomeFile, (NULL) AS Esito FROM t_Docenti WHERE FK_Tipo>1 AND IDdocente " + clsTblDatiDR2.StringaFiltroIN("IDdocente") + " ") : ("SELECT IDdocente, (Cognome + ' ' + Nome) AS StrDoc, CodFiscale, Email, (NULL) AS NomeFile, (NULL) AS Esito FROM t_Docenti WHERE FK_Tipo>1 AND DocenteTest=0 AND IDdocente " + clsTblDatiDR2.StringaFiltroIN("IDdocente") + " "));
PerseoNET/frmEdizioni.cs:							origineDati = (flag ? "SELECT Ore, LunedÃ¬, MartedÃ¬, MercoledÃ¬, GiovedÃ¬, VenerdÃ¬, Sabato, Domenica FROM t_Settimana" : "SELECT Ore, LunedÃ¬, MartedÃ¬, MercoledÃ¬, GiovedÃ¬, VenerdÃ¬, Sabato FROM t_Settimana");
PerseoNET/frmEdizioni.cs:								origineDati = (clsTblDatiDR6.OrigineDati = "SELECT Cognome, Nome, DescrEdizione, CodiceEdizione, DescrBreveArgomento, DataAttivita, OraInizio, OraFine, Studente, CodiceLocale FROM t_PianificazioneAula ");
PerseoNET/frmEdizioni.cs:					string origineDati = "SELECT IDedizione, IDcalatt, CodiceEdizione, FK_Anno, DescrEdizione, (CASE WHEN DocenzaFAD=1 THEN ('(FAD) ' + DescrBreveArgomento) ELSE DescrBreveArgomento END) AS DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, DocenzaFAD, (FK_Iscrizione) AS IDiscrizione, FK_CalAttivita FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_LocaliEdizioni ON t_PianoServizi.IDedizione = t_LocaliEdizioni.FK_Edizione AND t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND FK_SedeEdizione=" + Conversions.ToString(ListaSedi.get_PKSelezioneLista(vFlagMsgMultiSelezione: true)) + " ORDER BY IDedizione, OraInizio, DataAttivita ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT IDcalatt, Cognome, Nome, CodiceLocale FROM t_Locali INNER JOIN (t_LocaliEdizioni INNER JOIN (t_Docenti INNER JOIN (t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico) ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente) ON t_LocaliEdizioni.IDloced = t_CalendarioAttivita.FK_Locale) ON t_Locali.IDlocale = t_LocaliEdizioni.FK_LocaleAssegnato WHERE IDcalatt " + clsTblDatiDR2.StringaFiltroIN("FK_CalAttivita");
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDedizione, IDcalatt, CodiceEdizione, FK_Anno, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, DocenzaFAD, IDiscrizione, FK_CalAttivita FROM t_PianificazioneAula ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDedizione, IDcalatt, CodiceEdizione, FK_Anno, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, DocenzaFAD, IDiscrizione, FK_CalAttivita FROM t_PianificazioneAula ORDER BY IDedizione, OraInizio, DataAttivita ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDiscrizione, Cognome, Nome FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDcalatt, FK_Edizione, Cognome, Nome FROM t_Docenti INNER JOIN (t_IncarichiEdizioni INNER JOIN (t_CalendarioAttivita INNER JOIN t_CalendarioCodocenza ON t_CalendarioAttivita.IDcalatt = t_CalendarioCodocenza.FK_Calendario) ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico) ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente WHERE FK_Edizione " + clsTblDatiDR2.StringaFiltroIN("IDedizione") + " AND DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " ORDER BY IDcalatt ";
PerseoNET/frmEdizioni.cs:						origineDati = (flag ? "SELECT Ore, LunedÃ¬, MartedÃ¬, MercoledÃ¬, GiovedÃ¬, VenerdÃ¬, Sabato, Domenica FROM t_Settimana" : "SELECT Ore, LunedÃ¬, MartedÃ¬, MercoledÃ¬, GiovedÃ¬, VenerdÃ¬, Sabato FROM t_Settimana");
PerseoNET/frmEdizioni.cs:				text = "SELECT DescrSede, EmailSede FROM t_Sedi WHERE IDsede " + tblEdizioni.StringaFiltroIN("IDsede") + " WHERE EmailSede IS NOT NULL ORDER BY SiglaSede ";
PerseoNET/frmEdizioni.cs:				text = "SELECT SiglaSede FROM t_Sedi";
PerseoNET/frmEdizioni.cs:					string origineDati = "SELECT (IDconvenzione) AS ProgettoTIR, SiglaSede, (Cognome + ' ' + Nome) AS Studente, CodiceEdizione, DescrEdizione, t_ConvenzioniStage.DataAvvio, t_ConvenzioniStage.DataFine, DescrAmbitoStage, (CurriculareDDIF) AS Curriculare, ExtraCurriculare, (Curriculare) AS Abilitante, TipoConvenzione, ClasseRischioINAIL, Categoria, DescrLavorazione, DescrDettLavorazione, Classificazione FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoClasseINAIL ON t_ConvenzioniStage.FK_ClasseINAIL = t_TipoClasseINAIL.IDtinail INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE IDsede " + Variabili.FiltroSedi + " AND ClasseRischioINAIL=1 AND t_ConvenzioniStage.DataAvvio>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND t_ConvenzioniStage.DataAvvio<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " ORDER BY SiglaSede, CodiceEdizione, (Cognome + ' ' + Nome) ";
PerseoNET/frmEdizioni.cs:						string origineDati = "SELECT IDdocente, IDcalatt, CodiceEdizione, DescrEdizione, (CASE WHEN DocenzaFAD=1 THEN ('(FAD) ' + DescrBreveArgomento) ELSE DescrBreveArgomento END) AS DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, (FK_Iscrizione) AS IDiscrizione FROM t_Docenti INNER JOIN (t_Locali INNER JOIN (t_LocaliEdizioni INNER JOIN ((t_ArgomentiModuli INNER JOIN (t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione) ON t_ArgomentiModuli.IDargomento = t_IncarichiEdizioni.FK_Argomento) INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico) ON (t_PianoServizi.IDedizione = t_LocaliEdizioni.FK_Edizione) AND (t_LocaliEdizioni.IDloced = t_CalendarioAttivita.FK_Locale)) ON t_Locali.IDlocale = t_LocaliEdizioni.FK_LocaleAssegnato) ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente WHERE DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text) + " " + text + " AND t_Docenti.FK_Tipo>1 UNION SELECT IDdocente, IDcalcod, CodiceEdizione, DescrEdizione, (CASE WHEN DocenzaFAD=1 THEN ('(FAD) ' + TipoAttivita) ELSE TipoAttivita END) AS TipoAttivita, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, (NULL) AS IDiscrizione FROM t_TipoAttivitaEdizione INNER JOIN (t_PianoServizi INNER JOIN (t_Locali INNER JOIN (t_LocaliEdizioni INNER JOIN ((t_Docenti INNER JOIN (t_AttivitaEdizioni INNER JOIN t_IncarichiEdizioni ON t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita) ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente) INNER JOIN (t_CalendarioAttivita INNER JOIN t_CalendarioCodocenza ON t_CalendarioAttivita.IDcalatt = t_CalendarioCodocenza.FK_Calendario) ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico) ON t_LocaliEdizioni.IDloced = t_CalendarioAttivita.FK_Locale) ON t_Locali.IDlocale = t_LocaliEdizioni.FK_LocaleAssegnato) ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione) ON t_TipoAttivitaEdizione.IDtattivita = t_AttivitaEdizioni.FK_TipoAttivita WHERE DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text) + " " + text + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " ORDER BY Cognome, Nome, IDdocente, OraInizio, DataAttivita ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT IDdocente, IDcalatt, CodiceEdizione, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, IDiscrizione FROM t_PianificazioneAula ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT IDdocente, IDcalatt, CodiceEdizione, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, IDiscrizione, (NULL) AS Studente FROM t_PianificazioneAula ORDER BY Cognome, Nome, IDdocente, DataAttivita, OraInizio ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT IDiscrizione, Cognome, Nome FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente ";
PerseoNET/frmEdizioni.cs:						origineDati = (Funzioni.UtenteGN() ? ("SELECT IDdocente, (Cognome + ' ' + Nome) AS StrDoc, CodFiscale, Email, (NULL) AS NomeFile, (NULL) AS Esito FROM t_Docenti WHERE FK_Tipo>1 AND IDdocente " + clsTblDatiDR2.StringaFiltroIN("IDdocente") + " ") : ("SELECT IDdocente, (Cognome + ' ' + Nome) AS StrDoc, CodFiscale, Email, (NULL) AS NomeFile, (NULL) AS Esito FROM t_Docenti WHERE FK_Tipo>1 AND DocenteTest=0 AND IDdocente " + clsTblDatiDR2.StringaFiltroIN("IDdocente") + " "));
PerseoNET/frmEdizioni.cs:							origineDati = "SELECT IDdocente, IDcalatt, CodiceEdizione, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, IDiscrizione, (NULL) AS Studente FROM t_PianificazioneAula ORDER BY Cognome, Nome, IDdocente, DataAttivita, OraInizio ";
PerseoNET/frmEdizioni.cs:					origineDatiInizialeNoFiltroOrd = "SELECT IDedizione FROM t_PianoServizi INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione  WHERE PagareGiorniINAIL=1 AND PagaGiorniINAIL=0 AND t_PianoServizi.DataAvvio<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND t_PianoServizi.DataFine>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " GROUP BY IDedizione ";
PerseoNET/frmEdizioni.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDavviso FROM t_AvvisiUtentiPerseo INNER JOIN t_TipoCausaleAvviso ON t_AvvisiUtentiPerseo.FK_Causale = t_TipoCausaleAvviso.IDtcausaleavv WHERE Enumerazione IN(" + Conversions.ToString(33) + "," + Conversions.ToString(32) + ") AND PKRecord=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/frmEdizioni.cs:				string vSQL = "SELECT IDiscrizione, FK_Edizione FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE IDiscrizione=" + Conversions.ToString(Conversions.ToLong(txtCerca.Text)) + " AND FK_SedeEdizione " + Variabili.FiltroSedi;
PerseoNET/frmEdizioni.cs:						string origineDati = "SELECT IDutente, IDedizione, (Cognome + ' ' + Nome) AS Studente, t_Utenti.CodFiscale, SiglaSede, CodiceEdizione, DescrAzienda, t_Aziende.PIVA, t_Aziende.CodFiscale, IDazienda FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda WHERE RegolaProroga=1 AND t_ConvenzioniStage.DataAvvio<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND t_ConvenzioniStage.DataFine>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " GROUP BY IDutente, IDedizione, (Cognome + ' ' + Nome), t_Utenti.CodFiscale, CodiceEdizione, SiglaSede, DescrAzienda, t_Aziende.PIVA, t_Aziende.CodFiscale, IDazienda ORDER BY (Cognome + ' ' + Nome), DescrAzienda, SiglaSede, CodiceEdizione ";
PerseoNET/frmEdizioni.cs:							origineDati = "SELECT IDedizione, (Cognome + ' ' + Nome) AS Studente, t_Utenti.CodFiscale, SiglaSede, CodiceEdizione, (IDconvenzione) AS NumProgetto, (IDconvazienda) AS NumConvenzione, DescrAzienda, t_Aziende.PIVA, t_Aziende.CodFiscale, t_ConvenzioniStage.DataAvvio, t_ConvenzioniStage.DataFine, DataProlungamento, DataInterruzione FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda WHERE RegolaProroga=1 AND IDutente IN(" + text + ") AND IDazienda IN(" + text2 + ") ORDER BY (Cognome + ' ' + Nome), DescrAzienda, IDazienda, t_ConvenzioniStage.DataAvvio, SiglaSede, CodiceEdizione ";
PerseoNET/frmEdizioni.cs:								string origineDati = "SELECT IDconvenzione, FileAccordoEconomicoPDF, PKLettoAccordoEconomico, (Cognome + ' ' + Nome) AS Studente, t_Utenti.CodFiscale, t_ConvenzioniStage.DataAvvio, t_ConvenzioniStage.DataFine, DurataStage, DescrAzienda, t_Aziende.PIVA, t_Aziende.CodFiscale, (NULL) AS Esito FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_Pianoservizi.IDedizione WHERE StagePagamento=1 AND t_ConvenzioniStage.DataAvvio>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND t_ConvenzioniStage.DataAvvio<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND FK_SedeEdizione " + Variabili.FiltroSediAttive + " ORDER BY (Cognome + ' ' + Nome)";
PerseoNET/frmEdizioni.cs:				string vSQL = "SELECT IDiscrizione, IDconvenzione, IDedizione FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE IDconvenzione=" + txtCerca.Text + " AND FK_SedeEdizione " + Variabili.FiltroSedi;
PerseoNET/frmEdizioni.cs:				string origineDati = "SELECT DataAttivita, OraInizio, OraFine, Docente, Destinatario, UFC FROM t_CalendarioAttivita ";
PerseoNET/frmEdizioni.cs:				origineDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, Locale, IDiscrizione FROM t_CalendarioAttivita ";
PerseoNET/frmEdizioni.cs:				origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, Cognome, Nome, CodFiscale, DescrArgomento, ID_Disciplina FROM t_IncarichiEdizioni INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE FK_Edizione=", tblEdizioni.get_Campo((object)0, vFlagUpdateDB: false)), " "), "ORDER BY Cognome, Nome, IDincarico"));
PerseoNET/frmEdizioni.cs:							string origineDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine FROM t_CalendarioAttivita ";
PerseoNET/frmEdizioni.cs:							origineDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, Locale FROM t_CalendarioAttivita ";
PerseoNET/frmEdizioni.cs:							vSQL = "SELECT DataAttivita, OraInizio, OraFine, Docente, Destinatario, UFC FROM t_CalendarioAttivita ";
PerseoNET/frmEdizioni.cs:							vSQL = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, CodiceLocale, IDiscrizione, Cognome, Nome, DescrArgomento, TipoAttivita, IDedizione, Esito FROM t_CalendarioAttivita ";
PerseoNET/frmEdizioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, Cognome, Nome, CodFiscale, DescrArgomento, ID_Disciplina FROM t_IncarichiEdizioni INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE FK_Edizione=", tblEdizioni.get_Campo((object)0, vFlagUpdateDB: false)), " "), "ORDER BY Cognome, Nome, IDincarico"));
PerseoNET/frmEdizioni.cs:								vSQL = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, CodiceLocale, IDiscrizione, Cognome, Nome, DescrArgomento, TipoAttivita, IDedizione FROM t_CalendarioAttivita ";
PerseoNET/frmEdizioni.cs:								vSQL = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, CodiceLocale, IDiscrizione, Cognome, Nome, DescrArgomento, TipoAttivita, IDedizione FROM t_PianificazioneAula ";
PerseoNET/frmEdizioni.cs:							string origineDati = "SELECT IDedizione, IDiscrizione, PosRegistro, Studente, DataAttivita, OraInizio, OraFine FROM t_Assenze ";
PerseoNET/frmEdizioni.cs:							origineDati = "SELECT IDedizione, IDiscrizione, PosRegistro, Studente, DataAttivita, OraInizio, OraFine, Minuti, Giustificata, LarsaExtra, Esito FROM t_Assenze ";
PerseoNET/frmEdizioni.cs:								string str = "SELECT DataOraInizio, DataOraFine, Docente, OreSvolte";
PerseoNET/frmEdizioni.cs:								str = "SELECT IDedizione, IDiscrizione, PosRegistro, Studente, DataAttivita, OraInizio, OraFine, Minuti, Giustificata, LarsaExtra, Esito FROM t_AssenzeEdizione ";
PerseoNET/frmEdizioni.cs:				string text = "SELECT IDiscrizione, IDconvenzione, IDedizione FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda ";
PerseoNET/frmEdizioni.cs:					string vSQL = "SELECT IDedizione FROM t_PianoServizi WHERE FK_SedeEdizione " + Variabili.FiltroSedi + " AND DataAvvio<=" + FunzStringa.StrDataSQL("31/08/" + Strings.Mid(cmbAnnoAmm.Text, 6, 4), FlagSqlServer: true) + " AND DataFine>=" + FunzStringa.StrDataSQL("01/09/" + Strings.Mid(cmbAnnoAmm.Text, 1, 4), FlagSqlServer: true) + " AND DataBloccoPagato<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true);
PerseoNET/frmEdizioni.cs:					string origineDati = "SELECT IDedizione FROM t_PianoServizi INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione GROUP BY IDedizione HAVING IDedizione " + tblEdizioni.StringaFiltroIN(0);
PerseoNET/frmEdizioni.cs:						string origineDati = "SELECT IDedp, (FK_Edizione) AS IDedizione FROM t_PersonaleEdizioniVisibili WHERE FK_Persona=" + Conversions.ToString(VariabiliClassi.IDaccesso);
PerseoNET/frmEdizioni.cs:						string vSQL = "SELECT IDtconvenzione FROM t_TipoConvenzioneStage WHERE ExtraCurriculare=1 AND Obsoleto=0 ";
PerseoNET/frmEdizioni.cs:						vSQL = "SELECT NumeroProgetto, NumeroConvenzione, MatricolaIscrizione, Studente, CodFiscale, SiglaSede, DescrEdizione, CodiceEdizione, TipoConvenzione, DescrQualificaUscita, DataConvenzione, DataScadenza, StageDAL, StageAL, Interrotto, DataProlungamento, OreStage, Azienda, PIVA_CF, TipoFormaGiuridica, Indirizzo, Comune, Prov, CAP, Nazione, NumeroAddettiSedeStage, NumeroAddettiSede, NumeroExtraCurrAttivi, TutorCentro, CompetenzeComplete FROM v_ElencoStageSediEdizioni ";
PerseoNET/frmEdizioni.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcompestd, COUNT(IDconoabi) AS Numero FROM t_ConvenzioniStageObiettivi INNER JOIN t_ProfessioniConoAbiRL ON t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita = t_ProfessioniConoAbiRL.IDconoabi INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniConoAbiRL.FK_Competenza = t_ProfessioniCompetenzeRL.IDcompestd INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl WHERE FK_Convenzione=", clsTblDatiDR.get_Campo((object)"NumeroProgetto")), " "), "GROUP BY IDcompestd "));
PerseoNET/frmEdizioni.cs:							vSQL = "SELECT IDcompestd, DescrCompetenza, COUNT(IDconoabi) AS Numero FROM t_ProfessioniCompetenzeRL INNER JOIN t_ProfessioniConoAbiRL ON t_ProfessioniCompetenzeRL.IDcompestd = t_ProfessioniConoAbiRL.FK_Competenza WHERE ConoAbilitaAttiva=1 GROUP BY IDcompestd, DescrCompetenza HAVING IDcompestd " + clsTblDatiDR2.StringaFiltroIN("IDcompestd");
PerseoNET/frmEdizioni.cs:						clsTblDatiDR2.OrigineDati = "SELECT IDmodsbocc, DataAvvioEdizione FROM t_ModelliQuestionarioOccupazione ORDER BY DataAvvioEdizione DESC ";
PerseoNET/frmEdizioni.cs:							string str = "SELECT IDedizione, SiglaSede, CodiceEdizione, DescrEdizione, DataAvvio, DataFine, (CAST(FK_Anno AS VARCHAR) + 'Â°') AS Anno, (0) AS QuestionariCompilati FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDedizione " + tblEdizioni.StringaFiltroIN(0) + " ";
PerseoNET/frmEdizioni.cs:								str = "SELECT IDdomandaqsbo, FK_ModelloQuest, FK_TipoSbocco, IndDomanda, DescrDomanda, DescrBreve, Specificare FROM t_ModelliQuestionarioOccupazioneDomande WHERE FK_ModelloQuest=" + Conversions.ToString(num2) + " ORDER BY IndDomanda, DescrDomanda";
PerseoNET/frmEdizioni.cs:								str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDquestsbo, (Cognome + ' ' + Nome) AS Studente, DataCompilazione, TipoSboccoOccupazionale, Note, " + text4 + " FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente LEFT OUTER JOIN t_QuestionariOccupazioneIscrizioni ON t_Iscrizioni.IDiscrizione = t_QuestionariOccupazioneIscrizioni.FK_Iscrizione LEFT OUTER JOIN t_TipoSboccoOccupazionale ON t_QuestionariOccupazioneIscrizioni.FK_TipoSbocco = t_TipoSboccoOccupazionale.IDtsbocco WHERE FK_Edizione=", clsTblDatiDR3.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "ORDER BY (Cognome + ' ' + Nome) "));
PerseoNET/frmEdizioni.cs:									str = "SELECT IDiscrizione, IDquestsbo, CodiceEdizione, DescrEdizione, Anno, (Cognome + ' ' + Nome) AS Studente, DataRitiro, IdoneoAmmesso, Apprendista, DataCompilazione, TipoSboccoOccupazionale, Note, " + text4 + " FROM t_Iscrizioni ";
PerseoNET/frmEdizioni.cs:								str = Conversions.ToString(Operators.ConcatenateObject("SELECT IDiscrizione, (Cognome + ' ' + Nome) AS Studente, DataRitiro, IdoneoAmmesso, (0) AS Apprendista, FK_Utente FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE FK_Edizione=", clsTblDatiDR3.get_Campo((object)0)));
PerseoNET/frmEdizioni.cs:										str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDedizione, DataAvvio FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint WHERE FK_Utente=", clsTblDatiDR5.get_Campo((object)"FK_Utente")), " AND TipoFormativoInterno LIKE '%APPRENDISTATO PER LA QUALIFICA%' "), "AND DataAvvio>"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR3.get_Campo((object)"DataAvvio")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataAvvio<"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR3.get_Campo((object)"DataFine")), "dd/MM/yyyy"), FlagSqlServer: true)), " AND Gruppo=1 AND Durata>=600 "));
PerseoNET/frmEdizioni.cs:								str = "SELECT IDrisposbo, FK_Questionario, t_QuestionariOccupazioneRisposte.FK_Domanda, DescrScelta FROM t_QuestionariOccupazioneRisposte INNER JOIN t_ModelliQuestionarioOccupazioneScelte ON t_QuestionariOccupazioneRisposte.FK_Risposta = t_ModelliQuestionarioOccupazioneScelte.IDsceltaqsbo WHERE FK_Questionario " + clsTblDatiDR.StringaFiltroIN("IDquestsbo") + " ORDER BY FK_Questionario ";
PerseoNET/frmEdizioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, DataAttivita FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Argomento IS NOT NULL AND FK_Edizione=", tblEdizioni.get_Campo((object)"IDedizione", vFlagUpdateDB: false)), " "), "AND DataAttivita>="), FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true)));
PerseoNET/frmEdizioni.cs:						vSQL = "SELECT IDedizione, IDcalatt, FK_Incarico, FK_Locale, IDdocente, IDargomento, FK_CalAttivita, (DataAttivita) AS StrGiorno, DataAttivita, (DataAttivita) AS StrDataGiorno, (0) AS IndGiorno,OraInizio, OraFine, DocenzaFAD, DescrBreveArgomento, StrDOC, CodiceLocale, ncod, (NULL) AS CodiceEdizione FROM zt_GrigliaSettimana ";
PerseoNET/frmEdizioni.cs:								vSQL = "SELECT IDedizione, IDcalatt, FK_Incarico, FK_Locale, IDdocente, IDargomento, FK_CalAttivita, StrGiorno, DataAttivita, StrDataGiorno, IndGiorno, OraInizio, OraFine, DocenzaFAD, DescrBreveArgomento, StrDOC, CodiceLocale, ncod, CodiceEdizione FROM zt_GrigliaSettimanaEdizioni ";
PerseoNET/frmEdizioni.cs:					vSQL = "SELECT zt_GrigliaSettimanaEdizioni.IDedizione, CodiceEdizione FROM zt_GrigliaSettimanaEdizioni GROUP BY zt_GrigliaSettimanaEdizioni.IDedizione, CodiceEdizione ORDER BY CodiceEdizione ";
PerseoNET/frmEdizioni.cs:					vSQL = "SELECT IndGiorno, StrGiorno, OraInizio, OraFine, StrDataGiorno ";
PerseoNET/frmEdizioni.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, IndGiorno, CodiceEdizione, StrGiorno, DataAttivita, StrDataGiorno, OraInizio, OraFine, DocenzaFAD, IIf(DocenzaFAD=TRUE,'(FAD) ' & DescrBreveArgomento,DescrBreveArgomento) AS DescrBreveArgomento, StrDOC, CodiceLocale FROM zt_GrigliaSettimanaEdizioni WHERE IDedizione=", clsTblDatiDR2.get_Campo((object)"IDedizione")), " "), "ORDER BY IndGiorno, StrGiorno, OraInizio "));
PerseoNET/frmEdizioni.cs:					string origineDati = "SELECT IDdocente, IDcalatt, CodiceEdizione, DescrEdizione, (CASE WHEN DocenzaFAD=1 THEN ('(FAD) ' + DescrBreveArgomento) ELSE DescrBreveArgomento END) AS DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, DocenzaFAD, (FK_Iscrizione) AS IDiscrizione FROM t_Docenti INNER JOIN (t_Locali INNER JOIN (t_LocaliEdizioni INNER JOIN ((t_ArgomentiModuli INNER JOIN (t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione) ON t_ArgomentiModuli.IDargomento = t_IncarichiEdizioni.FK_Argomento) INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico) ON (t_PianoServizi.IDedizione = t_LocaliEdizioni.FK_Edizione) AND (t_LocaliEdizioni.IDloced = t_CalendarioAttivita.FK_Locale)) ON t_Locali.IDlocale = t_LocaliEdizioni.FK_LocaleAssegnato) ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente WHERE DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND FK_SedeEdizione " + text + " AND t_Docenti.FK_Tipo>1 UNION SELECT IDdocente, IDcalcod, CodiceEdizione, DescrEdizione, (CASE WHEN DocenzaFAD=1 THEN ('(FAD) ' + TipoAttivita) ELSE TipoAttivita END) AS TipoAttivita, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, DocenzaFAD, (NULL) AS IDiscrizione FROM t_TipoAttivitaEdizione INNER JOIN (t_PianoServizi INNER JOIN (t_Locali INNER JOIN (t_LocaliEdizioni INNER JOIN ((t_Docenti INNER JOIN (t_AttivitaEdizioni INNER JOIN t_IncarichiEdizioni ON t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita) ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente) INNER JOIN (t_CalendarioAttivita INNER JOIN t_CalendarioCodocenza ON t_CalendarioAttivita.IDcalatt = t_CalendarioCodocenza.FK_Calendario) ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico) ON t_LocaliEdizioni.IDloced = t_CalendarioAttivita.FK_Locale) ON t_Locali.IDlocale = t_LocaliEdizioni.FK_LocaleAssegnato) ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione) ON t_TipoAttivitaEdizione.IDtattivita = t_AttivitaEdizioni.FK_TipoAttivita WHERE DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND FK_SedeEdizione " + text + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " ORDER BY Cognome, Nome, IDdocente, OraInizio, DataAttivita ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDdocente, IDcalatt, CodiceEdizione, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, DocenzaFAD, IDiscrizione FROM t_PianificazioneAula ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDdocente, IDcalatt, CodiceEdizione, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, DocenzaFAD, IDiscrizione FROM t_PianificazioneAula ORDER BY Cognome, Nome, IDdocente, OraInizio, DataAttivita ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDiscrizione, Cognome, Nome FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDcalcod, Cognome, Nome FROM t_Docenti INNER JOIN (t_IncarichiEdizioni INNER JOIN (t_CalendarioAttivita INNER JOIN t_CalendarioCodocenza ON t_CalendarioAttivita.IDcalatt = t_CalendarioCodocenza.FK_Calendario) ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico) ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente " + text;
PerseoNET/frmEdizioni.cs:					origineDati = (Funzioni.UtenteGN() ? ("SELECT IDdocente, (Cognome + ' ' + Nome) AS StrDoc, CodFiscale, Email, (NULL) AS NomeFile, (NULL) AS Esito FROM t_Docenti WHERE FK_Tipo>1 AND IDdocente " + clsTblDatiDR2.StringaFiltroIN("IDdocente") + " ") : ("SELECT IDdocente, (Cognome + ' ' + Nome) AS StrDoc, CodFiscale, Email, (NULL) AS NomeFile, (NULL) AS Esito FROM t_Docenti WHERE FK_Tipo>1 AND DocenteTest=0 AND IDdocente " + clsTblDatiDR2.StringaFiltroIN("IDdocente") + " "));
PerseoNET/frmEdizioni.cs:								origineDati = "SELECT Ora, lun, mar, mer, gio, ven, sab, dom FROM t_Settimana ";
PerseoNET/frmEdizioni.cs:					string origineDati = "SELECT IDedizione, IDcalatt, CodiceEdizione, FK_Anno, DescrEdizione, (CASE WHEN DocenzaFAD=1 THEN ('(FAD) ' + DescrBreveArgomento) ELSE DescrBreveArgomento END) AS DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, (FK_Iscrizione) AS IDiscrizione, FK_CalAttivita FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_LocaliEdizioni ON t_PianoServizi.IDedizione = t_LocaliEdizioni.FK_Edizione AND t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " AND FK_SedeEdizione " + text + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " ORDER BY IDedizione, OraInizio, DataAttivita ";
PerseoNET/frmEdizioni.cs:						origineDati = "SELECT IDcalatt, Cognome, Nome, CodiceLocale FROM t_Locali INNER JOIN (t_LocaliEdizioni INNER JOIN (t_Docenti INNER JOIN (t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico) ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente) ON t_LocaliEdizioni.IDloced = t_CalendarioAttivita.FK_Locale) ON t_Locali.IDlocale = t_LocaliEdizioni.FK_LocaleAssegnato WHERE IDcalatt " + clsTblDatiDR2.StringaFiltroIN("FK_CalAttivita");
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDedizione, IDcalatt, CodiceEdizione, FK_Anno, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, IDiscrizione, FK_CalAttivita FROM t_PianificazioneAula ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDedizione, IDcalatt, CodiceEdizione, FK_Anno, DescrEdizione, DescrBreveArgomento, Cognome, Nome, CodiceLocale, DataAttivita, OraInizio, OraFine, IDiscrizione, FK_CalAttivita FROM t_PianificazioneAula ORDER BY IDedizione, OraInizio, DataAttivita ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDiscrizione, Cognome, Nome FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDcalatt, FK_Edizione, Cognome, Nome FROM t_Docenti INNER JOIN (t_IncarichiEdizioni INNER JOIN (t_CalendarioAttivita INNER JOIN t_CalendarioCodocenza ON t_CalendarioAttivita.IDcalatt = t_CalendarioCodocenza.FK_Calendario) ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico) ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente WHERE FK_Edizione " + clsTblDatiDR2.StringaFiltroIN("IDedizione") + " AND DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " ORDER BY IDcalatt ";
PerseoNET/frmEdizioni.cs:							origineDati = "SELECT Ora, lun, mar, mer, gio, ven, sab, dom FROM t_Settimana ";
PerseoNET/frmEdizioni.cs:				string origineDati = "SELECT IDedizione, SiglaSede, DescrEdizione, CodiceEdizione, TipoAnnualita, DataGenerazione, DescrAvviso FROM t_Sedi INNER JOIN t_PianoServizi ON t_Sedi.IDsede = t_PianoServizi.FK_SedeEdizione INNER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno INNER JOIN t_AvvisiUtentiPerseo ON t_PianoServizi.IDedizione = t_AvvisiUtentiPerseo.PKRecord WHERE IDsede " + Variabili.FiltroSedi + " And NomeTabella='t_PianoServizi' AND FK_Causale=" + Conversions.ToString(35) + " ORDER BY SiglaSede, FK_Anno, DescrEdizione, DataGenerazione ";
PerseoNET/frmEdizioni.cs:					string origineDati = "SELECT Stato, TipoIscr, Cognome, Nome, CodFiscale, DataNascita, LuogoNascita, ProvNascita, Sesso, Cittadinanza, NumeroPermessoSogg, ScadenzaPermessoSogg, Telefono, Email, IndirResidenza, ComResidenza, CAPresidenza, ProvResidenza, IndirAbitazione, ComAbitazione, CAPabitazione, ProvAbitazione, LingueStraniere, StudenteBES, StudenteDSA, StudenteDisabile, CognomeRef1, NomeRef1, CFRef1, DataNascitaRef1, LuogoNascitaRef1, ProvNascitaRef1, SessoRef1, CittadinanzaRef1, RuoloRef1, TitoloStudioRef1, ProfessioneRef1, TelefonoRef1, EmailRef1, IndiResidenzaRef1, ComResidenzaRef1, CAPResidenzaRef1, ProvResidenzaRef1, TitoloStudio, ConseguitoAnno, IstitutoProvenienza, IndirizzoIstitutoProv, CodiceIstitutoProv, TipologiaIstituzione, UltimaAnnualita, AnnoScolasticoUltimaAnnualita, EsitoUltimaAnnualita, LuogoNascitaRef2, SessoRef2, CittadinanzaRef2, TitoloStudioRef2, ProfessioneRef2, GenitoriEntrambiStranieri, IRC, NazNascita, (LuogoNascita) AS LuogoNasce, IDutente FROM t_StudentiSIUF ";
PerseoNET/frmEdizioni.cs:					origineDati = "SELECT IDrefute, FK_Utente, TipoReferenteUte, Cognome, Nome, NoteRef, DescrAmmRef, TelRef_1, TelRef_2, FaxRef, EmailRef, ComuneAmmRef, IndirAmmRef, CAPammref, PROVammref, FirmaStageMinore, CodFiscale, DataNascita, LuogoNascita, NazNascita, ProvNascita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, NazResidenza, Professione, TitoloStudio, RichiedenteDote, Cittadinanza, Sesso, (0) AS Omocodia FROM t_ReferentiUtente INNER JOIN t_TipoReferenteUtente ON t_ReferentiUtente.FK_TipoRef = t_TipoReferenteUtente.IDtrefute WHERE FK_Utente " + clsTblDatiDR.StringaFiltroIN("IDutente") + " AND Attivo=1 ORDER BY FK_Utente, RichiedenteDote DESC, FirmaStageMinore DESC, IDrefute ";
PerseoNET/frmEdizioni.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento, FK_Studente, DataPubblicazione, DataScadenza, TipoDocumento, CodiceDoc FROM  t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE TipoDocumento LIKE '%permess%' AND FK_Studente=", clsTblDatiDR2.get_Campo((object)"IDutente")), " "), "ORDER BY t_Documenti.DataScadenza DESC"));
PerseoNET/frmCalendario.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDaccesso, Data, Azione FROM t_StoricoEventi WHERE Azione LIKE '%edizione ID=", Variabili.Edizione.get_Campo((object)0)), "%' AND Azione LIKE '%ore assegnate%' "), "AND Tipo='"), VariabiliClassi.Evento.ConversioneTipoStringaTipo(clsGestioneEventi.TipoEvento.DatoCritico)), "' "), "AND Data>="), FunzStringa.StrDataSQL(Strings.Format(DateAndTime.DateAdd(DateInterval.Day, -8.0, VariabiliClassi.DataLogin), "dd/MM/yyyy") + " 00:00:00", FlagSqlServer: true)));
PerseoNET/frmCalendario.cs:					vSQL = "SELECT COUNT(IDincarico) AS NumeroRecord FROM t_IncarichiContrattiEdizioni WHERE FK_Tipo=1 AND TipoAttivita='DOCENZA' ";
PerseoNET/frmCalendario.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, FK_IncaricoClassiRiunite FROM t_IncarichiContrattiEdizioni GROUP BY IDincarico, FK_IncaricoClassiRiunite, FK_Tipo, IDedizione HAVING IDedizione=", Variabili.Edizione.get_Campo((object)0)), " AND FK_Tipo=1 AND FK_IncaricoClassiRiunite IS NOT NULL "));
PerseoNET/frmCalendario.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDloced, CodiceLocale FROM t_LocaliEdizioni WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY Fittizio DESC, CodiceLocale "));
PerseoNET/frmCalendario.cs:					vSQL = "SELECT IDincarico, IDdocente, IDargomento, FK_TipoArgomento, FK_Tipo, ('no') AS Occupato, StrDOC, IndArgomento, DescrBreveArgomento, DescrArgomento, OreAssegnate, torep, FK_IncaricoClassiRiunite FROM t_IncarichiContrattiEdizioni ";
PerseoNET/frmCalendario.cs:						string origineDati = "SELECT IDcalatt, FK_Incarico, FK_Locale, IDdocente, IDargomento, FK_CalAttivita, DataAttivita, OraInizio, OraFine, DescrBreveArgomento, StrDOC, CodiceLocale, DocenzaFAD, ncod FROM zt_GrigliaSettimana ORDER BY DataAttivita, OraInizio ";
PerseoNET/frmCalendario.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt FROM t_CalendarioAttivita WHERE FK_Incarico=", tblCal.get_Campo((object)"FK_Incarico", vFlagUpdateDB: false)), " "), "AND DataAttivita="), FunzStringa.StrDataSQL(Conversions.ToString(tblCal.get_Campo((object)"DataAttivita", vFlagUpdateDB: false)), FlagSqlServer: true)), " "), "AND OraInizio="), FunzStringa.StrOrarioSQL(Conversions.ToString(tblCal.get_Campo((object)"OraInizio", vFlagUpdateDB: false)), FlagSqlServer: true)), " "));
PerseoNET/frmCalendario.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Right: (ComboAltreSedi.PKSelezionatoCombo != 0L) ? (str + "AND FK_SedeEdizione=" + Conversions.ToString(ComboAltreSedi.PKSelezionatoCombo) + " ") : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(str + "AND FK_SedeEdizione=", Variabili.Edizione.get_Campo((object)"FK_SedeEdizione")), " ")), Left: Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, DataAttivita, OraInizio, OraFine, (Cognome + ' ' + Nome) AS StrDOC, CodiceEdizione, DescrBreveArgomento, DescrArgomento, DocenzaFAD FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE IDedizione<>", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataAttivita>='"), text), "' "), "AND DataAttivita<='"), text2), "' "), "AND IDdocente>3 ")), "ORDER BY DataAttivita, OraInizio, CodiceEdizione "));
PerseoNET/frmCalendario.cs:							origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi ";
PerseoNET/frmCalendario.cs:						origineDati = "SELECT IDcalatt, FK_Incarico, DataAttivita, OraInizio FROM t_CalendarioAttivita " + text + "AND DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/frmCalendario.cs:							origineDati = "SELECT IDcalatt, DataAttivita, OraInizio, OraFine, (Cognome + ' ' + Nome) AS StrDOC, CodiceEdizione, DescrBreveArgomento, DescrArgomento, DocenzaFAD FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione ";
PerseoNET/frmCalendario.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDdocente, (Cognome + ' ' + Nome) AS StrDOC FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE IDcalatt=", tblCal.get_Campo((object)"FK_CalAttivita", vFlagUpdateDB: false)));
PerseoNET/frmCalendario.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT TipoArgomento FROM t_TipoArgomento WHERE IDtarg=", Variabili.Edizione.get_CampoIncarichi((object)"FK_TipoArgomento")));
PerseoNET/frmCalendario.cs:						string origineDati = "SELECT t_CalendarioAttivita.IDcalatt, t_CalendarioAttivita.FK_Incarico, FK_Locale, IDdocente, IDargomento, DataAttivita, OraInizio, OraFine, " + text + "FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale WHERE " + Variabili.dtSettimana.FiltroAttuale + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/frmCalendario.cs:						origineDati = "SELECT IDcalatt, IDincarico, FK_Locale, IDdocente, IDargomento, DataAttivita, OraInizio, OraFine, DocenzaFAD FROM zt_CopiaIncollaSettimana ";
PerseoNET/frmCalendario.cs:					string origineDati = "SELECT IDcalatt, IDincarico, FK_Locale, IDdocente, IDargomento, DataAttivita, OraInizio, OraFine, DocenzaFAD FROM zt_CopiaIncollaSettimana ORDER BY DataAttivita, OraInizio ";
PerseoNET/frmCalendario.cs:						string text2 = "SELECT t_CalendarioCodocenza.IDcalcod, t_CalendarioCodocenza.FK_Incarico, IDdocente, FK_Tipo, FK_LocaleCOD, DataAttivita, OraInizio, OraFine, TipoAttivita, (Cognome + ' ' + Nome) AS StrDOC, t_CalendarioCodocenza.SostegnoIndividuale FROM t_CalendarioCodocenza INNER JOIN t_IncarichiEdizioni ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt ";
PerseoNET/frmCalendario.cs:							text2 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDattedi, (IDedizione) AS FK_Edizione, IDincarico, FK_Tipo, FK_TipoAttivita, (IDdocente) AS FK_Docente, IndTA, TipoAttivita, OreAttivita, ('no') AS Occupato, StrDOC, OreAssegnate, (OreFatteInc) AS torep FROM t_IncarichiContrattiEdizioni WHERE IDargomento IS NULL AND Aula=True AND Secondaria=True GROUP BY IDattedi, IDedizione, IDincarico, FK_Tipo, FK_TipoAttivita, IDdocente, IndTA, TipoAttivita, OreAttivita, StrDOC, OreAssegnate, OreFatteInc HAVING IDedizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY IndTA, TipoAttivita, StrDOC "));
PerseoNET/frmCalendario.cs:							text2 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_LocaliEdizioni.IDloced, CodiceLocale FROM t_LocaliEdizioni INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND Fittizio=0 ORDER BY CodiceLocale "));
PerseoNET/frmCalendario.cs:						string origineDati = "SELECT t_VincoliOrariEdizione.IDvincolo, FK_GiornoSettimana, TipoGiornoSettimana, Dalle, Alle FROM  t_VincoliOrariEdizione ORDER BY NumeroGiorno, Dalle";
PerseoNET/frmCalendario.cs:						origineDati = "SELECT IDtgiornosett, (CASE WHEN NumeroGiorno=1 THEN 7 ELSE (NumeroGiorno-1) END) AS IndG, TipoGiornoSettimana, (0) AS Selezione FROM t_TipoGiornoSettimana ORDER BY (CASE WHEN NumeroGiorno=1 THEN 7 ELSE (NumeroGiorno-1) END)";
PerseoNET/frmCalendario.cs:						origineDati = "SELECT MAX(IDvincolo) AS ID_Vincolo FROM t_VincoliOrariEdizione ";
PerseoNET/frmCalendario.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDloced, CodiceLocale FROM t_LocaliEdizioni WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY Fittizio DESC, CodiceLocale "));
PerseoNET/frmCalendario.cs:					origineDati = "SELECT IDloced, CodiceLocale FROM t_LocaliEdizioni ";
PerseoNET/frmCalendario.cs:					string vSQL = "SELECT IDlocale FROM t_Locali WHERE CodiceLocale='ZZZAF' AND Fittizio=1 ";
PerseoNET/frmCalendario.cs:					string vSQL = "SELECT IDlocale FROM t_Locali WHERE CodiceLocale='ZZZLF' AND Fittizio=1 ";
PerseoNET/frmCalendario.cs:									string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, DataAttivita, OraInizio, OraFine, CodiceLocale, (Cognome + ' ' + Nome) AS Formatore, TipoAttivita, DescrArgomento, ('riga non importata') AS Esito FROM v_DettaglioCalendarioAttivitaIncaricoGPR INNER JOIN t_LocaliEdizioni ON v_DettaglioCalendarioAttivitaIncaricoGPR.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale WHERE TipoAttivita='DOCENZA' AND IDedizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " "), "AND DataAttivita>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)), " AND DataAttivita<="), FunzStringa.StrDataSQL(stringa, FlagSqlServer: true)), " "), "ORDER BY DataAttivita, OraInizio "));
PerseoNET/frmCalendario.cs:										vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, DataAttivita, OraInizio, OraFine, (NULL) AS CodiceLocale, (Cognome + ' ' + Nome) AS Formatore, TipoAttivita, DescrArgomento, ('riga non importata') AS Esito FROM v_DettaglioCalendarioAttivitaIncaricoGPR WHERE TipoAttivita IN('CODOCENZA','SOSTEGNO','SOSTEGNO FINANZIATO') AND IDedizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " "), "AND DataAttivita>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)), " AND DataAttivita<="), FunzStringa.StrDataSQL(stringa, FlagSqlServer: true)), " "), "ORDER BY DataAttivita, OraInizio "));
PerseoNET/frmCalendario.cs:					string origineDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, Locale, Formatore, TipoAttivita, DescrArgomento, Esito FROM t_CalendarioAttivita ";
PerseoNET/frmCalendario.cs:					clsTblDatiDR.DestinazioneDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, Locale, Formatore, TipoAttivita, DescrArgomento, Esito FROM zt_StoricoImportazioneRegistro ";
PerseoNET/frmCalendario.cs:					string origineDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, Locale, Formatore, DescrAttivita, Esito FROM t_CalendarioAttivita ";
PerseoNET/frmCalendario.cs:					clsTblDatiDR.DestinazioneDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, Locale, Formatore, TipoAttivita, Esito FROM zt_StoricoImportazioneRegistro ";
PerseoNET/frmCalendario.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDvincolo, FK_GiornoSettimana, Dalle, Alle FROM t_VincoliOrariEdizione WHERE IDvincolo=", tblVinc.get_Campo((object)0, vFlagUpdateDB: false)));
PerseoNET/frmCalendario.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT MIN(Dalle) AS dalle, MAX(Alle) AS Alle FROM t_VincoliOrariEdizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)));
PerseoNET/frmCalendario.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDdocente, IDedizione, StrDOC FROM t_IncarichiContrattiEdizioni GROUP BY IDdocente, IDedizione, StrDOC HAVING IDedizione=", Variabili.Edizione.get_Campo((object)0)));
PerseoNET/frmCalendario.cs:									string origineDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, Locale, Formatore, DescrAttivita, Esito FROM t_CalendarioAttivita ";
PerseoNET/frmCalendario.cs:									origineDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, Locale, Formatore, DescrAttivita, Esito FROM t_CalendarioAttivita ";
PerseoNET/frmCalendario.cs:					string origineDati = "SELECT IDcalatt, IDincarico, FK_Edizione, FK_Argomento, ('DOCENZA') AS Tipo, OraInizio, OraFine FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Docente=" + Conversions.ToString(intDocente) + " AND DataAttivita=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND OraInizio<" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND OraFine>" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " UNION SELECT IDcalcod, IDincarico, FK_Edizione, (NULL) AS FK_Argomento, ('CODOCENZA') AS Tipo, OraInizio, OraFine FROM t_CalendarioCodocenza INNER JOIN t_IncarichiEdizioni ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE FK_Docente=" + Conversions.ToString(intDocente) + " AND DataAttivita=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND OraInizio<" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND OraFine>" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " ";
PerseoNET/frmCalendario.cs:			string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, DataAttivita, OraInizio, OraFine, CodiceLocale, (Cognome & ' ' & Nome) AS Formatore, TipoAttivita, DescrArgomento, ('riga non importata') AS Esito FROM t_PianificazioneAula WHERE TipoAttivita='DOCENZA' AND IDedizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " AND IDiscrizione IS NULL "), "AND DataAttivita>="), FunzStringa.StrDataSQL(text)), " AND DataAttivita<="), FunzStringa.StrDataSQL(stringa)), " "), "ORDER BY DataAttivita, OraInizio "));
PerseoNET/frmCalendario.cs:				origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, DataAttivita, OraInizio, OraFine, CodiceLocale, (Cognome & ' ' & Nome) AS Formatore, TipoAttivita, DescrArgomento, ('riga non importata') AS Esito FROM t_PianificazioneAula WHERE TipoAttivita IN('CODOCENZA','SOSTEGNO','SOSTEGNO(FINANZIATO)') AND IDedizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " "), "AND DataAttivita>="), FunzStringa.StrDataSQL(text)), " AND DataAttivita<="), FunzStringa.StrDataSQL(stringa)), " "), "ORDER BY DataAttivita, OraInizio "));
PerseoNET/frmCalendario.cs:				string origineDati = "SELECT IDassenza, (FK_Iscrizione) AS IDiscrizione, FK_Attivita, DataAssenza FROM t_AssenzeAttivita WHERE FK_Iscrizione " + Variabili.Edizione.StrFiltroIN_PKIscritti + " ORDER BY DataAssenza DESC, FK_Iscrizione ";
PerseoNET/frmCalendario.cs:					string str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Iscrizioni.IDiscrizione, DataAvvio, DataFine, IDedizione, t_PianoServizi.Bloccato, (CASE WHEN IDedizione=", Variabili.Edizione.get_Campo((object)0)), " THEN 1 ELSE 2 END) AS OrdEdizioni, "), "(Cognome + ' ' + Nome) AS Studente, DataIscr, DataRitiro, (0) AS OreSvolteSostegno, "), "(0) AS OreSvolteSostegnoIndividuale, (NULL) AS Sostegno, (NULL) AS Presente "), "FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente INNER JOIN "), "t_PianoServizi ON t_Iscrizioni.FK_Edizione=t_PianoServizi.IDedizione "));
PerseoNET/frmCalendario.cs:					string origineDati = "SELECT (t_IscrizioniSostegno.FK_Iscrizione) AS IDiscrizione, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleMinuti, t_CalendarioCodocenza.SostegnoIndividuale FROM t_IscrizioniSostegno INNER JOIN t_CalendarioCodocenza ON t_IscrizioniSostegno.FK_SostegnoAula = t_CalendarioCodocenza.IDcalcod INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt GROUP BY t_IscrizioniSostegno.FK_Iscrizione, t_CalendarioCodocenza.SostegnoIndividuale HAVING t_IscrizioniSostegno.FK_Iscrizione " + tblStud.StringaFiltroIN("IDiscrizione") + " UNION SELECT (t_IscrizioniSostegno.FK_Iscrizione) AS IDiscrizione, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleMinuti, SostegnoIndividuale FROM t_IscrizioniSostegno INNER JOIN t_CalendarioAttivita ON t_IscrizioniSostegno.FK_SostegnoAttivita = t_CalendarioAttivita.IDcalatt GROUP BY t_IscrizioniSostegno.FK_Iscrizione, t_CalendarioAttivita.SostegnoIndividuale HAVING t_IscrizioniSostegno.FK_Iscrizione " + tblStud.StringaFiltroIN("IDiscrizione") + " ";
PerseoNET/frmCalendario.cs:					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalcod FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE IDcalatt=", tblCal.get_Campo((object)0, vFlagUpdateDB: false)), " AND t_CalendarioCodocenza.FK_Incarico="), tblIncCODOC.get_Campo((object)"IDincarico", vFlagUpdateDB: false)));
PerseoNET/frmCalendario.cs:				string origineDati = "SELECT IDsostegnoiscr, (FK_Iscrizione) AS IDiscrizione, FK_SostegnoAula FROM t_IscrizioniSostegno WHERE FK_SostegnoAula " + tblCalCODOC.StringaFiltroIN("IDcalcod") + " ORDER BY FK_Iscrizione ";
PerseoNET/frmContrattiPersonaleEsterno.cs:				string origineDati = "SELECT IDdocente, IDcontratto, FK_Azienda, t_DocentiContrattiEsterni.FK_CodicePF, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) END) AS StrDOC, (Cognome + ' ' + Nome) AS CollProf, CodFiscale, DescrParFiscale, TipoFasciaDOC, TipoDipendente, DataInizioContratto, DataFineContratto, DataApprovaIncarico, ContrattoApprovato, SUM(OreSvolgere) AS TotOreLI, MAX(QuotaOraIncarico) AS MaxEuro, MIN(QuotaOraIncarico) AS MinEuro, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, DescrPubblicaAmm, (0) AS Dimesso, (0) AS DimessoIncentivo, (0) AS Selezione FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_TipoFasciaDocenteEsterno ON t_DocentiContrattiEsterni.FK_TipoFasciaContr = t_TipoFasciaDocenteEsterno.IDtfasciadoc LEFT OUTER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe GROUP BY IDdocente, IDcontratto, FK_Azienda, t_DocentiContrattiEsterni.FK_CodicePF, Cognome, Nome, DescrParFiscale, TipoFasciaDOC, DataInizioContratto, DataFineContratto, DataApprovaIncarico, ContrattoApprovato, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, DescrPubblicaAmm, CodFiscale, TipoDipendente HAVING DataInizioContratto>='" + text + "' AND DataInizioContratto<='" + text2 + "' ORDER BY (Cognome + ' ' + Nome), IDcontratto ";
PerseoNET/frmContrattiPersonaleEsterno.cs:				string origineDati = "SELECT t_IncarichiEdizioniContratti.IDincacontra, IDincarico, RegistrazioneEstesa, SiglaSede, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataInizioFA, DataFineFA, DataInizioEsame, DataFineEsame, TipoAttivita, DescrArgomento, DataInizioIncarico, DataFineIncarico, OreAssegnate, OreSvolgere, DataProlungamento FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE FK_Contratto=" + Conversions.ToString(vIDcontr) + " AND IDsede " + Variabili.FiltroSedi + " ORDER BY t_PianoServizi.DataAvvio, IndTA, DescrArgomento ";
PerseoNET/frmContrattiPersonaleEsterno.cs:						text = "SELECT IDdocente, IDcontratto, FK_Azienda, t_DocentiContrattiEsterni.FK_CodicePF, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) END) AS StrDOC, (Cognome + ' ' + Nome) AS CollProf, CodFiscale, DescrParFiscale, TipoFasciaDOC, TipoDipendente, DataInizioContratto, DataFineContratto, DataApprovaIncarico, ContrattoApprovato, SUM(OreSvolgere) AS TotOreLI, MAX(QuotaOraIncarico) AS MaxEuro, MIN(QuotaOraIncarico) AS MinEuro, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, DescrPubblicaAmm, (0) AS Dimesso, (0) AS DimessoIncentivo, (0) AS Selezione FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_TipoFasciaDocenteEsterno ON t_DocentiContrattiEsterni.FK_TipoFasciaContr = t_TipoFasciaDocenteEsterno.IDtfasciadoc LEFT OUTER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe ";
PerseoNET/frmContrattiPersonaleEsterno.cs:							text = "SELECT IDcontratto FROM t_DocentiContratti INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto ";
PerseoNET/frmContrattiPersonaleEsterno.cs:				text = "SELECT IDdocente, IDcontratto, FK_Azienda, t_DocentiContrattiEsterni.FK_CodicePF, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) END) AS StrDOC, (Cognome + ' ' + Nome) AS CollProf, CodFiscale, DescrParFiscale, TipoFasciaDOC, TipoDipendente, DataInizioContratto, DataFineContratto, DataApprovaIncarico, ContrattoApprovato, SUM(OreSvolgere) AS TotOreLI, MAX(QuotaOraIncarico) AS MaxEuro, MIN(QuotaOraIncarico) AS MinEuro, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, DescrPubblicaAmm, (0) AS Dimesso, (0) AS DimessoIncentivo, (0) AS Selezione FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_TipoFasciaDocenteEsterno ON t_DocentiContrattiEsterni.FK_TipoFasciaContr = t_TipoFasciaDocenteEsterno.IDtfasciadoc LEFT OUTER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe " + str + "GROUP BY IDdocente, IDcontratto, FK_Azienda, t_DocentiContrattiEsterni.FK_CodicePF, Cognome, Nome, DescrParFiscale, TipoFasciaDOC, DataInizioContratto, DataFineContratto, DataInizioIncarico, DataFineIncarico, DataApprovaIncarico, ContrattoApprovato, Respinto, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, DescrPubblicaAmm, CodFiscale, TipoDipendente HAVING DataInizioIncarico>='" + text2 + "' AND DataInizioIncarico<='" + text3 + "' " + text5 + text4;
PerseoNET/frmContrattiPersonaleEsterno.cs:					text = text + "AND (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) END) LIKE '%" + FunzStringa.StringaSQL(txtDOC.Text) + "%' ";
PerseoNET/frmContrattiPersonaleEsterno.cs:				text += "ORDER BY (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) END), IDcontratto ";
PerseoNET/frmContrattiPersonaleEsterno.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, SUM(DATEDIFF(mi, OraInizio, OraFine)/60) AS TotFatte, MIN(DataAttivita) AS PrimaData, MAX(DataAttivita) AS UltimaData FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione LEFT OUTER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Contratto=", tblContr.get_Campo((object)"IDcontratto", vFlagUpdateDB: false)), " AND DataAttivita>=DataInizioIncarico AND DataAttivita<=DataFineIncarico "), "GROUP BY IDincarico "), "UNION "), "SELECT IDincarico, SUM(DATEDIFF(mi, OraInizio, OraFine)/60) AS TotFatte, MIN(DataAttivita) AS PrimaData, MAX(DataAttivita) AS UltimaData "), "FROM t_CalendarioCodocenza INNER JOIN "), "t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt RIGHT OUTER JOIN "), "t_IncarichiEdizioni INNER JOIN "), "t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione ON "), "t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico "), "WHERE FK_Contratto="), tblContr.get_Campo((object)"IDcontratto", vFlagUpdateDB: false)), " AND FK_Docente="), tblContr.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "), "AND DataAttivita>=DataInizioIncarico AND DataAttivita<=DataFineIncarico "), "GROUP BY IDincarico "));
PerseoNET/frmContrattiPersonaleEsterno.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDincarico, MIN(DataPagatoInizio) AS PrimaData, MAX(DataPagatoFine) AS UltimaData, SUM(TotOreFatte) AS TotalePagato FROM t_ProgettiPagamentiCompensiOneri GROUP BY IDincarico HAVING IDincarico=", clsTblDatiDR.get_Campo((object)"IDincarico")));
PerseoNET/frmContrattiPersonaleEsterno.cs:						str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_IncaricoEdizione, OreSvolgere FROM t_IncarichiEdizioniContratti WHERE FK_Contratto=", tblContr.get_Campo((object)"IDcontratto", vFlagUpdateDB: false)), " "));
PerseoNET/frmContrattiPersonaleEsterno.cs:						str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, SUM(DATEDIFF(mi, OraInizio, OraFine)/60) AS TotFatte FROM t_IncarichiEdizioni LEFT OUTER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' AND DataAttivita IS NOT NULL GROUP BY IDincarico, FK_Docente HAVING IDincarico " + text3 + " UNION SELECT IDincarico, SUM(DATEDIFF(mi, OraInizio, OraFine)/60) AS TotFatte FROM t_CalendarioCodocenza LEFT OUTER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt RIGHT OUTER JOIN t_IncarichiEdizioni ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' AND DataAttivita IS NOT NULL GROUP BY IDincarico, FK_Docente HAVING IDincarico " + text3 + " AND FK_Docente=", tblContr.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "));
PerseoNET/frmContrattiPersonaleEsterno.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcompensi, t_IncarichiEdizioni.IDincarico, DataPagamento FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_IncarichiEdizioni ON t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE FK_Contratto=", tblContr.get_Campo((object)"IDcontratto", vFlagUpdateDB: false)), " AND Reso=0 "));
PerseoNET/frmContrattiPersonaleEsterno.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcompensi, t_IncarichiEdizioni.IDincarico, DataPagamento FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_IncarichiEdizioni ON t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE FK_Contratto=", tblContr.get_Campo((object)"IDcontratto", vFlagUpdateDB: false)), " "));
PerseoNET/frmContrattiPersonaleEsterno.cs:				string vSQL = ((!Conversions.ToBoolean(Operators.AndObject(Operators.CompareObjectEqual(Variabili.TblRiferimenti.get_CampoTipoAttivitaEdizione((object)"Aula"), true, TextCompare: false), Operators.CompareObjectEqual(Variabili.TblRiferimenti.get_CampoTipoAttivitaEdizione((object)"Secondaria"), true, TextCompare: false)))) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi,OraInizio,OraFine)) AS TotaleMinuti FROM t_CalendarioAttivita WHERE FK_Incarico=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND DataAttivita<"), FunzStringa.StrDataSQL(Conversions.ToString(txtDataProlungamento.Value), FlagSqlServer: true))) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi,OraInizio,OraFine)) AS TotaleMinuti FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE t_CalendarioCodocenza.FK_Incarico=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND DataAttivita<"), FunzStringa.StrDataSQL(Conversions.ToString(txtDataProlungamento.Value), FlagSqlServer: true))));
PerseoNET/frmContrattiPersonaleEsterno.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcontrest, FK_DocenteContratto FROM t_DocentiContrattiEsterni WHERE ProtAutorizzaPubblicaAmm IS NULL AND FK_DocenteContratto=", tblContr.get_Campo((object)"IDcontratto", vFlagUpdateDB: false)), " "));
PerseoNET/frmContrattiPersonaleEsterno.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincacontra, FK_Contratto, DataInizioIncarico FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND DataInizioIncarico<="), FunzStringa.StrDataSQL(txtDataProlungamento.Text, FlagSqlServer: true)), " "));
PerseoNET/frmContrattiPersonaleEsterno.cs:						vSQL = ((!Conversions.ToBoolean(Operators.AndObject(Operators.CompareObjectEqual(Variabili.TblRiferimenti.get_CampoTipoAttivitaEdizione((object)"Aula"), true, TextCompare: false), Operators.CompareObjectEqual(Variabili.TblRiferimenti.get_CampoTipoAttivitaEdizione((object)"Secondaria"), true, TextCompare: false)))) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi,OraInizio,OraFine)) AS TotaleMinuti FROM t_CalendarioAttivita WHERE FK_Incarico=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "And DataAttivita>"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblInc.get_Campo((object)"DataFineIncarico", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true)), " ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi,OraInizio,OraFine)) AS TotaleMinuti FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE t_CalendarioCodocenza.FK_Incarico=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "And DataAttivita>"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblInc.get_Campo((object)"DataFineIncarico", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true)), " ")));
PerseoNET/frmContrattiPersonaleEsterno.cs:					vSQL = ((!Conversions.ToBoolean(Operators.AndObject(Operators.CompareObjectEqual(Variabili.TblRiferimenti.get_CampoTipoAttivitaEdizione((object)"Aula"), true, TextCompare: false), Operators.CompareObjectEqual(Variabili.TblRiferimenti.get_CampoTipoAttivitaEdizione((object)"Secondaria"), true, TextCompare: false)))) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi,OraInizio,OraFine)) AS TotaleMinuti FROM t_CalendarioAttivita WHERE FK_Incarico=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND DataAttivita>"), FunzStringa.StrDataSQL(Conversions.ToString(txtDataProlungamento.Value), FlagSqlServer: true))) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi,OraInizio,OraFine)) AS TotaleMinuti FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE t_CalendarioCodocenza.FK_Incarico=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND DataAttivita>"), FunzStringa.StrDataSQL(Conversions.ToString(txtDataProlungamento.Value), FlagSqlServer: true))));
PerseoNET/frmContrattiPersonaleEsterno.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT FK_Progetto FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE IDincarico=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)));
PerseoNET/frmContrattiPersonaleEsterno.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDsede, IDlettinc, IDcontratto, IDazienda, IDtattivita, IDprogetto, IDdocente, IDazienda, SiglaSede, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Collaboratore, DescrProgetto, IDmwp, CodiceProgetto, IndTA, (CASE WHEN DescrLetteraIncarico IS NULL THEN TipoAttivita ELSE DescrLetteraIncarico END) AS StrTipoAttivita, DataInizioContratto, DataFineContratto, DataGenerazione, DataDownload, DataUpload, DescrLetteraIncarico FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DocentiLettereIncarichi ON t_DocentiContratti.IDcontratto = t_DocentiLettereIncarichi.FK_Contratto INNER JOIN t_TipoAttivitaEdizione ON t_DocentiLettereIncarichi.FK_Attivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_DocentiLettereIncarichi.FK_Sede = t_Sedi.IDsede INNER JOIN t_Progetti ON t_DocentiLettereIncarichi.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Docenti ON t_DocentiLettereIncarichi.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_Aziende ON t_DocentiLettereIncarichi.FK_Azienda = t_Aziende.IDazienda WHERE DataInizioContratto=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblInc.get_Campo((object)"DataInizioIncarico", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true) + " AND DataFineContratto=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblInc.get_Campo((object)"DataFineIncarico", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true) + " AND IDcontratto=", tblContr.get_Campo((object)"IDcontratto", vFlagUpdateDB: false)), " AND IDdocente="), tblContr.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "), "AND TipoAttivita='"), FunzStringa.StringaSQL(Conversions.ToString(tblInc.get_Campo((object)"TipoAttivita", vFlagUpdateDB: false)))), "' AND IDprogetto="), num));
PerseoNET/frmDettConvAziendaSedeForm.cs:				string str = "SELECT IDconvazienda, FK_Azienda, FK_SedeFormativa, FK_TipoConvenzione, AnnoFormativo, ConvenzioneAzienda, DataConvenzione, DataScadenza, NumeroStudentiPrevisti, ResidenteEstero, NazioneStudenteEstero, ConvenzioneAttiva, ModoComunicaRecesso, AltriMotiviRecesso, DecorrenzaRecesso, AttestatoAttivitaStage, CertificazioneCompetenze, FormSicurGenAzienda, FormSicurGenCSF, FormSicurSpecAzienda, FormSicurSpecCSF, NumeroDipendenti, ComunicaAvvioAzienda, ComunicaAvvioCSF, SorveSanitariaCSF, SorveSanitariaAzienda, DataAutorizzazioneEE, RimborsoIndennita, CertificazioneSicGen, CertificazioneSicSpec, IndennitaStudenteAzienda, IndennitaStudentePromotore, IndennitaStudenteAltri, DataRec, DataModifica FROM t_AziendeSediFormativeConvenzioni ";
PerseoNET/frmDettConvAziendaSedeForm.cs:					str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede=", Variabili.Edizione.get_Campo((object)"FK_SedeEdizione")), " "));
PerseoNET/frmDettConvAziendaSedeForm.cs:					str = ((!VariabiliClassi.Diritti.get_ModificaRecord("AMMINISTRAZIONE DB", "MONITORAGGIO STAGE", "", "", "")) ? ("SELECT IDsede, SiglaSede FROM t_Sedi WHERE FK_TipoSede>=3 AND IDsede " + Variabili.FiltroSedi + " AND Attiva=1 ORDER BY FK_TipoSede, SiglaSede ") : ((!Variabili.Sede.get_SedeUtente(RuntimeHelpers.GetObjectValue(Variabili.Sede.get_CampoSedeLegale((object)"IDsede")))) ? ("SELECT IDsede, SiglaSede FROM t_Sedi WHERE FK_TipoSede>=3 AND IDsede " + Variabili.FiltroSedi + " AND Attiva=1 ORDER BY FK_TipoSede, SiglaSede ") : ("SELECT IDsede, SiglaSede FROM t_Sedi WHERE (FK_TipoSede>=3 AND IDsede " + Variabili.FiltroSedi + " AND Attiva=1) OR (FK_TipoSede=1 AND Attiva=1) ORDER BY FK_TipoSede, SiglaSede ")));
PerseoNET/frmDettConvAziendaSedeForm.cs:					str = "SELECT IDtconvenzione, TipoConvenzione FROM t_TipoConvenzioneStage WHERE Obsoleto=False AND CurriculareDDIF=True ORDER BY IndTCS ";
PerseoNET/frmDettConvAziendaSedeForm.cs:					str = "SELECT IDtconvenzione, TipoConvenzione FROM t_TipoConvenzioneStage WHERE Obsoleto=False AND Curriculare=True ORDER BY IndTCS ";
PerseoNET/frmDettConvAziendaSedeForm.cs:					str = "SELECT IDtconvenzione, TipoConvenzione FROM t_TipoConvenzioneStage WHERE Obsoleto=False AND ExtraCurriculare=True ORDER BY IndTCS ";
PerseoNET/frmDettConvAziendaSedeForm.cs:				str = "SELECT IDazienda, DocValutazioneRischi, RSPP, MedicoCompetente, AddettoIncendioSoccorso, PianoEvacuazione, DataRec, DataModifica FROM t_Aziende WHERE IDazienda=" + Conversions.ToString(Variabili.Azienda.PKAzienda);
PerseoNET/frmDettConvAziendaSedeForm.cs:					str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_SedeFormativa, AnnoFormativo, MAX(ConvenzioneAzienda) AS UltimaConv FROM t_AziendeSediFormativeConvenzioni GROUP BY FK_SedeFormativa, AnnoFormativo HAVING FK_SedeFormativa=" + Conversions.ToString(Conversions.ToLong(FormConv.get_Campo((object)"FK_SedeFormativa"))) + " AND AnnoFormativo='", FormConv.get_Campo((object)"AnnoFormativo")), "' "));
PerseoNET/frmDettConvAziendaSedeForm.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtconvenzione, DurataMesi, ResidenteEstero, ObbligoSedeRegione FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", FormConv.get_ValoreSelezioneCombo(cmbFK_TipoConvenzione)));
PerseoNET/frmDettConvAziendaSedeForm.cs:				vSQL = "SELECT IDconvenzione, DataAvvio FROM t_ConvenzioniStage WHERE FK_ConvenzioneAzienda=" + Conversions.ToString(FormConv.ChiavePrimaria);
PerseoNET/frmDettConvAziendaSedeForm.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_SedeFormativa, AnnoFormativo, MAX(ConvenzioneAzienda) AS UltimaConv FROM t_AziendeSediFormativeConvenzioni GROUP BY FK_SedeFormativa, AnnoFormativo HAVING FK_SedeFormativa=" + Conversions.ToString(Conversions.ToLong(FormConv.get_Campo((object)"FK_SedeFormativa"))) + " AND AnnoFormativo='", FormConv.get_Campo((object)"AnnoFormativo")), "' "));
PerseoNET/frmDettConvAziendaSedeForm.cs:				vSQL = "SELECT IDconvenzione, DataAvvio FROM t_ConvenzioniStage WHERE FK_ConvenzioneAzienda=" + Conversions.ToString(FormConv.ChiavePrimaria);
PerseoNET/frmDettConvAziendaSedeForm.cs:				vSQL = "SELECT IDconvazienda, IDconvenzione, DataAvvio FROM t_AziendeSediFormativeConvenzioni INNER JOIN t_ConvenzioniStage ON t_AziendeSediFormativeConvenzioni.IDconvazienda = t_ConvenzioniStage.FK_ConvenzioneAzienda WHERE IDconvazienda=" + Conversions.ToString(FormConv.ChiavePrimaria) + " ORDER BY DataAvvio ";
PerseoNET/frmDettConvAziendaSedeForm.cs:					vSQL = ("SELECT IDconvazienda, COUNT(DISTINCT FK_Iscrizione) AS NumeroStudenti FROM t_AziendeSediFormativeConvenzioni INNER JOIN t_ConvenzioniStage ON t_AziendeSediFormativeConvenzioni.IDconvazienda = t_ConvenzioniStage.FK_ConvenzioneAzienda GROUP BY IDconvazienda HAVING IDconvazienda=" + Conversions.ToString(FormConv.ChiavePrimaria)) ?? "";
PerseoNET/frmDettConvAziendaSedeForm.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDconvazienda, FK_Azienda, FK_SedeFormativa, FK_TipoConvenzione, AnnoFormativo, ConvenzioneAzienda, DataConvenzione, DataScadenza, NumeroStudentiPrevisti, ResidenteEstero, NazioneStudenteEstero, ConvenzioneAttiva, ModoComunicaRecesso, AltriMotiviRecesso, DecorrenzaRecesso, AttestatoAttivitaStage, CertificazioneCompetenze, FormSicurGenAzienda, FormSicurGenCSF, FormSicurSpecAzienda, FormSicurSpecCSF, IndennitaStudenteAzienda, NumeroDipendenti, ComunicaAvvioAzienda, ComunicaAvvioCSF, SorveSanitariaCSF, SorveSanitariaAzienda, IndennitaStudenteAltri, DataAutorizzazioneEE, RimborsoIndennita, DataRec, DataModifica FROM t_AziendeSediFormativeConvenzioni WHERE IDconvazienda=", MyProject.Forms.frmDettAzienda.tblConv.get_Campo((object)"IDconvazienda", vFlagUpdateDB: false)));
PerseoNET/frmDettConvAziendaSedeForm.cs:						origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede=" + Conversions.ToString(value) + " ";
PerseoNET/frmDettConvAziendaSedeForm.cs:						origineDati = "SELECT IDtconvenzione, TipoConvenzione FROM t_TipoConvenzioneStage WHERE Obsoleto=False AND ResidenteEstero=False ORDER BY IndTCS ";
PerseoNET/frmDettParcella.cs:				string origineDati = "SELECT IDparcella, FK_Docente, FK_Azienda, FK_Causale, FK_Progetto, FK_Azione, FK_Edizione, FK_Sede, FK_PF, FK_Commissione, FK_AltraAssINPS, ImportoParcella, DataParcella, CostiAnticipo, CostiVitto, CostiViaggio, AltriRedditi, DataFattura, NumeroFattura, sngAliquotaPrevSepa, DescrParcella, DescrCostiAggiuntivi, Autorizzazione, DataAutorizzazione, ApprovaParcella, DataApprovaParcella, DataPagamento, DataRec, DataModifica, Bloccato FROM t_DocentiParcelle WHERE IDparcella=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettParcella.cs:				origineDati = "SELECT IDtcausaparce, TipoCausaleParcella FROM t_TipoCausaleParcella WHERE Obsoleto=False ORDER BY IndTPA, TipoCausaleParcella ";
PerseoNET/frmDettParcella.cs:				origineDati = "SELECT IDtaltrainps, (TipoAltraAssINPS + ' [' + CodiceAssINPS + ']') AS AltraAss FROM t_TipoAltraAssicurazioneINPS WHERE Obsoleto=False ORDER BY CodiceAssINPS";
PerseoNET/frmDettParcella.cs:				origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE Attiva=True AND FK_TipoSede IN(1,3,4) AND IDsede " + Variabili.FiltroSedi + " ORDER BY OrdGruppo, SiglaSede ";
PerseoNET/frmDettParcella.cs:				origineDati = "SELECT TipoAliquotaPrevSepa FROM t_TipoAliquotaPrevidenzaSeparata WHERE Obsoleto=False ORDER BY TipoAliquotaPrevSepa";
PerseoNET/frmDettParcella.cs:				origineDati = ((FormP.ChiavePrimaria <= 0) ? ("SELECT t_CommissioniEsameComponenti.IDcomponente, IDcommissione, IDsede, IDdocente, FK_TipoCommissione, FK_PFcomm, (Cognome + ' ' + Nome) AS StrDOC, SiglaSede, DataRiunionePreliminare, RecuperoAssenti, DescrRuolo, Ruolo, DescrAmmNomina FROM t_CommissioniEsameComponenti INNER JOIN t_Docenti ON t_CommissioniEsameComponenti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_CommissioniEsame ON t_CommissioniEsameComponenti.FK_Commissione = t_CommissioniEsame.IDcommissione INNER JOIN t_Sedi ON t_CommissioniEsame.FK_Sede = t_Sedi.IDsede LEFT OUTER JOIN t_DocentiParcelle ON t_CommissioniEsameComponenti.IDcomponente = t_DocentiParcelle.FK_Commissione WHERE Gratuito=0 AND IDparcella IS NULL AND FK_Tipo=3 " + expression + "ORDER BY SiglaSede, Cognome ") : (Information.IsNothing(RuntimeHelpers.GetObjectValue(FormP.get_Campo((object)"FK_Commissione"))) ? ("SELECT t_CommissioniEsameComponenti.IDcomponente, IDcommissione, IDsede, IDdocente, FK_TipoCommissione, FK_PFcomm, (Cognome + ' ' + Nome) AS StrDOC, SiglaSede, DataRiunionePreliminare, RecuperoAssenti, DescrRuolo, Ruolo, DescrAmmNomina FROM t_CommissioniEsameComponenti INNER JOIN t_Docenti ON t_CommissioniEsameComponenti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_CommissioniEsame ON t_CommissioniEsameComponenti.FK_Commissione = t_CommissioniEsame.IDcommissione INNER JOIN t_Sedi ON t_CommissioniEsame.FK_Sede = t_Sedi.IDsede LEFT OUTER JOIN t_DocentiParcelle ON t_CommissioniEsameComponenti.IDcomponente = t_DocentiParcelle.FK_Commissione WHERE Gratuito=0 AND IDparcella IS NULLAND FK_Tipo=3 " + expression + "ORDER BY SiglaSede, Cognome ") : ("SELECT t_CommissioniEsameComponenti.IDcomponente, IDcommissione, IDsede, IDdocente, FK_TipoCommissione, FK_PFcomm, (Cognome + ' ' + Nome) AS StrDOC, SiglaSede, DataRiunionePreliminare, RecuperoAssenti, DescrRuolo, Ruolo, DescrAmmNomina FROM t_CommissioniEsameComponenti INNER JOIN t_Docenti ON t_CommissioniEsameComponenti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_CommissioniEsame ON t_CommissioniEsameComponenti.FK_Commissione = t_CommissioniEsame.IDcommissione INNER JOIN t_Sedi ON t_CommissioniEsame.FK_Sede = t_Sedi.IDsede LEFT OUTER JOIN t_DocentiParcelle ON t_CommissioniEsameComponenti.IDcomponente = t_DocentiParcelle.FK_Commissione WHERE IDcomponente=" + Conversions.ToString(Conversions.ToLong(FormP.get_Campo((object)"FK_Commissione"))) + " " + expression + "ORDER BY SiglaSede, Cognome ")));
PerseoNET/frmDettParcella.cs:				origineDati = "SELECT IDparfisc, CodiceParFiscale, TipoContratto, DescrParFiscale FROM t_DecodificatoreParametroFiscale WHERE Attivo=True AND NOT(TipoContratto LIKE 'allievo%') AND NOT(TipoContratto LIKE 'commissario esame%') AND PF_PersonaFisica=True AND chbParasubordinato=False ORDER BY Gruppo, DescrParFiscale, CodiceParFiscale ";
PerseoNET/frmDettParcella.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDparcella, FK_Docente, FK_Commissione, FK_Causale FROM t_DocentiParcelle WHERE FK_Commissione=", tblComm.get_Campo((object)"IDcomponente", vFlagUpdateDB: false)), " "), "AND FK_Causale=1 AND IDparcella<>"), chiavePrimaria));
PerseoNET/frmDettParcella.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT PagamentoAltriCosti, PagamentoPresenza, PagamentoSessione FROM t_TipoCommissioneEsame WHERE IDtcommissione=", tblComm.get_Campo((object)"FK_TipoCommissione", vFlagUpdateDB: false)));
PerseoNET/frmDettParcella.cs:							string vSQL = "SELECT t_CommissioniEsameComponenti.IDcomponente, IDcommissione, IDsede, IDdocente, FK_TipoCommissione, FK_PFcomm, (Cognome + ' ' + Nome) AS StrDOC, SiglaSede, DataRiunionePreliminare, RecuperoAssenti, DescrRuolo, Ruolo, DescrAmmNomina FROM t_CommissioniEsameComponenti INNER JOIN t_Docenti ON t_CommissioniEsameComponenti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_CommissioniEsame ON t_CommissioniEsameComponenti.FK_Commissione = t_CommissioniEsame.IDcommissione INNER JOIN t_Sedi ON t_CommissioniEsame.FK_Sede = t_Sedi.IDsede LEFT OUTER JOIN t_DocentiParcelle ON t_CommissioniEsameComponenti.IDcomponente = t_DocentiParcelle.FK_Commissione WHERE IDcomponente=" + Conversions.ToString(Conversions.ToLong(FormP.get_Campo((object)"FK_Commissione"))) + " " + text + "ORDER BY SiglaSede, Cognome ";
PerseoNET/frmDettParcella.cs:				string origineDati = "SELECT t_CommissioniEsamePresenze.IDpresenze, IDcomponente, (Cognome + ' ' + Nome) AS StrCompo, DescrRuolo, DataPresenza, TipoPresenza, GettonePresenza FROM t_CommissioniEsamePresenze INNER JOIN t_CommissioniEsameComponenti ON t_CommissioniEsamePresenze.FK_Componente = t_CommissioniEsameComponenti.IDcomponente INNER JOIN t_Docenti ON t_CommissioniEsameComponenti.FK_Docente = t_Docenti.IDdocente WHERE IDcomponente=" + Conversions.ToString(vIDcompo) + " ORDER BY (Cognome + ' ' + Nome), DataPresenza, TipoPresenza ";
PerseoNET/frmDettParcella.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CommissioniEsamePresenze.IDpresenze, IDcomponente, (Cognome + ' ' + Nome) AS StrCompo, DescrRuolo, DataPresenza, TipoPresenza, GettonePresenza FROM t_CommissioniEsamePresenze INNER JOIN t_CommissioniEsameComponenti ON t_CommissioniEsamePresenze.FK_Componente = t_CommissioniEsameComponenti.IDcomponente INNER JOIN t_Docenti ON t_CommissioniEsameComponenti.FK_Docente = t_Docenti.IDdocente WHERE FK_Commissione=", tblComm.get_Campo((object)"IDcommissione", vFlagUpdateDB: false)), " "), "ORDER BY DescrRuolo, (Cognome + ' ' + Nome), DataPresenza, TipoPresenza "));
PerseoNET/frmStampaCalendarioDocente.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Docenti.IDdocente, FK_Tipo, IDincarico, IDattedi, (FK_TipoAttivita) AS IDtattivita, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Tipo=1 THEN 'Generico' WHEN FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS StrTipo, TipoAttivita, DescrBreveArgomento, SUM(OreAssegnate) AS OreIncarico, (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine))/60 FROM t_CalendarioAttivita WHERE FK_Incarico=IDincarico AND DataAttivita>='" + Conversions.ToString(txtDal.Value) + "' AND DataAttivita<='" + Conversions.ToString(txtAl.Value) + "') AS OreFatteInc, (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine))/60 FROM t_CalendarioAttivita INNER JOIN t_CalendarioCodocenza ON t_CalendarioAttivita.IDcalatt = t_CalendarioCodocenza.FK_Calendario WHERE t_CalendarioCodocenza.FK_Incarico=IDincarico AND DataAttivita>='" + Conversions.ToString(txtDal.Value) + "' AND DataAttivita<='" + Conversions.ToString(txtAl.Value) + "') AS OreFatteIncCOD, Aula, AttivitaPIP FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_TipoDocente ON t_Docenti.FK_Tipo = t_TipoDocente.IDtdoc LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY t_Docenti.IDdocente, FK_Tipo, IDattedi, FK_TipoAttivita, (Cognome + ' ' + Nome), TipoAttivita, Aula, IndTA, IDincarico, DescrBreveArgomento, AttivitaPIP "), "HAVING FK_Tipo>1 ORDER BY (Cognome + ' ' + Nome), IndTA"));
PerseoNET/frmStampaCalendarioDocente.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Docenti.IDdocente, FK_Tipo, (FK_Progetto) AS IDprogetto, (0) AS IDattedi, IDtattivita, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Tipo=1 THEN 'Generico' WHEN FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS StrTipo, TipoAttivita, DescrAttivita, SUM(OreAssegnate) AS OreIncarico, (0) AS OreFatteInc, (0) AS OreFatteIncCOD, Aula, AttivitaPIP FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_TipoDocente ON t_Docenti.FK_Tipo = t_TipoDocente.IDtdoc INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione AND t_AttivitaEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE FK_progetto=", Variabili.Progetto.get_Campo((object)"IDprogetto")), " "), "AND FK_SedeEdizione="), Variabili.Sede.get_Campo((object)"IDsede", 0L)), " "), "GROUP BY t_Docenti.IDdocente, FK_Tipo, IDtattivita, (Cognome + ' ' + Nome), TipoAttivita, DescrAttivita, FK_Progetto, Aula, AttivitaPIP, IndTA "), "HAVING FK_Tipo>1 ORDER BY (Cognome + ' ' + Nome), IndTA"));
PerseoNET/frmProgetti.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDparcella FROM t_DocentiParcelle WHERE FK_Progetto=", tblProg.get_Campo((object)0, vFlagUpdateDB: false)));
PerseoNET/frmProgetti.cs:				string str = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " ";
PerseoNET/frmProgetti.cs:				str = "SELECT IDtprogetto, TipoProgetto FROM t_TipoProgetto ORDER BY TipoProgetto ";
PerseoNET/frmProgetti.cs:				str = "SELECT t_Progetti.IDprogetto, FK_Bando, FK_SedeProgetto, ProgettoAttivo, SiglaSede, DescrProgetto, TipoProgetto, IDmwp, CodiceProgetto, CodiceCIG, CodiceCUP, DataCIGCUP, DescrBando, CodiceBando, DataAvvioProg, DataFineProg, TipoLogoRegistroStage, (SELECT COUNT(IDedizione) FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione WHERE FK_Progetto=IDprogetto AND ModelloEdizione=0) AS NumED FROM t_Progetti INNER JOIN t_Sedi ON t_Progetti.FK_SedeProgetto = t_Sedi.IDsede INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando LEFT OUTER JOIN t_TipoLogoRegistroStage ON t_Progetti.FK_TipoLogoRegistroStage = t_TipoLogoRegistroStage.IDtlogoregstage LEFT OUTER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto " + text + "ORDER BY SiglaSede, TipoProgetto, CodiceBando, CodiceProgetto ";
PerseoNET/frmProgetti.cs:				text2 = (opConEdizioni.Checked ? "(SELECT COUNT(IDedizione) FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione WHERE FK_Progetto=IDprogetto AND ModelloEdizione=0)>0 " : ((!opSenzaEdizioni.Checked) ? "" : "(SELECT COUNT(IDedizione) FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione WHERE FK_Progetto=IDprogetto AND ModelloEdizione=0)=0 "));
PerseoNET/frmProgetti.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione=t_Azioni.IDazione WHERE FK_Progetto=", tblProg.get_Campo((object)0, vFlagUpdateDB: false)), " AND FK_SedeEdizione "), Variabili.FiltroSedi));
PerseoNET/frmProgetti.cs:							string origineDati = "SELECT ID_Dote, TipoDote, CodFiscale, Cognome, Nome, DescrAzienda, DataInizioCIGS, DataFineCIGS, DataAvvioDote, DataFineDote, QuotaFormazione, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, DataInvioDomanda, LuogoNascita, ProvNascita, NazNascita, Sesso, DataNascita, Esito FROM t_StudentiDoti ";
PerseoNET/frmProgetti.cs:								origineDati = "SELECT IDtdote, TipoDote FROM t_TipoDoteStudente ";
PerseoNET/frmProgetti.cs:										origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDutente FROM t_Utenti WHERE CodFiscale='", clsTblDatiDR.get_Campo((object)"CodFiscale")), "' "));
PerseoNET/frmProgetti.cs:											origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDutente FROM t_Utenti WHERE CodFiscale='", clsTblDatiDR.get_Campo((object)"CodFiscale")), "' "));
PerseoNET/frmProgetti.cs:										origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdotestud, DataAvvioDote, DataFineDote FROM t_StudentiDoti WHERE FK_Studente=" + Conversions.ToString(num4) + " AND ID_Dote='", clsTblDatiDR.get_Campo((object)"ID_Dote")), "' "));
PerseoNET/frmProgetti.cs:				string text2 = ((Operators.CompareString(sender.ToString(), "PK", TextCompare: false) != 0) ? ("SELECT IDprogetto, DataAvvioProg, DataFineProg FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione WHERE (CodiceEdizione LIKE '" + FunzStringa.StringaSQL(txtCerca.Text) + "%' OR DescrEdizione LIKE '%" + FunzStringa.StringaSQL(txtCerca.Text) + "%') GROUP BY IDprogetto, DataAvvioProg, DataFineProg ") : ("SELECT IDprogetto, DataAvvioProg, DataFineProg FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione WHERE IDedizione=" + Conversions.ToString(Conversions.ToLong(txtCerca.Text)) + " GROUP BY IDprogetto, DataAvvioProg, DataFineProg "));
PerseoNET/frmReportStudenti.cs:								str = "(SELECT CodiceInterno FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Iscrizione=t_Iscrizioni.IDiscrizione AND Studente=1 AND AttestatoPercorso=1) AS CodiceInterno, ";
PerseoNET/frmReportStudenti.cs:								str += "(SELECT DataPubblicazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Iscrizione=t_Iscrizioni.IDiscrizione AND Studente=1 AND AttestatoPercorso=1) AS DataPubblicazione, ";
PerseoNET/frmReportStudenti.cs:							str = "(SELECT CodiceInterno FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Iscrizione=t_Iscrizioni.IDiscrizione AND Studente=1 AND AttestatoPercorso=1) AS CodiceInterno, ";
PerseoNET/frmReportStudenti.cs:							str += "(SELECT DataPubblicazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Iscrizione=t_Iscrizioni.IDiscrizione AND Studente=1 AND AttestatoPercorso=1) AS DataPubblicazione, ";
PerseoNET/frmReportStudenti.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, (FK_Edizione) AS IDedizione, IDutente, PosRegistro, (Cognome + ' ' + Nome) AS Studente, ID_Dote, IDmwiscr, DescrCertAttivitaApprendista, DataIscr, DataRitiro, OreAttivitaIndividuali, Sostegno, IdoneoAmmesso, " + str + "(0) AS Selezione FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "ORDER BY PosRegistro, Studente "));
PerseoNET/frmReportStudenti.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, Cognome, Nome, EmailRef FROM t_Iscrizioni INNER JOIN t_ReferentiUtente ON t_Iscrizioni.FK_Utente = t_ReferentiUtente.FK_Utente WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " "), "AND ConsenteNotificheMail=1  "));
PerseoNET/frmReportStudenti.cs:					string vSQL = "SELECT DataAttivita, SUM(Minuti) AS OreSvolte, DocenzaFAD FROM t_PianificazioneDocente WHERE TipoAttivita='DOCENZA' GROUP BY DataAttivita, DocenzaFAD ORDER BY DataAttivita, DocenzaFAD ";
PerseoNET/frmReportStudenti.cs:					vSQL = "SELECT TipoAttivita, SUM(Minuti) AS OreSvolte, DocenzaFAD FROM t_PianificazioneDocente GROUP BY TipoAttivita, DocenzaFAD HAVING TipoAttivita='DOCENZA' ";
PerseoNET/frmReportStudenti.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DataAttivita, (FALSE) AS DocenzaFAD, (NULL) AS OreSvolte, SUM(Minuti) AS OreAssenza, (FALSE) AS Giustificate  FROM t_AssenzeEdizione WHERE IDiscrizione=", tblIscr.get_Campo((object)0, vFlagUpdateDB: false)), " "), "GROUP BY DataAttivita ORDER BY DataAttivita "));
PerseoNET/frmReportStudenti.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DataAttivita, (NULL) AS OreSvolte, SUM(Minuti) AS OreAssenza  FROM t_AssenzeEdizione WHERE IDiscrizione=", tblIscr.get_Campo((object)0, vFlagUpdateDB: false)), " AND Giustificata=True "), "GROUP BY DataAttivita ORDER BY DataAttivita "));
PerseoNET/frmReportStudenti.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(Minuti) AS OreAssenza  FROM t_AssenzeEdizione WHERE IDiscrizione=", tblIscr.get_Campo((object)0, vFlagUpdateDB: false)), " "));
PerseoNET/frmReportStudenti.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DataAttivita, SUM(DATEDIFF(mi,OraInizio,OraFine)) AS Minuti FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_CalendarioAttivita.FK_Incarico=t_IncarichiEdizioni.IDincarico WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND FK_Argomento IS NOT NULL "), "GROUP BY DataAttivita HAVING DataAttivita<="), FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin), Conversions.ToBoolean("dd/MM/yyyy"))), " "), "ORDER BY DataAttivita "));
PerseoNET/frmReportStudenti.cs:					origineDati = "SELECT FK_Iscrizione, DataAssenza, SUM(Minuti) AS MinutiAssenza, Giustifica FRM t_AssenzeAttivita ";
PerseoNET/frmReportStudenti.cs:								string origineDati = "SELECT IDiscrizione, IDutente, FK_StatoLav, PosRegistro, (Cognome + ' ' + Nome) AS Studente, (CASE WHEN DescrCertificazione IS NOT NULL THEN DescrCertificazione ELSE TipoStatoLav END) AS TipoStatoLav, DataIscr, DataRitiro, (SELECT DataPubblicazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE CertificazioneStudente=1 AND FK_Iscrizione=IDiscrizione AND TipoDocumento='Certificazione SICUREZZA GENERALE') AS DataSicurezzaGenerale, (SELECT DataPubblicazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE CertificazioneStudente=1 AND FK_Iscrizione=IDiscrizione AND TipoDocumento='Certificazione SICUREZZA SPECIFICA') AS DataSicurezzaSpecifica, (SELECT DataPubblicazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE CertificazioneStudente=1 AND FK_Iscrizione=IDiscrizione AND TipoDocumento='Certificazione SICUREZZA AGGIORNAMENTO') AS DataSicurezzaAggiornamento, (0) AS Selezione FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN t_TipoStatoLav ON t_Utenti.FK_StatoLav = t_TipoStatoLav.IDtslav ";
PerseoNET/frmReportStudenti.cs:								origineDati = "SELECT IDtoresicurezza, TipoLivello, OrePreviste, SottoTitolo, NoteCertificato, DescrSettore, Aggiornamento, Obsoleto FROM t_TipoSicurezzaLivello WHERE DescrSettore IS NOT NULL ORDER BY Obsoleto, DescrSettore, TipoLivello, Aggiornamento ";
PerseoNET/frmReportStudenti.cs:								origineDati = "SELECT IDtslav, TipoStatoLav, DescrCertificazione FROM t_TipoStatoLav WHERE Obsoleto=0 ORDER BY IndTSL, TipoStatoLav ";
PerseoNET/frmReportStudenti.cs:							string origineDati = "SELECT IDmodellocert, TipoCertificazione, FK_TipoDocumento, TitoloCertificazione, SottotitoloCertificazione, TitoloModuloFormativo, DescrObiettivi, DescrContenuti, DescrRifNormativo, Note, OrePreviste, PercentualeMinimaOFA, IndicareOFA, FileModello, FileLoghi, DataDisattivazione, ConsenteFileCertificato, ModelloAttivo FROM t_ModelliCertificazione ORDER BY ModelloAttivo DESC, IndModello, TipoCertificazione ";
PerseoNET/frmReportStudenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDutente, (NULL) AS StrFK_Argomento, (NULL) AS FK_ModelloCertificazione, PosRegistro, (Cognome + ' ' + Nome) AS Studente, DataIscr, DataRitiro, (NULL) AS DataPubblicazione, (NULL) AS DataStampa, (0) AS Selezione FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "ORDER BY PosRegistro, Studente "));
PerseoNET/frmReportStudenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDutente, StrFK_Argomento, t_Documenti.FK_ModelloCertificazione, PosRegistro, (Cognome + ' ' + Nome) AS Studente, DataIscr, DataRitiro, (SELECT DataPubblicazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE CertificazioneStudente=1 AND FK_Iscrizione=IDiscrizione AND IDtdoc=" + Conversions.ToString(num3) + ") AS DataPubblicazione, (SELECT t_Documenti.DataModifica FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE CertificazioneStudente=1 AND FK_Iscrizione=IDiscrizione AND IDtdoc=" + Conversions.ToString(num3) + ") AS DataStampa, (0) AS Selezione FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "ORDER BY PosRegistro, Studente "));
PerseoNET/frmReportStudenti.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDargomento, DescrBreveArgomento, OreArgomento, (0) AS Selezione FROM t_ArgomentiModuli INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo=t_ModuliEdizioni.IDmodulo WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY DescrBreveArgomento "));
PerseoNET/frmReportStudenti.cs:								string origineDati = "SELECT IDdocumento, FK_Iscrizione, CodiceInterno, DataConsegna, DataPubblicazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE CertificazioneStudente=1 AND FK_Iscrizione " + Variabili.Edizione.StrFiltroIN_PKIscritti + " AND TipoDocumento='Certificazione COMPETENZE' ORDER BY FK_Iscrizione ";
PerseoNET/frmReportStudenti.cs:								origineDati = "SELECT IDiscrizione, (IDedizione) AS FK_Edizione, (IDutente) AS FK_Utente, (NULL) AS IDdocumento, ComResidenza, IndirResidenza, CAPresidenza, ProvResidenza, CodFiscale, PosRegistro, Studente, ID_Dote, Uditore, DataIscr, DataRitiro, Sostegno, OreUtente, OreCredito, OreAttivitaIndividuali, (NULL) AS ProtocolloAttestato, (NULL) AS DataStampaAttestato, (NULL) AS DataConsegnaAttestato, PresenzaEsame, EsameINAIL, UtenteTest FROM t_IscrittiEdizione WHERE DataIscr IS NOT NULL ORDER BY PosRegistro, Studente ";
PerseoNET/frmReportStudenti.cs:								origineDati = "SELECT t_IscrizioniCompetenzeCertificate.IDiscrcompe, IDcompestd, IDconoabi, FK_Iscrizione, FK_TipoSettProfessionale, DescrProfessione, DescrCompetenza, DescrConoAbi, Tipo FROM t_ProfessioniCompetenzeRL INNER JOIN t_ProfessioniConoAbiRL ON t_ProfessioniCompetenzeRL.IDcompestd = t_ProfessioniConoAbiRL.FK_Competenza INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl INNER JOIN t_IscrizioniCompetenzeCertificate ON t_ProfessioniConoAbiRL.IDconoabi = t_IscrizioniCompetenzeCertificate.FK_ConoscenzaAbilita ORDER BY DescrProfessione, IndCompe, DescrCompetenza, Tipo DESC, IndCA ";
PerseoNET/frmReportStudenti.cs:								string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDconvenzione, IDconvazienda, IDazienda, IDutente, (NULL) AS IDdocumento, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, DataIscr, DataRitiro, DescrAzienda, DataAvvio, (CASE WHEN DataInterruzione IS NOT NULL THEN DataInterruzione WHEN (DataInterruzione IS NULL AND DataProlungamento IS NOT NULL) THEN DataProlungamento ELSE DataFine END) AS DataFine,DurataStage, DataConvenzione, (NULL) AS DataPubblicazione, (NULL) AS DataConsegna FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE ExtraCurriculare=1 AND FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND (CASE WHEN DataInterruzione IS NOT NULL THEN DataInterruzione "), "WHEN (DataInterruzione IS NULL AND DataProlungamento IS NOT NULL) THEN DataProlungamento "), "ELSE DataFine END)>="), FunzStringa.StrDataSQL("02/01/2016", FlagSqlServer: true)), " "), "ORDER BY Studente, IDutente, DescrAzienda, DataAvvio "));
PerseoNET/frmReportStudenti.cs:								origineDati = "SELECT IDdocumento, FK_Iscrizione, FK_ProgettoTIR, CodiceInterno, DataConsegna, DataPubblicazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE CertificazioneStudente=1 AND FK_Iscrizione " + Variabili.Edizione.StrFiltroIN_PKIscritti + " AND TipoDocumento='Certificazione TIROCINIO' ORDER BY FK_Iscrizione ";
PerseoNET/frmReportStudenti.cs:								origineDati = "SELECT t_IscrizioniCompetenzeCertificate.IDiscrcompe, IDcompestd, IDconoabi, FK_Iscrizione, FK_TipoSettProfessionale, DescrProfessione, DescrCompetenza, DescrConoAbi, Tipo, DescrSettoreProfessione, LivelloEQF, FK_ProgettoStage FROM t_ProfessioniCompetenzeRL INNER JOIN t_ProfessioniConoAbiRL ON t_ProfessioniCompetenzeRL.IDcompestd = t_ProfessioniConoAbiRL.FK_Competenza INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl INNER JOIN t_ProfessioniSettoriStandardRL ON t_ProfessioniStandardRL.FK_TipoSettProfessionale = t_ProfessioniSettoriStandardRL.IDtsettprof INNER JOIN t_IscrizioniCompetenzeCertificate ON t_ProfessioniConoAbiRL.IDconoabi = t_IscrizioniCompetenzeCertificate.FK_ConoscenzaAbilita ORDER BY DescrProfessione, IndCompe, DescrCompetenza, Tipo DESC, IndCA ";
PerseoNET/frmReportStudenti.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, CertificaTitoloGrande, CertificaTitoloPiccolo, CertificaNota1, CertificaNota2, CertificaNota3, CertificatoPersonalizzato, DataRec, DataModifica FROM t_PianoServizi WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/frmReportStudenti.cs:								string origineDati = "SELECT IDconversione, FK_TipoFormativoInterno, TipoAttivita, Disciplina, AttivitaPortale, ID_AttivitaPortale, (CASE WHEN FK_TipoFormativoInterno IS NOT NULL THEN (SELECT TipoFormativoInterno FROM t_TipoFormativoInterno WHERE IDtformaint=FK_TipoFormativoInterno) ELSE NULL END) AS TipoFormativoInterno  FROM wt_ConversioneAttivitaRegistroRL ORDER BY FK_TipoFormativoInterno, ID_AttivitaPortale ";
PerseoNET/frmReportStudenti.cs:								origineDati = "SELECT ID_AttivitaPortaleRegistro, AttivitaPortaleRegistro FROM wt_ConversioneAttivitaRegistroRL_Tipo ORDER BY ID_AttivitaPortaleRegistro ";
PerseoNET/frmReportStudenti.cs:				string origineDati = "SELECT IDdocumento, FK_TipoDoc, FK_Studente, FK_Iscrizione, DataConsegna, DataPubblicazione, CodiceInterno, DescrDocumento, DataRec, DataModifica FROM t_Documenti WHERE IDdocumento=" + Conversions.ToString(vID);
PerseoNET/frmReportStudenti.cs:					string vSQL = "SELECT IDtdoc FROM t_TipoDocumento WHERE TipoDocumento='Certificazione COMPETENZE' ";
PerseoNET/frmReportStudenti.cs:						vSQL = "SELECT IDdocumento FROM t_Documenti WHERE CodiceInterno='" + FunzStringa.StringaSQL(txtCodiceInterno.Text) + "' AND FK_TipoDoc=" + Conversions.ToString(num2);
PerseoNET/frmReportStudenti.cs:					string vSQL = "SELECT IDtdoc FROM t_TipoDocumento WHERE TipoDocumento='Certificazione COMPETENZE' ";
PerseoNET/frmReportStudenti.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento FROM t_Documenti WHERE CodiceInterno='" + FunzStringa.StringaSQL(txtCodiceInterno.Text) + "' AND FK_TipoDoc=", FormCertificaCompe.get_Campo((object)"FK_TipoDoc")), " AND IDdocumento<>"), FormCertificaCompe.ChiavePrimaria));
PerseoNET/frmReportStudenti.cs:							string origineDati = "SELECT Studente, (NULL) AS TipoCertificazione, (0) AS OrePreviste, (0) AS OrePresenza, (NULL) AS Note FROM t_Iscrizioni";
PerseoNET/frmReportStudenti.cs:								origineDati = ((chbSoloEdizioneCorrente.CheckState != 0) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDstudente, IDiscrizione, IDedizione, SiglaSede, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataIscr, DataRitiro FROM v_IscrizioniFormazioneSicurezza WHERE IDedizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " AND IDstudente="), Variabili.Edizione.get_CampoIscrizione((object)"IDutente")), " ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Right: FunzStringa.StrDataSQL((!Operators.ConditionalCompareObjectEqual(Variabili.Edizione.get_Campo((object)"Gruppo"), true, TextCompare: false)) ? Strings.Format(DateAndTime.DateAdd("yyyy", -3.0, RuntimeHelpers.GetObjectValue(tblIscrSic.get_Campo((object)"DataAvvio", vFlagUpdateDB: false))), VariabiliClassi.StrFormatoDataPC) : Strings.Format(DateAndTime.DateAdd("yyyy", -3.0, RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataAvvio"))), VariabiliClassi.StrFormatoDataPC), FlagSqlServer: true), Left: Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDstudente, IDiscrizione, IDedizione, SiglaSede, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataIscr, DataRitiro FROM v_IscrizioniFormazioneSicurezza WHERE IDstudente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")), " AND DataFine>=")), " ")));
PerseoNET/frmReportStudenti.cs:								origineDati = ((!opSicurGenerale.Checked) ? ("SELECT IDedizione, SUM(MinutiAula) AS TotaleMinutiAula, MIN(DataAttivita) AS DataInizio, MAX(DataAttivita) AS DataFine FROM v_DettSicurezzaAula WHERE SicurezzaSpecifica=1 GROUP BY IDedizione HAVING IDedizione " + text2 + " ") : ("SELECT IDedizione, SUM(MinutiAula) AS TotaleMinutiAula, MIN(DataAttivita) AS DataInizio, MAX(DataAttivita) AS DataFine FROM v_DettSicurezzaAula WHERE SicurezzaGenerale=1 GROUP BY IDedizione HAVING IDedizione " + text2 + " "));
PerseoNET/frmReportStudenti.cs:								origineDati = ((!opSicurGenerale.Checked) ? ("SELECT IDutente, SUM(MinutiPresenza) AS TotaleMinuti FROM v_DettSicurezzaIndividuale WHERE SicurezzaSpecifica=1 AND IDedizione " + text2 + " GROUP BY IDutente HAVING IDutente " + text3 + " ") : ("SELECT IDutente, SUM(MinutiPresenza) AS TotaleMinuti FROM v_DettSicurezzaIndividuale WHERE SicurezzaGenerale=1 AND IDedizione " + text2 + " GROUP BY IDutente HAVING IDutente " + text3 + " "));
PerseoNET/frmReportStudenti.cs:								origineDati = ((!opSicurGenerale.Checked) ? ("SELECT SUM(MinutiAssenza) AS TotaleAssenze FROM v_DettSicurezzaAulaAssenze WHERE DataRecupero IS NULL AND IDedizione " + text2 + " AND IDiscrizione " + text + " AND SicurezzaSpecifica=1 ") : ("SELECT SUM(MinutiAssenza) AS TotaleAssenze FROM v_DettSicurezzaAulaAssenze WHERE DataRecupero IS NULL AND IDedizione " + text2 + " AND IDiscrizione " + text + " AND SicurezzaGenerale=1 "));
PerseoNET/frmReportStudenti.cs:				string str = "SELECT IDtoresicurezza, TipoLivello, Titolo, SottoTitolo, NoteCertificato, DescrSettore, RiferimentoLegge, OrePreviste, FileLoghi FROM t_TipoSicurezzaLivello ";
PerseoNET/frmReportStudenti.cs:				str = "SELECT IDtcertsicurezza, DescrContenuto, DescrContenutoDettaglio, DescrRiferimento, t_TipoSicurezzaContenuti.OrePreviste, Ordinale FROM t_TipoSicurezzaLivello INNER JOIN t_TipoSicurezzaContenuti ON t_TipoSicurezzaLivello.IDtoresicurezza = t_TipoSicurezzaContenuti.FK_Livello ";
PerseoNET/frmReportStudenti.cs:					string vSQL = "SELECT IDregstage FROM  t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE FK_Iscrizione " + tblIscrSic.StringaFiltroIN("IDiscrizione") + " AND SicurezzaGenerale=1 ";
PerseoNET/frmReportStudenti.cs:					string vSQL = "SELECT IDregstage FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE FK_Iscrizione " + tblIscrSic.StringaFiltroIN("IDiscrizione") + " AND SicurezzaSpecifica=1 ";
PerseoNET/frmReportStudenti.cs:						string vSQL = ((chbSoloEdizioneCorrente.CheckState != 0) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDstudente, IDiscrizione, IDedizione, SiglaSede, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataIscr, DataRitiro FROM v_IscrizioniFormazioneSicurezza WHERE IDedizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " AND IDstudente="), Variabili.Edizione.get_CampoIscrizione((object)"IDutente")), " ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Right: FunzStringa.StrDataSQL((!Operators.ConditionalCompareObjectEqual(Variabili.Edizione.get_Campo((object)"Gruppo"), true, TextCompare: false)) ? Strings.Format(DateAndTime.DateAdd("yyyy", -2.0, RuntimeHelpers.GetObjectValue(tblIscrSic.get_Campo((object)"DataAvvio", vFlagUpdateDB: false))), VariabiliClassi.StrFormatoDataPC) : Strings.Format(DateAndTime.DateAdd("yyyy", -2.0, RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataAvvio"))), VariabiliClassi.StrFormatoDataPC), FlagSqlServer: true), Left: Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDstudente, IDiscrizione, IDedizione, SiglaSede, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataIscr, DataRitiro FROM v_IscrizioniFormazioneSicurezza WHERE IDstudente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")), " AND DataFine>=")), " ")));
PerseoNET/frmReportStudenti.cs:							vSQL = "SELECT IDtarg FROM t_TipoArgomento WHERE Certificabile=True AND SicurezzaGenerale=True AND Obsoleto=False ";
PerseoNET/frmReportStudenti.cs:							vSQL = "SELECT IDtarg FROM t_TipoArgomento WHERE Certificabile=True AND SicurezzaSpecifica=True AND Obsoleto=False ";
PerseoNET/frmReportStudenti.cs:						vSQL = "SELECT IDcalatt, DATEDIFF(mi, OraInizio, OraFine) AS MinutiAula, DataAttivita, OraInizio, OraFine, (Cognome + ' ' + Nome) AS Formatore, FK_CalAttivita, (1) AS Aula FROM t_ArgomentiModuli INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_IncarichiEdizioni ON t_ArgomentiModuli.IDargomento = t_IncarichiEdizioni.FK_Argomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE Certificabile=1 AND DataAttivita<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " AND FK_Edizione " + text2 + " AND IDtarg=" + Conversions.ToString(value2) + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/frmReportStudenti.cs:						vSQL = (clsTblDatiDR2.OrigineDatiUnione = "SELECT (0) AS IDcalatt, DATEDIFF(mi, OraIngresso, OraUscita) AS MinutiAula, (DataStage) AS DataAttivita, (OraIngresso) AS OraInizio, (OraUscita) AS OraFine, (NULL) AS Formatore, (NULL) AS FK_CalAttivita, (0) AS Aula FROM t_Iscrizioni INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE DataStage<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " AND FK_Edizione " + text2 + " AND FK_Utente " + text3 + " " + value + " ORDER BY DataAttivita, OraIngresso ");
PerseoNET/frmReportStudenti.cs:						vSQL = "SELECT (FK_Attivita) AS IDcalatt, (DataAssenza) AS DataAttivita, (Minuti) AS MinutiAssenza FROM t_AssenzeAttivita WHERE DataRecupero IS NULL AND FK_Iscrizione " + text + " AND DataAssenza " + text4 + " ORDER BY DataAssenza, FK_Attivita ";
PerseoNET/frmReportStudenti.cs:						vSQL = "SELECT IDtslav, DescrCertificazione FROM t_TipoStatoLav WHERE TipoStatoLav='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.Edizione.get_CampoIscrizione((object)"TipoStatoLav"))) + "' ";
PerseoNET/frmReportStudenti.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtsettin, TipoSettoreInt FROM t_TipoSettoreInterno WHERE IDtsettin=", Variabili.Edizione.get_Campo((object)"FK_SettoreEdizione")));
PerseoNET/frmReportStudenti.cs:						vSQL = (opSicurGenerale.Checked ? "SELECT IDtdoc, TipoDocumento FROM t_TipoDocumento WHERE TipoDocumento='Certificazione SICUREZZA GENERALE' AND CertificazioneStudente=1 " : ((!Operators.ConditionalCompareObjectEqual(tblSettSic.get_Campo((object)"Aggiornamento", vFlagUpdateDB: false), false, TextCompare: false)) ? "SELECT IDtdoc, TipoDocumento FROM t_TipoDocumento WHERE TipoDocumento='Certificazione SICUREZZA AGGIORNAMENTO' AND CertificazioneStudente=1 " : "SELECT IDtdoc, TipoDocumento FROM t_TipoDocumento WHERE TipoDocumento='Certificazione SICUREZZA SPECIFICA' AND CertificazioneStudente=1 "));
PerseoNET/frmReportStudenti.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento, FK_TipoDoc, FK_Studente, FK_Iscrizione, DescrDocumento FROM t_Documenti WHERE FK_TipoDoc=" + Conversions.ToString(value3) + " AND FK_Studente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")), " "), "AND FK_Iscrizione="), Variabili.Edizione.get_CampoIscrizione((object)"IDiscrizione")), " "));
PerseoNET/frmReportStudenti.cs:							string origineDati = "SELECT IDtrepcompe, TipoRepertorio FROM t_TipoRepertorioCompetenze WHERE Obsoleto=0 ORDER BY Obsoleto, IndRep ";
PerseoNET/frmReportStudenti.cs:							origineDati = "SELECT IDtsettprof, DescrSettoreProfessione FROM t_ProfessioniSettoriStandardRL ";
PerseoNET/frmReportStudenti.cs:							origineDati = "SELECT IDprofessionerl, DescrProfessione FROM t_ProfessioniStandardRL ";
PerseoNET/frmReportStudenti.cs:							origineDati = "SELECT t_ProfessioniCompetenzeRL.IDcompestd, FK_Professione, IndCompe, DescrCompetenza, LivelloEQF, CompetenzaAttiva FROM t_ProfessioniCompetenzeRL ORDER BY IndCompe, DescrCompetenza ";
PerseoNET/frmReportStudenti.cs:							origineDati = "SELECT t_ProfessioniConoAbiRL.IDconoabi, FK_Competenza, IndCA, DescrConoAbi, Tipo, ConoAbilitaAttiva FROM t_ProfessioniConoAbiRL ORDER BY Tipo, IndCA, DescrConoAbi ";
PerseoNET/frmReportStudenti.cs:							string vSQL = "SELECT t_IscrizioniCompetenzeCertificate.IDiscrcompe, FK_Iscrizione FROM t_ProfessioniCompetenzeRL WHERE FK_Iscrizione " + tblIscrCompe.StringaFiltroIN("IDiscrizione");
PerseoNET/frmReportStudenti.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, CertificaTitoloGrande, CertificaTitoloPiccolo, CertificaNota1, CertificaNota2, CertificaNota3, CertificatoPersonalizzato, DataRec, DataModifica FROM t_PianoServizi WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/frmReportStudenti.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, (Cognome + ' ' + Nome) AS Studente, DescrProfessione, DescrCompetenza, DescrConoAbi, Tipo FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_ProfessioniCompetenzeRL INNER JOIN t_ProfessioniConoAbiRL ON t_ProfessioniCompetenzeRL.IDcompestd = t_ProfessioniConoAbiRL.FK_Competenza INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl INNER JOIN t_IscrizioniCompetenzeCertificate ON t_ProfessioniConoAbiRL.IDconoabi = t_IscrizioniCompetenzeCertificate.FK_ConoscenzaAbilita ON  t_Iscrizioni.IDiscrizione = t_IscrizioniCompetenzeCertificate.FK_Iscrizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY (Cognome + ' ' + Nome), DescrProfessione, IndCompe, DescrCompetenza, Tipo DESC, IndCA "));
PerseoNET/frmReportStudenti.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi,OraIngresso,Orauscita)) AS TotaleMinuti FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE FK_Iscrizione=", tblIscrCompe.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " AND Stage=1 "), "AND DataStage>="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " AND DataStage<="), FunzStringa.StrDataSQL(text3, FlagSqlServer: true)), " "));
PerseoNET/frmReportStudenti.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(OreAttivita) AS TotaleOre FROM t_IscrizioniConsuntivoAttivita WHERE FK_Iscrizione=", tblIscrCompe.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " "), "AND DataInizio>="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " AND DataFine<="), FunzStringa.StrDataSQL(text3, FlagSqlServer: true)), " "));
PerseoNET/frmReportStudenti.cs:							vSQL = "SELECT IDtdoc FROM t_TipoDocumento WHERE TipoDocumento='Certificazione TIROCINIO' ";
PerseoNET/frmReportStudenti.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento, FK_TipoDoc, FK_Iscrizione, FK_ProgettoTIR, CodiceInterno, DataPubblicazione FROM t_Documenti WHERE FK_Iscrizione=", tblIscrCompe.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " AND FK_ProgettoTIR="), tblIscrCompe.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), " "), "AND FK_TipoDoc="), num2));
PerseoNET/frmReportStudenti.cs:									string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDesplav, TipoSettoreProd, TipoContratto, DescrMansione, TipoEsitoOccupazione, DataInizioRapp, DataFineRapp, DescrAzienda, ComuneAzienda, IndirizzoAzienda FROM t_Iscrizioni INNER JOIN t_EsperienzeLavoro INNER JOIN t_TipoSettoreProduttivo ON t_EsperienzeLavoro.FK_SettoreProduttivo = t_TipoSettoreProduttivo.IDtsetprod ON t_Iscrizioni.FK_Utente = t_EsperienzeLavoro.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_TipoContratto ON t_EsperienzeLavoro.FK_TipoContratto = t_TipoContratto.IDcontr LEFT OUTER JOIN t_TipoEsitoOccupazione ON t_EsperienzeLavoro.FK_EsitoOccupazionale = t_TipoEsitoOccupazione.IDtesitoocc WHERE (t_Iscrizioni.FK_Utente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")), " AND DataInizioRapp IS NOT NULL "), "AND DataInizioRapp<"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataAvvio")), "dd/MM/yyyy"), FlagSqlServer: true)), " AND DataFineRapp IS NULL) "), "OR (DataInizioRapp IS NOT NULL AND DataInizioRapp<"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataAvvio")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataFineRapp IS NOT NULL "), "AND DataFineRapp>"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataAvvio")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND t_Iscrizioni.FK_Utente="), Variabili.Edizione.get_CampoIscrizione((object)"IDutente")), ") "), "ORDER BY t_EsperienzeLavoro.FK_Utente, DataInizioRapp DESC"));
PerseoNET/frmReportStudenti.cs:						string vSQL = "SELECT DataAttivita, SUM(Minuti) AS OreSvolte FROM t_PianificazioneDocente WHERE TipoAttivita='DOCENZA' GROUP BY DataAttivita ORDER BY DataAttivita ";
PerseoNET/frmReportStudenti.cs:						vSQL = "SELECT TipoAttivita, SUM(Minuti) AS OreSvolte FROM t_PianificazioneDocente GROUP BY TipoAttivita HAVING TipoAttivita='DOCENZA' ";
PerseoNET/frmReportStudenti.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DataAttivita, (NULL) AS OreSvolte, SUM(Minuti) AS OreAssenza, Giustificata FROM t_AssenzeEdizione WHERE IDiscrizione=", tblIscr.get_Campo((object)0, vFlagUpdateDB: false)), " "), "GROUP BY DataAttivita, Giustificata ORDER BY DataAttivita "));
PerseoNET/frmReportStudenti.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(Minuti) AS OreAssenza  FROM t_AssenzeEdizione WHERE IDiscrizione=", tblIscr.get_Campo((object)0, vFlagUpdateDB: false)), " "));
PerseoNET/frmReportStudenti.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, DataAssenza, MIN(OraInizio) AS OraInizio, MAX(OraFine) AS OraFine, SUM(Minuti) AS TotaleMinuti FROM t_AssenzeAttivita INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY IDiscrizione, DataAssenza, PosRegistro "), "ORDER BY PosRegistro, IDiscrizione, DataAssenza "));
PerseoNET/frmReportStudenti.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, DataAttivita, DescrAttivita, OraInizio, OraFine, ('attivitÃ  PIP') AS Tipo FROM t_CalendarioAttivita INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND PresenzaStudentePIP=1 "), "ORDER BY DataAttivita, OraInizio "));
PerseoNET/frmReportStudenti.cs:						origineDati = (clsTblDatiDR2.OrigineDatiUnione = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, DataStage, DescrAttivitaStage, (OraIngresso) AS OraInizio, (OraUscita) AS OraFine, (TipoAttivitaStage) AS Tipo FROM t_Iscrizioni INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND OFA=1 ")));
PerseoNET/frmReportStudenti.cs:						origineDati = "SELECT IDiscrizione, Studente, DataAssenza, OraInizioAssenza, OraFineAssenza, OreAssenza, DataAttivita, OraInizio, OraFine, DescrAttivita, Tipo, NoteRecuperi  FROM t_Iscrizione ";
PerseoNET/frmReportStudenti.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, DataAssenza, DataRecupero, SUM(Minuti) AS TotaleMinuti FROM t_AssenzeAttivita INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY IDiscrizione, DataAssenza, PosRegistro, DataRecupero "), "HAVING DataRecupero IS NOT NULL "), "ORDER BY PosRegistro, IDiscrizione, DataAssenza "));
PerseoNET/frmReportStudenti.cs:							vSQL = "SELECT DataAttivita, TipoAttivita, SUM(Minuti) AS MinutiPresenza, (0) AS MinutiAssenza, (NULL) AS Esito FROM t_PianificazioneDocente WHERE Presenza LIKE 'P%' GROUP BY DataAttivita, TipoAttivita ORDER BY DataAttivita ";
PerseoNET/frmReportStudenti.cs:							vSQL = "SELECT DataAttivita, SUM(Minuti) AS MinutiAssenza, (NULL) AS Esito FROM t_PianificazioneDocente WHERE Presenza='A' GROUP BY DataAttivita ORDER BY DataAttivita ";
PerseoNET/frmReportStudenti.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, DataAttivita, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, (Cognome + ' ' + Nome) AS Formatore, FK_CalAttivita FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE DataAttivita<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " AND FK_Argomento " + text2 + "AND FK_Edizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " "), "ORDER BY DataAttivita "));
PerseoNET/frmReportStudenti.cs:							origineDati = "SELECT IDassenza, (FK_Iscrizione) AS IDiscrizione, (FK_Attivita) AS IDcalatt, Minuti FROM t_AssenzeAttivita WHERE FK_Attivita " + clsTblDatiDR.StringaFiltroIN("IDcalatt") + " AND DataRecupero IS NULL ORDER BY DataAssenza ";
PerseoNET/frmReportStudenti.cs:							origineDati = "SELECT (FK_Iscrizione) AS IDiscrizione, DATEDIFF(mi, OraIngresso, OraUscita) AS MinutiAula, (DataStage) AS DataAttivita, (OraIngresso) AS OraInizio, (OraUscita) AS OraFine FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE DataStage<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " AND FK_Iscrizione " + tblIscrAltre.StringaFiltroIN("IDiscrizione") + " AND FK_ModelloCertificazione=" + Conversions.ToString(ComboCertif.PKSelezionatoCombo) + " ORDER BY FK_Iscrizione, DataAttivita, OraIngresso ";
PerseoNET/frmReportStudenti.cs:										origineDati = "SELECT DescrObiettivi, DescrContenuti FROM t_ModelliCertificazione ";
PerseoNET/frmReportStudenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento, FK_TipoDoc, FK_Studente, FK_Iscrizione, DescrDocumento FROM t_Documenti WHERE FK_TipoDoc=", ComboCertif.get_Campo((object)"FK_TipoDocumento")), " "), "AND FK_Studente="), Variabili.Edizione.get_CampoIscrizione((object)"IDutente")), " "), "AND FK_Iscrizione="), Variabili.Edizione.get_CampoIscrizione((object)"IDiscrizione")), " "));
PerseoNET/frmReportStudenti.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDutente, (SELECT StrFK_Argomento FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE CertificazioneStudente=1 AND FK_Iscrizione=IDiscrizione AND IDtdoc=", ComboCertif.get_Campo((object)"FK_TipoDocumento")), ") AS StrFK_Argomento, "), "(SELECT FK_ModelloCertificazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc "), "WHERE CertificazioneStudente=1 AND FK_Iscrizione=IDiscrizione "), "AND IDtdoc="), ComboCertif.get_Campo((object)"FK_TipoDocumento")), ") AS FK_ModelloCertificazione, "), "PosRegistro, (Cognome + ' ' + Nome) AS Studente, DataIscr, DataRitiro, "), "(SELECT DataPubblicazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc "), "WHERE CertificazioneStudente=1 AND FK_Iscrizione=IDiscrizione "), "AND IDtdoc="), ComboCertif.get_Campo((object)"FK_TipoDocumento")), ") AS DataPubblicazione, "), "(SELECT t_Documenti.DataModifica FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc "), "WHERE CertificazioneStudente=1 AND FK_Iscrizione=IDiscrizione "), "AND IDtdoc="), ComboCertif.get_Campo((object)"FK_TipoDocumento")), ") AS DataStampa, "), "(0) AS Selezione "), "FROM t_Iscrizioni INNER JOIN "), "t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente "), "WHERE FK_Edizione="), Variabili.Edizione.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "ORDER BY PosRegistro, Studente "));
PerseoNET/frmReportStudenti.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, (Cognome + ' ' + Nome) AS Studente, CodFiscale, IDmwiscr, ID_Dote, (CASE WHEN Uditore=1 THEN 'U' ELSE (CASE WHEN DataRitiro IS NOT NULL THEN 'R' ELSE 'A' END) END) AS Stato, (IDiscrizione) AS ProtocolloAttestato FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE FK_Edizione= ", Variabili.Edizione.get_Campo((object)"IDedizione")), " AND DataIscr IS NOT NULL "), "ORDER BY (Cognome + ' ' + Nome), PosRegistro "));
PerseoNET/frmReportStudenti.cs:										origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT CodiceInterno FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Iscrizione=", clsTblDatiDR.get_Campo((object)"IDiscrizione")), " "), "AND Studente=1 AND AttestatoPercorso=1 "));
PerseoNET/frmReportStudenti.cs:					string vSQL = "SELECT IDtdoc FROM t_TipoDocumento WHERE IndTipoDoc=999 AND Studente=1 AND AttestatoPercorso=1 ";
PerseoNET/frmReportStudenti.cs:							vSQL = "SELECT IDdocumento FROM t_Documenti WHERE FK_TipoDoc=" + Conversions.ToString(num2) + " AND CodiceInterno='" + txtProtocolloAttestato.Text + "' ";
PerseoNET/frmReportStudenti.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDdocumento FROM t_Documenti WHERE FK_TipoDoc=" + Conversions.ToString(num2) + " AND CodiceInterno='" + txtProtocolloAttestato.Text + "' AND FK_Iscrizione<>", tblIscr.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)));
PerseoNET/frmReportStudenti.cs:				string origineDati = "SELECT IDtsettprof, DescrSettoreProfessione FROM t_ProfessioniSettoriStandardRL WHERE FK_TipoRepertorio=" + Conversions.ToString(ComboReper.PKSelezionatoCombo) + " AND Attivo=1 ORDER BY IndSett, DescrSettoreProfessione ";
PerseoNET/frmReportStudenti.cs:				string origineDati = "SELECT IDprofessionerl, DescrProfessione FROM t_ProfessioniStandardRL WHERE Attiva=1 AND FK_TipoSettProfessionale=" + Conversions.ToString(ComboSett.PKSelezionatoCombo) + " ORDER BY IndProf, DescrProfessione ";
PerseoNET/frmReportStudenti.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProfessioniConoAbiRL.IDconoabi, FK_Competenza, IndCA, DescrConoAbi, Tipo, ConoAbilitaAttiva FROM t_ProfessioniConoAbiRL WHERE FK_Competenza=", tblCompeReper.get_Campo((object)0, vFlagUpdateDB: false)), " "), "AND ConoAbilitaAttiva=1 ORDER BY Tipo DESC, IndCA "));
PerseoNET/frmReportStudenti.cs:										string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_IscrizioniCompetenzeCertificate(FK_Iscrizione, FK_ConoscenzaAbilita) SELECT (", tblIscrCompe.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), ") AS FK_Iscrizione, IDconoabi FROM t_ProfessioniConoAbiRL "), "WHERE IDconoabi="), tblConoAbiReper.get_Campo((object)"IDconoabi", vFlagUpdateDB: false)));
PerseoNET/frmReportStudenti.cs:									string origineDati = "SELECT IDtrepcompe, TipoRepertorio FROM t_TipoRepertorioCompetenze WHERE Obsoleto=0 AND TirExtraCurriculari=1 ORDER BY Obsoleto, IndRep ";
PerseoNET/frmReportStudenti.cs:									origineDati = "SELECT IDtsettprof, DescrSettoreProfessione FROM t_ProfessioniSettoriStandardRL ";
PerseoNET/frmReportStudenti.cs:									origineDati = "SELECT IDprofessionerl, DescrProfessione FROM t_ProfessioniStandardRL ";
PerseoNET/frmReportStudenti.cs:									origineDati = "SELECT t_ProfessioniCompetenzeRL.IDcompestd, FK_Professione, IndCompe, DescrCompetenza, LivelloEQF, CompetenzaAttiva FROM t_ProfessioniCompetenzeRL ORDER BY IndCompe, DescrCompetenza ";
PerseoNET/frmReportStudenti.cs:									origineDati = "SELECT t_ProfessioniConoAbiRL.IDconoabi, FK_Competenza, IndCA, DescrConoAbi, Tipo, ConoAbilitaAttiva FROM t_ProfessioniConoAbiRL ORDER BY Tipo, IndCA, DescrConoAbi ";
PerseoNET/frmReportStudenti.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Iscrizione, FK_ConoscenzaAbilita, IDconvenzione FROM t_ConvenzioniStageObiettivi INNER JOIN t_ConvenzioniStage ON t_ConvenzioniStageObiettivi.FK_Convenzione=t_ConvenzioniStage.IDconvenzione WHERE FK_ConvenzioneAzienda=", tblIscrCompe.get_Campo((object)"IDconvazienda", vFlagUpdateDB: false)), " "), "AND FK_Iscrizione="), tblIscrCompe.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " AND FK_ConoscenzaAbilita IS NOT NULL "), " "), "ORDER BY FK_ConoscenzaAbilita "));
PerseoNET/frmReportStudenti.cs:						origineDati = "SELECT FK_Iscrizione, FK_ConoscenzaAbilita, FK_ProgettoStage FROM t_IscrizioniCompetenzeCertificate ";
PerseoNET/frmReportStudenti.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProfessioniConoAbiRL.IDconoabi, FK_Competenza, IndCA, DescrConoAbi, Tipo, ConoAbilitaAttiva FROM t_ProfessioniConoAbiRL WHERE FK_Competenza=", tblCompeReper.get_Campo((object)0, vFlagUpdateDB: false)), " "), "AND ConoAbilitaAttiva=1 ORDER BY Tipo DESC, IndCA "));
PerseoNET/frmReportStudenti.cs:										string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_IscrizioniCompetenzeCertificate(FK_Iscrizione, FK_ConoscenzaAbilita, FK_ProgettoStage) SELECT (", tblIscrCompe.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), ") AS FK_Iscrizione, IDconoabi, ("), tblIscrCompe.get_Campo((object)"IDconvenzione", vFlagUpdateDB: false)), ") AS FK_PT FROM t_ProfessioniConoAbiRL "), "WHERE IDconoabi="), tblConoAbiReper.get_Campo((object)"IDconoabi", vFlagUpdateDB: false)));
PerseoNET/frmReportStudenti.cs:				string origineDati = "SELECT IDtsettprof, DescrSettoreProfessione FROM t_ProfessioniSettoriStandardRL WHERE FK_TipoRepertorio=" + Conversions.ToString(ComboReper.PKSelezionatoCombo) + " AND Attivo=1 ORDER BY IndSett, DescrSettoreProfessione ";
PerseoNET/frmReportStudenti.cs:				string origineDati = "SELECT IDprofessionerl, DescrProfessione FROM t_ProfessioniStandardRL WHERE Attiva=1 AND FK_TipoSettProfessionale=" + Conversions.ToString(ComboSett.PKSelezionatoCombo) + " ORDER BY IndProf, DescrProfessione ";
PerseoNET/frmReportStudenti.cs:						string origineDati = "SELECT IDconversione, TipoAttivita, Disciplina, FK_TipoFormativoInterno, AttivitaPortale, ID_AttivitaPortale FROM wt_ConversioneAttivitaRegistroRL ORDER BY ID_AttivitaPortale ";
PerseoNET/frmReportStudenti.cs:						origineDati = "SELECT CodFiscale, Cognome, Nome, DataAttivita, OraInizio, OraFine, OrePresenza, OreAssenza, OreGiustificate, IDsezione_SIUF, Tipo_SIUF FROM t_PianificazioneAula ";
PerseoNET/frmReportStudenti.cs:						origineDati = "SELECT CodFiscale, Cognome, Nome, DataAttivita, OraInizio, OraFine, OrePresenza, OreAssenza, OreGiustificate, IDsezione_SIUF, Tipo_SIUF FROM t_PianificazioneAula ";
PerseoNET/frmReportStudenti.cs:				string origineDati = "SELECT TipoCertificazione, (CASE WHEN TipoArgomento IS NOT NULL THEN TipoArgomento ELSE DescrDisciplinaCertificata END) AS TipoArgomento, OrePreviste, PercentualeMinimaOFA, ModelloAttivo FROM t_ModelliCertificazione INNER JOIN t_TipoDocumento ON t_ModelliCertificazione.FK_TipoDocumento = t_TipoDocumento.IDtdoc LEFT OUTER JOIN t_TipoArgomento ON t_ModelliCertificazione.FK_TipoArgomento = t_TipoArgomento.IDtarg ORDER BY ModelloAttivo DESC, IndModello, TipoCertificazione ";
PerseoNET/frmReportStudenti.cs:				string origineDati = "SELECT TipoAttivita, (1) AS Tipo, IndTG, IndTA  FROM t_TipoAttivitaEdizione WHERE Obsoleto=0 AND PresenzaOFA=1 ORDER BY IndTG, IndTA, TipoAttivita ";
PerseoNET/frmReportStudenti.cs:				clsTblDatiDR.DestinazioneDati = "SELECT Testo_1, Numerico_1, Numerico_2, Numerico_3 FROM t_StampaTbl_1";
PerseoNET/frmReportStudenti.cs:				origineDati = (clsTblDatiDR.OrigineDati = "SELECT TipoAttivitaStage, (2) AS Tipo, IndTAS, (0) AS Ordinale FROM t_TipoAttivitaStage WHERE Obsoleto=0 ORDER BY IndTAS ");
PerseoNET/frmReportStudenti.cs:				origineDati = "SELECT IDconversione, TipoAttivita, Disciplina, AttivitaPortale, ID_AttivitaPortale, FK_TipoFormativoInterno, DataRec, DataModifica, Bloccato FROM wt_ConversioneAttivitaRegistroRL WHERE IDconversione=" + Conversions.ToString(vID);
PerseoNET/frmReportStudenti.cs:				origineDati = "SELECT IDtformaint, TipoFormativoInterno FROM t_TipoFormativoInterno WHERE Obsoleto=0 ORDER BY TipoFormativoInterno";
PerseoNET/frmReportStudenti.cs:				origineDati = "SELECT Testo_1 FROM t_StampaTbl_1 ORDER BY Numerico_1, Numerico_2, Numerico_3 ";
PerseoNET/frmReportStudenti.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DescrAvviso, DataGenerazione FROM t_AvvisiUtentiPerseo INNER JOIN t_TipoCausaleAvviso ON t_AvvisiUtentiPerseo.FK_Causale = t_TipoCausaleAvviso.IDtcausaleavv WHERE NomeTabella='t_PianoServizi' AND PKRecord=", Variabili.Edizione.get_Campo((object)0)), " "), "AND Enumerazione="), clsNotificaEvento.TipoNotificaEvento.NotificaStudentiRegistroPA));
PerseoNET/frmReportStudenti.cs:				string vSQL = "SELECT ID_AttivitaPortaleRegistro, AttivitaPortaleRegistro FROM wt_ConversioneAttivitaRegistroRL_Tipo WHERE ID_AttivitaPortaleRegistro='" + txtID_AttivitaPortaleRegistro.Text + "' UNION SELECT ID_AttivitaPortaleRegistro, AttivitaPortaleRegistro FROM wt_ConversioneAttivitaRegistroRL_Tipo WHERE AttivitaPortaleRegistro='" + FunzStringa.StringaSQL(txtAttivitaPortaleRegistro.Text) + "' ";
PerseoNET/frmReportStudenti.cs:				string vSQL = "SELECT ID_AttivitaPortaleRegistro, AttivitaPortaleRegistro FROM wt_ConversioneAttivitaRegistroRL_Tipo WHERE ID_AttivitaPortaleRegistro='" + txtID_AttivitaPortaleRegistro.Text + "' UNION SELECT ID_AttivitaPortaleRegistro, AttivitaPortaleRegistro FROM wt_ConversioneAttivitaRegistroRL_Tipo WHERE AttivitaPortaleRegistro='" + FunzStringa.StringaSQL(txtAttivitaPortaleRegistro.Text) + "' ";
PerseoNET/clsFormDBDR.cs:							else if (Operators.CompareString(Strings.Mid(value, 1, 7), "SELECT ", TextCompare: false) != 0)
PerseoNET/clsFormDBDR.cs:								Information.Err().Raise(-2147220991, null, "Classe clsTblDatiAdoDR: proprietÃ  OrigineDati. Manca parola chiave SELECT.");
PerseoNET/clsFormDBDR.cs:						Information.Err().Raise(-2147220991, null, "Classe clsFormDBDR. Metodo ApriForm. Verificare campi della riga SELECT.\r\n" + description);
PerseoNET/clsFormDBDR.cs:					string text = "SELECT";
PerseoNET/clsFormDBDR.cs:						if (Operators.CompareString(text, "SELECT", TextCompare: false) == 0)
PerseoNET/clsFormDBDR.cs:								if (Operators.CompareString(text, "SELECT", TextCompare: false) == 0)
PerseoNET/clsFormDBDR.cs:							if (Operators.CompareString(text, "SELECT", TextCompare: false) == 0)
PerseoNET/clsFormDBDR.cs:							if (Operators.CompareString(text, "SELECT", TextCompare: false) == 0)
PerseoNET/clsFormDBDR.cs:							if (Operators.CompareString(text, "SELECT", TextCompare: false) == 0)
PerseoNET/clsFormDBDR.cs:									if (Operators.CompareString(text, "SELECT", TextCompare: false) == 0)
PerseoNET/clsFormDBDR.cs:								if (Operators.CompareString(text, "SELECT", TextCompare: false) == 0)
PerseoNET/clsFormDBDR.cs:					if (Strings.InStr(1, vSQL, "SELECT ", CompareMethod.Text) == 0)
PerseoNET/clsFormDBDR.cs:					i = Strings.InStr(1, vSQL, "SELECT ", CompareMethod.Text);
PerseoNET/frmDettSede.cs:				string origineDati = "SELECT IDsede, FK_TipoSede, DescrSede, SiglaSede, IDMW_Sede, ID_SedeFOL, OrdGruppo, ComuneSede, IndirizzoSede, CAPsede, PROVsede, TelSede, FaxSede, EmailSede, FirmaDocumenti, RuoloFirmaDocumenti, ContrattoPregresso, DeltaAvvioContratto, RapprLegaleCognome, RapprLegaleNome, CF_RapprLegale, DataRipristinoPregresso, SedeTest, Attiva, DataBloccoIncassi, DataBloccoIncassiTemp, DataRipristinoBloccoInc, DataBloccoCollProf, FirmaAltro, RuoloFirmaAltro, DataRipristinoBloccoCProf, RuoloRapprLegale, CodFiscaleSede, PIVASede, DescrAccreditamento, FirmaDocumentiIMG, FirmaRapprLegaleIMG, BloccoLettereIncarico, DataRec, DataModifica, Bloccato FROM t_Sedi WHERE IDsede=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettSede.cs:				origineDati = "SELECT IDtsede, TipoSede FROM t_TipoSede WHERE Obsoleto=0 ORDER BY TipoSede ";
PerseoNET/frmDettSede.cs:						vSQL = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE SiglaSede='" + FunzStringa.StringaSQL(txtSiglaSede.Text) + "' ";
PerseoNET/frmDettSede.cs:						vSQL = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE SiglaSede='" + FunzStringa.StringaSQL(txtSiglaSede.Text) + "' AND IDsede<>" + Conversions.ToString(FormSede.ChiavePrimaria) + " ";
PerseoNET/frmDettSede.cs:					vSQL = "SELECT IDsede, DescrSede FROM t_Sedi WHERE FK_TipoSede=1 AND Attiva=1 ";
PerseoNET/frmDettSede.cs:						vSQL = "SELECT Nominativo FROM t_DirittiDB INNER JOIN t_TipoDirittiDB ON t_DirittiDB.Procedura = t_TipoDirittiDB.IDproc WHERE t_TipoDirittiDB.Procedura IN('AMMINISTRAZIONE DB','GESTIONE PERSONALE SEDE REGIONALE','PAGAMENTI','APPROVA ACQUISTO (SR)','APPROVA CONTRATTO') GROUP BY Nominativo";
PerseoNET/frmDettSede.cs:							origineDati = "SELECT t_ConvenzioniElencoDestinatari.IDdestconv, FK_Sede, PosizioneDest, DescrDestinatario, IndirizzoDestConv, ComuneDestConv, CAPDestConv, ProvDestConv, DestinatarioAttivo FROM t_ConvenzioniElencoDestinatari WHERE FK_Sede IS NULL ORDER BY PosizioneDest ";
PerseoNET/frmDettSede.cs:							origineDati = "SELECT t_ConvenzioniElencoDestinatari.IDdestconv, FK_Sede, PosizioneDest, DescrDestinatario, IndirizzoDestConv, ComuneDestConv, CAPDestConv, ProvDestConv, DestinatarioAttivo FROM t_ConvenzioniElencoDestinatari WHERE FK_Sede=" + Conversions.ToString(FormSede.ChiavePrimaria) + " ORDER BY PosizioneDest ";
PerseoNET/frmDettSede.cs:						origineDati = "SELECT t_ConvenzioniStagePolizze.IDassconv, TitolareAssicurazione, DescrAssicurazione, TipoFormativoInterno, PolizzaAss, PolizzaAttiva FROM t_ConvenzioniStagePolizze LEFT OUTER JOIN t_TipoFormativoInterno ON t_ConvenzioniStagePolizze.FK_TipoFormativo = t_TipoFormativoInterno.IDtformaint WHERE FK_Sede IS NULL ORDER BY PolizzaAttiva DESC, TitolareAssicurazione ";
PerseoNET/frmDettSede.cs:						origineDati = "SELECT t_ConvenzioniStagePolizze.IDassconv, TitolareAssicurazione, DescrAssicurazione, TipoFormativoInterno, PolizzaAss, PolizzaAttiva FROM t_ConvenzioniStagePolizze LEFT OUTER JOIN t_TipoFormativoInterno ON t_ConvenzioniStagePolizze.FK_TipoFormativo = t_TipoFormativoInterno.IDtformaint WHERE FK_Sede=" + Conversions.ToString(FormSede.ChiavePrimaria) + " ORDER BY PolizzaAttiva DESC, TitolareAssicurazione ";
PerseoNET/frmDettSede.cs:					string origineDati = "SELECT t_Locali.IDlocale, FK_TipoSede, SiglaSede, CodiceLocale, DescrLocale, TipoLocale, Posti, Sovrapponibile, INAIL, LocaleEsterno, LocaleAttivo FROM t_Locali INNER JOIN t_TipoLocale ON t_Locali.FK_Tipo = t_TipoLocale.IDtloc INNER JOIN t_Sedi ON t_Locali.FK_Sede = t_Sedi.IDsede WHERE IDsede=" + Conversions.ToString(FormSede.ChiavePrimaria) + " ORDER BY CodiceLocale, DescrLocale";
PerseoNET/frmDettSede.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT MIN(Dalle) AS dalle, MAX(Alle) AS Alle FROM t_VincoliOrariEdizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)));
PerseoNET/frmDettSede.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT MIN(Dalle) AS dalle, MAX(Alle) AS Alle FROM t_VincoliOrariEdizione WHERE FK_Edizione=", Variabili.Edizioni[MyProject.Forms.frmCalendarioMulti.IndiceTab].get_Campo((object)0)));
PerseoNET/frmDettSede.cs:						string origineDati = "SELECT IDprenoloc, IDprenolocdate, IDlocale, CodiceLocale, DescrPrenotazione, (CASE WHEN Affitto=1 THEN 'Affitto' ELSE 'Formazione' END) AS Tipo, DataDAL, DataAL, Dalle, Alle, Lun, Mar, Mer, Gio, Ven, Sab, Dom FROM (t_Locali INNER JOIN t_LocaliPrenotazioni ON t_Locali.IDlocale = t_LocaliPrenotazioni.FK_Locale) LEFT JOIN t_LocaliPrenotazioniDate ON t_LocaliPrenotazioni.IDprenoloc = t_LocaliPrenotazioniDate.FK_PrenoLocale ORDER BY CodiceLocale, DataDAL ";
PerseoNET/frmDettSede.cs:						origineDati = "SELECT IDlocale, CodiceLocale FROM t_Locali WHERE Fittizio=0 ";
PerseoNET/frmDettSede.cs:						string origineDati = "SELECT t_SediValutazioneFornitori.IDvalutaforn, IDsede, IDdocente, SiglaSede, AnnoAmm, (Cognome + ' ' + Nome) AS StrDOC, DescrModelloValutaForn, TipoAttivita, OreSvolte, DataCompilazione, Valutatore, Archiviato FROM t_SediValutazioneFornitori INNER JOIN t_ModelliValutazioneFornitori ON t_SediValutazioneFornitori.FK_ModelloQuestionario = t_ModelliValutazioneFornitori.IDmodvalforn INNER JOIN t_Docenti ON t_SediValutazioneFornitori.FK_Docente = t_Docenti.IDdocente INNER JOIN t_Sedi ON t_SediValutazioneFornitori.FK_Sede = t_Sedi.IDsede ";
PerseoNET/frmDettSede.cs:						string origineDati = "SELECT IDvers, StageCertificaConoscenze, StageCertificaCompetenze, StageIndennitaAzienda, StageIndennitaCSF, DescrConvenzioneSingolo, DescrConvenzioneMolti, DescrRimborsoIndennita, DataRec, DataModifica FROM zt_Versione WHERE IDvers=1 ";
PerseoNET/frmDettSede.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDlocale, FK_Tipo, FK_Sede, CodiceLocale, DescrLocale, Posti, LocaleEsterno, LocaleAttivo, Sovrapponibile, INAIL, DataRec, DataModifica FROM t_Locali WHERE IDlocale=", vIDlocale), " "));
PerseoNET/frmDettSede.cs:				origineDati = "SELECT IDtloc, TipoLocale FROM t_TipoLocale WHERE Obsoleto=0 ORDER BY TipoLocale";
PerseoNET/frmDettSede.cs:				string vSQL = "SELECT IDlocale, FK_Tipo, FK_Sede, CodiceLocale FROM t_Locali WHERE CodiceLocale='" + FunzStringa.StringaSQL(txtCodiceLocale.Text) + "' AND FK_Sede=" + Conversions.ToString(FormSede.ChiavePrimaria) + " AND IDlocale<>" + Conversions.ToString(FormLoc.ChiavePrimaria);
PerseoNET/frmDettSede.cs:					string origineDati = "SELECT t_SediValutazioneFornitori.IDvalutaforn, IDsede, IDdocente, SiglaSede, AnnoAmm, (Cognome + ' ' + Nome) AS StrDOC, DescrModelloValutaForn, TipoAttivita, OreSvolte, DataCompilazione, Valutatore, Archiviato FROM t_SediValutazioneFornitori INNER JOIN t_ModelliValutazioneFornitori ON t_SediValutazioneFornitori.FK_ModelloQuestionario = t_ModelliValutazioneFornitori.IDmodvalforn INNER JOIN t_Docenti ON t_SediValutazioneFornitori.FK_Docente = t_Docenti.IDdocente INNER JOIN t_Sedi ON t_SediValutazioneFornitori.FK_Sede = t_Sedi.IDsede WHERE IDsede=" + Conversions.ToString(FormSede.ChiavePrimaria) + " AND AnnoAmm='" + cmbAnnoAmm.Text + "' ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmDettSede.cs:					origineDati = "SELECT t_Docenti.IDdocente, IDsede, (Cognome + ' ' + Nome) AS Docente, SiglaSede, IDincarico, Aula, Secondaria, IndTA, TipoAttivita, (CASE WHEN Secondaria = 0 THEN (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine))/60 FROM t_CalendarioAttivita WHERE FK_Incarico = IDincarico AND DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + ") ELSE (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine))/60 FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE t_CalendarioCodocenza.FK_Incarico = IDincarico AND DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + ") END) AS TotOreFatte FROM t_Sedi INNER JOIN t_PianoServizi ON t_Sedi.IDsede = t_PianoServizi.FK_SedeEdizione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione AND t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE t_Docenti.FK_Tipo=3 AND DataInizioIncarico>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND SedeTest=0 GROUP BY IDdocente, Cognome, Nome, IDsede, SiglaSede, IndTA, TipoAttivita, IDincarico, Aula, Secondaria HAVING IDsede=" + Conversions.ToString(FormSede.ChiavePrimaria) + " ORDER BY SiglaSede, (Cognome + ' ' + Nome) ";
PerseoNET/frmDettSede.cs:					origineDati = "SELECT IDdocente, IDsede, Docente, SiglaSede, IDincarico, Aula, Secondaria, IndTA, TipoAttivita, OreFatte FROM t_IncarichiEdizione ";
PerseoNET/frmDettSede.cs:					origineDati = "SELECT SiglaSede, SUM(OreFatte) AS TotaleOreFatte FROM t_IncarichiEdizione GROUP BY SiglaSede ";
PerseoNET/frmDettSede.cs:					origineDati = "SELECT IDdocente, IDsede, Docente, SiglaSede, Aula, SUM(OreFatte) AS TotaleOreFatte FROM t_IncarichiEdizione GROUP BY IDdocente, IDsede, Docente, SiglaSede, Aula ORDER BY Docente, SUM(OreFatte) DESC ";
PerseoNET/frmDettSede.cs:					origineDati = "SELECT IDdocente, IDsede, Docente, SiglaSede, Aula, OreFatte FROM t_IncarichiEdizione ";
PerseoNET/frmDettSede.cs:					origineDati = "SELECT IDdocente, IDsede, Docente, SiglaSede, Aula, SUM(OreFatte) AS TotaleOreFatte FROM t_IncarichiEdizione GROUP BY IDdocente, IDsede, Docente, SiglaSede, Aula ORDER BY SUM(OreFatte) DESC, Docente ";
PerseoNET/frmDettSede.cs:					origineDati = "SELECT IDdocente, IDsede, Docente, SiglaSede, Aula, OreFatte FROM t_IncarichiEdizione ";
PerseoNET/frmDettSede.cs:					origineDati = "SELECT IDvalutaforn, FK_ModelloQuestionario FROM t_SediValutazioneFornitori WHERE FK_Sede=" + Conversions.ToString(FormSede.ChiavePrimaria) + " AND AnnoAmm='" + cmbAnnoAmm.Text + "' ";
PerseoNET/frmDettSede.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_SediValutazioneFornitoriRisposte(FK_Questionario, FK_Item) SELECT (", clsTblDatiDR.get_Campo((object)"IDvalutaforn")), ") AS FKquest, IDitemvalforn FROM t_ModelliValutazioneFornitoriItem "), "WHERE FK_Modello="), clsTblDatiDR.get_Campo((object)"FK_ModelloQuestionario")), " ORDER BY IndItemVF "));
PerseoNET/frmDettSede.cs:					string origineDati = "SELECT t_Docenti.IDdocente, IDvalutaforn, IDrispostavcp, SiglaSede, AnnoAmm, Cognome, Nome, TipoAttivita, OreSvolte, DescrItem, " + text + "FROM t_Docenti INNER JOIN t_SediValutazioneFornitori ON t_Docenti.IDdocente = t_SediValutazioneFornitori.FK_Docente INNER JOIN t_SediValutazioneFornitoriRisposte ON t_SediValutazioneFornitori.IDvalutaforn = t_SediValutazioneFornitoriRisposte.FK_Questionario INNER JOIN t_Sedi ON t_SediValutazioneFornitori.FK_Sede = t_Sedi.IDsede INNER JOIN t_ModelliValutazioneFornitoriItem ON t_SediValutazioneFornitoriRisposte.FK_Item = t_ModelliValutazioneFornitoriItem.IDitemvalforn WHERE IDsede=" + Conversions.ToString(FormSede.ChiavePrimaria) + " AND AnnoAmm='" + cmbAnnoAmm.Text + "' ORDER BY SiglaSede, Cognome, Nome, IndItemVF ";
PerseoNET/frmDettSede.cs:					string origineDati = "SELECT t_Docenti.IDdocente, IDvalutaforn, IDrispostavcp, SiglaSede, AnnoAmm, Cognome, Nome, TipoAttivita, OreSvolte, DescrItem, ValoreOpzione FROM t_Docenti INNER JOIN t_SediValutazioneFornitori ON t_Docenti.IDdocente = t_SediValutazioneFornitori.FK_Docente INNER JOIN t_SediValutazioneFornitoriRisposte ON t_SediValutazioneFornitori.IDvalutaforn = t_SediValutazioneFornitoriRisposte.FK_Questionario INNER JOIN t_Sedi ON t_SediValutazioneFornitori.FK_Sede = t_Sedi.IDsede INNER JOIN t_ModelliValutazioneFornitoriItem ON t_SediValutazioneFornitoriRisposte.FK_Item = t_ModelliValutazioneFornitoriItem.IDitemvalforn WHERE IDsede=" + Conversions.ToString(FormSede.ChiavePrimaria) + " AND AnnoAmm='" + cmbAnnoAmm.Text + "' ORDER BY SiglaSede, Cognome, Nome, IndItemVF ";
PerseoNET/frmDettSede.cs:					origineDati = "SELECT t_Docenti.IDdocente, IDvalutaforn, IDrispostavcp, SiglaSede, AnnoAmm, Cognome, Nome, TipoAttivita, OreSvolte, DescrItem, ValoreOpzione FROM t_Docenti ";
PerseoNET/frmDettSede.cs:					string origineDati = "SELECT t_SediValutazioneFornitori.IDvalutaforn, IDsede, IDdocente, SiglaSede, AnnoAmm, (Cognome + ' ' + Nome) AS StrDOC, DescrModelloValutaForn, TipoAttivita, OreSvolte, DataCompilazione, Valutatore, Archiviato, (NULL) AS Valutazione, (0) AS Opz1, (0) AS Opz2, (0) AS Opz3, (0) AS Opz4, (0) AS Opz5 FROM t_SediValutazioneFornitori INNER JOIN t_ModelliValutazioneFornitori ON t_SediValutazioneFornitori.FK_ModelloQuestionario = t_ModelliValutazioneFornitori.IDmodvalforn INNER JOIN t_Docenti ON t_SediValutazioneFornitori.FK_Docente = t_Docenti.IDdocente INNER JOIN t_Sedi ON t_SediValutazioneFornitori.FK_Sede = t_Sedi.IDsede WHERE IDsede=" + Conversions.ToString(FormSede.ChiavePrimaria) + " AND AnnoAmm='" + cmbAnnoAmm.Text + "' AND DataCompilazione IS NOT NULL ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmDettSede.cs:					origineDati = "SELECT t_Docenti.IDdocente, IDvalutaforn, IDrispostavcp, SiglaSede, AnnoAmm, Cognome, Nome, TipoAttivita, OreSvolte, DescrItem, ValoreOpzione FROM t_Docenti INNER JOIN t_SediValutazioneFornitori ON t_Docenti.IDdocente = t_SediValutazioneFornitori.FK_Docente INNER JOIN t_SediValutazioneFornitoriRisposte ON t_SediValutazioneFornitori.IDvalutaforn = t_SediValutazioneFornitoriRisposte.FK_Questionario INNER JOIN t_Sedi ON t_SediValutazioneFornitori.FK_Sede = t_Sedi.IDsede INNER JOIN t_ModelliValutazioneFornitoriItem ON t_SediValutazioneFornitoriRisposte.FK_Item = t_ModelliValutazioneFornitoriItem.IDitemvalforn WHERE IDsede=" + Conversions.ToString(FormSede.ChiavePrimaria) + " AND AnnoAmm='" + cmbAnnoAmm.Text + "' ORDER BY SiglaSede, Cognome, Nome, IndItemVF ";
PerseoNET/frmDettSede.cs:				string origineDati = "SELECT IDassconv, FK_Sede, TitolareAssicurazione, DescrAssicurazione, PolizzaAss, PolizzaAttiva, FK_TipoFormativo, DataRec, DataModifica FROM t_ConvenzioniStagePolizze WHERE IDassconv=" + Conversions.ToString(vID);
PerseoNET/frmDettSede.cs:				origineDati = "SELECT IDtformaint, TipoFormativoInterno FROM t_TipoFormativoInterno WHERE Obsoleto=False ORDER BY TipoFormativoInterno";
PerseoNET/frmDettSede.cs:				string origineDati = "SELECT IDdestconv, FK_Sede, PosizioneDest, DescrDestinatario, IndirizzoDestConv, ComuneDestConv, CAPDestConv, ProvDestConv, DestinatarioAttivo, DataRec, DataModifica FROM t_ConvenzioniElencoDestinatari WHERE IDdestconv=" + Conversions.ToString(vID);
PerseoNET/frmDettSede.cs:				string origineDati = "SELECT IDprenoloc, FK_Locale, DescrPrenotazione, Formazione, Affitto, DataRec, DataModifica, Bloccato FROM t_LocaliPrenotazioni WHERE IDprenoloc=" + Conversions.ToString(vID);
PerseoNET/frmDettSede.cs:				origineDati = "SELECT IDlocale, CodiceLocale FROM t_Locali WHERE Fittizio=0 ";
PerseoNET/frmDettSede.cs:				string origineDati = "SELECT IDprenolocdate, FK_PrenoLocale, DataDAL, DataAL, Dalle, Alle, Lun, Mar, Mer, Gio, Ven, Sab, Dom, DataRec, DataModifica FROM t_LocaliPrenotazioniDate WHERE IDprenolocdate=" + Conversions.ToString(vID);
PerseoNET/frmDettSede.cs:					string origineDati = "SELECT IDlocale, CodiceLocale, Dalle, Alle" + text3 + " FROM t_Locali ";
PerseoNET/frmDettSede.cs:					origineDati = "SELECT IDlocale, CodiceLocale FROM t_Locali WHERE FK_Sede=" + Conversions.ToString(FormSede.ChiavePrimaria) + " AND LocaleAttivo=1 ORDER BY CodiceLocale ";
PerseoNET/frmDettSede.cs:					origineDati = "SELECT (FK_LocaleAssegnato) AS IDlocale, CodiceEdizione, Cognome, Nome, DataAttivita, OraInizio, OraFine FROM t_LocaliEdizioni INNER JOIN t_CalendarioAttivita ON t_LocaliEdizioni.IDloced = t_CalendarioAttivita.FK_Locale INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE FK_LocaleAssegnato " + text4 + " AND DataAttivita>=" + FunzStringa.StrDataSQL(txtStampaDal.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtStampaAl.Text, FlagSqlServer: true) + " ORDER BY FK_LocaleAssegnato, DataAttivita, OraInizio ";
PerseoNET/frmDettSede.cs:				string origineDati = "SELECT FK_Sede, MAX(DataRichiestaFine) AS MaxDataRichiesta FROM t_ProgettiPagamenti WHERE Anticipo=0 GROUP BY FK_Sede HAVING FK_Sede=" + Conversions.ToString(FormSede.ChiavePrimaria) + " ";
PerseoNET/frmDettInteresseLavoro.cs:				string str = "SELECT IDilav, FK_Studente, FK_Azienda, DescrMansione, NoteInteresse, FK_SettoreProduttivo, FK_TipoContratto, PrioritaLav, DispStage, Formazione, Pendolare, MezzoProprio, FK_Distanza, NumeroAssunzioni, Intervistatore, AttivoLav, DataRec, DataModifica FROM t_InteressiLavorativi ";
PerseoNET/frmDettInteresseLavoro.cs:				str = "SELECT IDtsetprod, TipoSettoreProd FROM t_TipoSettoreProduttivo WHERE Obsoleto=0 ORDER BY OrdSett, OrdArea";
PerseoNET/frmDettInteresseLavoro.cs:				str = "SELECT IDcontr, TipoContratto FROM t_TipoContratto WHERE Obsoleto=0 ORDER BY TipoContratto";
PerseoNET/frmDettInteresseLavoro.cs:				str = "SELECT IDtdist, TipoDistanza FROM t_TipoDistanzaLav WHERE Obsoleto=0 ORDER BY TipoDistanza";
PerseoNET/frmStruttureDidattichePredefinite.cs:				string origineDati = "SELECT t_Progetti.IDprogetto, DescrProgetto, CodiceProgetto, DataAvvioProg, DataFineProg FROM wt_StruttureModuli INNER JOIN t_Progetti ON wt_StruttureModuli.FK_Progetto = t_Progetti.IDprogetto GROUP BY IDprogetto, DescrProgetto, CodiceProgetto, DataAvvioProg, DataFineProg ORDER BY DataAvvioProg DESC, CodiceProgetto ";
PerseoNET/frmStruttureDidattichePredefinite.cs:				origineDati = "SELECT wt_StruttureModuli.IDstruttura, FK_TipoAreaModulo, IndAreaModulo, DescrAreaModulo, TipoModulo, OreAreaModulo, (SELECT SUM(OreDisciplina) FROM wt_StruttureModuliDiscipline WHERE IDstruttura = FK_ModuloStruttura) AS TotaleOreDisc FROM wt_StruttureModuli INNER JOIN t_TipoModulo ON wt_StruttureModuli.FK_TipoAreaModulo = t_TipoModulo.IDtmodulo ORDER BY IndAreaModulo, DescrAreaModulo ";
PerseoNET/frmStruttureDidattichePredefinite.cs:				origineDati = "SELECT wt_StruttureModuliDiscipline.IDstruttdisc, FK_ModuloStruttura, IndDisciplina, DescrDisciplina, TipoArgomento, OreDisciplina, TolleranzaOreDisciplina FROM wt_StruttureModuliDiscipline INNER JOIN t_TipoArgomento ON wt_StruttureModuliDiscipline.FK_TipoDisciplina = t_TipoArgomento.IDtarg ";
PerseoNET/frmStruttureDidattichePredefinite.cs:			string origineDati = "SELECT IDstruttura, FK_TipoAreaModulo, FK_Progetto, IndAreaModulo, DescrAreaModulo, OreAreaModulo, StrTipoAttivita, TolleranzaOreModulo, DataRec, DataModifica, Bloccato FROM wt_StruttureModuli WHERE IDstruttura=" + Conversions.ToString(intModulo);
PerseoNET/frmStruttureDidattichePredefinite.cs:			origineDati = "SELECT IDtmodulo, TipoModulo FROM t_TipoModulo WHERE Obsoleto=False ORDER BY IndTipoMod ";
PerseoNET/frmStruttureDidattichePredefinite.cs:			origineDati = "SELECT IDprogetto, CodiceProgetto FROM t_Progetti t_Progetti INNER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto WHERE DataFineProg>=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " AND StrutturaPredefinita=1 ORDER BY FK_TipoProgetto, CodiceProgetto";
PerseoNET/frmStruttureDidattichePredefinite.cs:				string origineDati = "SELECT IDstruttdisc, FK_ModuloStruttura, FK_TipoDisciplina, DescrDisciplina, IndDisciplina, OreDisciplina, TolleranzaOreDisciplina, DataRec, DataModifica, Bloccato FROM wt_StruttureModuliDiscipline WHERE IDstruttdisc=" + Conversions.ToString(intArg);
PerseoNET/frmStruttureDidattichePredefinite.cs:				origineDati = "SELECT IDtarg, TipoArgomento FROM t_TipoArgomento WHERE Obsoleto=False ORDER BY IndTipoArg ";
PerseoNET/frmStruttureDidattichePredefinite.cs:					string str = "SELECT IDstruttdisc, DescrDisciplina FROM wt_StruttureModuli INNER JOIN wt_StruttureModuliDiscipline ON wt_StruttureModuli.IDstruttura = wt_StruttureModuliDiscipline.FK_ModuloStruttura ";
PerseoNET/frmStruttureDidattichePredefinite.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogetto, DescrzioneProgetto, CodiceProgetto, DataAvvioProg, DataFineProg, IndAreaModulo, DescrAreaModulo, TipoModulo, OreAreaModulo, TolleranzaOreModulo, IndDisciplina, DescrDisciplina, TipoArgomento, OreDisciplina, TolleranzaOreDisciplina  FROM t_TipoArgomento RIGHT OUTER JOIN wt_StruttureModuliDiscipline ON t_TipoArgomento.IDtarg = wt_StruttureModuliDiscipline.FK_TipoDisciplina RIGHT OUTER JOIN t_Progetti INNER JOIN wt_StruttureModuli ON t_Progetti.IDprogetto = wt_StruttureModuli.FK_Progetto INNER JOIN t_TipoModulo ON wt_StruttureModuli.FK_TipoAreaModulo = t_TipoModulo.IDtmodulo ON wt_StruttureModuliDiscipline.FK_ModuloStruttura = wt_StruttureModuli.IDstruttura WHERE IDprogetto=", tblProgetti.get_Campo((object)0, vFlagUpdateDB: false)), " "), "ORDER BY IndAreaModulo, DescrAreaModulo, IndDisciplina, DescrDisciplina "));
PerseoNET/frmPannelloGeneraAssegni.cs:				string vSQL = "SELECT DescrCausaleBonifico FROM zt_Versione";
PerseoNET/frmPannelloGeneraAssegni.cs:					vSQL = "SELECT MatricolaTracciatoAssegni, ProgettoCodiceCIG, ProgettoCodiceCUP, DataPagamento, MAX(DataPagatoFine) AS DataCompetenzeMAX, (1) AS Tipo FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc WHERE GenerareAssegno=1 AND StandByAssegno=0 AND TipoCococo=0 GROUP BY MatricolaTracciatoAssegni, ProgettoCodiceCIG, ProgettoCodiceCUP, DataPagamento HAVING ProgettoCodiceCIG IS NULL AND ProgettoCodiceCUP IS NULL ORDER BY MAX(DataPagatoFine) DESC, MatricolaTracciatoAssegni ";
PerseoNET/frmPannelloGeneraAssegni.cs:						vSQL = "SELECT MatricolaTracciatoAssegni, ProgettoCodiceCIG, ProgettoCodiceCUP, DataPagamento, MAX(DataPagatoFine) AS DataCompetenzeMAX, (1) AS Tipo FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc WHERE GenerareAssegno=1 AND StandByAssegno=0 AND TipoCococo=0 GROUP BY MatricolaTracciatoAssegni, ProgettoCodiceCIG, ProgettoCodiceCUP, DataPagamento HAVING ProgettoCodiceCIG IS NOT NULL OR ProgettoCodiceCUP IS NOT NULL ORDER BY MAX(DataPagatoFine) DESC, MatricolaTracciatoAssegni ";
PerseoNET/frmPannelloGeneraAssegni.cs:							vSQL = "SELECT MatricolaTracciatoAssegni, ProgettoCodiceCIG, ProgettoCodiceCUP, DataPagamento, MAX(DataPagatoFine) AS DataCompetenzeMAX, (1) AS Tipo FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc WHERE GenerareAssegno=1 AND StandByAssegno=0 AND TipoCococo=1 GROUP BY MatricolaTracciatoAssegni, ProgettoCodiceCIG, ProgettoCodiceCUP, DataPagamento ORDER BY MAX(DataPagatoFine) DESC, MatricolaTracciatoAssegni ";
PerseoNET/frmPannelloGeneraAssegni.cs:				vSQL = "SELECT Testo_1, Testo_2, Testo_3, DataOra_1, DataOra_2, Ind FROM t_StampaTbl_1 ";
PerseoNET/frmPannelloGeneraAssegni.cs:					vSQL = "SELECT MatricolaTracciatoAssegni, ProgettoCodiceCIG, ProgettoCodiceCUP, DataPagamento, MAX(DataParcella) AS DataCompetenzeMAX, (2) AS Tipo FROM t_DocentiParcelle INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc WHERE GenerareAssegno=1 AND TipoCococo=0 GROUP BY MatricolaTracciatoAssegni, ProgettoCodiceCIG, ProgettoCodiceCUP, DataPagamento HAVING ProgettoCodiceCIG IS NULL AND ProgettoCodiceCUP IS NULL ORDER BY MAX(DataParcella) DESC, MatricolaTracciatoAssegni ";
PerseoNET/frmPannelloGeneraAssegni.cs:						vSQL = "SELECT MatricolaTracciatoAssegni, ProgettoCodiceCIG, ProgettoCodiceCUP, DataPagamento, MAX(DataParcella) AS DataCompetenzeMAX, (2) AS Tipo FROM t_DocentiParcelle INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc WHERE GenerareAssegno=1 AND TipoCococo=0 GROUP BY MatricolaTracciatoAssegni, ProgettoCodiceCIG, ProgettoCodiceCUP, DataPagamento HAVING ProgettoCodiceCIG IS NOT NULL OR ProgettoCodiceCUP IS NOT NULL ORDER BY MAX(DataParcella) DESC, MatricolaTracciatoAssegni ";
PerseoNET/frmPannelloGeneraAssegni.cs:							vSQL = "SELECT MatricolaTracciatoAssegni, ProgettoCodiceCIG, ProgettoCodiceCUP, DataPagamento, MAX(DataParcella) AS DataCompetenzeMAX, (2) AS Tipo FROM t_DocentiParcelle INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc WHERE GenerareAssegno=1 AND TipoCococo=1 GROUP BY MatricolaTracciatoAssegni, ProgettoCodiceCIG, ProgettoCodiceCUP, DataPagamento ORDER BY MAX(DataParcella) DESC, MatricolaTracciatoAssegni ";
PerseoNET/frmPannelloGeneraAssegni.cs:					vSQL = "SELECT (Testo_1) AS MatricolaTracciatoAssegni, (Testo_2) AS ProgettoCodiceCIG, (Testo_3) AS ProgettoCodiceCUP, (DataOra_1) AS DataPagamento, (DataOra_2) AS DataCompetenzeMAX, (Ind) AS Tipo FROM t_StampaTbl_1 WHERE Testo_2 IS NULL ORDER BY Ind, DataOra_2 DESC ";
PerseoNET/frmPannelloGeneraAssegni.cs:						vSQL = "SELECT (Testo_1) AS MatricolaTracciatoAssegni, (Testo_2) AS ProgettoCodiceCIG, (Testo_3) AS ProgettoCodiceCUP, (DataOra_1) AS DataPagamento, (DataOra_2) AS DataCompetenzeMAX, (Ind) AS Tipo FROM t_StampaTbl_1 ORDER BY Ind, DataOra_2 DESC ";
PerseoNET/frmPannelloGeneraAssegni.cs:						vSQL = "SELECT (Testo_1) AS MatricolaTracciatoAssegni, (Testo_2) AS ProgettoCodiceCIG, (Testo_3) AS ProgettoCodiceCUP, (DataOra_1) AS DataPagamento, (DataOra_2) AS DataCompetenzeMAX, (Ind) AS Tipo FROM t_StampaTbl_1 WHERE Testo_2 IS NULL ORDER BY Ind, DataOra_2 DESC ";
PerseoNET/frmPannelloGeneraAssegni.cs:				vSQL = "SELECT (Testo_2) AS ProgettoCodiceCIG, (Testo_3) AS ProgettoCodiceCUP FROM t_StampaTbl_1 GROUP BY Testo_2, Testo_3 HAVING Testo_2 IS NOT NULL OR Testo_3 IS NOT NULL ORDER BY Testo_2, Testo_3 ";
PerseoNET/frmPannelloGeneraAssegni.cs:				vSQL = "SELECT MatricolaTracciatoAssegni, DataPagamento, MAX(DataPagatoFine) AS DataCompetenzeMAX, GenerareAssegno, StandByAssegno FROM t_ProgettiPagamentiCompensiOneri GROUP BY MatricolaTracciatoAssegni, ProgettoCodiceCIG, ProgettoCodiceCUP, DataPagamento, GenerareAssegno, StandByAssegno HAVING StandByAssegno=1 ORDER BY MAX(DataPagatoFine) DESC, MatricolaTracciatoAssegni ";
PerseoNET/frmPannelloGeneraAssegni.cs:					string origineDati = "SELECT (1) AS Tipo, t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS StrDOC, SUM(sngNettoInc) AS CompensoNetto, Assegno FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente " + str + " AND FK_Azienda IS NULL GROUP BY Cognome, Nome, t_Docenti.IDdocente, Assegno " + text + "ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmPannelloGeneraAssegni.cs:					origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT Tipo, IDdocente, DescrDestinatario, CompensoNetto, Assegno FROM zt_AssegniBonifici ");
PerseoNET/frmPannelloGeneraAssegni.cs:					origineDati = (clsTblDatiDR.OrigineDati = "SELECT (1) AS Tipo, t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS StrDOC, SUM(sngNettoInc) AS CompensoNetto, Assegno FROM t_DocentiParcelle INNER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente " + str + "GROUP BY Cognome, Nome, t_Docenti.IDdocente, Assegno " + text + "ORDER BY (Cognome + ' ' + Nome) ");
PerseoNET/frmPannelloGeneraAssegni.cs:					string origineDati = "SELECT (2) AS Tipo, IDazienda, DescrAzienda, SUM(sngNettoInc) AS CompensoNetto, (SELECT Assegno FROM t_SediAziende WHERE FK_Azienda=IDazienda AND FK_TipoSede=1 AND t_SediAziende.Attiva=1) AS Assegno FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda " + str + "GROUP BY DescrAzienda, IDazienda " + text + "ORDER BY DescrAzienda ";
PerseoNET/frmPannelloGeneraAssegni.cs:					origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT Tipo, IDazienda, DescrDestinatario, CompensoNetto, Assegno FROM zt_AssegniBonifici ");
PerseoNET/frmPannelloGeneraAssegni.cs:					origineDati = (clsTblDatiDR.OrigineDati = "SELECT (2) AS Tipo, IDazienda, DescrAzienda, SUM(sngNettoInc) AS CompensoNetto, (SELECT Assegno FROM t_SediAziende WHERE FK_Azienda=IDazienda AND FK_TipoSede=1 AND t_SediAziende.Attiva=1) AS Assegno FROM t_DocentiParcelle INNER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda " + str + "GROUP BY DescrAzienda, IDazienda " + text + "ORDER BY DescrAzienda ");
PerseoNET/frmPannelloGeneraAssegni.cs:					object value = "SELECT (0) AS IDcompensi, FK_SedeEdizione, SiglaSede, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE GenerareAssegno=1 " + FiltroCIG() + "GROUP BY SiglaSede, FK_SedeEdizione ORDER BY SiglaSede ";
PerseoNET/frmPannelloGeneraAssegni.cs:					value = "SELECT (1) AS IDcompensi, (IDsede) AS FK_SedeEdizione, SiglaSede, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(CostiAggiuntivi) AS CostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev FROM t_DocentiParcelle INNER JOIN t_Sedi ON t_DocentiParcelle.FK_Sede = t_Sedi.IDsede WHERE GenerareAssegno=1 " + FiltroCIG() + "GROUP BY IDsede, SiglaSede ORDER BY SiglaSede ";
PerseoNET/frmPannelloGeneraAssegni.cs:					string text = "(SELECT (CASE WHEN Assegno = 1 THEN 'A' ELSE 'B' END) FROM t_SediAziende WHERE FK_TipoSede=1 AND Attiva=1 AND FK_Azienda=t_ProgettiPagamentiCompensiOneri.FK_Azienda)";
PerseoNET/frmPannelloGeneraAssegni.cs:					string origineDatiPrestazioni = "SELECT (0) AS IDcompensi, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS StrDOC, DescrParFiscale, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev, (CASE WHEN FK_Azienda IS NULL THEN (CASE WHEN t_Docenti.Assegno=0 THEN 'B' ELSE 'A' END) ELSE " + text + " END) AS ModoPaga FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE GenerareAssegno=1 " + FiltroCIG() + "GROUP BY Cognome, Nome, FK_Azienda, DescrParFiscale, DescrAzienda, t_Docenti.Assegno ORDER BY (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END), DescrParFiscale ";
PerseoNET/frmPannelloGeneraAssegni.cs:					text = "(SELECT (CASE WHEN Assegno = 1 THEN 'A' ELSE 'B' END) FROM t_SediAziende WHERE FK_TipoSede=1 AND Attiva=1 AND FK_Azienda=t_DocentiParcelle.FK_Azienda)";
PerseoNET/frmPannelloGeneraAssegni.cs:					origineDatiPrestazioni = "SELECT (1) AS IDcompensi, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS StrDOC, DescrParFiscale, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(CostiAggiuntivi) AS CostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev, (CASE WHEN FK_Azienda IS NULL THEN (CASE WHEN t_Docenti.Assegno=0 THEN 'B' ELSE 'A' END) ELSE " + text + " END) AS ModoPaga FROM t_DocentiParcelle INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente WHERE GenerareAssegno=1 " + FiltroCIG() + "GROUP BY Cognome, Nome, FK_Azienda, DescrParFiscale, DescrAzienda, t_Docenti.Assegno ORDER BY (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END), DescrParFiscale ";
PerseoNET/frmPannelloGeneraAssegni.cs:					string text = "(SELECT (CASE WHEN Assegno = 1 THEN 'A' ELSE 'B' END) FROM t_SediAziende WHERE FK_TipoSede=1 AND Attiva=1 AND FK_Azienda=t_ProgettiPagamentiCompensiOneri.FK_Azienda)";
PerseoNET/frmPannelloGeneraAssegni.cs:					string origineDatiPrestazioni = "SELECT (1) AS IDcompensi, SiglaSede, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS StrDOC, DescrParFiscale, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev, (CASE WHEN FK_Azienda IS NULL THEN (CASE WHEN t_Docenti.Assegno=0 THEN 'B' ELSE 'A' END) ELSE " + text + " END) AS ModoPaga FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE GenerareAssegno=1 " + FiltroCIG() + "GROUP BY SiglaSede, Cognome, Nome, DescrParFiscale, DescrAzienda, FK_Azienda, t_Docenti.Assegno ORDER BY SiglaSede, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END), DescrParFiscale ";
PerseoNET/frmPannelloGeneraAssegni.cs:					text = "(SELECT (CASE WHEN Assegno = 1 THEN 'A' ELSE 'B' END) FROM t_SediAziende WHERE FK_TipoSede=1 AND Attiva=1 AND FK_Azienda=t_DocentiParcelle.FK_Azienda)";
PerseoNET/frmPannelloGeneraAssegni.cs:					origineDatiPrestazioni = "SELECT (1) AS IDcompensi, SiglaSede, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS StrDOC, DescrParFiscale, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(CostiAggiuntivi) AS CostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev, (CASE WHEN FK_Azienda IS NULL THEN (CASE WHEN t_Docenti.Assegno=0 THEN 'B' ELSE 'A' END) ELSE " + text + " END) AS ModoPaga FROM t_DocentiParcelle INNER JOIN t_Sedi ON t_DocentiParcelle.FK_Sede = t_Sedi.IDsede INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente WHERE GenerareAssegno=1 " + FiltroCIG() + "GROUP BY Cognome, Nome, FK_Azienda, DescrParFiscale, DescrAzienda, SiglaSede, t_Docenti.Assegno ORDER BY (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END), DescrParFiscale ";
PerseoNET/frmPannelloGeneraAssegni.cs:					string origineDati = "SELECT t_Docenti.IDdocente, t_Aziende.IDazienda, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Fornitore, MIN(DataPagatoInizio) AS DataPagatoInizio, MAX(DataPagatoFine) AS DataPagatoFine, SUM(sngNettoInc) AS ImportoAssegno, DataPagamento, ProgettoCodiceCIG, ProgettoCodiceCUP, MatricolaTracciatoAssegni FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc inner join t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda ";
PerseoNET/frmPannelloGeneraAssegni.cs:				object value = "SELECT SiglaSede FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE GenerareAssegno=1 " + FiltroCIG() + "GROUP BY SiglaSede UNION SELECT SiglaSede FROM t_DocentiParcelle INNER JOIN t_Sedi ON t_DocentiParcelle.FK_Sede = t_Sedi.IDsede WHERE GenerareAssegno=1 " + FiltroCIG() + "GROUP BY SiglaSede ORDER BY SiglaSede ";
PerseoNET/frmPannelloGeneraAssegni.cs:				value = "SELECT DataPagamento FROM t_ProgettiPagamentiCompensiOneri WHERE GenerareAssegno=1 " + FiltroCIG() + "GROUP BY DataPagamento UNION SELECT DataPagamento FROM t_DocentiParcelle WHERE GenerareAssegno=1 " + FiltroCIG() + "GROUP BY DataPagamento ORDER BY DataPagamento ";
PerseoNET/frmPannelloGeneraAssegni.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (Testo_1) AS MatricolaTracciatoAssegni, (Testo_2) AS ProgettoCodiceCIG, (Testo_3) AS ProgettoCodiceCUP, (DataOra_1) AS DataPagamento, (DataOra_2) AS DataCompetenzeMAX, (Ind) AS Tipo FROM t_StampaTbl_1 WHERE Testo_2='", tblCIG.get_Campo((object)"ProgettoCodiceCIG", vFlagUpdateDB: false)), "' AND Testo_3 IS NULL ORDER BY Ind, DataOra_2 DESC "));
PerseoNET/frmPannelloGeneraAssegni.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (Testo_1) AS MatricolaTracciatoAssegni, (Testo_2) AS ProgettoCodiceCIG, (Testo_3) AS ProgettoCodiceCUP, (DataOra_1) AS DataPagamento, (DataOra_2) AS DataCompetenzeMAX, (Ind) AS Tipo FROM t_StampaTbl_1 WHERE Testo_3='", tblCIG.get_Campo((object)"ProgettoCodiceCUP", vFlagUpdateDB: false)), "' AND Testo_2 IS NULL ORDER BY Ind, DataOra_2 DESC "));
PerseoNET/frmPannelloGeneraAssegni.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (Testo_1) AS MatricolaTracciatoAssegni, (Testo_2) AS ProgettoCodiceCIG, (Testo_3) AS ProgettoCodiceCUP, (DataOra_1) AS DataPagamento, (DataOra_2) AS DataCompetenzeMAX, (Ind) AS Tipo FROM t_StampaTbl_1 WHERE Testo_2='", tblCIG.get_Campo((object)"ProgettoCodiceCIG", vFlagUpdateDB: false)), "' AND Testo_3='"), tblCIG.get_Campo((object)"ProgettoCodiceCUP", vFlagUpdateDB: false)), "' "), "ORDER BY Ind, DataOra_2 DESC "));
PerseoNET/frmPannelloGeneraAssegni.cs:						string origineDati = ((!opPrestazioni.Checked) ? ("SELECT  t_Docenti.IDdocente, (FK_Azienda) AS IDazienda, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) END) AS Fornitore, MIN(DataParcella) AS DataPagatoInizio, MAX(DataParcella) AS DataPagatoFine, SUM(sngNettoInc) AS ImportoAssegno, DataPagamento, ProgettoCodiceCIG, ProgettoCodiceCUP, MatricolaTracciatoAssegni FROM t_DocentiParcelle INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente WHERE CodiceTributo<>'1004' AND GenerareAssegno=0 " + text + "GROUP BY IDdocente, FK_Azienda, Cognome, Nome, DataPagamento, ID_Assegni, DataParcella, ProgettoCodiceCIG, ProgettoCodiceCUP, MatricolaTracciatoAssegni HAVING DataPagamento=" + FunzStringa.StrDataSQL(txtDataPagamento.Text, FlagSqlServer: true) + " " + text + "AND (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) END)='" + FunzStringa.StringaSQL(txtCerca.Text) + "' ") : ("SELECT  t_Docenti.IDdocente, (FK_Azienda) AS IDazienda, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) END) AS Fornitore, MIN(DataPagatoInizio) AS DataPagatoInizio, MAX(DataPagatoFine) AS DataPagatoFine, SUM(sngNettoInc) AS ImportoAssegno, DataPagamento, ProgettoCodiceCIG, ProgettoCodiceCUP, MatricolaTracciatoAssegni FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente WHERE CodiceTributo<>'1004' AND GenerareAssegno=0 GROUP BY t_Docenti.IDdocente, FK_Azienda, Cognome, Nome, DataPagamento, ID_Assegni, ProgettoCodiceCIG, ProgettoCodiceCUP, MatricolaTracciatoAssegni HAVING DataPagamento=" + FunzStringa.StrDataSQL(txtDataPagamento.Text, FlagSqlServer: true) + " " + text + "AND (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) END)='" + FunzStringa.StringaSQL(txtCerca.Text) + "' "));
PerseoNET/frmPannelloGeneraAssegni.cs:									vSQL = "SELECT DescrCausaleBonifico FROM zt_Versione";
PerseoNET/frmPannelloGeneraAssegni.cs:									vSQL = "SELECT MatricolaTracciatoAssegni, DescrAvviso, DataGenerazione FROM t_AvvisiUtentiPerseo ";
PerseoNET/frmPannelloGeneraAssegni.cs:										vSQL = "SELECT t_AvvisiUtentiPerseo.IDavviso, DescrAvviso, DataGenerazione FROM t_AvvisiUtentiPerseo WHERE DescrAvviso LIKE '%<" + FunzStringa.StringaSQL(Conversions.ToString(tblPaga.get_Campo((object)"MatricolaTracciatoAssegni", vFlagUpdateDB: false))) + ">%' ";
PerseoNET/frmPannelloGeneraAssegni.cs:										vSQL = "SELECT (1) AS Tipo, t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS StrDOC, SUM(sngNettoInc) AS CompensoNetto, Assegno FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente " + str + "GROUP BY Cognome, Nome, t_Docenti.IDdocente, Assegno ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmPannelloGeneraAssegni.cs:										vSQL = "SELECT Tipo, IDdocente, DescrDestinatario, CompensoNetto, Assegno FROM zt_AssegniBonifici ";
PerseoNET/frmPannelloGeneraAssegni.cs:										vSQL = "SELECT (1) AS Tipo, t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS StrDOC, SUM(sngNettoInc) AS CompensoNetto, Assegno FROM t_DocentiParcelle INNER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente " + str + "GROUP BY Cognome, Nome, t_Docenti.IDdocente, Assegno ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmPannelloGeneraAssegni.cs:										vSQL = "SELECT (2) AS Tipo, IDazienda, DescrAzienda, SUM(sngNettoInc) AS CompensoNetto, (SELECT Assegno FROM t_SediAziende WHERE FK_Azienda=IDazienda AND FK_TipoSede=1 AND t_SediAziende.Attiva=1) AS Assegno FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda " + str2 + "GROUP BY DescrAzienda, IDazienda ORDER BY DescrAzienda ";
PerseoNET/frmPannelloGeneraAssegni.cs:										vSQL = "SELECT Tipo, IDazienda, DescrDestinatario, CompensoNetto, Assegno FROM zt_AssegniBonifici ";
PerseoNET/frmPannelloGeneraAssegni.cs:										vSQL = "SELECT (2) AS Tipo, IDazienda, DescrAzienda, SUM(sngNettoInc) AS CompensoNetto, (SELECT Assegno FROM t_SediAziende WHERE FK_Azienda=IDazienda AND FK_TipoSede=1 AND t_SediAziende.Attiva=1) AS Assegno FROM t_DocentiParcelle INNER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda " + str2 + "GROUP BY DescrAzienda, IDazienda ORDER BY DescrAzienda ";
PerseoNET/frmPannelloGeneraAssegni.cs:						vSQL = "SELECT SUM(CompensoNetto) AS TotaleCompensi FROM zt_AssegniBonifici WHERE Assegno=False";
PerseoNET/frmPannelloGeneraAssegni.cs:						vSQL = "SELECT IDdocente, IDazienda, CodiceDisposizione, Fornitore, IBAN, Assegno, Importo FROM t_Fornitori ";
PerseoNET/frmPannelloGeneraAssegni.cs:						vSQL = "SELECT Tipo, IDdocente, IDazienda, DescrDestinatario, SUM(CompensoNetto) AS CompensoNetto FROM zt_AssegniBonifici WHERE Assegno=False GROUP BY Tipo, IDdocente, IDazienda, DescrDestinatario ORDER BY DescrDestinatario ";
PerseoNET/frmPannelloGeneraAssegni.cs:						vSQL = "SELECT IDdocente, Cognome, Nome, CodFiscale, CodiceIBAN, IndirResidenza, CAPresidenza, ComResidenza, ProvResidenza, IndirAbitazione, CAPabitazione, ComAbitazione, ProvAbitazione, Assegno FROM t_Docenti WHERE IDdocente " + text + " ";
PerseoNET/frmPannelloGeneraAssegni.cs:					vSQL = "SELECT SUM(CompensoNetto) AS TotaleCompensi FROM zt_AssegniBonifici WHERE Assegno=True";
PerseoNET/frmPannelloGeneraAssegni.cs:					vSQL = "SELECT IDazienda, FK_TipoSede, DescrAzienda, (CASE WHEN PIVA IS NOT NULL THEN PIVA ELSE CodFiscale END) AS PIVA_CF, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, CodiceIBAN, Assegno FROM t_Aziende INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda WHERE FK_TipoSede=1 AND t_SediAziende.Attiva=1 AND IDazienda " + text;
PerseoNET/frmPannelloGeneraAssegni.cs:					vSQL = "SELECT Tipo, IDdocente, IDazienda, DescrDestinatario, SUM(CompensoNetto) AS CompensoNetto FROM zt_AssegniBonifici WHERE Assegno=True GROUP BY Tipo, IDdocente, IDazienda, DescrDestinatario ORDER BY DescrDestinatario ";
PerseoNET/frmPannelloGeneraAssegni.cs:					vSQL = "SELECT IDdocente, Cognome, Nome, CodFiscale, CodiceIBAN, IndirResidenza, CAPresidenza, ComResidenza, ProvResidenza, IndirAbitazione, CAPabitazione, ComAbitazione, ProvAbitazione, Assegno, Importo FROM t_Docenti WHERE IDdocente " + text + " ";
PerseoNET/frmPannelloGeneraAssegni.cs:				string vSQL = "SELECT SUM(CompensoNetto) AS TotaleCompensi FROM zt_AssegniBonifici WHERE Assegno=False";
PerseoNET/frmPannelloGeneraAssegni.cs:				string vSQL = "SELECT SUM(CompensoNetto) AS TotaleCompensi FROM zt_AssegniBonifici WHERE Assegno=True";
PerseoNET/frmPannelloGeneraAssegni.cs:				string origineDati = ((!opPrestazioni.Checked) ? ("SELECT DataPagamento FROM t_DocentiParcelle WHERE GenerareAssegno=0GROUP BY DataPagamento HAVING DataPagamento>='" + str + "' ORDER BY DataPagamento DESC ") : ("SELECT DataPagamento FROM t_ProgettiPagamentiCompensiOneri WHERE GenerareAssegno=0 GROUP BY DataPagamento HAVING DataPagamento>='" + str + "' ORDER BY DataPagamento DESC "));
PerseoNET/clsINAIL.cs:				string str = "SELECT IDcalatt, t_IncarichiEdizioni.FK_Edizione, DataAttivita FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale WHERE PresenzaINAIL=1 AND Aula=1 AND VincoloOrario=1 AND TipoAttivita<>'ESAME' AND t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(mvPKedizione) + " AND DataAttivita>=" + FunzStringa.StrDataSQL(mvDataDAL, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(mvDataAL, FlagSqlServer: true) + " ";
PerseoNET/clsINAIL.cs:				str = "SELECT IDiscrizione, (FK_Attivita) AS IDcalatt FROM t_AssenzeAttivita INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE FK_Edizione=" + Conversions.ToString(mvPKedizione) + " AND Minuti=60 AND DataAssenza>=" + FunzStringa.StrDataSQL(mvDataDAL, FlagSqlServer: true) + " AND DataAssenza<=" + FunzStringa.StrDataSQL(mvDataAL, FlagSqlServer: true) + " ORDER BY IDiscrizione, FK_Attivita";
PerseoNET/clsINAIL.cs:				string origineDati = "SELECT IDiscrizione, IDutente, IDsede, SiglaSede, (Cognome + ' ' + Nome) AS Studente, Cognome, Nome, CodFiscale, (0) AS GiorniINAIL, (0) AS GiorniAulaINAIL, (EsameINAIL) AS GiorniEsameINAIL, (0) AS GiorniStageINAIL, (0) AS GiorniAlternanzaINAIL, (0) AS GiorniPagatiAzienda, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataAggRegistro, (TipoFormativoInterno) AS TipoFormativo, (NULL) AS DescrQualificaUscitaStage, (NULL) AS DescrINAIL, (NULL) AS DescrAzienda, (NULL) AS AziendaCodiceATECO, (NULL) AS NoteStage, (NULL) AS NoteTipo, OreAttivitaIndividuali, DataIscr, DataRitiro FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDedizione=" + Conversions.ToString(vIDedizione) + " ORDER BY SiglaSede, (Cognome + ' ' + Nome), IDiscrizione ";
PerseoNET/clsINAIL.cs:				origineDati = "SELECT IDtattivita, TipoAttivita, OreAttivita, Aula FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE t_TipoAttivitaEdizione.PresenzaINAIL=1 AND FK_Edizione=" + Conversions.ToString(mvPKedizione) + " AND TipoAttivita<>'ESAME' ORDER BY IndTA ";
PerseoNET/clsINAIL.cs:				string origineDati = ((Operators.CompareString(vStrFiltroIscritti, "", TextCompare: false) != 0) ? ("SELECT IDiscrizione, DataStage, Stage, (0) AS PagaAzienda FROM t_Iscrizioni INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE PagaINAIL=1 AND FK_Edizione=" + Conversions.ToString(mvPKedizione) + " GROUP BY IDiscrizione, DataStage, Stage HAVING DataStage>=" + FunzStringa.StrDataSQL(mvDataDAL, FlagSqlServer: true) + " AND DataStage<=" + FunzStringa.StrDataSQL(mvDataAL, FlagSqlServer: true) + " AND IDiscrizione " + vStrFiltroIscritti + " ORDER BY IDiscrizione, DataStage ") : ("SELECT IDiscrizione, DataStage, Stage, (0) AS PagaAzienda FROM t_Iscrizioni INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE PagaINAIL=1 AND FK_Edizione=" + Conversions.ToString(mvPKedizione) + " GROUP BY IDiscrizione, DataStage, Stage HAVING DataStage>=" + FunzStringa.StrDataSQL(mvDataDAL, FlagSqlServer: true) + " AND DataStage<=" + FunzStringa.StrDataSQL(mvDataAL, FlagSqlServer: true) + " ORDER BY IDiscrizione, DataStage "));
PerseoNET/clsINAIL.cs:				origineDati = "SELECT (FK_Iscrizione) AS IDiscrizione, DataAvvio, (CASE WHEN DataInterruzione IS NOT NULL THEN DataInterruzione WHEN DataProlungamento IS NOT NULL THEN DataProlungamento ELSE DataFine END) AS DataFine, DurataStage, DescrQualificaUscita, DescrAzienda, DescrCCNL, CodiceATECO, Categoria, DescrLavorazione, DescrDettLavorazione, Classificazione, AziendaPosizioneINAIL FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione=t_Iscrizioni.IDiscrizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_TipoClasseINAIL ON t_ConvenzioniStage.FK_ClasseINAIL = t_TipoClasseINAIL.IDtinail WHERE FK_Edizione=" + Conversions.ToString(mvPKedizione) + " AND AziendaPosizioneINAIL IS NOT NULL AND DataAvvio<=" + FunzStringa.StrDataSQL(mvDataAL, FlagSqlServer: true) + " AND DataFine>=" + FunzStringa.StrDataSQL(mvDataDAL, FlagSqlServer: true) + " ORDER BY FK_Iscrizione, DataAvvio ";
PerseoNET/clsINAIL.cs:						string origineDati = "SELECT IDiscrizione, DataStage, Stage, PagaAzienda FROM t_Iscrizioni INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE Stage=1 AND FK_Edizione=" + Conversions.ToString(mvPKedizione) + " GROUP BY IDiscrizione, DataStage ORDER BY IDiscrizione, DataStage ";
PerseoNET/clsINAIL.cs:				string origineDati = "SELECT IDiscrizione, SiglaSede, Studente, Cognome, Nome, CodFiscale, GiorniINAIL, GiorniAulaINAIL, GiorniEsameINAIL, GiorniStageINAIL, GiorniAlternanzaINAIL, GiorniPagatiAzienda, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataAggRegistro, TipoFormativo, DescrQualificaUscitaStage, DescrAmbitoStage, AziendaCodiceATECO, NoteStage, NoteTipo FROM t_IscrittiEdizione ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:				string origineDati = "SELECT YEAR(DataPagamento) AS Anno FROM t_ProgettiPagamentiCompensiOneri GROUP BY YEAR(DataPagamento) ORDER BY YEAR(DataPagamento) DESC ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:				origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, t_ProgettiPagamentiCompensiOneri.IDincarico, t_Docenti.IDdocente, FK_Azienda, IDedizione, FK_SedeEdizione, (FK_Progetto) AS IDprogetto, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS StrDOC, (CASE WHEN (FK_Azienda IS NULL AND t_Docenti.PIVA IS NULL) THEN t_Docenti.CodFiscale WHEN (FK_Azienda IS NULL AND t_Docenti.PIVA IS NOT NULL) THEN t_Docenti.PIVA WHEN (FK_Azienda IS NOT NULL AND t_Aziende.PIVA IS NOT NULL) THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) AS CF_PIVA, CodiceParFiscale, t_ProgettiPagamentiCompensiOneri.DescrParFiscale, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, DescrEdizione, CodiceEdizione, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione) AS SiglaSede, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, (0) AS AltriEnaip, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, DataPagatoInizio, DataPagatoFine, ('fatt. ' + NumeroFattura) AS NumeroFattura, DataFattura, t_ProgettiPagamentiCompensiOneri.DataPagamento, ProgettoCodiceCIG, ProgettoCodiceCUP, (SELECT TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=FK_TipoLavoroAttuale) AS TipoDipendente, CorrezionePagamento, CausaleCorrezione, GenerareAssegno, MatricolaTracciatoAssegni, (NULL) AS CodiceFiscale FROM t_Docenti INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_Docenti.IDdocente = t_ProgettiPagamentiCompensiOneri.IDdocente INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento = t_ProgettiPagamenti.IDprogpagamento INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:				origineDati = "SELECT t_DocentiParcelle.IDparcella, FK_Docente, FK_Azienda, FK_Sede, FK_PF, FK_Causale, (CASE WHEN FK_Azienda IS NOT NULL THEN (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) ELSE (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE IDdocente=FK_Docente) END) AS DescrFornitore, (CASE WHEN (FK_Azienda IS NULL AND t_Docenti.PIVA IS NULL) THEN t_Docenti.CodFiscale WHEN (FK_Azienda IS NULL AND t_Docenti.PIVA IS NOT NULL) THEN t_Docenti.PIVA WHEN (FK_Azienda IS NOT NULL AND t_Aziende.PIVA IS NOT NULL) THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) AS CF_PIVA, (SELECT DescrProgetto FROM t_Progetti WHERE IDprogetto=FK_Progetto) AS DescrProgetto, (SELECT CodiceProgetto FROM t_Progetti WHERE IDprogetto=FK_Progetto) AS CodiceProgetto, (SELECT (DescrEdizione + ' - ' + CodiceEdizione) FROM t_PianoServizi WHERE IDedizione=FK_Edizione) AS StrEdizione, DescrParcella, CodiceParFiscale, DescrParFiscale, TipoCausaleParcella, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_Sede) AS StrSede, DataParcella, ImportoParcella, (CostiAnticipo + CostiViaggio + CostiVitto) AS sngCosti, sngCostoInc, sngRiva, sngCassaPrev, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, DataPagamento, ProgettoCodiceCIG, ProgettoCodiceCUP, (SELECT TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=FK_TipoLavoroAttuale) AS TipoDipendente, (NULL) AS CodiceFiscale FROM t_DocentiParcelle INNER JOIN t_DecodificatoreParametroFiscale ON t_DecodificatoreParametroFiscale.IDparfisc = t_DocentiParcelle.FK_PF INNER JOIN t_TipoCausaleParcella ON t_DocentiParcelle.FK_Causale = t_TipoCausaleParcella.IDtcausaparce LEFT OUTER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda WHERE CodiceParFiscale='12' AND YEAR(DataPagamento)=" + cmbAnno.Text + " AND FK_Sede " + Variabili.FiltroSedi + " ORDER BY (Cognome + ' ' + Nome), DataPagamento ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:				origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " ORDER BY IIf(Attiva=True,1,2), OrdGruppo, SiglaSede ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:				origineDati = "SELECT IDtcausaparce, TipoCausaleParcella FROM t_TipoCausaleParcella ORDER BY IndTPA, TipoCausaleParcella ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:				origineDati = "SELECT IDparfisc, CodiceParFiscale, DescrParFiscale FROM t_DecodificatoreParametroFiscale WHERE Attivo=True AND NOT(TipoContratto LIKE 'allievo%') ORDER BY IIf(Attivo=True,1,0), TipoContratto, CodiceParFiscale ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:						origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.DataPagamento FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.DataPagamento>='01/01/" + cmbAnno.Text + "' AND t_ProgettiPagamentiCompensiOneri.DataPagamento<='31/12/" + cmbAnno.Text + "' AND FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY t_ProgettiPagamentiCompensiOneri.DataPagamento ORDER BY t_ProgettiPagamentiCompensiOneri.DataPagamento DESC ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:						origineDati = "SELECT DataPagamento FROM t_DocentiParcelle WHERE DataPagamento>='01/01/" + cmbAnno.Text + "' AND DataPagamento<='31/12/" + cmbAnno.Text + "' GROUP BY DataPagamento ORDER BY DataPagamento DESC ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:					string text2 = "SELECT t_Docenti.IDdocente, IDazienda, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS StrDOC, (CASE WHEN IDazienda IS NULL THEN t_Docenti.CodFiscale WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) AS CF_PIVA, t_ProgettiPagamentiCompensiOneri.DescrParFiscale, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngCostiAggiuntivi) AS CostiAggiuntivi, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS MaxAltriRedditi FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE " + strFiltroTipoReddito + " AND YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnno.Text)) + " GROUP BY t_Docenti.IDdocente, IDazienda, t_Docenti.CodFiscale, t_Aziende.PIVA, t_Aziende.CodFiscale, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END), (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END), t_ProgettiPagamentiCompensiOneri.DescrParFiscale ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:					text2 = text2 + "UNION SELECT t_Docenti.IDdocente, IDazienda, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS StrDOC, (CASE WHEN IDazienda IS NULL THEN t_Docenti.CodFiscale WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) AS CF_PIVA, DescrParFiscale, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(CostiViaggio + CostiAnticipo + CostiVitto) AS CostiAggiuntivi, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS MaxAltriRedditi FROM t_DocentiParcelle INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda WHERE " + expression + " AND YEAR(t_DocentiParcelle.DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnno.Text)) + " GROUP BY t_Docenti.IDdocente, IDazienda, t_Docenti.CodFiscale, t_Aziende.PIVA, t_Aziende.CodFiscale, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END), t_DecodificatoreParametroFiscale.DescrParFiscale ORDER BY (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:					string text3 = "SELECT ('Prest') AS TipoPag, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Prestatore, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) AS CF_PIVA, t_ProgettiPagamentiCompensiOneri.DescrParFiscale, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, t_PianoServizi.DescrEdizione, t_PianoServizi.CodiceEdizione, SiglaSede, t_TipoAttivitaEdizione.TipoAttivita, t_ArgomentiModuli.DescrArgomento, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagatoInizio, DataPagatoFine, ('fatt. ' + NumeroFattura) AS NumeroFattura, DataFattura, t_ProgettiPagamentiCompensiOneri.DataPagamento, CodiceCIG, CodiceCUP, (SELECT TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=FK_TipoLavoroAttuale) AS TipoDipendente FROM t_Docenti INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_Docenti.IDdocente = t_ProgettiPagamentiCompensiOneri.IDdocente INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_PianoServizi ON t_ProgettiPagamentiCompensiOneri.IDedizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_IncarichiEdizioni ON t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_TipoAttivitaEdizione ON t_ProgettiPagamentiCompensiOneri.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE " + text + " AND YEAR(t_ProgettiPagamentiCompensiOneri.DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnno.Text)) + " ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:					text3 = text3 + "UNION SELECT ('Parc') AS TipoPag, (CASE WHEN IDazienda IS NOT NULL THEN DescrAzienda ELSE (Cognome + ' ' + Nome) END) AS Prestatore, (CASE WHEN IDazienda IS NULL THEN t_Docenti.CodFiscale WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) AS CF_PIVA, DescrParFiscale, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, DescrEdizione, CodiceEdizione, SiglaSede, (TipoCausaleParcella) AS TipoAttivita, (DescrParcella) AS DescrArgomento, (NULL) AS TotOreFatte, (ImportoParcella) AS QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, CostiAnticipo, CostiViaggio, CostiVitto, (CostiAnticipo + CostiViaggio + CostiVitto) AS sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, (DataPagamento) AS DataPagatoInizio, (DataPagamento) AS DataPagatoFine, ('fatt. ' + NumeroFattura) AS NumeroFattura, DataFattura, DataPagamento, CodiceCIG, CodiceCUP, (SELECT TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=FK_TipoLavoroAttuale) AS TipoDipendente FROM t_DocentiParcelle INNER JOIN t_DecodificatoreParametroFiscale ON t_DecodificatoreParametroFiscale.IDparfisc = t_DocentiParcelle.FK_PF INNER JOIN t_TipoCausaleParcella ON t_DocentiParcelle.FK_Causale = t_TipoCausaleParcella.IDtcausaparce LEFT OUTER JOIN t_Progetti ON t_DocentiParcelle.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_Sedi ON t_DocentiParcelle.FK_Sede = t_Sedi.IDsede LEFT OUTER JOIN t_PianoServizi ON t_DocentiParcelle.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda WHERE " + text2 + " AND YEAR(t_DocentiParcelle.DataPagamento)=" + Conversions.ToString(Conversions.ToInteger(cmbAnno.Text)) + " ORDER BY DataPagamento ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDparcella, FK_Commissione FROM t_DocentiParcelle WHERE IDparcella=", tblParc.get_Campo((object)"IDparcella", vFlagUpdateDB: false)));
PerseoNET/frmStampaNotulePrestazioniPagate.cs:					vSQL = "SELECT SiglaSede, DescrProgetto, IDmwp, CodiceProgetto, CodiceCIG, CodiceCUP FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_CommissioniEsameEdizioni ON t_PianoServizi.IDedizione = t_CommissioniEsameEdizioni.FK_Edizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_CommissioniEsameComponenti ON t_CommissioniEsameEdizioni.FK_Commissione = t_CommissioniEsameComponenti.FK_Commissione WHERE IDcomponente=" + Conversions.ToString(value2);
PerseoNET/frmStampaNotulePrestazioniPagate.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDazienda, t_Aziende.DescrAzienda, PIVA, CodFiscale, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz FROM t_SediAziende INNER JOIN t_Aziende ON t_SediAziende.FK_Azienda = t_Aziende.IDazienda WHERE IDazienda=", tblParc.get_Campo((object)"FK_Azienda", vFlagUpdateDB: false)), " AND FK_TipoSede=1 "));
PerseoNET/frmStampaNotulePrestazioniPagate.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDazienda, t_Aziende.DescrAzienda, PIVA, CodFiscale, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz FROM t_SediAziende INNER JOIN t_Aziende ON t_SediAziende.FK_Azienda = t_Aziende.IDazienda WHERE IDazienda=", tblParc.get_Campo((object)"FK_Azienda", vFlagUpdateDB: false)), " AND FK_TipoSede=1 "));
PerseoNET/frmStampaNotulePrestazioniPagate.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDazienda, t_Aziende.DescrAzienda, PIVA, CodFiscale, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz FROM t_SediAziende INNER JOIN t_Aziende ON t_SediAziende.FK_Azienda = t_Aziende.IDazienda RIGHT OUTER JOIN t_DocentiContrattiEsterni ON t_Aziende.IDazienda = t_DocentiContrattiEsterni.FK_Azienda WHERE IDazienda=", clsTblDatiDR.get_Campo((object)"IDazienda")), " AND FK_TipoSede=1 "));
PerseoNET/frmStampaNotulePrestazioniPagate.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DescrLetteraIncarico FROM t_DocentiContratti INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE FK_IncaricoEdizione=", clsTblDatiDR.get_Campo((object)"IDincarico")), " AND DescrLetteraIncarico IS NOT NULL "));
PerseoNET/frmStampaNotulePrestazioniPagate.cs:						string origineDati = "SELECT t_Progetti.IDprogetto, t_Docenti.IDdocente, FK_Azienda, DescrProgetto, CodiceProgetto, IDmwp, DataAvvioProg, DataFineProg, (Cognome + ' ' + Nome) AS StrDOC, t_Docenti.CodFiscale, DescrAzienda, t_Aziende.PIVA, t_DecodificatoreParametroFiscale.DescrParFiscale, TipoAttivita, DescrArgomento, SUM(TotOreFatte) AS TotOrePagate, SUM(sngCostoInc) AS Lordo, SUM(sngRiva) AS Rivalsa, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RitenutaAcc, SUM(sngNettoInc) AS PagatoNetto, MAX(AltriRedditi) AS AltriCompensi, t_ProgettiPagamentiCompensiOneri.DataPagamento, ('fatt. ' + NumeroFattura) AS NumeroFattura, DataFattura FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_PianoServizi.IDedizione = t_ProgettiPagamentiCompensiOneri.IDedizione INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda WHERE Reso=0 AND t_PianoServizi.FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY IDprogetto, t_Docenti.IDdocente, t_Aziende.IDazienda, DescrProgetto, CodiceProgetto, IDmwp, DataAvvioProg, DataFineProg, t_DecodificatoreParametroFiscale.DescrParFiscale, Cognome, Nome, t_Docenti.CodFiscale, t_Docenti.IDdocente, FK_Azienda, DescrAzienda, t_Aziende.PIVA, TipoAttivita, DescrArgomento, t_ProgettiPagamentiCompensiOneri.DataPagamento, ('fatt. ' + NumeroFattura), DataFattura " + text + "ORDER BY DataAvvioProg, CodiceProgetto, (Cognome + ' ' + ' ' + Nome), DescrAzienda, TipoAttivita, t_ProgettiPagamentiCompensiOneri.DataPagamento ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:				string origineDati = ((!fgDoc.Visible) ? ("SELECT IDdocente, (Cognome + ' ' + Nome) AS Collaboratore, CodFiscale FROM t_Docenti WHERE IDdocente " + clsTblDatiDR.StringaFiltroIN("FK_Docente")) : ("SELECT IDdocente, (Cognome + ' ' + Nome) AS Collaboratore, CodFiscale FROM t_Docenti WHERE IDdocente " + clsTblDatiDR.StringaFiltroIN("IDdocente")));
PerseoNET/frmStampaNotulePrestazioniPagate.cs:				string origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, t_Docenti.IDdocente, Cognome, Nome, CodFiscale, SiglaSede, t_DecodificatoreParametroFiscale.DescrParFiscale, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, DescrPubblicaAmm, IndirPubblicaAmm, ComPubblicaAmm, DataInizioContratto, DataFineContratto, sngCostoInc, sngRiva, sngCassaPrev, sngIVA, sngINPS13, sngTotale, sngRiteAcc, sngNettoInc FROM t_ProgettiPagamentiCompensiOneri INNER JOIN  t_IncarichiEdizioniContratti ON t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE t_DocentiContrattiEsterni.FK_TipoDipendente=1 AND ProtAutorizzaPubblicaAmm IS NOT NULL  " + text + " AND (t_ProgettiPagamentiCompensiOneri.FK_Azienda IS NULL) ORDER BY t_Docenti.IDdocente, IDcompensi, DataInizioContratto ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:					origineDati = (clsTblDatiDR.OrigineDati = "SELECT t_Docenti.IDdocente, IDparcella, Cognome, Nome, CodFiscale, SiglaSede, DescrRuolo, DescrParFiscale, DescrDatoreLavoro, IndirDatoreLavoro, ComDatoreLavoro, DescrAmmNomina, IndirAmmNomina, ComAmmNomina, MIN(t_CommissioniEsamePresenze.DataPresenza) AS CommissioneDAL, MAX(t_CommissioniEsamePresenze.DataPresenza) AS CommissioneAL, (sngCostoInc) AS Imponibile, (sngRiva) AS Riva, (sngCassaPrev) AS CassaPrev, (sngIVA) AS IVA, (sngINPS13) AS INPS13, (sngTotale) AS Totale, (sngRiteAcc) AS Ritenuta, (sngNettoInc) AS Netto, CostiVitto, CostiViaggio FROM t_DocentiParcelle INNER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente INNER JOIN t_CommissioniEsameComponenti ON t_DocentiParcelle.FK_Commissione = t_CommissioniEsameComponenti.IDcomponente AND t_Docenti.IDdocente = t_CommissioniEsameComponenti.FK_Docente INNER JOIN t_CommissioniEsame ON t_CommissioniEsameComponenti.FK_Commissione = t_CommissioniEsame.IDcommissione INNER JOIN t_Sedi ON t_DocentiParcelle.FK_Sede = t_Sedi.IDsede AND t_CommissioniEsame.FK_Sede = t_Sedi.IDsede INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_CommissioniEsamePresenze ON t_CommissioniEsameComponenti.IDcomponente = t_CommissioniEsamePresenze.FK_Componente WHERE FK_TipoLavoroAttuale=1 " + text + " GROUP BY t_Docenti.IDdocente, IDparcella, Cognome, Nome, CodFiscale, SiglaSede, t_CommissioniEsameComponenti.DescrRuolo, DescrParFiscale, DescrDatoreLavoro, IndirDatoreLavoro, ComDatoreLavoro, DescrAmmNomina, IndirAmmNomina, ComAmmNomina, sngRiva, sngCassaPrev, sngIVA, sngCostoInc, sngINPS13, sngTotale, sngRiteAcc, sngNettoInc, CostiAnticipo, CostiVitto, CostiViaggio ORDER BY t_Docenti.Cognome, t_Docenti.Nome");
PerseoNET/frmStampaNotulePrestazioniPagate.cs:					string origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, t_ProgettiPagamentiCompensiOneri.IDincarico, (Cognome + ' ' + Nome) AS Docente, (CASE WHEN FK_Azienda IS NOT NULL THEN (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) ELSE NULL END) AS Azienda, DescrProgetto, IDmwp, CodiceProgetto, t_PianoServizi.DescrEdizione, t_PianoServizi.CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagatoInizio, DataPagatoFine, DataPagamento, CorrezionePagamento, CausaleCorrezione, DeltaErroreOrePagate, Reso FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_PianoServizi ON t_ProgettiPagamentiCompensiOneri.IDedizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc WHERE Reso=1 OR CorrezionePagamento=1 OR CausaleCorrezione IS NOT NULL ORDER BY (Cognome + ' '  + Nome) ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:				string origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDdocente, FK_Azienda, IDincarico, (CASE WHEN t_ProgettiPagamentiCompensiOneri.FK_Azienda IS NOT NULL THEN (Cognome + ' ' + Nome + ' - ' + DescrAzienda) ELSE (Cognome + ' ' + Nome) END) AS Fornitore, SUM(TotOreFatte) AS OrePagate, DataPagatoInizio, DataPagatoFine, DataPagamento, TipoAttivita, DescrEdizione, CodiceEdizione FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente=t_Docenti.IDdocente LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda=t_Aziende.IDazienda WHERE Reso=0 GROUP BY t_ProgettiPagamentiCompensiOneri.IDdocente, FK_Azienda, IDincarico, DataPagatoInizio, DataPagatoFine, DataPagamento, TipoAttivita, DescrEdizione, CodiceEdizione, (CASE WHEN t_ProgettiPagamentiCompensiOneri.FK_Azienda IS NOT NULL THEN (Cognome + ' ' + Nome + ' - ' + DescrAzienda) ELSE (Cognome + ' ' + Nome) END) " + str + "ORDER BY IDincarico, IDdocente ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:				origineDati = "SELECT IDincarico, DescrEdizione, CodiceEdizione, PagaConsuntivoMese FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE t_PianoServizi.PagaConsuntivoMese=1 AND IDincarico " + clsTblDatiDR.StringaFiltroIN("IDincarico");
PerseoNET/frmStampaNotulePrestazioniPagate.cs:				origineDati = "SELECT IDincarico, IDdocente, Fornitore, OreSvolte, OrePagate, DataPagatoInizio, DataPagatoFine, DataPagamento, TipoAttivita, DescrEdizione, CodiceEdizione FROM t_Incarichi ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE IDincarico=", clsTblDatiDR.get_Campo((object)"IDincarico")), " "), "AND DataAttivita>='"), Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoInizio")), VariabiliClassi.StrFormatoDataPC)), "' "), "AND DataAttivita<='"), Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoFine")), VariabiliClassi.StrFormatoDataPC)), "' "));
PerseoNET/frmStampaNotulePrestazioniPagate.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE IDincarico=", clsTblDatiDR.get_Campo((object)"IDincarico")), " "), "AND DataAttivita>='"), Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoInizio")), VariabiliClassi.StrFormatoDataPC)), "' "), "AND DataAttivita<='"), Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoFine")), VariabiliClassi.StrFormatoDataPC)), "' "));
PerseoNET/frmStampaNotulePrestazioniPagate.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE IDincarico=", clsTblDatiDR.get_Campo((object)"IDincarico")), " "), "AND DataAttivita>='"), Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoInizio")), VariabiliClassi.StrFormatoDataPC)), "' "), "AND DataAttivita<='"), Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoFine")), VariabiliClassi.StrFormatoDataPC)), "' "));
PerseoNET/frmStampaNotulePrestazioniPagate.cs:					origineDati = "SELECT IDcompensi, t_IncarichiEdizioni.IDincarico, t_Docenti.IDdocente, IDazienda, t_PianoServizi.IDedizione, IDsede, (FK_Progetto) AS IDprogetto, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS StrDOC, (CASE WHEN (FK_Azienda IS NULL AND t_Docenti.PIVA IS NULL) THEN t_Docenti.CodFiscale WHEN (FK_Azienda IS NULL AND t_Docenti.PIVA IS NOT NULL) THEN t_Docenti.PIVA WHEN (FK_Azienda IS NOT NULL AND t_Aziende.PIVA IS NOT NULL) THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) AS CF_PIVA, CodiceParFiscale, t_ProgettiPagamentiCompensiOneri.DescrParFiscale, CodiceTributo, DescrProgetto, CodiceProgetto, IDmwp, t_PianoServizi.DescrEdizione, t_PianoServizi.CodiceEdizione, SiglaSede, t_TipoAttivitaEdizione.TipoAttivita, t_ArgomentiModuli.DescrArgomento, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngCostiAggiuntivi, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, (0) AS AltriEnaip, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, DataPagatoInizio, DataPagatoFine, ('fatt. ' + NumeroFattura) AS NumeroFattura, DataFattura, t_ProgettiPagamentiCompensiOneri.DataPagamento, CodiceCIG, CodiceCUP, (SELECT TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=FK_TipoLavoroAttuale) AS TipoDipendente, CorrezionePagamento, CausaleCorrezione, GenerareAssegno, MatricolaTracciatoAssegni, (NULL) AS CodiceFiscale FROM t_Docenti INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_Docenti.IDdocente = t_ProgettiPagamentiCompensiOneri.IDdocente INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_PianoServizi ON t_ProgettiPagamentiCompensiOneri.IDedizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_IncarichiEdizioni ON t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_TipoAttivitaEdizione ON t_ProgettiPagamentiCompensiOneri.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda " + text3 + " ORDER BY (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END), t_ProgettiPagamentiCompensiOneri.DataPagamento  ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:									string str = "SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, IDdocente, FK_Azienda, FK_ParFiscaleAttuale, DescrParFiscale, sngRiva, sngCassaPrev, sngIVA, sngINPS, sngINPS23, sngCostiAggiuntivi, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, CorrezionePagamento, CausaleCorrezione, DataModifica, ('No') AS Esito FROM t_ProgettiPagamentiCompensiOneri ";
PerseoNET/frmStampaNotulePrestazioniPagate.cs:													str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Azienda, IDdocente, (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) AS DescrAzienda FROM t_ProgettiPagamentiCompensiOneri WHERE IDdocente=", tblDoc.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " AND FK_Azienda IS NOT NULL ORDER BY DataPagamento DESC "));
PerseoNET/frmStampaNotulePrestazioniPagate.cs:								string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDcompensi, sngCostoInc, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, CorrezionePagamento, CausaleCorrezione, FK_AliquotaPrevSepa, DataRec, DataModifica FROM t_ProgettiPagamentiCompensiOneri WHERE IDcompensi=", tblDoc.get_Campo((object)"IDcompensi", vFlagUpdateDB: false)));
PerseoNET/frmStampaNotulePrestazioniPagate.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDcompensi, sngCostoInc, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, CorrezionePagamento, CausaleCorrezione, FK_AliquotaPrevSepa, DataRec, DataModifica FROM t_ProgettiPagamentiCompensiOneri WHERE IDcompensi=", tblDoc.get_Campo((object)"IDcompensi", vFlagUpdateDB: false)));
PerseoNET/frmStampaNotulePrestazioniPagate.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDpagaindiv, IDpagainc, Autorizzazione, Sospeso, DataRichiestaInizio, DataRichiestaFine, DataPagamento FROM t_PagamentiIndividuali INNER JOIN t_PagamentiIndividualiIncarichi ON t_PagamentiIndividuali.IDpagaindiv = t_PagamentiIndividualiIncarichi.FK_Pagamento WHERE FK_Incarico=", tblDoc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND (DataPagamento="), FunzStringa.StrDataSQL(cmbDataPag.Text, FlagSqlServer: true)), " OR DataPagamento IS NULL) "), "AND DataRichiestaInizio="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblDoc.get_Campo((object)"DataPagatoInizio", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataRichiestaFine="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblDoc.get_Campo((object)"DataPagatoFine", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true)), " "));
PerseoNET/DocWord.cs:							string vSQL = "SELECT DescrRimborsoIndennita FROM zt_Versione ";
PerseoNET/DocWord.cs:					string vSQL = "SELECT IDreferaz, (Cognome + ' ' + Nome) AS ResponsabileSede, TipoRuoloAz FROM t_ReferentiAziende LEFT OUTER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz WHERE (Cognome + ' ' + Nome)='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FirmatarioAzienda"))) + "' AND TipoRuoloAz<>'Altro' ORDER BY TipoRuoloAz ";
PerseoNET/DocWord.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/DocWord.cs:					vSQL = "SELECT IDtlogoregstage, NomeFileLogo, NomeFileLogoEntePiccolo FROM t_TipoLogoRegistroStage WHERE IDtlogoregstage=" + Conversions.ToString(vIDtipologo);
PerseoNET/DocWord.cs:						vSQL = "SELECT DescrRimborsoIndennita FROM zt_Versione ";
PerseoNET/DocWord.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/DocWord.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/DocWord.cs:							string vSQL = "SELECT DescrRimborsoIndennita FROM zt_Versione ";
PerseoNET/DocWord.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/DocWord.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtconvenzione, DurataMesi FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoConvenzione")));
PerseoNET/DocWord.cs:									vSQL = "SELECT DescrRimborsoIndennita FROM zt_Versione ";
PerseoNET/DocWord.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/DocWord.cs:								vSQL = "SELECT DescrRimborsoIndennita FROM zt_Versione ";
PerseoNET/DocWord.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/DocWord.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CalendarioAvvioFinale.IDcalstage, FK_Edizione, DataDAL, DataAL, IngressoM, UscitaM, IngressoP, UscitaP, Lun, Mar, Mer, Gio, Ven, Sab, Dom FROM t_CalendarioAvvioFinale WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND CalendarioStage=0 ORDER BY DataDAL "));
PerseoNET/DocWord.cs:							origineDati = ((!vFlagAvviato) ? "SELECT t_IncarichiEdizioni.FK_Edizione, DataAttivita, Dalle, Alle, (0) AS TotOre, (NULL) AS DescrModulo, IndArgomento, DescrArgomento, ('Aula/Es. pratica') AS DescrTipo FROM t_IncarichiEdizioni INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico " : Conversions.ToString(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.FK_Edizione, DataAttivita, (OraInizio) AS Dalle, (OraFine) AS Alle, (1) AS TotOre, (NULL) AS DescrModulo, IndArgomento, DescrArgomento, ('Aula/Es. pratica') AS DescrTipo FROM t_IncarichiEdizioni INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0))));
PerseoNET/DocWord.cs:							origineDati = "SELECT IDargomento, DescrModulo, TipoArgomento, IndArgomento, DescrArgomento, ('Aula/Es. pratica') AS DescrTipo, OreArgomento, (OreArgomento) AS Dispo, (0) AS MaxGiorno FROM t_StrutturaEdizione WHERE FK_TipoArgomento<>" + Conversions.ToString(Variabili.PK_TipoArgomentoStage) + " ORDER BY IndModulo, IndArgomento, DescrArgomento ";
PerseoNET/DocWord.cs:						origineDati = ((!Operators.ConditionalCompareObjectEqual(Variabili.Edizione.get_Campo((object)"Gruppo"), true, TextCompare: false)) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDrec, OraInizio, OraFine, DataAttivita, IIf(TipoArgomento='STAGE','stage','aula') AS Luogo, ('individuale') AS Gruppo, ('", Variabili.Edizione.get_CampoSede((object)"ID_SedeFOL")), "') AS ID_SEDE_FOL, ('"), right), "') AS ID_Iscr, ('Stage') AS TipoArgomento "), "FROM t_PianificazioneDocente WHERE DescrArgomento IS NOT NULL AND TipoArgomento<>'STAGE' "), "ORDER BY DataAttivita, OraInizio ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDrec, OraInizio, OraFine, DataAttivita, IIf(TipoArgomento='STAGE','stage','aula') AS Luogo, IIf(TipoArgomento='STAGE','individuale','gruppo') AS Gruppo, ('", Variabili.Edizione.get_CampoSede((object)"ID_SedeFOL")), "') AS ID_SEDE_FOL, "), right), ", TipoArgomento "), "FROM t_PianificazioneDocente WHERE DescrArgomento IS NOT NULL AND TipoArgomento<>'STAGE' "), "ORDER BY DataAttivita, OraInizio ")));
PerseoNET/DocWord.cs:						origineDati = (clsTblDatiDR2.DestinazioneDati = "SELECT Ind, DataOra_1, DataOra_2, DataOra_3, Testo_1, Testo_2, Testo_3, Testo_4, Testo_5 FROM t_StampaTbl_1 ");
PerseoNET/DocWord.cs:										origineDati = ((!Operators.ConditionalCompareObjectEqual(Variabili.Edizione.get_Campo((object)"Gruppo"), true, TextCompare: false)) ? ("SELECT IDrec, OraInizio, OraFine, DataAttivita, ('stage') AS Luogo, ('individuale') AS Gruppo, ('" + text3 + "') AS IDStage, ('" + right + "') AS ID_Iscr, TipoArgomento FROM t_PianificazioneDocente WHERE DescrArgomento IS NOT NULL AND TipoArgomento='STAGE' ORDER BY DataAttivita, OraInizio ") : ("SELECT IDrec, OraInizio, OraFine, DataAttivita, IIf(TipoArgomento='STAGE','stage','aula') AS Luogo, IIf(TipoArgomento='STAGE','individuale','gruppo') AS Gruppo, ('" + text3 + "') AS IDStage, ('" + right + "') AS ID_Iscr, TipoArgomento FROM t_PianificazioneDocente WHERE DescrArgomento IS NOT NULL AND TipoArgomento='STAGE' ORDER BY DataAttivita, OraInizio "));
PerseoNET/DocWord.cs:										origineDati = (clsTblDatiDR2.DestinazioneDati = "SELECT Ind, DataOra_1, DataOra_2, DataOra_3, Testo_1, Testo_2, Testo_3, Testo_4, Testo_5 FROM t_StampaTbl_1 ");
PerseoNET/DocWord.cs:						origineDati = "SELECT Ind, Min(DataOra_1) AS MinDiDataOra_1, Max(DataOra_2) AS MaxDiDataOra_2, DataOra_3, Testo_1, Testo_2, Testo_3, Testo_4, Testo_5, (0) AS Minuti FROM t_StampaTbl_1 GROUP BY Ind, DataOra_3, Testo_1, Testo_2, Testo_3, Testo_4, Testo_5 ORDER BY DataOra_3, Min(DataOra_1) ";
PerseoNET/DocWord.cs:						origineDati = "SELECT Ind, Min(DataOra_1) AS MinDiDataOra_1, Max(DataOra_2) AS MaxDiDataOra_2, DataOra_3, Testo_1, Testo_2, Testo_3, Testo_4, Testo_5 FROM t_StampaTbl_1 GROUP BY Ind, DataOra_3, Testo_1, Testo_2, Testo_3, Testo_4, Testo_5 ORDER BY DataOra_3, Min(DataOra_1) ";
PerseoNET/DocWord.cs:						origineDati = "SELECT IDrec, DataAttivita, OraInizio, OraFine, T_Ore, DescrModulo, DescrArgomento, TipoArgomento FROM t_PianificazioneDocente WHERE DescrArgomento IS NOT NULL ORDER BY DataAttivita, OraInizio ";
PerseoNET/DocWord.cs:						origineDati = (clsTblDatiDR.OrigineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CalendarioAvvioFinale.IDcalstage, FK_Edizione, DataDAL, DataAL, IngressoM, UscitaM, IngressoP, UscitaP, Lun, Mar, Mer, Gio, Ven, Sab, Dom FROM t_CalendarioAvvioFinale WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND CalendarioStage=1 ORDER BY DataDAL ")));
PerseoNET/DocWord.cs:					origineDati = (clsTblDatiDR2.DestinazioneDati = "SELECT IDrec, DataAttivita, OraInizio, OraFine, T_Ore, AreaFormativaArgomento, IndArgomento, DescrArgomento, TipoArgomento FROM t_PianificazioneDocente ");
PerseoNET/DocWord.cs:					origineDati = "SELECT IDrec, DataAttivita, OraInizio, OraFine, T_Ore, AreaFormativaArgomento, IndArgomento, DescrArgomento, TipoArgomento FROM t_PianificazioneDocente WHERE DescrArgomento IS NOT NULL ORDER BY DataAttivita, OraInizio ";
PerseoNET/DocWord.cs:						origineDati = (clsTblDatiDR2.DestinazioneDati = "SELECT IDrec, DataAttivita, OraInizio, OraFine, T_Ore, DescrModulo, IndArgomento, DescrArgomento, TipoArgomento FROM t_PianificazioneDocente ");
PerseoNET/DocWord.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CalendarioAvvioFinale.IDcalstage, FK_Edizione, DataDAL, DataAL, IngressoM, UscitaM, IngressoP, UscitaP, Lun, Mar, Mer, Gio, Ven, Sab, Dom FROM t_CalendarioAvvioFinale WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND CalendarioStage=0 ORDER BY DataDAL "));
PerseoNET/DocWord.cs:						origineDati = ((!vFlagAvviato) ? "SELECT t_IncarichiEdizioni.FK_Edizione, DataAttivita, Dalle, Alle, (0) AS TotOre, (NULL) AS DescrModulo, IndArgomento, DescrArgomento, ('Aula/Es. pratica') AS DescrTipo FROM t_IncarichiEdizioni INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico " : Conversions.ToString(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.FK_Edizione, DataAttivita, (OraInizio) AS Dalle, (OraFine) AS Alle, (0) AS TotOre, (NULL) AS DescrModulo, IndArgomento, DescrArgomento, ('Aula/Es. pratica') AS DescrTipo FROM t_IncarichiEdizioni INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0))));
PerseoNET/DocWord.cs:						origineDati = "SELECT IDargomento, DescrModulo, TipoArgomento, IndArgomento, DescrArgomento, ('Aula/Es. pratica') AS DescrTipo, OreArgomento, (OreArgomento*60) AS Dispo, (0) AS MaxGiorno FROM t_StrutturaEdizione WHERE FK_TipoArgomento<>" + Conversions.ToString(Variabili.PK_TipoArgomentoStage) + " ORDER BY IndModulo, IndArgomento, DescrArgomento ";
PerseoNET/DocWord.cs:					origineDati = (clsTblDatiDR2.DestinazioneDati = "SELECT IDrec, DataAttivita, OraInizio, OraFine, T_Ore, AreaFormativaArgomento, IndArgomento, DescrArgomento, TipoArgomento FROM t_PianificazioneDocente ");
PerseoNET/DocWord.cs:					origineDati = "SELECT IDrec, DataAttivita, OraInizio, OraFine, T_Ore, AreaFormativaArgomento, IndArgomento, DescrArgomento, TipoArgomento FROM t_PianificazioneDocente WHERE DescrArgomento IS NOT NULL ORDER BY DataAttivita, OraInizio ";
PerseoNET/DocWord.cs:						origineDati = (clsTblDatiDR2.DestinazioneDati = "SELECT IDrec, DataAttivita, OraInizio, OraFine, T_Ore, DescrModulo, IndArgomento, DescrArgomento, TipoArgomento FROM t_PianificazioneDocente ");
PerseoNET/DocWord.cs:						origineDati = "SELECT IDrec, DataAttivita, OraInizio, OraFine, T_Ore, DescrModulo, DescrArgomento, TipoArgomento FROM t_PianificazioneDocente WHERE DescrArgomento IS NOT NULL ORDER BY DataAttivita, OraInizio ";
PerseoNET/DocWord.cs:				string origineDati = "SELECT (CAST(FK_Anno AS VARCHAR) +'Â°') AS TipoAnnualita, DescrModulo, OreModulo, DescrArgomento, OreArgomento FROM t_ModuliEdizioni INNER JOIN t_ArgomentiModuli ON t_ModuliEdizioni.IDmodulo = t_ArgomentiModuli.FK_Modulo INNER JOIN t_PianoServizi ON t_ModuliEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE t_ModuliEdizioni.FK_Edizione " + vStrFiltroEdizioni + " ORDER BY (CAST(FK_Anno AS VARCHAR) +'Â°'), IndModulo, DescrModulo, IndArgomento, DescrArgomento ";
PerseoNET/DocWord.cs:								origineDati = "SELECT IndModulo, DescrModulo, Fix(Sum(Minuti)/60) AS OrePresenza FROM t_PianificazioneDocente WHERE Presenza<>'A' AND OFA=True GROUP BY DescrModulo, IndModulo ORDER BY IndModulo ";
PerseoNET/DocWord.cs:								VariabiliClassi.CmdSQL.CreaRecordset("SELECT IndModulo, IndArgomento FROM t_PianificazioneDocente WHERE IndModulo<>0 AND DescrArgomento='LARSA' GROUP BY IndModulo, IndArgomento ", Variabili.pathLog);
PerseoNET/DocWord.cs:								origineDati = "SELECT IndArgomento, DescrArgomento, Fix(SUM(Minuti)/60) AS OrePresenza FROM t_PianificazioneDocente WHERE Presenza<>'A' AND OFA=True GROUP BY IndModulo, IndArgomento, DescrArgomento ORDER BY IndModulo, IndArgomento, DescrArgomento ";
PerseoNET/DocWord.cs:							string origineDati = "SELECT IndModulo, DescrTirocinio, (0) AS OrePreviste, (0) AS OrePresenza FROM t_PianificazioneDocente ";
PerseoNET/DocWord.cs:						VariabiliClassi.CmdSQL.CreaRecordset("SELECT Fix(Sum(Minuti)/60) AS Totale FROM t_PianificazioneDocente WHERE Presenza<>'A' AND OFA=True AND TipoAttivita='DOCENZA' ", Variabili.pathLog, "Totale");
PerseoNET/DocWord.cs:									string origineDati = "SELECT Fix(SUM(Minuti)/60) AS OrePresenza FROM t_PianificazioneDocente WHERE OFA=True AND DescrArgomento='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.Edizione.get_CampoArgomenti((object)"DescrArgomento"))) + "' ";
PerseoNET/DocWord.cs:									string origineDati = "SELECT TipoAttivita FROM t_PianificazioneDocente WHERE IDiscrizione=" + Conversions.ToString(vIDiscr) + " GROUP BY TipoAttivita HAVING TipoAttivita<>'DOCENZA' AND TipoAttivita<>'STAGE' ORDER BY TipoAttivita";
PerseoNET/DocWord.cs:										string origineDati = "SELECT TipoAttivita FROM t_PianificazioneDocente WHERE IDiscrizione=" + Conversions.ToString(vIDiscr) + " GROUP BY TipoAttivita HAVING TipoAttivita<>'DOCENZA' AND TipoAttivita<>'STAGE' ORDER BY TipoAttivita";
PerseoNET/DocWord.cs:										string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT TipoScalaPunteggio FROM t_TipoScalaPunteggioFinale WHERE IDtscalapunt=", Variabili.Edizione.get_CampoIscrizione((object)"FK_TipoScalaPunt")));
PerseoNET/DocWord.cs:						string origineDati = "SELECT IDtdoc FROM t_TipoDocumento WHERE TipoDocumento='Certificazione PERCORSO' AND CertificazioneStudente=1 ";
PerseoNET/DocWord.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento, FK_TipoDoc, FK_Studente, FK_Iscrizione, DescrDocumento FROM t_Documenti WHERE FK_TipoDoc=" + Conversions.ToString(value) + " AND FK_Studente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")), " "), "AND FK_Iscrizione="), Variabili.Edizione.get_CampoIscrizione((object)"IDiscrizione")), " "));
PerseoNET/DocWord.cs:				VariabiliClassi.CmdSQL.CreaRecordset("SELECT Fix(Sum(Minuti)/60) AS Totale FROM t_PianificazioneDocente WHERE Presenza<>'A' AND OFA=True ", Variabili.pathLog, "Totale");
PerseoNET/DocWord.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/DocWord.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/DocWord.cs:							string vSQL = "SELECT DescrRimborsoIndennita FROM zt_Versione ";
PerseoNET/DocWord.cs:					string vSQL = "SELECT IDreferaz, (Cognome + ' ' + Nome) AS ResponsabileSede, TipoRuoloAz FROM t_ReferentiAziende LEFT OUTER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz WHERE (Cognome + ' ' + Nome)='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FirmatarioAzienda"))) + "' AND TipoRuoloAz<>'Altro' ORDER BY TipoRuoloAz ";
PerseoNET/DocWord.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/DocWord.cs:							string vSQL = "SELECT DescrRimborsoIndennita FROM zt_Versione ";
PerseoNET/DocWord.cs:					string vSQL = "SELECT IDreferaz, (Cognome + ' ' + Nome) AS ResponsabileSede, TipoRuoloAz FROM t_ReferentiAziende LEFT OUTER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz WHERE (Cognome + ' ' + Nome)='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FirmatarioAzienda"))) + "' AND TipoRuoloAz<>'Altro' ORDER BY TipoRuoloAz ";
PerseoNET/DocWord.cs:					string vSQL = "SELECT IDtlogoregstage, NomeFileLogo, NomeFileLogoEntePiccolo FROM t_TipoLogoRegistroStage WHERE IDtlogoregstage=" + Conversions.ToString(vIDtipologo);
PerseoNET/DocWord.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoForma")));
PerseoNET/DocWord.cs:							string vSQL = "SELECT DescrRimborsoIndennita FROM zt_Versione ";
PerseoNET/DocWord.cs:					string vSQL = "SELECT IDreferaz, (Cognome + ' ' + Nome) AS ResponsabileSede, TipoRuoloAz FROM t_ReferentiAziende LEFT OUTER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz WHERE (Cognome + ' ' + Nome)='" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FirmatarioAzienda"))) + "' AND TipoRuoloAz<>'Altro' ORDER BY TipoRuoloAz ";
PerseoNET/frmCommissioniEsame.cs:				string origineDati = "SELECT t_CommissioniEsame.IDcommissione, t_CommissioniEsame.FK_Sede, FK_TipoCommissione, SiglaSede, TipoCommissione, DataRiunionePreliminare, RecuperoAssenti, COUNT(IDcomponente) AS NumComponenti, COUNT(IDparcella) AS NumParcelle, COUNT(DataPagamento) AS NumPaga FROM t_CommissioniEsame INNER JOIN t_TipoCommissioneEsame ON t_CommissioniEsame.FK_TipoCommissione = t_TipoCommissioneEsame.IDtcommissione INNER JOIN t_Sedi ON t_CommissioniEsame.FK_Sede = t_Sedi.IDsede LEFT OUTER JOIN t_CommissioniEsameComponenti ON t_CommissioniEsame.IDcommissione = t_CommissioniEsameComponenti.FK_Commissione LEFT OUTER JOIN t_DocentiParcelle ON t_CommissioniEsameComponenti.IDcomponente = t_DocentiParcelle.FK_Commissione GROUP BY t_CommissioniEsame.IDcommissione, t_CommissioniEsame.FK_Sede, FK_TipoCommissione, SiglaSede, DataRiunionePreliminare, RecuperoAssenti, TipoCommissione HAVING t_CommissioniEsame.FK_Sede " + Variabili.FiltroSedi + " AND DataRiunionePreliminare>=" + FunzStringa.StrDataSQL(strAnnoAmministrativo, FlagSqlServer: true) + " AND DataRiunionePreliminare<" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND COUNT(IDparcella)=0 ORDER BY SiglaSede, DataRiunionePreliminare DESC ";
PerseoNET/frmCommissioniEsame.cs:				origineDati = "SELECT t_CommissioniEsameComponenti.IDcomponente, FK_Commissione, FK_Docente, (Cognome + ' ' + Nome) AS StrCompo, DescrRuolo, Ruolo, DescrAmmNomina, DescrDatoreLavoro, Gratuito FROM t_CommissioniEsameComponenti INNER JOIN t_Docenti ON t_CommissioniEsameComponenti.FK_Docente = t_Docenti.IDdocente ORDER BY Ruolo DESC, (Cognome + ' ' + Nome) ";
PerseoNET/frmCommissioniEsame.cs:				origineDati = "SELECT t_CommissioniEsameEdizioni.IDedizionecomm, IDedizione, SiglaSede, DescrEdizione, TipoAnnualita, CodiceEdizione, IDmwe, TipoFormativoInterno, DataAvvio, DataFine, Durata, DataInizioEsame, DataFineEsame FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_CommissioniEsameEdizioni ON t_PianoServizi.IDedizione = t_CommissioniEsameEdizioni.FK_Edizione LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint ORDER BY SiglaSede, CodiceEdizione ";
PerseoNET/frmCommissioniEsame.cs:				string origineDati = "SELECT IDcommissione, FK_Sede, FK_TipoCommissione, DataRichiesta, DataRiunionePreliminare, RecuperoAssenti, DataRec, DataModifica, Bloccato FROM t_CommissioniEsame WHERE IDcommissione=" + Conversions.ToString(vID);
PerseoNET/frmCommissioniEsame.cs:				origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE Attiva=True AND FK_TipoSede<>2 AND IDsede " + Variabili.FiltroSedi + " ORDER BY OrdGruppo, SiglaSede ";
PerseoNET/frmCommissioniEsame.cs:				origineDati = "SELECT IDtcommissione, TipoCommissione FROM t_TipoCommissioneEsame WHERE Obsoleto=False ";
PerseoNET/frmCommissioniEsame.cs:				string origineDati = "SELECT IDcomponente, FK_Commissione, FK_Docente, DescrRuolo, Ruolo, DescrAmmNomina, IndirAmmNomina, ComAmmNomina, FK_PFcomm, Gratuito, DataRec, DataModifica FROM t_CommissioniEsameComponenti WHERE IDcomponente=" + Conversions.ToString(vID);
PerseoNET/frmCommissioniEsame.cs:				origineDati = "SELECT (DescrRuolo + ' (' + SiglaRuolo + ')') AS DescrizioneRuolo FROM t_TipoGettonePresenzaEsami WHERE Obsoleto=False GROUP BY SiglaRuolo, DescrRuolo ORDER BY SiglaRuolo DESC ";
PerseoNET/frmCommissioniEsame.cs:									string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT TipoPresenza FROM t_TipoGettonePresenzaEsami WHERE FK_TipoCommissione=", tblComm.get_Campo((object)"FK_TipoCommissione", vFlagUpdateDB: false)), " GROUP BY TipoPresenza ORDER BY TipoPresenza "));
PerseoNET/frmCommissioniEsame.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CommissioniEsamePresenze.IDpresenze, IDcomponente, (Cognome + ' ' + Nome) AS StrCompo, DescrRuolo, DataPresenza, TipoPresenza, GettonePresenza FROM t_CommissioniEsamePresenze INNER JOIN t_CommissioniEsameComponenti ON t_CommissioniEsamePresenze.FK_Componente = t_CommissioniEsameComponenti.IDcomponente INNER JOIN t_Docenti ON t_CommissioniEsameComponenti.FK_Docente = t_Docenti.IDdocente WHERE FK_Commissione=", tblComm.get_Campo((object)0, vFlagUpdateDB: false)), " "), "ORDER BY (Cognome + ' ' + Nome), DataPresenza, TipoPresenza "));
PerseoNET/frmCommissioniEsame.cs:								string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_DocentiParcelle.IDparcella, DataPagamento FROM t_DocentiParcelle INNER JOIN t_CommissioniEsameComponenti ON t_DocentiParcelle.FK_Commissione = t_CommissioniEsameComponenti.IDcomponente WHERE IDcomponente=", tblCompoPres.get_Campo((object)"IDcomponente", vFlagUpdateDB: false)), " "));
PerseoNET/frmCommissioniEsame.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_DocentiParcelle.IDparcella, IDcomponente FROM t_DocentiParcelle INNER JOIN t_CommissioniEsameComponenti ON t_DocentiParcelle.FK_Commissione = t_CommissioniEsameComponenti.IDcomponente WHERE IDcomponente=", tblCompoPres.get_Campo((object)"IDcomponente", vFlagUpdateDB: false)), " "));
PerseoNET/frmCommissioniEsame.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtgettone, ValoreGettone FROM t_TipoGettonePresenzaEsami WHERE Obsoleto=False AND FK_TipoCommissione=", Variabili.CommissioneEsame.get_Campo((object)"FK_TipoCommissione")), " AND SiglaRuolo='"), tblCompoPres.get_Campo((object)"Ruolo", vFlagUpdateDB: false)), "' "));
PerseoNET/frmCommissioniEsame.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_DocentiParcelle.IDparcella, IDcomponente FROM t_DocentiParcelle INNER JOIN t_CommissioniEsameComponenti ON t_DocentiParcelle.FK_Commissione = t_CommissioniEsameComponenti.IDcomponente WHERE IDcomponente=", tblCompoPres.get_Campo((object)"IDcomponente", vFlagUpdateDB: false)), " "));
PerseoNET/frmCommissioniEsame.cs:				string origineDati = "SELECT t_CommissioniEsame.IDcommissione, IDsede, SiglaSede, (RecuperoAssenti) AS Recupero, (Cognome + ' ' + Nome) AS Componente, DescrRuolo, (DescrAmmNomina) AS SoggettoNominante, (IndirAmmNomina) AS Indirizzo, (ComAmmNomina) AS Comune, TipoPresenza, COUNT(IDpresenze) AS NumeroPresenze, (SELECT DataPagamento FROM t_DocentiParcelle WHERE FK_Commissione=IDcomponente) AS DataPagamento, (SELECT sngTotale FROM t_DocentiParcelle WHERE FK_Commissione=IDcomponente) AS Costo,  (NULL) AS DescrEdizioni, (NULL) AS DataDAL, (NULL) AS DataAL FROM t_Docenti RIGHT OUTER JOIN t_CommissioniEsameComponenti ON t_Docenti.IDdocente = t_CommissioniEsameComponenti.FK_Docente LEFT OUTER JOIN t_CommissioniEsamePresenze ON t_CommissioniEsameComponenti.IDcomponente = t_CommissioniEsamePresenze.FK_Componente RIGHT OUTER JOIN t_Sedi INNER JOIN t_CommissioniEsame ON t_Sedi.IDsede = t_CommissioniEsame.FK_Sede ON  t_CommissioniEsameComponenti.FK_Commissione = t_CommissioniEsame.IDcommissione WHERE t_CommissioniEsame.FK_Sede " + Variabili.FiltroSedi + " GROUP BY IDcommissione, SiglaSede, DataRiunionePreliminare, RecuperoAssenti, Cognome, Nome,  DescrRuolo, DescrAmmNomina, IndirAmmNomina, ComAmmNomina, TipoPresenza, IDsede, Ruolo, IDcomponente HAVING DataRiunionePreliminare>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataRiunionePreliminare<" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " ORDER BY SiglaSede, DataRiunionePreliminare DESC, (CASE WHEN Ruolo='P' THEN 1 ELSE 2 END), Cognome, Nome ";
PerseoNET/frmCommissioniEsame.cs:				origineDati = "SELECT t_CommissioniEsameEdizioni.IDedizionecomm, FK_Commissione, SiglaSede, DescrEdizione, TipoAnnualita, CodiceEdizione, IDmwe, TipoFormativoInterno, DataAvvio, DataFine, Durata, DataInizioEsame, DataFineEsame FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_CommissioniEsameEdizioni ON t_PianoServizi.IDedizione = t_CommissioniEsameEdizioni.FK_Edizione LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint WHERE FK_Commissione " + clsTblDatiDR.StringaFiltroIN(0) + " ORDER BY FK_Commissione, CodiceEdizione ";
PerseoNET/frmCommissioniEsame.cs:						string vSQL = ((Operators.CompareString(txtProvenienza.Text, txtDescrAmmNomina.Text, TextCompare: false) != 0) ? "SELECT IDparfisc, DescrParFiscale, CodiceParFiscale FROM t_DecodificatoreParametroFiscale WHERE CodiceTributo='1040' AND CommissioneEsame=True AND Attivo=True " : "SELECT IDparfisc, DescrParFiscale, CodiceParFiscale FROM t_DecodificatoreParametroFiscale WHERE CodiceTributo='1004' AND CommissioneEsame=True AND Attivo=True ");
PerseoNET/frmCommissioniEsame.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDparcella, IDcomponente FROM t_DocentiParcelle INNER JOIN t_CommissioniEsameComponenti ON t_DocentiParcelle.FK_Commissione = t_CommissioniEsameComponenti.IDcomponente WHERE IDcomponente=", tblCompoPres.get_Campo((object)"IDcomponente", vFlagUpdateDB: false)));
PerseoNET/frmCommissioniEsame.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject("INSERT INTO t_CommissioniEsame(FK_Sede, FK_TipoCommissione, DataRichiesta, DataRiunionePreliminare, RecuperoAssenti) SELECT FK_Sede, FK_TipoCommissione, (" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + ") AS DataRichiesta, (" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + ") AS DataRiunionePreliminare, (1) AS RecuperoAssenti FROM t_CommissioniEsame WHERE IDcommissione=", tblComm.get_Campo((object)"IDcommissione", vFlagUpdateDB: false)));
PerseoNET/frmCommissioniEsame.cs:							vSQL = "SELECT IDcommissione FROM t_CommissioniEsame WHERE RecuperoAssenti=1 AND DataRiunionePreliminare=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataRichiesta=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " and FK_Sede=" + Conversions.ToString(value);
PerseoNET/frmCommissioniEsame.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT FK_Edizione, FK_Commissione FROM t_CommissioniEsameEdizioni WHERE FK_Commissione=", tblComm.get_Campo((object)"IDcommissione", vFlagUpdateDB: false)));
PerseoNET/frmCommissioniEsame.cs:									clsTblDatiDR.DestinazioneDati = "SELECT FK_Edizione, FK_Commissione FROM t_CommissioniEsameEdizioni ";
PerseoNET/clsStampaPagamento.cs:				string vSQL = "SELECT COUNT(DISTINCT DataPagamento) AS NumeroRecord, MAX(DataPagamento) AS UltimaData FROM t_ProgettiPagamentiCompensiOneri WHERE IDdocente=" + Conversions.ToString(vID) + " AND DataPagamento>=" + FunzStringa.StrDataSQL(str, FlagSqlServer: true) + " AND DataPagamento<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " ";
PerseoNET/clsStampaPagamento.cs:				vSQL = "SELECT COUNT(DISTINCT IDparcella) AS NumeroRecord, MAX(DataPagamento) AS UltimaData FROM t_DocentiParcelle WHERE FK_Docente=" + Conversions.ToString(vID) + " AND DataPagamento>=" + FunzStringa.StrDataSQL(str, FlagSqlServer: true) + " AND DataPagamento<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " ";
PerseoNET/clsStampaPagamento.cs:					vSQL = "SELECT IDparcella, DataPagamento FROM t_DocentiParcelle WHERE FK_Docente=" + Conversions.ToString(vID) + " AND DataPagamento=" + FunzStringa.StrDataSQL(Strings.Format(vDataPagamento, "dd/MM/yyyy"), FlagSqlServer: true) + " AND IDparcella<" + Conversions.ToString(vIDparcella) + " ";
PerseoNET/clsStampaPagamento.cs:				string text2 = (clsTblDatiDR.DestinazioneDati = "SELECT IDcompensi, SiglaSede, StrDOC, DescrParFiscale, sngCostoInc, sngRiva, sngCostiAggiuntivi, sngIVA, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, sngCassaPrev, ModoPaga FROM t_StampaPagamenti ");
PerseoNET/clsStampaPagamento.cs:				text2 = "SELECT (1) AS IDcompensi, SiglaSede, StrDOC, DescrParFiscale, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev, ModoPaga FROM t_StampaPagamenti GROUP BY ModoPaga, SiglaSede, StrDOC, DescrParFiscale ORDER BY SiglaSede, StrDOC, DescrParFiscale ";
PerseoNET/clsStampaPagamento.cs:				text2 = ((!vFlagSoloNetto) ? "SELECT (3) AS IDcompensi, ('---------------') AS SiglaSede, ('----------------------') AS StrDOC, ('Totale collaboratori/aziende') AS DescrParFiscale, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev FROM t_StampaPagamenti " : "SELECT (3) AS IDcompensi, ('---------------') AS SiglaSede, ('----------------------') AS StrDOC, ('Totale collaboratori/aziende') AS DescrParFiscale, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev FROM t_StampaPagamenti ");
PerseoNET/clsStampaPagamento.cs:				text2 = (clsTblDatiDR.DestinazioneDati = "SELECT IDcompensi, SiglaSede, StrDOC, DescrParFiscale, sngCostoInc, sngRiva, sngCostiAggiuntivi, sngIVA, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, sngCassaPrev FROM t_StampaPagamenti ");
PerseoNET/clsStampaPagamento.cs:				text2 = "SELECT SiglaSede, StrDOC, DescrParFiscale, sngCostoInc, sngRiva, sngCostiAggiuntivi, sngIVA, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, sngCassaPrev, ModoPaga FROM t_StampaPagamenti ORDER BY IDcompensi, SiglaSede, StrDOC ";
PerseoNET/clsStampaPagamento.cs:				string text2 = (clsTblDatiDR.DestinazioneDati = "SELECT IDcompensi, SiglaSede, StrDOC, DescrParFiscale, sngCostoInc, sngRiva, sngCostiAggiuntivi, sngIVA, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, sngCassaPrev, ModoPaga FROM t_StampaPagamenti ");
PerseoNET/clsStampaPagamento.cs:				text2 = "SELECT (1) AS IDcompensi, SiglaSede, StrDOC, DescrParFiscale, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev, ModoPaga FROM t_StampaPagamenti GROUP BY ModoPaga, SiglaSede, StrDOC, DescrParFiscale ORDER BY SiglaSede, StrDOC, DescrParFiscale ";
PerseoNET/clsStampaPagamento.cs:				text2 = "SELECT SiglaSede, StrDOC, DescrParFiscale, sngCostoInc, sngRiva, sngCostiAggiuntivi, sngIVA, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, sngCassaPrev, ModoPaga FROM t_StampaPagamenti WHERE IDcompensi=1 ORDER BY SiglaSede, StrDOC ";
PerseoNET/clsStampaPagamento.cs:				string text2 = (clsTblDatiDR.DestinazioneDati = ((!mvFlagGenerazioneAssegno) ? "SELECT IDcompensi, StrDOC, DescrParFiscale, sngCostoInc, sngRiva, sngCostiAggiuntivi, sngIVA, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, sngCassaPrev FROM t_StampaPagamenti " : "SELECT IDcompensi, StrDOC, DescrParFiscale, sngCostoInc, sngRiva, sngCostiAggiuntivi, sngIVA, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, sngCassaPrev, ModoPaga FROM t_StampaPagamenti "));
PerseoNET/clsStampaPagamento.cs:				text2 = ((!mvFlagGenerazioneAssegno) ? "SELECT (1) AS IDcompensi, StrDOC, DescrParFiscale, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev FROM t_StampaPagamenti GROUP BY ModoPaga, StrDOC, DescrParFiscale ORDER BY StrDOC, DescrParFiscale " : "SELECT (1) AS IDcompensi, StrDOC, DescrParFiscale, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev, ModoPaga FROM t_StampaPagamenti GROUP BY ModoPaga, StrDOC, DescrParFiscale ORDER BY StrDOC, DescrParFiscale ");
PerseoNET/clsStampaPagamento.cs:				text2 = "SELECT (3) AS IDcompensi, ('----------------------') AS StrDOC, ('Totale collaboratori/aziende') AS DescrParFiscale, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev FROM t_StampaPagamenti ";
PerseoNET/clsStampaPagamento.cs:				text2 = (clsTblDatiDR.DestinazioneDati = "SELECT IDcompensi, StrDOC, DescrParFiscale, sngCostoInc, sngRiva, sngCostiAggiuntivi, sngIVA, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, sngCassaPrev FROM t_StampaPagamenti ");
PerseoNET/clsStampaPagamento.cs:				text2 = "SELECT SiglaSede, StrDOC, DescrParFiscale, sngCostoInc, sngRiva, sngCostiAggiuntivi, sngIVA, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, sngCassaPrev, ModoPaga FROM t_StampaPagamenti ORDER BY IDcompensi, StrDOC ";
PerseoNET/clsStampaPagamento.cs:				string text2 = (clsTblDatiDR.DestinazioneDati = "SELECT IDcompensi, FK_SedeEdizione, SiglaSede, sngCostoInc, sngRiva, sngCostiAggiuntivi, sngIVA, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, sngCassaPrev FROM t_StampaPagamenti ");
PerseoNET/clsStampaPagamento.cs:				text2 = "SELECT (1) AS IDcompensi, FK_SedeEdizione, SiglaSede, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCostiAggiuntivi) AS sngCostiAggiuntivi, SUM(sngIVA) AS sngIVA, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(sngCassaPrev) AS sngCassaPrev FROM t_StampaPagamenti GROUP BY FK_SedeEdizione, SiglaSede ORDER BY SiglaSede ";
PerseoNET/clsStampaPagamento.cs:				text2 = "SELECT SiglaSede, (NULL) AS StrDOC, (NULL) AS DescrparFiscale, sngCostoInc, sngRiva, sngCostiAggiuntivi, sngIVA, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, sngCassaPrev FROM t_StampaPagamenti WHERE IDcompensi=1 ORDER BY SiglaSede ";
PerseoNET/frmDettModelloQstSboccoOccupazionale.cs:				string origineDati = "SELECT IDmodsbocc, DescrModelloQuest, Attivo, DataRec, DataModifica, Bloccato FROM t_ModelliQuestionarioOccupazione WHERE IDmodsbocc=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettModelloQstSboccoOccupazionale.cs:				origineDati = "SELECT t_ModelloDomandeQuestOccupazione.IDdomandaqsbo, FK_ModelloQuest, TipoSezioneQuestSbocco, IndDomanda, DescrDomanda, Rating, Attiva FROM t_ModelloDomandeQuestOccupazione INNER JOIN t_TipoSezioneQuestionarioSbocco ON t_ModelloDomandeQuestOccupazione.FK_TipoSezione = t_TipoSezioneQuestionarioSbocco.IDtmodqsbo WHERE FK_ModelloQuest=" + Conversions.ToString(FormQSO.ChiavePrimaria) + " ORDER BY IndTipoSezione, IndDomanda, DescrDomanda ";
PerseoNET/frmDettModelloQstSboccoOccupazionale.cs:				origineDati = "SELECT IDsceltaqsbo, FK_Domanda, IndScelta, DescrScelta, PuntRating, SceltaAttiva FROM t_ModelliQuestSboccoScelte WHERE IDsceltaqsbo=0";
PerseoNET/frmDettModelloQstSboccoOccupazionale.cs:				string origineDati = "SELECT IDdomandaqsbo, FK_ModelloQuest, DescrDomanda, IndDomanda, FK_TipoSezione, Attiva, Rating, DataRec, DataModifica FROM t_ModelloDomandeQuestOccupazione WHERE IDdomandaqsbo=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettModelloQstSboccoOccupazionale.cs:				origineDati = "SELECT IDtmodqsbo, TipoSezioneQuestSbocco FROM t_TipoSezioneQuestionarioSbocco WHERE Obsoleto=0 ORDER BY IndTipoSezione";
PerseoNET/frmDettModelloQstSboccoOccupazionale.cs:				string origineDati = "SELECT IDopzgrad, FK_Item, IndOpzione, DescrOpzione, OpzioneAttiva, DataRec, DataModifica FROM t_ModelloGradimentoItemOpzioni WHERE IDopzgrad=" + Conversions.ToString(vID);
PerseoNET/frmOpzioniEsportazione.cs:				string origineDati = "SELECT IDopz, Opzione FROM t_Opzioni";
PerseoNET/clsAutorizzaPagamento.cs:				string origineDati = "SELECT IDaltriredd, FK_Docente, AnnoSolare, AltriRedditi FROM t_DocentiOccasionaliAltriRedditi WHERE FK_Docente " + vFiltroIN + " AND AnnoSolare=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin)) + " ";
PerseoNET/clsAutorizzaPagamento.cs:					string origineDati = "SELECT IDaltriredd, FK_Docente, AnnoSolare, AltriRedditi FROM t_DocentiOccasionaliAltriRedditi WHERE FK_Docente=" + Conversions.ToString(vID) + " AND AnnoSolare=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin)) + " ";
PerseoNET/clsAutorizzaPagamento.cs:				string origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDdocente, SUM(sngCostoInc) AS PrecedenteCompenso FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc WHERE YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin)) + " AND TipoCococo=0 AND FK_Azienda IS NULL AND chbParasubordinato=1 AND Reso=0 GROUP BY IDdocente HAVING t_ProgettiPagamentiCompensiOneri.IDdocente " + vFiltroIN + " UNION SELECT t_Docenti.IDdocente, SUM(sngCostoInc) AS PrecedenteCompenso FROM t_DocentiParcelle INNER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc WHERE YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin)) + " AND TipoCococo=0 AND chbParasubordinato=1 GROUP BY IDdocente HAVING t_Docenti.IDdocente " + vFiltroIN + " ORDER BY IDdocente ";
PerseoNET/clsAutorizzaPagamento.cs:					origineDati = "SELECT t_ProgettiPagamentiFatture.IDprogfatt, t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, t_ProgettiPagamenti.FK_Progetto, FK_Sede, IDincarico, DataRichiestaInizio, DataRichiestaFine, Autorizzazione, Sospeso, DataStampaAutorizzazione, DataFattura, NumeroFattura, sngAliquotaPrevSepa, AltriRedditiOccasionale, (0) AS TotaleOre, (0) AS NCOD, (0) AS NCONS FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione AND t_ProgettiPagamenti.FK_Sede = t_PianoServizi.FK_SedeEdizione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione AND t_ProgettiPagamentiFatture.FK_Docente = t_IncarichiEdizioni.FK_Docente LEFT OUTER JOIN t_DocentiFatture ON t_ProgettiPagamentiFatture.FK_Fattura = t_DocentiFatture.IDfattura WHERE t_ProgettiPagamenti.DataPagamento IS NULL AND t_ProgettiPagamenti.FK_Progetto " + mvStrProgettiFiltroIN + " AND t_ProgettiPagamenti.FK_Sede " + mvStrSediFiltroIN + " AND Autorizzazione=1 AND Sospeso=0 ORDER BY t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, IDincarico ";
PerseoNET/clsAutorizzaPagamento.cs:					origineDati = "SELECT t_ProgettiPagamentiFatture.IDprogfatt, t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, t_ProgettiPagamenti.FK_Progetto, FK_Sede, IDincarico, DataRichiestaInizio, DataRichiestaFine, Autorizzazione, Sospeso, DataStampaAutorizzazione, DataFattura, NumeroFattura, sngAliquotaPrevSepa, AltriRedditiOccasionale, (0) AS TotaleOre, (0) AS NCOD, (SELECT COUNT(IDoremese) FROM t_IncarichiEdizioniOrePerMese WHERE DataSvolteDAL=t_ProgettiPagamenti.DataRichiestaInizio AND DataSvolteAL=t_ProgettiPagamenti.DataRichiestaFine) AS NCONS FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione AND t_ProgettiPagamenti.FK_Sede = t_PianoServizi.FK_SedeEdizione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione AND t_ProgettiPagamentiFatture.FK_Docente = t_IncarichiEdizioni.FK_Docente LEFT OUTER JOIN t_DocentiFatture ON t_ProgettiPagamentiFatture.FK_Fattura = t_DocentiFatture.IDfattura WHERE t_ProgettiPagamenti.DataPagamento IS NOT NULL AND t_ProgettiPagamentiFatture.FK_Docente = t_IncarichiEdizioni.FK_Docente AND Autorizzazione=1 AND Sospeso=1 " + text + "ORDER BY t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, IDincarico, DataRichiestaInizio ";
PerseoNET/clsAutorizzaPagamento.cs:					origineDati = "SELECT t_ProgettiPagamentiFatture.IDprogfatt, t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, t_ProgettiPagamenti.FK_Progetto, FK_Sede, IDincarico, DataRichiestaInizio, DataRichiestaFine, Autorizzazione, Sospeso, DataStampaAutorizzazione, DataFattura, NumeroFattura, sngAliquotaPrevSepa, AltriRedditiOccasionale, (0) AS TotaleOre, (0) AS NCOD, (SELECT COUNT(IDoremese) FROM t_IncarichiEdizioniOrePerMese WHERE DataSvolteDAL=t_ProgettiPagamenti.DataRichiestaInizio AND DataSvolteAL=t_ProgettiPagamenti.DataRichiestaFine) AS NCONS FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione AND t_ProgettiPagamenti.FK_Sede = t_PianoServizi.FK_SedeEdizione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione AND t_ProgettiPagamentiFatture.FK_Docente = t_IncarichiEdizioni.FK_Docente LEFT OUTER JOIN t_DocentiFatture ON t_ProgettiPagamentiFatture.FK_Fattura = t_DocentiFatture.IDfattura WHERE t_ProgettiPagamenti.DataPagamento IS NOT NULL AND t_ProgettiPagamentiFatture.FK_Docente = t_IncarichiEdizioni.FK_Docente AND Autorizzazione=1 AND Sospeso=0 " + text + "ORDER BY t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, IDincarico, DataRichiestaInizio ";
PerseoNET/clsAutorizzaPagamento.cs:					origineDati = "SELECT t_ProgettiPagamentiFatture.IDprogfatt, t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, t_ProgettiPagamenti.FK_Progetto, FK_Sede, IDincarico, DataRichiestaInizio, DataRichiestaFine, Autorizzazione, Sospeso, DataStampaAutorizzazione, DataFattura, NumeroFattura, sngAliquotaPrevSepa, AltriRedditiOccasionale, (0) AS TotaleOre, (0) AS NCOD, (0) AS NCONS FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione AND t_ProgettiPagamenti.FK_Sede = t_PianoServizi.FK_SedeEdizione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione AND t_ProgettiPagamentiFatture.FK_Docente = t_IncarichiEdizioni.FK_Docente LEFT OUTER JOIN t_DocentiFatture ON t_ProgettiPagamentiFatture.FK_Fattura = t_DocentiFatture.IDfattura WHERE t_ProgettiPagamenti.DataPagamento IS NOT NULL AND Autorizzazione=1 AND Sospeso=0 AND t_ProgettiPagamenti.DataRichiestaInizio='" + mvStrDataPagatoDAL + "' AND t_ProgettiPagamenti.DataRichiestaFine='" + mvStrDataPagatoAL + "' AND t_ProgettiPagamenti.FK_Progetto " + mvStrProgettiFiltroIN + " AND t_ProgettiPagamenti.FK_Sede " + mvStrSediFiltroIN + " ORDER BY t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, IDincarico ";
PerseoNET/clsAutorizzaPagamento.cs:					origineDati = "SELECT t_PagamentiIndividuali.IDpagaindiv, t_PagamentiIndividuali.FK_Docente, t_PagamentiIndividuali.FK_Azienda, (NULL) AS FK_Progetto, (NULL) AS FK_Sede, (t_PagamentiIndividualiIncarichi.FK_Incarico) AS IDincarico, DataRichiestaInizio, DataRichiestaFine, t_PagamentiIndividuali.Autorizzazione, Sospeso, DataStampaAutorizzazione, t_DocentiFatture.DataFattura, t_DocentiFatture.NumeroFattura, sngAliquotaPrevSepa, AltriRedditiOccasionale, (0) AS TotaleOre, (0) AS NCOD, (0) AS NCONS FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_PagamentiIndividuali ON t_ProgettiPagamentiCompensiOneri.FK_PagamentoIndividuale = t_PagamentiIndividuali.IDpagaindiv INNER JOIN t_PagamentiIndividualiIncarichi ON t_PagamentiIndividuali.IDpagaindiv = t_PagamentiIndividualiIncarichi.FK_Pagamento AND t_ProgettiPagamentiCompensiOneri.IDincarico = t_PagamentiIndividualiIncarichi.FK_Incarico LEFT OUTER JOIN t_DocentiFatture ON t_PagamentiIndividualiIncarichi.FK_Fattura = t_DocentiFatture.IDfattura WHERE t_ProgettiPagamentiCompensiOneri.DataPagamento IS NOT NULL AND t_PagamentiIndividuali.Autorizzazione=1 AND Sospeso=0 AND t_PagamentiIndividualiIncarichi.DataRichiestaInizio='" + mvStrDataPagatoDAL + "' AND t_PagamentiIndividualiIncarichi.DataRichiestaFine='" + mvStrDataPagatoAL + "' AND IDincarico " + vFiltroIN + " ORDER BY t_PagamentiIndividuali.FK_Docente, t_PagamentiIndividuali.FK_Azienda, IDincarico ";
PerseoNET/clsAutorizzaPagamento.cs:						origineDati = "SELECT (FK_IncaricoEdizione) AS IDincarico, FK_Azienda, FK_CodicePF FROM t_IncarichiEdizioniContratti INNER JOIN t_DocentiContrattiEsterni ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE FK_IncaricoEdizione " + mvAutorizza.StringaFiltroIN("IDincarico");
PerseoNET/clsDataRecordDR.cs:							else if (Operators.CompareString(Strings.Mid(value, 1, 7), "SELECT ", TextCompare: false) != 0)
PerseoNET/clsDataRecordDR.cs:								Information.Err().Raise(-2147220991, null, "Classe clsTblDatiAdoDR: proprietÃ  OrigineDati. Manca parola chiave SELECT.");
PerseoNET/clsDataRecordDR.cs:									if (Operators.CompareString(Strings.Mid(text2, i, 8), "(SELECT ", TextCompare: false) == 0)
PerseoNET/clsDataRecordDR.cs:										if (Operators.CompareString(Strings.Mid(text2, i, 8), "(SELECT ", TextCompare: false) == 0)
PerseoNET/frmProfiliUtenti.cs:				string origineDati = "SELECT t_Personale.IDpers, (Cognome + ' ' + Nome) AS Utente, Login, Disconnettere, (CASE WHEN Disconnettere=1 THEN OraRipristino ELSE NULL END) AS OraRipristino, (SELECT COUNT(IDsedeper) FROM t_SediVisibili WHERE FK_Personale=IDpers) AS NSedi, (SELECT COUNT(IDdiritti) FROM t_DirittiDB WHERE Nominativo=IDpers) AS NProc, DataPwd, AggiornaPerseo, RipristinaInstallazione, Attivo FROM t_Personale WHERE (SELECT COUNT(IDsedeper) FROM t_SediVisibili WHERE FK_Personale=IDpers)>0 AND Attivo=1 ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmProfiliUtenti.cs:					origineDati = ((VariabiliClassi.MonitorAsseX < 1280) ? "SELECT IDproc, Procedura FROM t_TipoDirittiDB WHERE Obsoleto=0 ORDER BY Gruppo, Ind, Procedura" : "SELECT IDproc, (Gruppo + ' - ' + Procedura) AS Procedura FROM t_TipoDirittiDB WHERE Obsoleto=0 ORDER BY Gruppo, Ind, Procedura");
PerseoNET/frmProfiliUtenti.cs:					origineDati = "SELECT IDsede, (CASE WHEN Attiva=1 THEN SiglaSede ELSE ('* ' + SiglaSede) END) AS SiglaSede FROM t_Sedi WHERE SedeTest=0 AND FK_TipoSede>=3 ORDER BY Attiva DESC, SiglaSede ";
PerseoNET/frmProfiliUtenti.cs:				string origineDati = "SELECT (t_Personale.IDpers) AS PKProfilo, (Cognome + ' ' + Nome) AS Utente, Login, (SELECT COUNT(IDsedeper) FROM t_SediVisibili WHERE FK_Personale=IDpers) AS SediVisibili, (SELECT COUNT(IDdiritti) FROM t_DirittiDB WHERE Nominativo=IDpers) AS NumeroProcedure, (SELECT MAX(Data) FROM t_StoricoEventi WHERE Tipo='CONNESSO' AND Persona=IDpers) AS UltimoAccesso, (SELECT COUNT(IDaccesso) FROM t_StoricoEventi WHERE Tipo='CONNESSO' AND Persona=IDpers) AS NumeroAccessi, DataPwd, Attivo FROM t_Personale ORDER BY (CASE WHEN Attivo=1 THEN 1 ELSE 2 END), (Cognome + ' ' + Nome) ";
PerseoNET/frmProfiliUtenti.cs:				origineDati = (clsTblDatiDR.OrigineDati = "SELECT IDpers, (Cognome + ' ' + Nome) AS Utente, Gruppo, t_TipoDirittiDB.Procedura, Accesso, Inserimento, Modifica, Eliminazione FROM t_DirittiDB INNER JOIN t_Personale ON t_DirittiDB.Nominativo = t_Personale.IDpers INNER JOIN t_TipoDirittiDB ON t_DirittiDB.Procedura = t_TipoDirittiDB.IDproc ORDER BY Gruppo, Ind, t_TipoDirittiDB.Procedura ");
PerseoNET/frmProfiliUtenti.cs:				string origineDati = "SELECT (t_Personale.IDpers) AS PKProfilo, (Cognome + ' ' + Nome) AS Utente, SiglaSede, PROVsede FROM t_Personale INNER JOIN t_SediVisibili ON t_Personale.IDpers = t_SediVisibili.FK_Personale INNER JOIN t_Sedi ON t_SediVisibili.FK_Sede = t_Sedi.IDsede ORDER BY SiglaSede, (CASE WHEN Attivo=1 THEN 1 ELSE 2 END), (Cognome + ' ' + Nome) ";
PerseoNET/frmProfiliUtenti.cs:						text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDsedeper) FROM t_SediVisibili WHERE FK_Personale=IDpers" + text2 + ")>0 ") : ("WHERE (SELECT COUNT(IDsedeper) FROM t_SediVisibili WHERE FK_Personale=IDpers" + text2 + ")>0 "));
PerseoNET/frmProfiliUtenti.cs:						text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDsedeper) FROM t_SediVisibili WHERE FK_Personale=IDpers)=0 ") : "WHERE (SELECT COUNT(IDsedeper) FROM t_SediVisibili WHERE FK_Personale=IDpers)=0 ");
PerseoNET/frmProfiliUtenti.cs:							text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDdiritti) FROM t_DirittiDB WHERE Nominativo=IDpers" + text2 + ")>0 ") : ("WHERE (SELECT COUNT(IDdiritti) FROM t_DirittiDB WHERE Nominativo=IDpers" + text2 + ")>0 "));
PerseoNET/frmProfiliUtenti.cs:							text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDdiritti) FROM t_DirittiDB WHERE Nominativo=IDpers" + text2 + ")=0 ") : ("WHERE (SELECT COUNT(IDdiritti) FROM t_DirittiDB WHERE Nominativo=IDpers" + text2 + ")=0 "));
PerseoNET/frmProfiliUtenti.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT Avviso FROM t_Personale WHERE IDpers=", tblProfili.get_Campo((object)"IDpers", vFlagUpdateDB: false)), " AND Avviso IS NOT NULL "));
PerseoNET/clsSede.cs:				string str = "SELECT IDsede, FK_TipoSede, DescrSede, SiglaSede, IDMW_Sede, ID_SedeFOL, ComuneSede, IndirizzoSede, CAPsede, PROVsede, TelSede, FaxSede, EmailSede, Attiva, SedeTest, RapprLegaleCognome, RapprLegaleNome, CF_RapprLegale, RuoloRapprLegale, FirmaRapprLegaleIMG, CF_PIVA, FirmaDocumenti, RuoloFirmaDocumenti, FirmaDocumentiIMG, FirmaAltro, RuoloFirmaAltro, OrdGruppo, ContrattoPregresso, DeltaAvvioContratto, DataRipristinoPregresso, DataBloccoIncassi, DataBloccoIncassiTemp, DataRipristinoBloccoInc, DataBloccoCollProf, DataRipristinoBloccoCProf, FileIntegrazione_LI, DettaglioEdizione_LI, AccreditataFormazione, AccreditataServizi, CodFiscaleSede, PIVASede, DescrAccreditamento, INAIL_Lab, BloccoLettereIncarico, PrefixModelliDOC FROM t_Sedi ";
PerseoNET/clsSede.cs:				str = "SELECT IDsede, FK_TipoSede, DescrSede, SiglaSede, IDMW_Sede, ID_SedeFOL, ComuneSede, IndirizzoSede, CAPsede, PROVsede, TelSede, FaxSede, EmailSede, Attiva, SedeTest, RapprLegaleCognome, RapprLegaleNome, CF_RapprLegale, RuoloRapprLegale, FirmaRapprLegaleIMG, CF_PIVA, FirmaDocumenti, RuoloFirmaDocumenti, FirmaDocumentiIMG, FirmaAltro, RuoloFirmaAltro, OrdGruppo, ContrattoPregresso, DeltaAvvioContratto, DataRipristinoPregresso, DataBloccoIncassi, DataBloccoIncassiTemp, DataRipristinoBloccoInc, DataBloccoCollProf, DataRipristinoBloccoCProf, FileIntegrazione_LI, DettaglioEdizione_LI, AccreditataFormazione, AccreditataServizi, CodFiscaleSede, PIVASede, DescrAccreditamento, INAIL_Lab, BloccoLettereIncarico, PrefixModelliDOC FROM t_Sedi ";
PerseoNET/clsSede.cs:				string origineDati = (Funzioni.UtenteGN() ? "SELECT t_Sedi.IDsede, (0) AS FK_Personale, (0) AS IDsedeper, DescrSede, SiglaSede, ComuneSede, FK_TipoSede, OrdGruppo, ContrattoPregresso, DeltaAvvioContratto, DataRipristinoPregresso, DataBloccoIncassi, DataBloccoIncassiTemp, DataRipristinoBloccoInc, Attiva, SedeTest FROM t_Sedi ORDER BY OrdGruppo, SiglaSede " : ("SELECT t_Sedi.IDsede, FK_Personale, IDsedeper, DescrSede, SiglaSede, ComuneSede, FK_TipoSede, OrdGruppo, ContrattoPregresso, DeltaAvvioContratto, DataRipristinoPregresso, DataBloccoIncassi, DataBloccoIncassiTemp, DataRipristinoBloccoInc, Attiva, SedeTest FROM t_SediVisibili INNER JOIN t_Sedi ON t_SediVisibili.FK_Sede = t_Sedi.IDsede WHERE FK_Personale=" + Conversions.ToString(VariabiliClassi.IDaccesso) + " AND SedeTest=0 ORDER BY OrdGruppo, SiglaSede "));
PerseoNET/clsSede.cs:				string origineDati = "SELECT IDsede, DataBloccoCollProf, DataRipristinoBloccoCProf FROM t_Sedi WHERE DataRipristinoBloccoCProf<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " AND IDsede " + Variabili.FiltroSedi + " ";
PerseoNET/clsSede.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT MAX(DataRichiestaFine) AS MaxDataRichiesta FROM t_ProgettiPagamenti WHERE FK_Sede=", clsTblDatiDR.get_Campo((object)"IDsede")), " AND Anticipo=0 "));
PerseoNET/clsSede.cs:				string origineDati = "SELECT IDsede, TipoSede, DescrSede, SiglaSede, ComuneSede, IndirizzoSede, CAPsede, PROVsede, TelSede, FaxSede, EmailSede, IDMW_Sede, ID_SedeFOL, (RapprLegaleCognome + ' ' + RapprLegaleNome) AS RapprLegaleSede, FirmaDocumenti, FirmaAltro, ContrattoPregresso, DeltaAvvioContratto, DataRipristinoPregresso, DataBloccoIncassi, DataBloccoIncassiTemp, DataRipristinoBloccoInc, DataBloccoCollProf, DataRipristinoBloccoCProf, Attiva FROM t_Sedi INNER JOIN t_TipoSede ON t_Sedi.FK_TipoSede = t_TipoSede.IDtsede WHERE IDsede " + Variabili.FiltroSedi + " ORDER BY FK_TipoSede, DescrSede";
PerseoNET/clsSede.cs:				origineDati = (clsTblDatiDR.OrigineDati = "SELECT SiglaSede, TitolareAssicurazione, DescrAssicurazione, PolizzaAss, TipoFormativoInterno, PolizzaAttiva FROM t_Sedi INNER JOIN t_ConvenzioniStagePolizze ON t_Sedi.IDsede = t_ConvenzioniStagePolizze.FK_Sede LEFT OUTER JOIN t_TipoFormativoInterno ON t_ConvenzioniStagePolizze.FK_TipoFormativo = t_TipoFormativoInterno.IDtformaint WHERE FK_TipoSede<>2 AND IDsede " + Variabili.FiltroSedi + " ORDER BY FK_TipoSede, Attiva DESC, SiglaSede, PolizzaAttiva DESC ");
PerseoNET/clsOFA.cs:						string origineDati = "SELECT IDiscrizione, IDutente, PresenzeSovra FROM t_IDiscritti ";
PerseoNET/clsOFA.cs:					string origineDati = "SELECT IDiscrizione, MAX(DataAttivita) AS DataAttivita FROM t_PianificazioneDocente WHERE Presenza='P' GROUP BY IDiscrizione HAVING IDiscrizione=" + Conversions.ToString(vIDiscr) + " ";
PerseoNET/clsOFA.cs:					vSQL = (vFlagGiorno ? "SELECT IDiscrizione, Studente, ID_Dote, ('A') AS StatoIscritto, (0) AS OreCredito, DataAttivita, TipoAttivita, SUM(Minuti) AS Minuti FROM t_PianificazioneDocente GROUP BY IDiscrizione, Studente, ID_Dote, DataAttivita, TipoAttivita ORDER BY Studente, IDiscrizione, DataAttivita, TipoAttivita " : "SELECT IDiscrizione, Studente, ID_Dote, ('A') AS StatoIscritto, (0) AS OreCredito, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, TipoAttivita, SUM(Minuti) AS Minuti FROM t_PianificazioneDocente GROUP BY IDiscrizione, Studente, ID_Dote, DataAttivita, TipoAttivita ORDER BY Studente, IDiscrizione, YEAR(DataAttivita), MONTH(DataAttivita), TipoAttivita ");
PerseoNET/clsOFA.cs:					vSQL = ((!vFlagGiorno) ? "SELECT YEAR(DataAttivita) AS Anno, MONTH(DataAttivita) AS Mese FROM t_PianificazioneDocente GROUP BY YEAR(DataAttivita), MONTH(DataAttivita) ORDER BY YEAR(DataAttivita), MONTH(DataAttivita) " : "SELECT DataAttivita, SUM(Minuti) AS MinutiData FROM t_PianificazioneAula GROUP BY DataAttivita ORDER BY DataAttivita ");
PerseoNET/clsOFA.cs:						vSQL = "SELECT IDiscrizione, Studente, ID_Dote, ('A') AS StatoIscritto, OreCredito, TipoAttivita, SUM(Minuti) AS Minuti ";
PerseoNET/clsOFA.cs:						string str3 = "SELECT IDiscrizione, Studente, ID_Dote, StatoIscritto, OreCredito, TipoAttivita, Minuti";
PerseoNET/clsOFA.cs:				vSQL = "SELECT COUNT(IDcalatt) AS NumeroRecord FROM t_RegistroStudentePIP WHERE IDiscrizione=" + Conversions.ToString(vIDiscr);
PerseoNET/clsOFA.cs:				vSQL = "SELECT IDutente, IDiscrizione, IDcalatt, (0) AS IDregstage, IDedizione, CodiceEdizione, DescrEdizione, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, TipoAttivita, (TipoAttivita) AS DescrModulo, (t_CalendarioAttivita.DescrAttivita) AS DescrArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS Docente, PresenzaStudentePIP, LavoroPIP, (1) AS OFA FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_StudentiDoti ON t_Utenti.IDutente = t_StudentiDoti.FK_Studente AND t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE FK_Iscrizione=" + Conversions.ToString(vIDiscr) + " AND FK_Argomento IS NULL AND LavoroPIP=1 ";
PerseoNET/clsOFA.cs:				vSQL = vSQL + "UNION SELECT IDutente, IDiscrizione, (CASE WHEN t_RegistroStage.FK_Attivita IS NOT NULL THEN IDcalatt ELSE 0 END) AS IDcalatt, IDregstage, IDedizione, CodiceEdizione, DescrEdizione, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, ID_Dote, IDmwiscr, (DataStage) AS DataAttivita, (OraIngresso) AS OraInizio, (OraUscita) AS OraFine, (DATEDIFF(mi,OraIngresso, OraUscita)) AS Minuti, (TipoAttivitaStage) AS TipoAttivita, (CASE WHEN FK_AttivitaDotePF IS NULL THEN TipoAttivitaStage ELSE t_StudentiDotiPianiFormativi.DescrAttivita END) AS DescrModulo, (CASE WHEN FK_AttivitaDotePF IS NULL THEN DescrAttivitaStage ELSE t_StudentiDotiPianiFormativi.DescrAttivita END) AS DescrArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS Docente, (1) AS PresenzaStudentePIP, (1) AS LavoroPIP, OFA FROM t_Docenti RIGHT OUTER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente RIGHT OUTER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico RIGHT OUTER JOIN t_RegistroStage INNER JOIN t_PianoServizi INNER JOIN t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage ON t_CalendarioAttivita.IDcalatt = t_RegistroStage.FK_Attivita LEFT OUTER JOIN t_StudentiDoti ON t_Utenti.IDutente = t_StudentiDoti.FK_Studente AND t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud LEFT OUTER JOIN t_StudentiDotiPianiFormativi ON t_RegistroStage.FK_AttivitaDotePF = t_StudentiDotiPianiFormativi.IDpfdote WHERE IDiscrizione=" + Conversions.ToString(vIDiscr) + " ";
PerseoNET/clsOFA.cs:				vSQL = "SELECT IDstudente, IDiscrizione, IDcalatt, IDregstage, IDedizione, CodiceEdizione, DescrEdizione, Studente, ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrModulo, DescrArgomento, Docente, PresenzaStudentePIP, LavoroPIP, OFA FROM t_RegistroStudentePIP ";
PerseoNET/clsOFA.cs:			string origineDati = "SELECT IDiscrizione, DataAttivita, OraInizio, OraFine, TipoAttivita, Docente, LavoroPIP, PresenzaStudentePIP FROM t_RegistroStudentePIP WHERE IDiscrizione=" + Conversions.ToString(vIDiscr) + " AND DataAttivita=" + FunzStringa.StrDataSQL(Strings.Format(vDataAttivita, "HH.mm")) + " " + text + "ORDER BY OraInizio, OraFine ";
PerseoNET/clsOFA.cs:				string origineDati = "SELECT SUM(Minuti) AS TotaleMinuti FROM t_RegistroStudentePIP WHERE IDiscrizione=" + Conversions.ToString(vIDiscr) + " ";
PerseoNET/clsOFA.cs:				string text = (mvFlagRegistroDigitaleSIUF ? "SELECT t_CalendarioAttivita.IDcalatt, (0) AS IDregstage, IDiscrizione, IDutente, IDedizione, CodiceEdizione, DescrEdizione, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, TipoAttivita, (TipoAttivita) AS DescrModulo, (t_CalendarioAttivita.DescrAttivita) AS DescrArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS Docente, PresenzaOFA, PresenzaINAIL, (CASE WHEN PresenzaOFA=1 THEN 'P' ELSE 'I' END) AS Presenza, PresenzaStudentePIP, LavoroPIP, (CASE WHEN PresenzaOFA=1 THEN 1 ELSE 0 END) AS OFA FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_StudentiDoti ON t_Utenti.IDutente = t_StudentiDoti.FK_Studente AND t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente " : "SELECT t_CalendarioAttivita.IDcalatt, (0) AS IDregstage, IDiscrizione, IDutente, IDedizione, CodiceEdizione, DescrEdizione, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, TipoAttivita, (TipoAttivita) AS DescrModulo, (t_CalendarioAttivita.DescrAttivita) AS DescrArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS Docente, PresenzaOFA, PresenzaINAIL, (CASE WHEN PresenzaStudentePIP=1 THEN 'P' ELSE 'A' END) AS Presenza, PresenzaStudentePIP, LavoroPIP, (1) AS OFA FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_StudentiDoti ON t_Utenti.IDutente = t_StudentiDoti.FK_Studente AND t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente ");
PerseoNET/clsOFA.cs:						text = ((!Operators.ConditionalCompareObjectEqual(Variabili.Edizione.get_Campo((object)"Gruppo"), false, TextCompare: false)) ? "SELECT IDcalatt, IDregstage, IDiscrizione, IDstudente, IDedizione, CodiceEdizione, DescrEdizione, Studente, ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrModulo, DescrArgomento, Docente, PresenzaOFA, PresenzaINAIL, Presenza, PresenzaStudentePIP, LavoroPIP, OFA FROM t_RegistroStudente " : "SELECT IDcalatt, IDregstage, IDiscrizione, IDstudente, IDedizione, CodiceEdizione, DescrEdizione, Studente, ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrModulo, DescrArgomento, Docente, PresenzaOFA, PresenzaINAIL, Presenza, PresenzaStudentePIP, LavoroPIP, OFA FROM t_PianificazioneDocente ");
PerseoNET/clsOFA.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, IDedizione, IDiscrizione, DataAttivita, OraInizio, OraFine, T_Ore, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, Aula, DescrModulo, DescrArgomento, TipoAreaFormativa, TipoArgomento, Docente, Studente, Locale, INAIL, ('P') AS Presenza, (True) AS OFA, (False) AS Giustificata, DocenzaFAD FROM t_PianificazioneDocente WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/clsOFA.cs:					vSQL = "SELECT IDcalatt, IDedizione, IDiscrizione, DataAttivita, OraInizio, OraFine, Minuti, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, Aula, DescrModulo, DescrArgomento, TipoAreaFormativa, TipoArgomento, Docente, Studente, Locale, INAIL, Presenza, OFA, Giustificata, DocenzaFAD FROM t_PianificazioneAula ";
PerseoNET/clsOFA.cs:					vSQL = "SELECT IDcalatt, (0) AS IDregstage, IDedizione, IDiscrizione, Studente, (NULL) AS ID_Dote, (NULL) AS IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, Aula, DescrModulo, DescrArgomento, TipoAreaFormativa, TipoArgomento, Docente, Locale, INAIL, Presenza, OFA, Giustificata, DocenzaFAD FROM t_PianificazioneAula ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsOFA.cs:				string str = "SELECT t_RegistroStage.IDregstage, (t_RegistroStage.FK_Attivita) AS IDcalatt, IDiscrizione, IDutente, IDedizione, CodiceEdizione, DescrEdizione, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, (NULL) AS ID_Dote, IDmwiscr, DataStage, OraIngresso, OraUscita, (DATEDIFF(mi,OraIngresso, OraUscita)) AS Minuti, (CASE WHEN t_RegistroStage.FK_Attivita IS NULL THEN TipoAttivitaStage WHEN PIP=0 THEN TipoAttivitaStage ELSE (SELECT TipoAttivita FROM t_StudentiDotiPianiFormativi INNER JOIN t_TipoAttivitaEdizione ON t_StudentiDotiPianiFormativi.FK_TipoAttivitaPF = t_TipoAttivitaEdizione.IDtattivita WHERE t_CalendarioAttivita.FK_DotePIP=t_StudentiDotiPianiFormativi.IDpfdote) END) AS TipoAttivita, (CASE WHEN t_RegistroStage.FK_Attivita  IS NULL THEN DescrAttivitaStage ELSE t_CalendarioAttivita.DescrAttivita END) AS DescrModulo, (CASE WHEN t_RegistroStage.FK_Attivita  IS NULL THEN DescrAttivitaStage ELSE t_CalendarioAttivita.DescrAttivita END) AS DescrAttivitaStage, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS Tutor, OFA, ('P') AS Presenza, (0) AS Giustificata FROM t_Docenti RIGHT OUTER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente RIGHT OUTER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico RIGHT OUTER JOIN t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage ON t_CalendarioAttivita.IDcalatt = t_RegistroStage.FK_Attivita LEFT OUTER JOIN t_StudentiDotiPianiFormativi ON t_RegistroStage.FK_AttivitaDotePF = t_StudentiDotiPianiFormativi.IDpfdote ";
PerseoNET/clsOFA.cs:				str = "SELECT IDregstage, IDcalatt, IDiscrizione, IDstudente, IDedizione, CodiceEdizione, DescrEdizione, Studente, ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrModulo, DescrArgomento, Docente, OFA, Presenza, Giustificata FROM t_RegistroStudente ";
PerseoNET/clsOFA.cs:				string text2 = ((num2 != 0L) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDassenza, IDcalatt, t_AssenzeAttivita.FK_Iscrizione, DataAttivita, DataRecupero, DATEDIFF(mi, OraInizio, OraFine) AS MinutiLezione, Minuti, Giustificata FROM t_AssenzeAttivita INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND t_AssenzeAttivita.FK_Iscrizione="), num2), " "), "AND DataAttivita>='"), mvStrDataDAL), "' AND DataAttivita<='"), mvStrDataAL), "' "), "ORDER BY t_AssenzeAttivita.FK_Iscrizione, DataAttivita, IDcalatt ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDassenza, IDcalatt, t_AssenzeAttivita.FK_Iscrizione, DataAttivita, DataRecupero, DATEDIFF(mi, OraInizio, OraFine) AS MinutiLezione, Minuti, Giustificata FROM t_AssenzeAttivita INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataAttivita>='"), mvStrDataDAL), "' AND DataAttivita<='"), mvStrDataAL), "' "), "ORDER BY t_AssenzeAttivita.FK_Iscrizione, DataAttivita, IDcalatt ")));
PerseoNET/clsOFA.cs:					text2 = "SELECT IDassenza, IDcalatt, IDiscrizione, DataAttivita, DataRecupero, MinutiLezione, Minuti, Giustificata FROM t_AssenzeEdizione ";
PerseoNET/clsOFA.cs:				string vSQL = "SELECT IDtstage, TipoAttivitaStage FROM t_TipoAttivitaStage WHERE Stage=True ";
PerseoNET/clsOFA.cs:				vSQL = "SELECT IDtstage, TipoAttivitaStage FROM t_TipoAttivitaStage WHERE Stage=False ";
PerseoNET/clsOFA.cs:					vSQL = "SELECT (" + Conversions.ToString(vIDiscr) + ") AS IDiscrizione, SUM(Minuti) AS TotMinuti, ('AulaFatte') AS Tipo FROM t_PianificazioneAula ";
PerseoNET/clsOFA.cs:					vSQL = vSQL + "UNION SELECT IDiscrizione, SUM(Minuti) AS TotMinuti, ('AulaAssenze') AS Tipo FROM t_AssenzeEdizione WHERE DataRecupero IS NULL GROUP BY IDiscrizione HAVING IDiscrizione=" + Conversions.ToString(vIDiscr) + " ";
PerseoNET/clsOFA.cs:					vSQL = vSQL + "UNION SELECT IDiscrizione, SUM(Minuti) AS TotMinuti, ('AulaRecuperate') AS Tipo FROM t_AssenzeEdizione WHERE DataRecupero IS NOT NULL GROUP BY IDiscrizione HAVING IDiscrizione=" + Conversions.ToString(vIDiscr) + " ";
PerseoNET/clsOFA.cs:						vSQL = vSQL + "UNION SELECT (" + Conversions.ToString(vIDiscr) + ") AS IDiscrizione, SUM(Minuti) AS TotMinuti, ('AulaRitiro') AS Tipo FROM t_PianificazioneAula WHERE DataAttivita>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_CampoIscrizione((object)"DataRitiro")), "dd/MM/yyyy")) + " ";
PerseoNET/clsOFA.cs:						vSQL = vSQL + "UNION SELECT (" + Conversions.ToString(vIDiscr) + ") AS IDiscrizione, SUM(Minuti) AS TotMinuti, ('AulaSubentro') AS Tipo FROM t_PianificazioneAula WHERE DataAttivita<" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_CampoIscrizione((object)"DataIscr")), "dd/MM/yyyy")) + " ";
PerseoNET/clsOFA.cs:					vSQL = "SELECT IDiscrizione, SUM(Minuti) AS TotMinuti, ('AulaFatte') AS Tipo FROM t_PianificazioneAula GROUP BY Aula, IDiscrizione HAVING Aula=True AND IDiscrizione=" + Conversions.ToString(vIDiscr) + " ";
PerseoNET/clsOFA.cs:				vSQL = vSQL + "UNION SELECT IDiscrizione, SUM(Minuti) AS TotMinuti, ('Individuali') AS Tipo FROM t_RegistroStudente WHERE OFA=True AND LavoroPIP=False AND PresenzaStudentePIP=False GROUP BY IDiscrizione HAVING IDiscrizione=" + Conversions.ToString(vIDiscr) + " ";
PerseoNET/clsOFA.cs:				vSQL = vSQL + "UNION SELECT IDiscrizione, SUM(Minuti) AS TotMinuti, ('Individuali PIP') AS Tipo FROM t_PianificazioneDocente WHERE OFA=True AND PresenzaStudentePIP=True GROUP BY IDiscrizione HAVING IDiscrizione=" + Conversions.ToString(vIDiscr) + " ";
PerseoNET/clsOFA.cs:				string origineDati = "SELECT IDiscrizione, Studente, ID_Dote, PIPEsterno, IDmwiscr, CodiceEdizione, DescrEdizione, DataAttivita, DescrModulo, (0) AS Ore, SUM(Minuti) AS Minuti, OFA, INAIL FROM t_RegistroStudentePIP GROUP BY IDiscrizione, CodiceEdizione, DescrEdizione, Studente, ID_Dote, PIPEsterno, IDmwiscr, DataAttivita, DescrModulo, OFA, INAIL ORDER BY Studente, DataAttivita, CodiceEdizione, DescrModulo ";
PerseoNET/clsOFA.cs:				string origineDati = ((!vFlagPerAttivita) ? "SELECT IDiscrizione, Studente, ID_Dote, PIPEsterno, IDmwiscr, CodiceEdizione, DescrEdizione, DataAttivita, TipoAttivita, DescrModulo, (0) AS Ore, SUM(Minuti) AS Minuti, OFA, INAIL FROM t_RegistroProgettoPIP GROUP BY IDiscrizione, CodiceEdizione, DescrEdizione, Studente, ID_Dote, PIPEsterno, IDmwiscr, DataAttivita, TipoAttivita, DescrModulo, OFA, INAIL ORDER BY Studente, DataAttivita, CodiceEdizione, DescrModulo " : "SELECT IDiscrizione, Studente, ID_Dote, PIPEsterno, IDmwiscr, CodiceEdizione, DescrEdizione, TipoAttivita, (0) AS Ore, SUM(Minuti) AS Minuti FROM t_RegistroProgettoPIP GROUP BY IDiscrizione, CodiceEdizione, DescrEdizione, Studente, ID_Dote, PIPEsterno, IDmwiscr, TipoAttivita ORDER BY Studente, CodiceEdizione, TipoAttivita ");
PerseoNET/clsOFA.cs:				string origineDati = "SELECT Studente, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrModulo, DescrArgomento, Docente, OFA, INAIL, Presenza, IIf(Presenza='A',IIf(Giustificata=True,'SÃ¬','No'),NULL) AS Giustificata, (NULL) AS Settimana FROM t_PianificazioneDocente ORDER BY Studente, IDiscrizione, DataAttivita, OraInizio ";
PerseoNET/clsOFA.cs:				string origineDati = ((vIDiscr <= 0) ? "SELECT Studente, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrModulo, DescrArgomento, Docente, DocenzaFAD, OFA, INAIL, Presenza, IIf(Presenza='A',IIf(Giustificata=True,'SÃ¬','No'),NULL) AS Giustificata, (NULL) AS Settimana FROM t_PianificazioneDocente ORDER BY Studente, IDiscrizione, DataAttivita, OraInizio " : ("SELECT DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrModulo, DescrArgomento, Docente, DocenzaFAD, OFA, INAIL, Presenza, IIf(Presenza='A',IIf(Giustificata=True,'SÃ¬','No'),NULL) AS Giustificata, (NULL) AS Settimana FROM t_PianificazioneDocente WHERE IDiscrizione=" + Conversions.ToString(vIDiscr) + " ORDER BY DataAttivita, OraInizio "));
PerseoNET/clsOFA.cs:				string origineDati = "SELECT DataAttivita, OraInizio, OraFine, DescrArgomento, Docente, Presenza FROM t_PianificazioneDocente WHERE IDiscrizione=" + Conversions.ToString(vIDiscr) + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsOFA.cs:				string origineDati = "SELECT (IDiscrizione) AS NumIscr, Studente, ID_Dote, PIPEsterno, IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrModulo, DescrArgomento, Docente, OFA, INAIL, Presenza, LavoroPIP FROM t_RegistroStudentePIP ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsOFA.cs:				string origineDati = "SELECT IDregstage, IDcalatt, IDiscrizione, IDstudente, IDedizione, CodiceEdizione, DescrEdizione, Studente, ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrModulo, DescrArgomento, Docente, OFA, INAIL, Presenza, LavoroPIP, PresenzaStudentePIP FROM t_PianificazioneDocente WHERE IDiscrizione=" + Conversions.ToString(vIDiscr) + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsOFA.cs:				origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT IDregstage, IDcalatt, IDiscrizione, IDstudente, IDedizione, CodiceEdizione, DescrEdizione, Studente, ID_Dote, Idmwiscr, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrModulo, DescrArgomento, Docente, OFA, INAIL, Presenza, LavoroPIP, PresenzaStudentePIP FROM t_RegistroStudentePIP ");
PerseoNET/clsOFA.cs:				string origineDati = "SELECT IDregstage, IDcalatt, IDiscrizione, IDstudente, IDedizione, CodiceEdizione, DescrEdizione, Studente, ID_Dote, Idmwiscr, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrModulo, DescrArgomento, Docente, OFA, INAIL, Presenza, LavoroPIP, PresenzaStudentePIP FROM t_RegistroStudentePIP ";
PerseoNET/clsOFA.cs:				origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT IDregstage, IDcalatt, IDiscrizione, IDstudente, IDedizione, CodiceEdizione, DescrEdizione, Studente, ID_Dote, Idmwiscr, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrModulo, DescrArgomento, Docente, OFA, INAIL, Presenza, LavoroPIP, PresenzaStudentePIP FROM t_RegistroProgettoPIP ");
PerseoNET/clsOFA.cs:				string origineDati = "SELECT IDiscrizione, Studente, CodiceEdizione, Sede, DataIscr, DataRitiro, DataUltimaPresenza FROM t_Utenti ";
PerseoNET/clsOFA.cs:					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDstudente, Studente, ('", Variabili.Edizione.get_CampoIscrizione((object)"ID_Dote")), "') AS Dote, "), "('"), Variabili.Edizione.get_CampoIscrizione((object)"IDmwiscr")), "') AS ID_Iscr, "), "DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrArgomento, Docente, "), "Giustificata, Presenza "), "FROM t_PianificazioneDocente "), "WHERE IDiscrizione="), vIDiscr), " AND OFA=True "), "ORDER BY DataAttivita, OraInizio, OraFine "));
PerseoNET/clsOFA.cs:					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDstudente, Studente, ('", Variabili.Edizione.get_CampoIscrizione((object)"ID_Dote")), "') AS Dote, "), "('"), Variabili.Edizione.get_CampoIscrizione((object)"IDmwiscr")), "') AS ID_Iscr, "), "DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrArgomento, Docente, "), "Giustificata, Presenza "), "FROM t_PianificazioneDocente "), "WHERE IDiscrizione="), vIDiscr), " AND OFA=True AND (TipoAttivita='DOCENZA' OR TipoAttivita LIKE 'LARSA%') "), "ORDER BY DataAttivita, OraInizio, OraFine "));
PerseoNET/clsOFA.cs:					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDstudente, Studente, ('", Variabili.Edizione.get_CampoIscrizione((object)"ID_Dote")), "') AS Dote, "), "('"), Variabili.Edizione.get_CampoIscrizione((object)"IDmwiscr")), "') AS ID_Iscr, "), "DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrArgomento, Docente, "), "Giustificata, Presenza "), "FROM t_RegistroStudente "), "WHERE (IDiscrizione="), vIDiscr), " AND OFA=True AND TipoAttivita<>'DOCENZA') "), "OR (IDiscrizione="), vIDiscr), " AND TipoAttivita='STAGE - ASSENZA GIUSTIFICATA') "), "ORDER BY DataAttivita, OraInizio, OraFine "));
PerseoNET/clsOFA.cs:					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDstudente, Studente, ('", Variabili.Edizione.get_CampoIscrizione((object)"ID_Dote")), "') AS Dote, "), "('"), Variabili.Edizione.get_CampoIscrizione((object)"IDmwiscr")), "') AS ID_Iscr, "), "DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrArgomento, Docente, "), "Giustificata, Presenza "), "FROM t_RegistroStudente "), "WHERE IDiscrizione="), vIDiscr), " AND OFA=False "), "ORDER BY DataAttivita, OraInizio, OraFine "));
PerseoNET/clsOFA.cs:					text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDstudente, Studente, ('", Variabili.Edizione.get_CampoIscrizione((object)"ID_Dote")), "') AS Dote, "), "('"), Variabili.Edizione.get_CampoIscrizione((object)"IDmwiscr")), "') AS ID_Iscr, "), "DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrArgomento, Docente, "), "Giustificata, Presenza "), "FROM t_PianificazioneDocente "), "WHERE IDiscrizione="), vIDiscr), " AND OFA=True "), "ORDER BY DataAttivita, OraInizio, OraFine "));
PerseoNET/clsOFA.cs:				text = (clsTblDatiDR.DestinazioneDati = "SELECT IDiscrizione, IDstudente, Studente, ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrAttivita, Docente, Giustificata, Presenza FROM t_StampaStageStudente ");
PerseoNET/clsOFA.cs:					text = "SELECT IDiscrizione, Studente, ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrAttivita, Docente, Presenza,IIf(Presenza='A',IIf(Giustificata=True,'SÃ¬','No'),NULL) AS Giustificata FROM t_StampaStageStudente ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsOFA.cs:					string origineDati = "SELECT IDcalatt, (0) AS IDregstage, IDedizione, IDiscrizione, Studente, (NULL) AS ID_Dote, (NULL) AS IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, Aula, DescrModulo, DescrArgomento, TipoAreaFormativa, TipoArgomento, Docente, Locale, INAIL, Presenza, OFA, Giustificata, DocenzaFAD FROM t_PianificazioneAula ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsOFA.cs:						origineDati = "SELECT IDcalatt, IDregstage, IDedizione, IDiscrizione, Studente, ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, Aula, DescrModulo, DescrArgomento, TipoAreaFormativa, TipoArgomento, Docente, Locale, INAIL, Presenza, OFA, Giustificata, DocenzaFAD FROM t_PianificazioneDocente ";
PerseoNET/clsOFA.cs:							origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT IDcalatt, IDregstage, IDedizione, IDiscrizione, Studente, ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, Aula, DescrModulo, DescrArgomento, TipoAreaFormativa, TipoArgomento, Docente, Locale, INAIL, Presenza, OFA, Giustificata, DocenzaFAD FROM t_PianificazioneDocente ");
PerseoNET/clsOFA.cs:					origineDati = "SELECT IDregstage, IIf(IDcalatt IS NULL,0,IDcalatt) AS ID_calatt, IDiscrizione, IDstudente, IDedizione, CodiceEdizione, DescrEdizione, Studente, (NULL) AS ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, IIf(DescrModulo IS NOT NULL,DescrModulo,IIf(TipoAttivita<>'STAGE - ASSENZA GIUSTIFICATA',TipoAttivita,NULL)) AS DescrModulo, DescrArgomento, Docente, OFA, (True) AS INAIL, Presenza, Giustificata FROM t_RegistroStudente WHERE IDiscrizione=" + Conversions.ToString(vIDiscr) + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsOFA.cs:						origineDati = (clsTblDatiDR2.DestinazioneDati = "SELECT IDregstage, IDcalatt, IDiscrizione, IDstudente, IDedizione, CodiceEdizione, DescrEdizione, Studente, ID_Dote, IDmwiscr, DataAttivita, OraInizio, OraFine, Minuti, TipoAttivita, DescrModulo, DescrArgomento, Docente, OFA, INAIL, Presenza, Giustificata FROM t_PianificazioneDocente ");
PerseoNET/clsOFA.cs:					string origineDati = "SELECT IDtstage, TipoAttivitaStage, Stage FROM t_TipoAttivitaStage WHERE Stage=True ";
PerseoNET/clsOFA.cs:					origineDati = "SELECT IDiscrizione, CodiceEdizione, Studente, DataAttivita, OraInizio, OraFine, TipoAttivita, TipoArgomento, Descrizione, Docente, ID_Dote, DescrAttivitaPIP FROM t_Sovrapposizioni ";
PerseoNET/clsOFA.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, ('" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.Edizione.get_Campo((object)"CodiceEdizione"))) + "') AS CodiceEdizione, (NULL) AS Studente, DataAttivita, OraInizio, OraFine, TipoAttivita, TipoArgomento, (DescrArgomento) AS Descrizione, (Cognome + ' ' + Nome) AS Docente, (NULL) AS FK_AttivitaDotePIP FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg WHERE TipoAttivita IN('DOCENZA','LARSA') AND t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " "), "AND DataAttivita>="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " AND DataAttivita<="), FunzStringa.StrDataSQL(text3, FlagSqlServer: true)), " "), "ORDER BY DataAttivita, OraInizio"));
PerseoNET/clsOFA.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, (FK_Attivita) AS IDcalatt FROM t_Iscrizioni INNER JOIN t_AssenzeAttivita ON t_Iscrizioni.IDiscrizione = t_AssenzeAttivita.FK_Iscrizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " "), "AND DataAssenza>="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " AND DataAssenza<="), FunzStringa.StrDataSQL(text3, FlagSqlServer: true)), " "), "ORDER BY IDiscrizione, FK_Attivita"));
PerseoNET/clsOFA.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, (FK_Attivita) AS IDcalatt, SedeRecupero, DataRecupero, OraInizioRecupero, OraFineRecupero FROM t_Iscrizioni INNER JOIN t_AssenzeAttivita ON t_Iscrizioni.IDiscrizione = t_AssenzeAttivita.FK_Iscrizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " AND OraInizioRecupero IS NOT NULL "), "ORDER BY IDiscrizione, FK_Attivita"));
PerseoNET/clsOFA.cs:					origineDati = "SELECT IDiscrizione, CodiceEdizione, (NULL) AS Studente, (DataStage) AS DataAttivita, (OraIngresso) AS OraInizio, (OraUscita) AS OraFine, (TipoAttivitaStage) AS TipoAttivita, (NULL) AS TipoArgomento, (DescrAttivitaStage) AS Descrizione, (NULL) AS Docente, (FK_AttivitaDotePF) AS FK_AttivitaDotePIP, (FK_Utente) AS IDutente FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE FK_Utente " + text + " AND DataStage>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataStage<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " ORDER BY FK_Utente, IDiscrizione, DataStage, OraIngresso ";
PerseoNET/clsOFA.cs:					origineDati = "SELECT IDiscrizione, CodiceEdizione, (NULL) AS Studente, DataAttivita, OraInizio, OraFine, TipoAttivita, (NULL) AS TipoArgomento, (t_CalendarioAttivita.DescrAttivita) AS Descrizione, (Cognome + ' ' + Nome) AS Docente, (FK_DotePIP) AS FK_AttivitaDotePIP, (FK_Utente) AS IDutente FROM t_CalendarioAttivita INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_StudentiDotiPianiFormativi ON t_CalendarioAttivita.FK_DotePIP = t_StudentiDotiPianiFormativi.IDpfdote WHERE FK_Utente " + text + " AND DataAttivita>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND PresenzaStudentePIP=1 ORDER BY FK_Utente, FK_Iscrizione, DataAttivita, OraInizio";
PerseoNET/clsOFA.cs:						origineDati = (clsTblDatiDR7.OrigineDatiUnione = "SELECT IDiscrizione, CodiceEdizione, (NULL) AS Studente, DataAttivita, OraInizio, OraFine, TipoAttivita, (NULL) AS TipoArgomento, (t_CalendarioAttivita.DescrAttivita) AS Descrizione, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS Docente, (NULL) AS FK_AttivitaDotePIP, (FK_Utente) AS IDutente FROM t_CalendarioAttivita INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE FK_Utente " + text + " AND DataAttivita>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND FK_Argomento IS NOT NULL ORDER BY FK_Utente, FK_Iscrizione, DataAttivita, OraInizio");
PerseoNET/clsOFA.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, IDiscrizione, (FK_Utente) AS IDutente, DataIscr, DataRitiro, CodiceEdizione, DescrEdizione, DataAvvio, DataFine FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione  WHERE FK_Utente " + text + " AND Gruppo=1 AND Durata>0 AND IDedizione<>", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataFine>="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " AND DataAvvio<="), FunzStringa.StrDataSQL(text3, FlagSqlServer: true)), " AND ControlloSovraStudenti=1 "), "ORDER BY FK_Utente, IDiscrizione, IDedizione "));
PerseoNET/clsOFA.cs:					origineDati = "SELECT IDpfdote, SovrapponibileStage FROM t_Iscrizioni INNER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud INNER JOIN t_StudentiDotiPianiFormativi ON t_StudentiDoti.IDdotestud = t_StudentiDotiPianiFormativi.FK_Dote INNER JOIN t_Progetti ON t_StudentiDoti.FK_ProgettoRendiconta = t_Progetti.IDprogetto INNER JOIN t_ProgettiServiziPIP ON t_Progetti.IDprogetto = t_ProgettiServiziPIP.FK_Progetto AND t_StudentiDotiPianiFormativi.FK_TipoAttivitaPF = t_ProgettiServiziPIP.FK_TipoAttivitaPF WHERE (IDiscrizione " + str + " AND SovrapponibileStage=1) ";
PerseoNET/clsOFA.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, (FK_Attivita) AS IDcalatt FROM t_Iscrizioni INNER JOIN t_AssenzeAttivita ON t_Iscrizioni.IDiscrizione = t_AssenzeAttivita.FK_Iscrizione WHERE IDiscrizione=", Variabili.Edizione.get_CampoIscrizione((object)"IDiscrizione")), " "), "ORDER BY IDiscrizione, FK_Attivita"));
PerseoNET/clsOFA.cs:						origineDati = "SELECT IDiscrizione, ('" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.Edizione.get_Campo((object)"CodiceEdizione"))) + "') AS CodiceEdizione, (NULL) AS Studente, (DataStage) AS DataAttivita, (OraIngresso) AS OraInizio, (OraUscita) AS OraFine, (TipoAttivitaStage) AS TipoAttivita, (NULL) AS TipoArgomento, (NULL) AS Descrizione, (NULL) AS Docente, (NULL) AS FK_AttivitaDotePIP FROM t_Iscrizioni INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage ";
PerseoNET/clsOFA.cs:						origineDati = "SELECT IDiscrizione, ('" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.Edizione.get_Campo((object)"CodiceEdizione"))) + "') AS CodiceEdizione, (NULL) AS Studente, DataAttivita, OraInizio, OraFine, TipoAttivita, (NULL) AS TipoArgomento, (NULL) AS Descrizione, (Cognome + ' ' + Nome) AS Docente, FK_AttivitaDotePIP FROM t_CalendarioAttivita INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente ";
PerseoNET/clsOFA.cs:						origineDati = "SELECT IDiscrizione, (FK_Attivita) AS IDcalatt, SedeRecupero, DataRecupero, OraInizioRecupero, OraFineRecupero FROM t_Iscrizioni INNER JOIN t_AssenzeAttivita ON t_Iscrizioni.IDiscrizione = t_AssenzeAttivita.FK_Iscrizione ";
PerseoNET/clsOFA.cs:					string origineDati = "SELECT IDiscrizione, IDutente, IDedizione, IDassenza, (Cognome + ' ' Nome) AS Studente, DataIscr, DataRitiro, CodiceEdizione, DescrEdizione, DataAttivita, OraInizio, OraFine, ('DOCENZA') AS TipoAttivita, DataRecupero, OraInizioRecupero, OraFineRecupero, (0) AS Sovrapposizione FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN t_AssenzeAttivita ON t_CalendarioAttivita.IDcalatt = t_AssenzeAttivita.FK_Attivita AND t_Iscrizioni.IDiscrizione = t_AssenzeAttivita.FK_Iscrizione WHERE (IDutente=" + Conversions.ToString(IDstudente) + " AND FK_Argomento IS NOT NULL AND DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND (t_AssenzeAttivita.FK_Iscrizione=t_Iscrizioni.IDiscrizione OR t_AssenzeAttivita.FK_Iscrizione IS NULL)) OR (IDutente=" + Conversions.ToString(IDstudente) + " AND FK_Argomento IS NOT NULL AND DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND IDassenza IS NULL AND t_CalendarioAttivita.FK_Iscrizione=t_Iscrizioni.IDiscrizione) ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsOFA.cs:					origineDati = "SELECT IDiscrizione, IDutente, IDedizione, (Cognome + ' ' Nome) AS Studente, CodiceEdizione, DescrEdizione, (DataStage) AS DataAttivita, (OraIngresso) AS OraInizio, (OraUscita) AS OraFine, (TipoAttivitaStage) AS TipoAttivita FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage  WHERE IDutente=" + Conversions.ToString(IDstudente) + " AND DataStage>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND OFA=1 ORDER BY DataStage, OraIngresso ";
PerseoNET/clsOFA.cs:					origineDati = "SELECT IDiscrizione, IDutente, IDedizione, (Cognome + ' ' Nome) AS Studente, CodiceEdizione, DescrEdizione, DataAttivita, OraInizio, OraFine, ('SERVIZI PERSONALIZZATI') AS TipoAttivita FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE IDutente=" + Conversions.ToString(IDstudente) + " AND DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND t_CalendarioAttivita.FK_Iscrizione=t_Iscrizioni.IDiscrizione AND PresenzaStudentePIP=1 ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsOFA.cs:				string origineDati = "SELECT IDdotestud, (FK_Studente) AS IDutente, IDiscrizione, (FK_Edizione) AS IDedizione, DataAvvioDote, DataFineDote, DataDoteChiusa, (Cognome + ' ' + Nome) AS Studente, ID_Dote FROM t_StudentiDoti INNER JOIN t_Iscrizioni ON t_StudentiDoti.IDdotestud = t_Iscrizioni.FK_DoteStudente INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE IDdotestud=" + Conversions.ToString(vIDdote);
PerseoNET/clsOFA.cs:						origineDati = "SELECT IDiscrizione, CodiceEdizione, Studente, DataAttivita, OraInizio, OraFine, TipoAttivita, Descrizione, Docente FROM t_Sovrapposizioni ";
PerseoNET/clsOFA.cs:						origineDati = "SELECT IDiscrizione, CodiceEdizione, (NULL) AS Studente, (DataStage) AS DataAttivita, (OraIngresso) AS OraInizio, (OraUscita) AS OraFine, (TipoAttivitaStage) AS TipoAttivita, (DescrAttivitaStage) AS Descrizione, (NULL) AS Docente, (FK_Utente) AS IDutente FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE FK_Utente " + text + " AND DataStage>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataStage<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " ORDER BY FK_Utente, IDiscrizione, DataStage, OraIngresso ";
PerseoNET/clsOFA.cs:						origineDati = "SELECT IDiscrizione, CodiceEdizione, (NULL) AS Studente, DataAttivita, OraInizio, OraFine, TipoAttivita, (t_CalendarioAttivita.DescrAttivita) AS Descrizione, (Cognome + ' ' + Nome) AS Docente, (FK_Utente) AS IDutente FROM t_CalendarioAttivita INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE FK_Utente " + text + " AND DataAttivita>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND PresenzaStudentePIP=1 ORDER BY FK_Utente, FK_Iscrizione, DataAttivita, OraInizio";
PerseoNET/clsOFA.cs:						origineDati = "SELECT IDedizione, IDiscrizione, (FK_Utente) AS IDutente, DataIscr, DataRitiro, CodiceEdizione, DescrEdizione, DataAvvio, DataFine FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione  WHERE FK_Utente " + text + " AND Gruppo=1 AND Durata>0 AND DataAvvio<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND DataFine>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND ControlloSovraStudenti=1 ORDER BY FK_Utente, IDiscrizione, IDedizione ";
PerseoNET/clsOFA.cs:						origineDati = "SELECT IDiscrizione, CodiceEdizione, Studente, DataAttivita, OraInizio, OraFine, TipoAttivita, Descrizione, Docente FROM TCalendarioAttivita";
PerseoNET/clsOFA.cs:				string origineDati = "SELECT IDcalatt, IDedizione, (NULL) AS IDiscrizione, CodiceEdizione, (NULL) AS Studente, DataAttivita, OraInizio, OraFine, TipoAttivita, (DescrArgomento) AS Descrizione, (Cognome + ' ' + Nome) AS Docente, (NULL) AS FK_AttivitaDotePIP FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE TipoAttivita IN('DOCENZA','LARSA') AND t_IncarichiEdizioni.FK_Edizione " + rsIscr.StringaFiltroIN("IDedizione") + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stra, FlagSqlServer: true) + " ORDER BY DataAttivita, OraInizio";
PerseoNET/clsOFA.cs:				origineDati = "SELECT IDcalatt, CodiceEdizione, (NULL) AS Studente, DataAttivita, OraInizio, OraFine, TipoAttivita, (DescrArgomento) AS Descrizione, (Cognome + ' ' + Nome) AS Docente, (NULL) AS FK_AttivitaDotePIP FROM t_CalendarioAttivita";
PerseoNET/clsOFA.cs:						origineDati = "SELECT IDiscrizione, (NULL) AS IDedizione, (FK_Attivita) AS IDcalatt, SedeRecupero, DataRecupero, OraInizioRecupero, OraFineRecupero FROM t_Iscrizioni INNER JOIN t_AssenzeAttivita ON t_Iscrizioni.IDiscrizione = t_AssenzeAttivita.FK_Iscrizione WHERE IDiscrizione " + rsIscr.StringaFiltroIN("IDiscrizione") + " ORDER BY IDiscrizione, FK_Attivita";
PerseoNET/clsOFA.cs:				string origineDati = "SELECT IDcalatt, CodiceEdizione, (NULL) AS Studente, DataAttivita, OraInizio, OraFine, TipoAttivita, (DescrArgomento) AS Descrizione, (Cognome + ' ' + Nome) AS Docente, (NULL) AS FK_AttivitaDotePIP FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE TipoAttivita IN('DOCENZA','LARSA') AND t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(vIDedizione) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stra, FlagSqlServer: true) + " ORDER BY DataAttivita, OraInizio";
PerseoNET/clsOFA.cs:						origineDati = "SELECT IDiscrizione, (FK_Attivita) AS IDcalatt, SedeRecupero, DataRecupero, OraInizioRecupero, OraFineRecupero FROM t_Iscrizioni INNER JOIN t_AssenzeAttivita ON t_Iscrizioni.IDiscrizione = t_AssenzeAttivita.FK_Iscrizione WHERE IDiscrizione=" + Conversions.ToString(vIDiscrizione) + " ORDER BY IDiscrizione, FK_Attivita";
PerseoNET/frmEditorTblRif.cs:				string origineDati = "SELECT zt_MenuRiferimenti.IDmr, Sezione, Indice, Tabella, Descrizione, SoloAggiornamento, SoloAdmin, (CASE WHEN SoloAggiornamento=1 THEN 0 ELSE 1 END) AS ConsenteInserimento FROM zt_MenuRiferimenti ORDER BY Sezione, Indice, Tabella";
PerseoNET/frmEdizioneSbocchiOccup.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDquestsbo, FK_Modello FROM t_Iscrizioni INNER JOIN t_QuestionariOccupazioneIscrizioni ON t_Iscrizioni.IDiscrizione = t_QuestionariOccupazioneIscrizioni.FK_Iscrizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND FK_Modello IS NOT NULL "));
PerseoNET/frmEdizioneSbocchiOccup.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, FK_Utente, IDquestsbo, FK_Modello, FK_TipoSbocco, PosRegistro, (Cognome + ' ' + Nome) AS Studente, DataCompilazione, Intervistatore, TipoSboccoOccupazionale, Compila, IdoneoAmmesso, DataRitiro, (0) AS Apprendistato, (CASE WHEN DataRitiro IS NOT NULL THEN 'R' WHEN IdoneoAmmesso=0 THEN 'no' ELSE NULL END) AS Stato FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente LEFT OUTER JOIN t_QuestionariOccupazioneIscrizioni ON t_Iscrizioni.IDiscrizione = t_QuestionariOccupazioneIscrizioni.FK_Iscrizione LEFT OUTER JOIN t_TipoSboccoOccupazionale ON t_QuestionariOccupazioneIscrizioni.FK_TipoSbocco = t_TipoSboccoOccupazionale.IDtsbocco WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "ORDER BY PosRegistro, (Cognome + ' ' + Nome) "));
PerseoNET/frmEdizioneSbocchiOccup.cs:									vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDedizione, DataAvvio FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint WHERE FK_Utente=", tblIscr.get_Campo((object)"FK_Utente", vFlagUpdateDB: false)), " AND TipoFormativoInterno LIKE '%APPRENDISTATO PER LA QUALIFICA%' "), "AND DataAvvio>"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataAvvio")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataAvvio<"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataFine")), "dd/MM/yyyy"), FlagSqlServer: true)), " AND Gruppo=1 AND Durata>=600 "));
PerseoNET/frmEdizioneSbocchiOccup.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDmodsbocc, DescrModelloQuest , DataAvvioEdizione, Attivo FROM t_ModelliQuestionarioOccupazione INNER JOIN t_ModelliQuestionarioOccupazioneTipoFormativo ON t_ModelliQuestionarioOccupazione.IDmodsbocc = t_ModelliQuestionarioOccupazioneTipoFormativo.FK_Modello WHERE Attivo=1 AND FK_TipoFormativo=", Variabili.Edizione.get_Campo((object)"FK_TipoFormativoInterno")), " "), "ORDER BY DataAvvioEdizione"));
PerseoNET/frmEdizioneSbocchiOccup.cs:				string origineDati = "SELECT IDquestsbo, FK_Iscrizione, FK_Modello, FK_TipoSbocco, DataCompilazione, Intervistatore, Note, DataRec, DataModifica FROM t_QuestionariOccupazioneIscrizioni WHERE IDquestsbo=" + Conversions.ToString(vID);
PerseoNET/frmEdizioneSbocchiOccup.cs:				origineDati = "SELECT IDtsbocco, (CASE WHEN Compila=1 THEN TipoSboccoOccupazionale ELSE (TipoSboccoOccupazionale + ' (*)') END) AS TipoSboccoOccupazionale FROM t_TipoSboccoOccupazionale WHERE Obsoleto=0 ORDER BY IndTSO ";
PerseoNET/frmEdizioneSbocchiOccup.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDrisposbo FROM t_QuestionariOccupazioneRisposte WHERE FK_Questionario=", tblIscr.get_Campo((object)"IDquestsbo", vFlagUpdateDB: false)));
PerseoNET/frmEdizioneSbocchiOccup.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_QuestionariOccupazioneRisposte(FK_Questionario, FK_Domanda) SELECT (", tblIscr.get_Campo((object)"IDquestsbo", vFlagUpdateDB: false)), ") AS FK_Q, IDdomandaqsbo FROM t_ModelliQuestionarioOccupazioneDomande "), "WHERE (FK_ModelloQuest="), PKModelloQuestionario), " AND FK_TipoSbocco IS NULL) "), "OR (FK_ModelloQuest="), PKModelloQuestionario), " AND FK_TipoSbocco="), tblIscr.get_Campo((object)"FK_TipoSbocco", vFlagUpdateDB: false)), ") "), "ORDER BY IndDomanda, DescrDomanda"));
PerseoNET/frmEdizioneSbocchiOccup.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_QuestionariOccupazioneRisposte(FK_Questionario, FK_Domanda) SELECT (" + Conversions.ToString(FormQuest.ChiavePrimaria) + ") AS FK_Q, IDdomandaqsbo FROM t_ModelliQuestionarioOccupazioneDomande WHERE (FK_ModelloQuest=" + Conversions.ToString(PKModelloQuestionario) + " AND FK_TipoSbocco IS NULL) OR (FK_ModelloQuest=" + Conversions.ToString(PKModelloQuestionario) + " AND FK_TipoSbocco=", FormQuest.get_ValoreSelezioneCombo(cmbFK_TipoSbocco)), ") "), "ORDER BY IndDomanda, DescrDomanda"));
PerseoNET/frmEdizioneSbocchiOccup.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDsceltaqsbo, FK_Domanda, IndScelta, DescrScelta, Specificare FROM  t_ModelliQuestionarioOccupazioneDomande INNER JOIN t_ModelliQuestionarioOccupazioneScelte ON t_ModelliQuestionarioOccupazioneDomande.IDdomandaqsbo = t_ModelliQuestionarioOccupazioneScelte.FK_Domanda WHERE FK_Domanda=", rsDomande.get_Campo((object)"IDdomandaqsbo")), " "), "AND SceltaAttiva=1 ORDER BY IndScelta"));
PerseoNET/frmEdizioneSbocchiOccup.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_QuestionariOccupazioneIscrizioni.IDquestsbo, IDiscrizione, (Cognome + ' ' + Nome) AS Studente, CodiceEdizione, IDmwe, IDmwqsbocco, IndDomanda, DescrDomanda, DescrScelta FROM t_QuestionariOccupazioneIscrizioni INNER JOIN t_Iscrizioni ON t_QuestionariOccupazioneIscrizioni.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_QuestionariOccupazioneRisposte ON t_QuestionariOccupazioneIscrizioni.IDquestsbo = t_QuestionariOccupazioneRisposte.FK_Questionario INNER JOIN t_ModelliQuestionarioOccupazioneDomande ON t_QuestionariOccupazioneRisposte.FK_Domanda = t_ModelliQuestionarioOccupazioneDomande.IDdomandaqsbo INNER JOIN t_ModelliQuestionarioOccupazioneScelte ON t_QuestionariOccupazioneRisposte.FK_Risposta = t_ModelliQuestionarioOccupazioneScelte.IDsceltaqsbo AND t_ModelliQuestionarioOccupazioneDomande.IDdomandaqsbo = t_ModelliQuestionarioOccupazioneScelte.FK_Domanda INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE t_Iscrizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " ORDER BY (Cognome + ' ' + Nome), IndDomanda "));
PerseoNET/frmEdizioneSbocchiOccup.cs:							string origineDati = "SELECT IDdomandaqsbo, FK_ModelloQuest, FK_TipoSbocco, IndDomanda, DescrDomanda, DescrBreve, Specificare FROM t_ModelliQuestionarioOccupazioneDomande WHERE FK_ModelloQuest=" + Conversions.ToString(PKModelloQuestionario) + " ORDER BY IndDomanda, DescrDomanda";
PerseoNET/frmEdizioneSbocchiOccup.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDquestsbo, (Cognome + ' ' + Nome) AS Studente, DataCompilazione, TipoSboccoOccupazionale, Note, " + text + " FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente LEFT OUTER JOIN t_QuestionariOccupazioneIscrizioni ON t_Iscrizioni.IDiscrizione = t_QuestionariOccupazioneIscrizioni.FK_Iscrizione LEFT OUTER JOIN t_TipoSboccoOccupazionale ON t_QuestionariOccupazioneIscrizioni.FK_TipoSbocco = t_TipoSboccoOccupazionale.IDtsbocco WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "ORDER BY (Cognome + ' ' + Nome) "));
PerseoNET/frmEdizioneSbocchiOccup.cs:							origineDati = "SELECT IDiscrizione, IDquestsbo, (Cognome + ' ' + Nome) AS Studente, DataRitiro, IdoneoAmmesso, Apprendista, DataCompilazione, TipoSboccoOccupazionale, Note, " + text + " FROM t_Iscrizioni ";
PerseoNET/frmEdizioneSbocchiOccup.cs:							origineDati = "SELECT IDrisposbo, FK_Questionario, t_QuestionariOccupazioneRisposte.FK_Domanda, DescrScelta FROM t_QuestionariOccupazioneRisposte INNER JOIN t_ModelliQuestionarioOccupazioneScelte ON t_QuestionariOccupazioneRisposte.FK_Risposta = t_ModelliQuestionarioOccupazioneScelte.IDsceltaqsbo WHERE FK_Questionario " + clsTblDatiDR.StringaFiltroIN("IDquestsbo") + " ORDER BY FK_Questionario ";
PerseoNET/frmEdizioneSbocchiOccup.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDedizione, DataAvvio FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint WHERE FK_Utente=", tblIscr.get_Campo((object)"FK_Utente", vFlagUpdateDB: false)), " AND TipoFormativoInterno LIKE '%APPRENDISTATO PER LA QUALIFICA%' "), "AND DataAvvio>"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataAvvio")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataAvvio<"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataFine")), "dd/MM/yyyy"), FlagSqlServer: true)), " AND Gruppo=1 AND Durata>=600 "));
PerseoNET/frmEdizioneSbocchiOccup.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdomandaqsbo, FK_ModelloQuest, FK_TipoSbocco, IndDomanda, DescrDomanda, Specificare FROM t_ModelliQuestionarioOccupazioneDomande WHERE (FK_ModelloQuest=" + Conversions.ToString(PKModelloQuestionario) + " AND FK_TipoSbocco IS NULL) OR (FK_ModelloQuest=" + Conversions.ToString(PKModelloQuestionario) + " AND FK_TipoSbocco=", tblIscr.get_Campo((object)"FK_TipoSbocco", vFlagUpdateDB: false)), ") "), "ORDER BY IndDomanda, DescrDomanda"));
PerseoNET/frmEdizioneSbocchiOccup.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDrisposbo, FK_Questionario, FK_Domanda FROM t_QuestionariOccupazioneRisposte WHERE FK_Domanda=" + Conversions.ToString(vID) + " AND FK_Questionario=", tblIscr.get_Campo((object)"IDquestsbo", vFlagUpdateDB: false)));
PerseoNET/frmEdizioneSbocchiOccup.cs:				vSQL = "SELECT IDrisposbo, FK_Questionario, FK_Domanda, FK_Risposta, DescrAltro, DataRec, DataModifica FROM t_QuestionariOccupazioneRisposte WHERE IDrisposbo=" + Conversions.ToString(num2);
PerseoNET/frmEdizioneSbocchiOccup.cs:						string str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, CodiceEdizione, DescrEdizione, DataAvvio, DataFine, (CAST(FK_Anno AS VARCHAR) + 'Â°') AS Anno FROM t_PianoServizi WHERE FK_TipoFormativoInterno=", Variabili.Edizione.get_Campo((object)"FK_TipoFormativoInterno")), " "), "AND FK_SedeEdizione="), Variabili.Edizione.get_Campo((object)"FK_SedeEdizione")), " "), "AND YEAR(DataAvvio)="), DateAndTime.Year(Conversions.ToDate(Variabili.Edizione.get_Campo((object)"DataAvvio")))), " "), "AND YEAR(DataFine)="), DateAndTime.Year(Conversions.ToDate(Variabili.Edizione.get_Campo((object)"DataFine")))), " "));
PerseoNET/frmEdizioneSbocchiOccup.cs:							str = "SELECT IDdomandaqsbo, FK_ModelloQuest, FK_TipoSbocco, IndDomanda, DescrDomanda, DescrBreve, Specificare FROM t_ModelliQuestionarioOccupazioneDomande WHERE FK_ModelloQuest=" + Conversions.ToString(PKModelloQuestionario) + " ORDER BY IndDomanda, DescrDomanda";
PerseoNET/frmEdizioneSbocchiOccup.cs:							str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDquestsbo, (Cognome + ' ' + Nome) AS Studente, DataCompilazione, TipoSboccoOccupazionale, Note, " + text4 + " FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente LEFT OUTER JOIN t_QuestionariOccupazioneIscrizioni ON t_Iscrizioni.IDiscrizione = t_QuestionariOccupazioneIscrizioni.FK_Iscrizione LEFT OUTER JOIN t_TipoSboccoOccupazionale ON t_QuestionariOccupazioneIscrizioni.FK_TipoSbocco = t_TipoSboccoOccupazionale.IDtsbocco WHERE FK_Edizione=", clsTblDatiDR.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "ORDER BY (Cognome + ' ' + Nome) "));
PerseoNET/frmEdizioneSbocchiOccup.cs:								str = "SELECT IDiscrizione, IDquestsbo, CodiceEdizione, DescrEdizione, Anno, (Cognome + ' ' + Nome) AS Studente, DataRitiro, IdoneoAmmesso, Apprendista, DataCompilazione, TipoSboccoOccupazionale, Note, " + text4 + " FROM t_Iscrizioni ";
PerseoNET/frmEdizioneSbocchiOccup.cs:							str = Conversions.ToString(Operators.ConcatenateObject("SELECT IDiscrizione, (Cognome + ' ' + Nome) AS Studente, DataRitiro, IdoneoAmmesso, (0) AS Apprendista, FK_Utente FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE FK_Edizione=", clsTblDatiDR.get_Campo((object)0)));
PerseoNET/frmEdizioneSbocchiOccup.cs:									str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDedizione, DataAvvio FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint WHERE FK_Utente=", clsTblDatiDR5.get_Campo((object)"FK_Utente")), " AND TipoFormativoInterno LIKE '%APPRENDISTATO PER LA QUALIFICA%' "), "AND DataAvvio>"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataAvvio")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataAvvio<"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataFine")), "dd/MM/yyyy"), FlagSqlServer: true)), " AND Gruppo=1 AND Durata>=600 "));
PerseoNET/frmEdizioneSbocchiOccup.cs:							str = "SELECT IDrisposbo, FK_Questionario, t_QuestionariOccupazioneRisposte.FK_Domanda, DescrScelta FROM t_QuestionariOccupazioneRisposte INNER JOIN t_ModelliQuestionarioOccupazioneScelte ON t_QuestionariOccupazioneRisposte.FK_Risposta = t_ModelliQuestionarioOccupazioneScelte.IDsceltaqsbo WHERE FK_Questionario " + clsTblDatiDR3.StringaFiltroIN("IDquestsbo") + " ORDER BY FK_Questionario ";
PerseoNET/clsRisorseDisponibili.cs:						string origineDati = "SELECT (IDdocente) AS FK_Docente, (0) AS Impegnato FROM t_IncarichiContrattiEdizioni WHERE IDedizione=" + Conversions.ToString(mvIDedizione) + " GROUP BY IDdocente HAVING IDdocente>3 ";
PerseoNET/clsRisorseDisponibili.cs:						origineDati = "SELECT IDloced, IDlocale, DescrLocale, TipoLocale, CodiceLocale, Fittizio, Sovrapponibile FROM t_LocaliEdizioni WHERE IDedizione=" + Conversions.ToString(mvIDedizione) + " ";
PerseoNET/clsRisorseDisponibili.cs:						string text2 = "SELECT t_CalendarioAttivita.IDcalatt, DataAttivita, OraInizio, OraFine, FK_Docente, FK_Locale, CodiceEdizione FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Docente=" + Conversions.ToString(vIDdocente) + " AND DataAttivita=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " " + text;
PerseoNET/clsRisorseDisponibili.cs:						text2 = text2 + "UNION SELECT t_CalendarioCodocenza.IDcalcod, DataAttivita, OraInizio, OraFine, FK_Docente, FK_Locale, CodiceEdizione FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Docente=" + Conversions.ToString(vIDdocente) + " AND DataAttivita=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " " + text;
PerseoNET/clsRisorseDisponibili.cs:								text2 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(text2 + " UNION SELECT t_CalendarioAttivita.IDcalatt, DataAttivita, OraInizio, OraFine, (NULL) AS FK_Docente, FK_Locale, CodiceEdizione FROM t_CalendarioAttivita INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_PianoServizi ON t_LocaliEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE IDlocale=", mvLocaliEdizione.get_Campo((object)"IDlocale")), " AND DataAttivita="), FunzStringa.StrDataSQL(stringa, FlagSqlServer: true)), " "));
PerseoNET/clsRisorseDisponibili.cs:					string text2 = "SELECT t_CalendarioAttivita.IDcalatt, DataAttivita, OraInizio, OraFine, FK_Docente, FK_Locale, CodiceEdizione FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Docente=" + Conversions.ToString(vIDdocente) + " AND DataAttivita=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " " + text;
PerseoNET/clsRisorseDisponibili.cs:					text2 = text2 + "UNION SELECT t_CalendarioCodocenza.IDcalcod, DataAttivita, OraInizio, OraFine, FK_Docente, FK_Locale, CodiceEdizione FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Docente=" + Conversions.ToString(vIDdocente) + " AND DataAttivita=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " " + text;
PerseoNET/clsRisorseDisponibili.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CalendarioAttivita.IDcalatt, IDlocale, IDloced, FK_Edizione, DataAttivita, OraInizio, OraFine, CodiceEdizione FROM t_CalendarioAttivita INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_PianoServizi ON t_LocaliEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE IDlocale=", mvLocaliEdizione.get_Campo((object)"IDlocale")), " AND DataAttivita="), FunzStringa.StrDataSQL(stringa, FlagSqlServer: true)), " "));
PerseoNET/clsRisorseDisponibili.cs:							string str2 = "SELECT t_CalendarioAttivita.IDcalatt, DataAttivita, OraInizio, OraFine, FK_Docente, FK_Locale FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico " + str;
PerseoNET/clsRisorseDisponibili.cs:							str2 = str2 + " UNION SELECT t_CalendarioCodocenza.IDcalcod, DataAttivita, OraInizio, OraFine, FK_Docente, FK_Locale FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico " + str;
PerseoNET/clsRisorseDisponibili.cs:								str2 = "SELECT t_CalendarioAttivita.IDcalatt, IDlocale, IDloced, FK_Edizione, DataAttivita, OraInizio, OraFine, CodiceEdizione FROM t_CalendarioAttivita INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_PianoServizi ON t_LocaliEdizioni.FK_Edizione = t_PianoServizi.IDedizione " + str;
PerseoNET/frmConfigurazioneVersione.cs:				string origineDati = "SELECT IDvers, Login, OraRipristino, BloccoContratti, BloccoRichiedePagamento, BloccoPagamento, BloccoTirocini, FK_Pagatore, CheckBloccantePIVA, ControlloIscrizioneDote, ControlloIncassoIscrizione, PercMaxProlungaStage, ControlloOFASicurezza, SogliaMinimaPagaStage, SogliaOreBonusDocente, FirmaRespPersonale, RuoloFirmaRespPersonale, FraseTipoSicurSpecifica, StageCertificaConoscenze, StageCertificaCompetenze, StageIndennitaAzienda, StageIndennitaCSF, DescrConvenzioneSingolo, DescrConvenzioneMolti, SogliaReintegraAulaAppr, SogliaReintegraAltreAppr, DeltaAvvioContratto, ContrattoPregresso, DownloadLettereIncarico, DeltaDownloadContratto, MaxFileDim_1, ObbligoUploadCV, ObbligoRichiestaCollaborazione, FlagConsenteFileStage, FlagConsenteFileCertificato, ServizioDocFTP, FlagConsenteFileCertificaSIC, FlagConsenteFileCertificaCompe, FlagConsenteFileOrdine, ObbligoUploadCVDipendente, SmtpClient, PrivacyEmailSede, MaxGiorniProlungamento, ProlungaMaxSuccessivoContr, CertificaCompetenzeMiste, ContrattoFrazionabile, MaxGiorniAnnoOccasionale, OccasionaleAnnoSolare, DescrCausaleBonifico, OreContrattoDipendente, OreAggiornamentoDipendente, ImportaAulaCodoc, ImportaAssenze, PercorsoLAN_SP, OrarioBloccoNotturno, FirmaRespPersonaleIMG, MaxTutorExtraCurr, PDFAccordoEconomicoStage, PDFSchedaDatiAzienda, DataAttivaAccordoEconomicoPDF, ConsentePrevisioneImpegnoFA, DataModelli, RitardoContrattoGPR, SogliaVecchioCV, PKSegnalaContratto, INAILExtraCurrAziende, DataRec, DataModifica, Bloccato FROM zt_Versione WHERE IDvers=1 ";
PerseoNET/frmConfigurazioneVersione.cs:						origineDati = "SELECT IDpers, (Cognome + ' ' + Nome) AS Pagatore FROM t_Personale WHERE IDpers=" + txtPKpag.Text + " ";
PerseoNET/frmConfigurazioneVersione.cs:						string origineDati = "SELECT IDparv, IndOrd, Descrizione, NomeCampo, ValoreCampo, FormatoCampo, Obsoleto FROM zt_VersioneAltriParametri ORDER BY Obsoleto, IndOrd ";
PerseoNET/frmConfigurazioneVersione.cs:				string origineDati = "SELECT IDparv, IndOrd, Descrizione, NomeCampo, ValoreCampo, FormatoCampo, Obsoleto FROM zt_VersioneAltriParametri WHERE IDparv=" + Conversions.ToString(vID);
PerseoNET/frmPannelloStampeDocenti.cs:				string origineDati = "SELECT IDsede, IIf(Attiva=True,SiglaSede,(SiglaSede & ' *')) AS Sede FROM t_Sedi WHERE FK_TipoSede IN(2,3,4) AND IDsede " + Variabili.FiltroSedi + " ORDER BY Attiva, IIf(FK_TipoSede=3,1,IIf(FK_TipoSede=4,2,3)) , SiglaSede ";
PerseoNET/frmPannelloStampeDocenti.cs:				origineDati = "SELECT t_Docenti.IDdocente, FK_SedePrimaria, FK_Tipo, FK_Ruolo, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Tipo=2 THEN 'I' ELSE 'E' END) AS SigaTipo, TipoDocente, TipoRuoloDocente, CodFiscale, (CASE WHEN FK_Tipo=3 THEN CodiceParFiscale ELSE NULL END) AS CodiceParFiscale, (CASE WHEN FK_Tipo=3 THEN DescrParFiscale ELSE NULL END) AS DescrParFiscale, (CASE WHEN FK_Tipo=3 THEN TipoDipendente ELSE NULL END) AS TipoDipendente, (CASE WHEN FK_Tipo=3 THEN DescrProfessione ELSE NULL END) AS DescrProfessione, (CASE WHEN NazNascita='ITALIA' THEN LuogoNascita ELSE NazNascita END) AS StrNascita, ComResidenza, (CASE WHEN Tel_2 IS NULL THEN Tel_1 ELSE (Tel_1 + ', ' + Tel_2) END) AS StrTel, t_Docenti.Attivo FROM t_Docenti LEFT OUTER JOIN t_TipoDipendenteDocEsterno ON t_Docenti.FK_TipoLavoroAttuale = t_TipoDipendenteDocEsterno.IDtestdipe LEFT OUTER JOIN t_DecodificatoreParametroFiscale ON t_Docenti.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_TipoRuoloDocente ON t_Docenti.FK_Ruolo = t_TipoRuoloDocente.IDtruolodoc LEFT OUTER JOIN t_TipoDocente ON t_Docenti.FK_Tipo = t_TipoDocente.IDtdoc WHERE Sovrapponibile=0 " + origineDati + "ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmPannelloStampeDocenti.cs:				origineDati = "SELECT IDsede, IIf(Attiva=False,(SiglaSede & ' (*)'),SiglaSede) AS SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " AND FK_TipoSede>=3 ORDER BY FK_TipoSede, Attiva, SiglaSede ";
PerseoNET/frmPannelloStampeDocenti.cs:					vSQL = (opInterni.Checked ? ("SELECT IDdocente FROM v_DettaglioOreSvoltePerIncarico WHERE DataAttivita<=" + FunzStringa.StrDataSQL("01/09/" + Strings.Mid(cmbAnno.Text, 1, 4), FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL("31/08/" + Strings.Mid(cmbAnno.Text, 6, 4), FlagSqlServer: true) + " AND FK_Tipo=2 AND Cognome>='A' GROUP BY IDdocente HAVING IDdocente>3 ") : ((!opEsterni.Checked) ? ("SELECT IDdocente FROM v_DettaglioOreSvoltePerIncarico WHERE DataAttivita<=" + FunzStringa.StrDataSQL("01/09/" + Strings.Mid(cmbAnno.Text, 1, 4), FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL("31/08/" + Strings.Mid(cmbAnno.Text, 6, 4), FlagSqlServer: true) + " AND Cognome>='A'  GROUP BY IDdocente HAVING IDdocente>3 ") : ("SELECT IDdocente FROM v_DettaglioOreSvoltePerIncarico WHERE DataAttivita<=" + FunzStringa.StrDataSQL("01/09/" + Strings.Mid(cmbAnno.Text, 1, 4), FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL("31/08/" + Strings.Mid(cmbAnno.Text, 6, 4), FlagSqlServer: true) + " AND FK_Tipo=3 AND Cognome>='A'  GROUP BY IDdocente HAVING IDdocente>3 ")));
PerseoNET/frmPannelloStampeDocenti.cs:				text3 = ((Operators.CompareString(text3, "", TextCompare: false) == 0) ? (" AND (SELECT COUNT(IDincarico) FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Docente=IDdocente AND FK_SedeEdizione " + Variabili.FiltroSedi + ")>0 ") : (" AND (SELECT COUNT(IDincarico) FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Docente=IDdocente AND FK_SedeEdizione " + text3 + ")>0 "));
PerseoNET/frmPannelloStampeDocenti.cs:							string text4 = "SELECT Numerico_1, Testo_1, Testo_2, Testo_9, Testo_4, Testo_5, Testo_6, Testo_7, Testo_8 FROM t_StampaTbl_1 ";
PerseoNET/frmPannelloStampeDocenti.cs:							text4 = "SELECT t_DecodificatoreParametroFiscale.IDparfisc, CodiceParFiscale, DescrParFiscale, COUNT(DISTINCT IDdocente) AS NumColl, COUNT(IDincacontra) AS TotContr, SUM(OreAssegnate) AS TotAssegnato, MAX(QuotaOraIncarico) AS MaxCompenso, MIN(QuotaOraIncarico) AS MinCompenso, AVG(QuotaOraIncarico) AS MediaCompenso FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE FK_Tipo>2 AND DataFineContratto>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataFineContratto<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " " + text3 + "GROUP BY IDparfisc, CodiceParFiscale, DescrParFiscale ORDER BY CodiceParFiscale ";
PerseoNET/frmPannelloStampeDocenti.cs:							string origineDati = "SELECT IDtattivita, CodiceParFiscale, DescrParFiscale, IndTA, TipoAttivita, COUNT(DISTINCT IDdocente) AS NumColl, COUNT(IDincacontra) AS TotContr, SUM(OreAssegnate) AS TotAssegnato, MAX(QuotaOraIncarico) AS MaxCompenso, MIN(QuotaOraIncarico) AS MinCompenso, AVG(QuotaOraIncarico) AS MediaCompenso FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE FK_Tipo>2 AND DataFineContratto>='" + text + "' AND DataFineContratto<='" + text2 + "' " + text3 + "GROUP BY IDtattivita, CodiceParFiscale, DescrParFiscale, IndTA, TipoAttivita ORDER BY IndTA, CodiceParFiscale ";
PerseoNET/frmPannelloStampeDocenti.cs:							string origineDati = "SELECT t_DecodificatoreParametroFiscale.IDparfisc, CodiceParFiscale, DescrParFiscale, SiglaSede, COUNT(DISTINCT IDdocente) AS NumColl, COUNT(IDincacontra) AS TotContr, SUM(OreAssegnate) AS TotAssegnato, MAX(QuotaOraIncarico) AS MaxCompenso, MIN(QuotaOraIncarico) AS MinCompenso, AVG(QuotaOraIncarico) AS MediaCompenso FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE FK_Tipo>2 AND DataFineContratto>='" + text + "' AND DataFineContratto<='" + text2 + "' " + text3 + "GROUP BY IDparfisc, SiglaSede, CodiceParFiscale, DescrParFiscale ORDER BY CodiceParFiscale, SiglaSede ";
PerseoNET/frmPannelloStampeDocenti.cs:						string str = "(SELECT DescrParFiscale FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE IDcontratto=t_IncarichiEdizioniContratti.FK_Contratto) AS StrPF, ";
PerseoNET/frmPannelloStampeDocenti.cs:						string str2 = "(SELECT TipoDipendente FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe WHERE IDcontratto=t_IncarichiEdizioniContratti.FK_Contratto) AS StrTipoDipe ";
PerseoNET/frmPannelloStampeDocenti.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS StrDOC, FK_Contratto, CodFiscale, SiglaSede, CodiceEdizione, DescrEdizione, CodiceProgetto, IDmwp, IDmwa, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, DescrArgomento, OreAssegnate, OreSvolgere, QuotaOraIncarico, DataInizioIncarico, DataFineIncarico, ApprovaIncarico, DataApprovaIncarico, " + str + str2 + "FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE (IDdocente=", tblDoc.get_Campo((object)0, vFlagUpdateDB: false)), " AND DataFine>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)), " AND DataFine<="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " "), "AND IDsede "), Variabili.FiltroSedi), ") "), "OR (IDdocente="), tblDoc.get_Campo((object)0, vFlagUpdateDB: false)), " AND DataAvvio>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)), " AND DataAvvio<="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " "), "AND DataFine>"), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " AND IDsede "), Variabili.FiltroSedi), ") "), "ORDER BY (Cognome + ' ' + Nome), SiglaSede, CodiceEdizione, IndTA, DescrArgomento "));
PerseoNET/frmPannelloStampeDocenti.cs:						string origineDati = "SELECT IDtattivita, CodiceParFiscale, DescrParFiscale, Sesso, IndTA, TipoAttivita, Aula, COUNT(DISTINCT IDdocente) AS NumColl, COUNT(IDincacontra) AS TotContr, SUM(OreAssegnate) AS TotAssegnato, MAX(QuotaOraIncarico) AS MaxCompenso, MIN(QuotaOraIncarico) AS MinCompenso, AVG(QuotaOraIncarico) AS AvgCompenso FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE FK_Tipo>2 AND DataFineContratto>='" + text + "' AND DataFineContratto<='" + text2 + "' GROUP BY IDtattivita, Sesso, CodiceParFiscale, DescrParFiscale, IndTA, TipoAttivita, Aula ORDER BY IndTA, CodiceParFiscale ";
PerseoNET/frmPannelloStampeDocenti.cs:						origineDati = (clsTblDatiDR.OrigineDati = "SELECT IDtattivita, SiglaSede, Sesso, CodiceParFiscale, DescrParFiscale, IndTA, TipoAttivita, Aula, COUNT(DISTINCT IDdocente) AS NumColl, COUNT(IDincacontra) AS TotContr, SUM(OreAssegnate) AS TotAssegnato, MAX(QuotaOraIncarico) AS MaxCompenso, MIN(QuotaOraIncarico) AS MinCompenso, AVG(QuotaOraIncarico) AS AvgCompenso FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE FK_Tipo>2 AND DataFineContratto>='" + text + "' AND DataFineContratto<='" + text2 + "' GROUP BY IDtattivita, Sesso, CodiceParFiscale, DescrParFiscale, IndTA, TipoAttivita, Aula, SiglaSede ORDER BY SiglaSede, IndTA, CodiceParFiscale ");
PerseoNET/frmPannelloStampeDocenti.cs:						origineDati = (clsTblDatiDR.OrigineDati = "SELECT IDtattivita, SiglaSede, (Cognome + ' ' + Nome) AS StrDOC, Sesso, CodiceParFiscale, DescrParFiscale, IndTA, TipoAttivita, Aula, COUNT(IDincacontra) AS TotContr, SUM(OreAssegnate) AS TotAssegnato, MAX(QuotaOraIncarico) AS MaxCompenso, MIN(QuotaOraIncarico) AS MinCompenso, AVG(QuotaOraIncarico) AS AvgCompenso FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE FK_Tipo>2 AND DataFineContratto>='" + text + "' AND DataFineContratto<='" + text2 + "' GROUP BY IDtattivita, Cognome, Nome, Sesso, CodiceParFiscale, DescrParFiscale, IndTA, TipoAttivita, Aula, SiglaSede ORDER BY IndTA, CodiceParFiscale ");
PerseoNET/frmPannelloStampeDocenti.cs:						string origineDati = "SELECT IDdocente, (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, (0) AS TotaleOreApprovate, (0) AS TotaleOreLetteraInc, (0) AS SegnalazioneSuperaMAX, (0) SegnalazioneSuperaFascia FROM t_Docenti WHERE IDdocente " + tblDoc.StringaFiltroIN(0) + " AND (SELECT COUNT(IDcontratto) FROM t_DocentiContratti WHERE FK_Docente=IDdocente AND DataInizioContratto>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + ")>0 AND FK_Tipo>2 ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmPannelloStampeDocenti.cs:							string origineDati = "SELECT IDdocente, IDincarico, IDcontratto, (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, DescrParFiscale, CodiceParFiscale, DataInizioIncarico, DataFineIncarico, OreAssegnate, QuotaOraIncarico, SUM(OreSvolgere) AS TotAutorizzato, (0) AS Imponibile, (SELECT SUM(Minuti)/60 FROM v_DettaglioCalendarioAttivita WHERE v_DettaglioCalendarioAttivita.FK_Incarico=IDincarico AND DataAttivita<" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + ") AS OreFattePrecedente, SiglaSede FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE DataInizioIncarico>='" + text + "' AND DataInizioIncarico<='" + text2 + "' AND ApprovaIncarico=1 AND DocenteTest=0 GROUP BY IDdocente, t_IncarichiEdizioni.IDincarico, IDcontratto, (Cognome + ' ' + Nome), CodFiscale, DescrParFiscale, OreAssegnate, QuotaOraIncarico, t_IncarichiEdizioni.FK_Edizione, DataInizioIncarico, DataFineIncarico, CodiceParFiscale, SiglaSede, IDsede HAVING IDsede " + Variabili.FiltroSedi + " ORDER BY (Cognome + ' ' + Nome), IDdocente, IDincarico ";
PerseoNET/frmPannelloStampeDocenti.cs:							origineDati = "SELECT Numerico_1, Numerico_8, Numerico_9, Testo_1, Testo_2, Testo_3, Testo_4, DataOra_1, DataOra_2, Numerico_2, Numerico_3, Numerico_4, Numerico_5, Numerico_6, Testo_20 FROM t_StampaTbl_1 ";
PerseoNET/frmPannelloStampeDocenti.cs:							origineDati = "SELECT (Numerico_1) AS IDdocente, (Numerico_8) AS IDincarico, Testo_1, Testo_2, Testo_3, MIN(DataOra_1) AS MinData, MAX(DataOra_1) AS Maxdata, SUM(Numerico_4) AS TotAutorizzato, SUM(Numerico_5) AS TotImponibile, (NULL) AS SiglaSedi, (Numerico_2) AS OreAssegnate, (Numerico_6) AS OreFattePrec FROM t_StampaTbl_1 GROUP BY Numerico_1, Testo_1, Testo_2, Testo_3, Numerico_2, Numerico_6, Numerico_8 ORDER BY Testo_1 ";
PerseoNET/frmPannelloStampeDocenti.cs:							origineDati = "SELECT Numerico_1, Numerico_8, Testo_1, Testo_2, Testo_3, DataOra_1, DataOra_2, Numerico_4, Numerico_5, Testo_10, Numerico_2, Numerico_6 FROM t_StampaTbl_1 ";
PerseoNET/frmPannelloStampeDocenti.cs:							origineDati = "SELECT Numerico_1, Testo_1, Testo_2, Testo_3, MIN(DataOra_1) AS MinData, MAX(DataOra_2) AS MaxData, SUM(Numerico_4) AS TotAutorizzato, SUM(Numerico_5) AS TotImponibile, (NULL) AS SiglaSedi FROM t_StampaTbl_1 GROUP BY Numerico_1, Testo_1, Testo_2, Testo_3 ORDER BY Testo_1 ";
PerseoNET/frmPannelloStampeDocenti.cs:						string origineDati = (FlagTuttiContratti ? ("SELECT IDdocente, Cognome, Nome, DataNascita, (DataNascita) AS Eta, (NULL) AS FasciaEta, CodFiscale, PIVA, (NULL) AS Dupli, TipoLivelloMW, DescrTitoloStudio, TipoContratto, MIN(DataInizioContratto) AS DataInizioContratto, MAX(DataFineContratto) AS DataFineContratto, SUM(OreAssegnate) AS OreAssegnate, SUM(OreSvolgere) AS OreApprovate, (NULL) AS Sedi FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente AND t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico LEFT OUTER JOIN t_TipoLivelloTitoloMW ON t_Docenti.FK_TipoStudio = t_TipoLivelloTitoloMW.IDtlivstudioMW LEFT OUTER JOIN t_TipoAltraAssicurazioneINPS ON t_DocentiContrattiEsterni.FK_AltraAssINPS = t_TipoAltraAssicurazioneINPS.IDtaltrainps LEFT OUTER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe WHERE DocenteTest=0 AND DataInizioContratto>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioContratto<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND ContrattoApprovato=1 GROUP BY IDdocente, Cognome, Nome, DataNascita, CodFiscale, PIVA, TipoLivelloMW, DescrTitoloStudio, TipoContratto ORDER BY Cognome, Nome ") : ((!FlagContrattoAzienda) ? ("SELECT IDdocente, Cognome, Nome, DataNascita, (DataNascita) AS Eta, (NULL) AS FasciaEta, CodFiscale, PIVA, (NULL) AS Dupli, TipoLivelloMW, DescrTitoloStudio, TipoContratto, MIN(DataInizioContratto) AS DataInizioContratto, MAX(DataFineContratto) AS DataFineContratto, SUM(OreAssegnate) AS OreAssegnate, SUM(OreSvolgere) AS OreApprovate, (NULL) AS Sedi FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente AND t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico LEFT OUTER JOIN t_TipoLivelloTitoloMW ON t_Docenti.FK_TipoStudio = t_TipoLivelloTitoloMW.IDtlivstudioMW LEFT OUTER JOIN t_TipoAltraAssicurazioneINPS ON t_DocentiContrattiEsterni.FK_AltraAssINPS = t_TipoAltraAssicurazioneINPS.IDtaltrainps LEFT OUTER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe WHERE DocenteTest=0 AND DataInizioContratto>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioContratto<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND FK_Azienda IS NULL AND ContrattoApprovato=1 GROUP BY IDdocente, Cognome, Nome, DataNascita, CodFiscale, PIVA, TipoLivelloMW, DescrTitoloStudio, TipoContratto ORDER BY Cognome, Nome ") : ("SELECT IDdocente, Cognome, Nome, DataNascita, (DataNascita) AS Eta, (NULL) AS FasciaEta, t_Docenti.CodFiscale, t_Docenti.PIVA, (NULL) AS Dupli, TipoLivelloMW, DescrTitoloStudio, TipoContratto, MIN(DataInizioContratto) AS DataInizioContratto, MAX(DataFineContratto) AS DataFineContratto, SUM(OreAssegnate) AS OreAssegnate, SUM(OreSvolgere) AS OreApprovate, (NULL) AS Sedi, DescrAzienda, t_Aziende.PIVA FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente AND t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_TipoLivelloTitoloMW ON t_Docenti.FK_TipoStudio = t_TipoLivelloTitoloMW.IDtlivstudioMW LEFT OUTER JOIN t_TipoAltraAssicurazioneINPS ON t_DocentiContrattiEsterni.FK_AltraAssINPS = t_TipoAltraAssicurazioneINPS.IDtaltrainps LEFT OUTER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe WHERE DocenteTest=0 AND DataInizioContratto>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioContratto<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND ContrattoApprovato=1 GROUP BY IDdocente, Cognome, Nome, DataNascita, t_Docenti.CodFiscale, t_Docenti.PIVA, t_Aziende.PIVA, TipoLivelloMW, DescrTitoloStudio, TipoContratto, DescrAzienda ORDER BY Cognome, Nome ")));
PerseoNET/frmPannelloStampeDocenti.cs:						origineDati = "SELECT (t_IncarichiEdizioni.FK_Docente) AS IDdocente, SiglaSede FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE ApprovaIncarico=1 AND DataInizioIncarico>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataFineIncarico<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " GROUP BY t_IncarichiEdizioni.FK_Docente, t_Sedi.SiglaSede ORDER BY FK_Docente, SiglaSede ";
PerseoNET/frmPannelloStampeDocenti.cs:						string origineDati = "SELECT IDdocente, Cognome, Nome, DataNascita, (DataNascita) AS Eta, (NULL) AS FasciaEta, CodFiscale, PIVA, (NULL) AS Dupli, TipoLivelloMW, DescrTitoloStudio, TipoContratto, MIN(DataInizioContratto) AS DataInizioContratto, MAX(DataFineContratto) AS DataFineContratto, SUM(OreAssegnate) AS OreAssegnate, SUM(OreSvolgere) AS OreApprovate, (NULL) AS Sedi FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente AND t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_TipoLivelloTitoloMW ON t_Docenti.FK_TipoStudio = t_TipoLivelloTitoloMW.IDtlivstudioMW LEFT OUTER JOIN t_TipoAltraAssicurazioneINPS ON t_DocentiContrattiEsterni.FK_AltraAssINPS = t_TipoAltraAssicurazioneINPS.IDtaltrainps LEFT OUTER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe WHERE Durata=0 AND FK_TipoFormativoInterno<>20 AND DocenteTest=0 AND DataInizioContratto>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioContratto<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND ContrattoApprovato=1 GROUP BY IDdocente, Cognome, Nome, DataNascita, CodFiscale, PIVA, TipoLivelloMW, DescrTitoloStudio, TipoContratto ORDER BY Cognome, Nome ";
PerseoNET/frmPannelloStampeDocenti.cs:						origineDati = "SELECT (t_IncarichiEdizioni.FK_Docente) AS IDdocente, SiglaSede FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE ApprovaIncarico=1 AND DataInizioIncarico>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataFineIncarico<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " GROUP BY t_IncarichiEdizioni.FK_Docente, t_Sedi.SiglaSede ORDER BY FK_Docente, SiglaSede ";
PerseoNET/frmPannelloStampeDocenti.cs:						string origineDati = "SELECT FK_Docente FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione WHERE (DataAvvio>='" + text2 + "' AND DataAvvio<='" + text3 + "') OR (DataFine>='" + text2 + "' AND DataFine<='" + text3 + "') GROUP BY FK_Docente ";
PerseoNET/frmPannelloStampeDocenti.cs:						origineDati = "SELECT IDdocente, FK_Tipo, (CASE WHEN FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS StrTipo, (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, (0) AS DirezioneCoord, (0) AS Docenza, (0) AS Amministrativo, (0) AS Altro, (CASE WHEN FK_ParFiscaleAttuale IS NULL THEN 'Dipendente' WHEN (TipoCococo=0 AND chbParasubordinato=0) THEN 'Consulente P.IVA' WHEN (TipoCococo=1 AND chbParasubordinato=1) THEN 'CoCoCo' ELSE 'Altro' END) AS TipoFiscale FROM t_Docenti LEFT OUTER JOIN t_DecodificatoreParametroFiscale ON t_Docenti.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc WHERE IDdocente " + clsTblDatiDR.StringaFiltroIN("FK_Docente") + " AND FK_Tipo>1 AND DocenteTest=0 ORDER BY FK_Tipo, (Cognome + ' ' + Nome) ";
PerseoNET/frmPannelloStampeDocenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT COUNT(DISTINCT IDincarico) AS NumeroIncarichi, (1) AS Indice FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE (FK_Docente=", clsTblDatiDR2.get_Campo((object)0)), " AND DataAvvio>='"), text2), "' AND DataAvvio<='"), text3), "' AND TipoCategoriaRisorsa='DIRETTIVO E COORDINAMENTO') "), "OR (FK_Docente="), clsTblDatiDR2.get_Campo((object)0)), " AND DataFine>='"), text2), "' AND DataFine<='"), text3), "' AND TipoCategoriaRisorsa='DIRETTIVO E COORDINAMENTO') "));
PerseoNET/frmPannelloStampeDocenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(origineDati + "UNION SELECT COUNT(DISTINCT IDincarico) AS NumeroIncarichi, (2) AS Indice FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE (FK_Docente=", clsTblDatiDR2.get_Campo((object)0)), " AND DataAvvio>='"), text2), "' AND DataAvvio<='"), text3), "' AND TipoCategoriaRisorsa='DOCENTE') "), "OR (FK_Docente="), clsTblDatiDR2.get_Campo((object)0)), " AND DataFine>='"), text2), "' AND DataFine<='"), text3), "' AND TipoCategoriaRisorsa='DOCENTE') "));
PerseoNET/frmPannelloStampeDocenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(origineDati + "UNION SELECT COUNT(DISTINCT IDincarico) AS NumeroIncarichi, (3) AS Indice FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE (FK_Docente=", clsTblDatiDR2.get_Campo((object)0)), " AND DataAvvio>='"), text2), "' AND DataAvvio<='"), text3), "' AND TipoCategoriaRisorsa='AMMINISTRATIVO') "), "OR (FK_Docente="), clsTblDatiDR2.get_Campo((object)0)), " AND DataFine>='"), text2), "' AND DataFine<='"), text3), "' AND TipoCategoriaRisorsa='AMMINISTRATIVO') "));
PerseoNET/frmPannelloStampeDocenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(origineDati + "UNION SELECT COUNT(DISTINCT IDincarico) AS NumeroIncarichi, (4) AS Indice FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE (FK_Docente=", clsTblDatiDR2.get_Campo((object)0)), " AND DataAvvio>='"), text2), "' AND DataAvvio<='"), text3), "' AND TipoCategoriaRisorsa='ALTRO') "), "OR (FK_Docente="), clsTblDatiDR2.get_Campo((object)0)), " AND DataFine>='"), text2), "' AND DataFine<='"), text3), "' AND TipoCategoriaRisorsa='ALTRO') "));
PerseoNET/frmPannelloStampeDocenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT COUNT(DISTINCT IDincarico) AS NumeroIncarichi, (1) AS Indice FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE (FK_Docente=", clsTblDatiDR2.get_Campo((object)0)), " AND DataInizioIncarico>='"), text2), "' AND DataInizioIncarico<='"), text3), "' AND TipoCategoriaRisorsa='DIRETTIVO E COORDINAMENTO') "), "OR (FK_Docente="), clsTblDatiDR2.get_Campo((object)0)), " AND DataFineIncarico>='"), text2), "' AND DataFineIncarico<='"), text3), "' AND TipoCategoriaRisorsa='DIRETTIVO E COORDINAMENTO') "));
PerseoNET/frmPannelloStampeDocenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(origineDati + "UNION SELECT COUNT(DISTINCT IDincarico), (2) AS Indice FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE (FK_Docente=", clsTblDatiDR2.get_Campo((object)0)), " AND DataInizioIncarico>='"), text2), "' AND DataInizioIncarico<='"), text3), "' AND TipoCategoriaRisorsa='DOCENTE') "), "OR (FK_Docente="), clsTblDatiDR2.get_Campo((object)0)), " AND DataFineIncarico>='"), text2), "' AND DataFineIncarico<='"), text3), "' AND TipoCategoriaRisorsa='DOCENTE') "));
PerseoNET/frmPannelloStampeDocenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(origineDati + "UNION SELECT COUNT(DISTINCT IDincarico), (3) AS Indice FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE (FK_Docente=", clsTblDatiDR2.get_Campo((object)0)), " AND DataInizioIncarico>='"), text2), "' AND DataInizioIncarico<='"), text3), "' AND TipoCategoriaRisorsa='AMMINISTRATIVO') "), "OR (FK_Docente="), clsTblDatiDR2.get_Campo((object)0)), " AND DataFineIncarico>='"), text2), "' AND DataFineIncarico<='"), text3), "' AND TipoCategoriaRisorsa='AMMINISTRATIVO') "));
PerseoNET/frmPannelloStampeDocenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(origineDati + "UNION SELECT COUNT(DISTINCT IDincarico), (4) AS Indice FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE (FK_Docente=", clsTblDatiDR2.get_Campo((object)0)), " AND DataInizioIncarico>='"), text2), "' AND DataInizioIncarico<='"), text3), "' AND TipoCategoriaRisorsa='ALTRO') "), "OR (FK_Docente="), clsTblDatiDR2.get_Campo((object)0)), " AND DataFineIncarico>='"), text2), "' AND DataFineIncarico<='"), text3), "' AND TipoCategoriaRisorsa='ALTRO') "));
PerseoNET/frmPannelloStampeDocenti.cs:					string origineDati = "SELECT t_IncarichiEdizioni.IDincarico, FK_Docente, t_PianoServizi.IDedizione, DescrEdizione, TipoFormativoInterno, CodiceEdizione, CodiceProgetto, SiglaSede, DataAvvio, DataFine, (CASE WHEN DescrArgomento IS NULL THEN TipoAttivita ELSE DescrArgomento END) AS DescrAttivita, DescrIncarico, t_IncarichiEdizioni.OreAssegnate, (SELECT SUM(OreSvolgere) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico AND ApprovaIncarico=1) AS OreAppr, (SELECT AVG(QuotaOraIncarico) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico) AS QuotaOraIncarico, (SELECT SUM(Minuti)/60 FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE v_DettaglioOreSvoltePerIncaricoRidotta.IDincarico=t_Incarichiedizioni.IDincarico) AS OreFatteInc, (SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico=t_IncarichiEdizioni.IDincarico) AS OrePagate, (SELECT MIN(DataInizioIncarico) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico) AS PrimaData, (SELECT MAX(DataFineIncarico) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico) AS UltimaData, (SELECT MAX(DataProlungamento) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico) AS Prolunga, PagamentoIndividuale, SbloccoTemporaneo, (SELECT MAX(DataPagatoFine) FROM t_ProgettiPagamentiCompensiOneri WHERE IDincarico=t_IncarichiEdizioni.IDincarico) AS DataPagatoFine, IncaricoBloccato FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE (DataAvvio<'" + text2 + "' AND DataFine>='" + text2 + "' AND FK_Tipo=3 AND IDsede " + text + ") OR (DataAvvio>='" + text2 + "' AND DataAvvio<='" + text3 + "' AND FK_Tipo=3 AND IDsede " + text + ") ORDER BY t_PianoServizi.DataAvvio, IndTA, t_IncarichiEdizioni.IDincarico ";
PerseoNET/frmPannelloStampeDocenti.cs:						string origineDati = "SELECT (t_Docenti.IDdocente) AS PKdoc, (IDincarico) AS NumeroIncarico, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS StrTipo, SiglaSede, CodiceEdizione, DescrEdizione, DataAvvio, DataFine, TipoAttivita, DescrArgomento, OreAssegnate, (CASE WHEN FK_Tipo<=2 THEN OreAssegnate ELSE (SELECT SUM(OreSvolgere) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico AND ApprovaIncarico=1) END) AS OreApprovate, (0) AS OreAssegnateAnno, (0) AS OreFatte, (0) AS OreFattePrecAF, (0) AS OreResidue, (NULL) AS Periodo, IndTG FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE (DataAvvio<='" + text4 + "' AND DataFine>='" + text3 + "' " + text2 + text + ") OR (DataInizioFA<='" + text4 + "' AND DataFineFA>='" + text3 + "' " + text2 + text + ") ORDER BY SiglaSede, YEAR(DataFine), CodiceEdizione, IndTG, TipoAttivita, DescrArgomento ";
PerseoNET/frmPannelloStampeDocenti.cs:						origineDati = "SELECT FK_Incarico, (SUM(Minuti)/60) AS OreFatte FROM v_DettaglioCalendarioAttivita WHERE DataAttivita>=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " GROUP BY FK_Incarico HAVING FK_Incarico " + clsTblDatiDR.StringaFiltroIN("NumeroIncarico");
PerseoNET/frmPannelloStampeDocenti.cs:						origineDati = "SELECT FK_Incarico, (SUM(Minuti)/60) AS OreFattePrecAF FROM v_DettaglioCalendarioAttivita WHERE DataAttivita<" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " GROUP BY FK_Incarico HAVING FK_Incarico " + clsTblDatiDR.StringaFiltroIN("NumeroIncarico");
PerseoNET/frmPannelloStampeDocenti.cs:				string origineDati = "SELECT IndTG, TipoAttivita, OreAssegnate, OreFatte, OreResidue FROM t_StampaTbl_1 ";
PerseoNET/frmPannelloStampeDocenti.cs:					origineDati = "SELECT Numerico_1, Testo_1, Numerico_2, Numerico_3, Numerico_4 FROM t_StampaTbl_1 ";
PerseoNET/frmPannelloStampeDocenti.cs:					origineDati = "SELECT (Testo_1) AS TipoAttivita, SUM(Numerico_2) AS OreAssegnate, SUM(Numerico_3) AS OreFatte, SUM(Numerico_4) AS OtreResidue FROM t_StampaTbl_1 GROUP BY Numerico_1, Testo_1 ORDER BY Numerico_1, Testo_1 ";
PerseoNET/frmPannelloStampeDocenti.cs:						string origineDati = "SELECT IDdocente, (Cognome + ' ' + Nome) AS StrDOC FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN v_DettaglioCalendarioAttivita ON t_IncarichiEdizioni.IDincarico = v_DettaglioCalendarioAttivita.FK_Incarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE FK_SedeEdizione=" + Conversions.ToString(ListaSedi.get_PKSelezioneLista(vFlagMsgMultiSelezione: true)) + " AND DataAttivita>=" + FunzStringa.StrDataSQL(txtDAL.Text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(txtAL.Text, FlagSqlServer: true) + " AND FK_TIPO>1 GROUP BY IDdocente, Cognome, Nome ORDER BY Cognome, Nome ";
PerseoNET/frmPannelloStampeDocenti.cs:							string origineDati = "SELECT IDdocente, (Cognome + ' ' + Nome) AS Collaboratore FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_DocentiContrattiEsterni ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE RegolaAnnoSolare=1 AND FK_SedeEdizione " + Variabili.FiltroSedi + " AND DataInizioIncarico<=" + FunzStringa.StrDataSQL("31/12/" + text, FlagSqlServer: true) + " AND DataFineIncarico>=" + FunzStringa.StrDataSQL("01/01/" + text, FlagSqlServer: true) + " AND DataAutorizzaPubblicaAmm IS NULL GROUP BY IDdocente, Cognome, Nome ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmPannelloStampeDocenti.cs:							origineDati = (clsTblDatiDR2.OrigineDati = "SELECT PKcoll, Collaboratore, TotaleGiorni FROM t_Docenti ");
PerseoNET/frmPannelloStampeDocenti.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, FK_SedeEdizione FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Docente=", tblDoc.get_Campo((object)0, vFlagUpdateDB: false)), " AND FK_SedeEdizione "), Variabili.FiltroSedi), " "), "AND DataAvvio<="), FunzStringa.StrDataSQL(txtAL.Text, FlagSqlServer: true)), " AND DataFine>="), FunzStringa.StrDataSQL(txtDAL.Text, FlagSqlServer: true)), " "));
PerseoNET/frmPannelloStampeDocenti.cs:						string origineDati = "SELECT (IDdocente) AS PID, (Cognome + ' ' + Nome) AS FormatoreOperatore, SiglaSede, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, (IDincarico) AS NumeroIncarico, TipoAttivita, DescrArgomento, SUM(Minuti) AS TotaleOre FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN v_DettaglioOreSvoltePerIncarico ON t_PianoServizi.IDedizione = v_DettaglioOreSvoltePerIncarico.IDedizione WHERE IDsede " + text + " AND DataSvolgimento>=" + FunzStringa.StrDataSQL(txtDAL.Text, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(txtAL.Text, FlagSqlServer: true) + " GROUP BY DescrEdizione, CodiceEdizione, SiglaSede, DescrProgetto, CodiceProgetto, IDdocente, IDincarico, Cognome, Nome, TipoAttivita, DescrArgomento, IndTA HAVING IDdocente>3 ORDER BY (Cognome + ' ' + Nome),IDdocente, SiglaSede, IndTA, CodiceEdizione ";
PerseoNET/frmPannelloStampeDocenti.cs:						string origineDati = "SELECT t_Docenti.IDdocente, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS Formatore, (CASE WHEN t_Docenti.FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS Tipo, t_Docenti.CodFiscale, Sesso, DataNascita, LuogoNascita, ProvNascita, NazNascita, ComResidenza, IndirResidenza, ProvResidenza, CAPresidenza, Tel_1, Tel_2, Email, TipoLivelloMW, DescrTitoloStudio, DescrProfessione, (NULL) AS SiglaSede, (NULL) AS TipoAttivita, (NULL) AS DescrArgomento, (0) AS TotaleOreAula, (0) AS TotaleOreCopresenza, (0) AS TotaleOreServizi, (0) AS TotaleOreAltro, (0) AS TotaleOre FROM t_Docenti INNER JOIN v_DettaglioOreSvoltePerIncarico ON t_Docenti.IDdocente = v_DettaglioOreSvoltePerIncarico.IDdocente INNER JOIN t_PianoServizi ON v_DettaglioOreSvoltePerIncarico.IDedizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_TipoLivelloTitoloMW ON t_Docenti.FK_TipoStudio = t_TipoLivelloTitoloMW.IDtlivstudioMW WHERE FK_SedeEdizione " + text + " AND DocenteTest=0 AND DataSvolgimento>=" + FunzStringa.StrDataSQL(txtDAL.Text, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(txtAL.Text, FlagSqlServer: true) + " GROUP BY t_Docenti.IDdocente, t_Docenti.Cognome, t_Docenti.Nome, CodFiscale, Sesso, DataNascita, LuogoNascita, NazNascita, ProvNascita, ComResidenza, IndirResidenza, ProvResidenza, CAPresidenza, Tel_1, Tel_2, Email, t_Docenti.FK_Tipo, TipoLivelloMW, DescrProfessione, DescrTitoloStudio HAVING t_Docenti.IDdocente>3 ORDER BY (t_Docenti.Cognome + ' ' + t_Docenti.Nome), t_Docenti.IDdocente ";
PerseoNET/frmPannelloStampeDocenti.cs:						origineDati = "SELECT IDdocente, IDincarico, SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, SUM(Minuti) AS TotaleOre, IDargomento, (CASE WHEN IDargomento IS NOT NULL THEN (SELECT TipoArgomento FROM t_ArgomentiModuli INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg WHERE t_ArgomentiModuli.IDargomento=v_DettaglioOreSvoltePerIncarico.IDargomento) ELSE NULL END) AS TipoArgomento FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN v_DettaglioOreSvoltePerIncarico ON t_PianoServizi.IDedizione = v_DettaglioOreSvoltePerIncarico.IDedizione WHERE IDsede " + text + " AND DataSvolgimento>=" + FunzStringa.StrDataSQL(txtDAL.Text, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(txtAL.Text, FlagSqlServer: true) + " GROUP BY DescrEdizione, CodiceEdizione, SiglaSede, IDdocente, IDincarico, TipoAttivita, DescrArgomento, IndTA, IDargomento HAVING IDdocente>3 ORDER BY IDdocente, SiglaSede, IndTA, LEN(TipoAttivita), LEN(DescrArgomento), CodiceEdizione ";
PerseoNET/frmTipoRepertoriCompetenze.cs:				string origineDati = "SELECT  IDtrepcompe, IndRep, TipoRepertorio, Obsoleto FROM t_TipoRepertorioCompetenze ORDER BY Obsoleto, IndRep ";
PerseoNET/frmTipoRepertoriCompetenze.cs:				text = "SELECT  IDtrepcompe, Bloccato FROM t_TipoRepertorioCompetenze WHERE IDtrepcompe=" + Conversions.ToString(vID);
PerseoNET/frmTipoRepertoriCompetenze.cs:				text = "SELECT  IDtrepcompe, IndRep, TipoRepertorio, DescrRepertorio, TitoloGrande, TitoloPiccolo, Nota1, Nota2, Nota3, Obsoleto, TirCurriculariAbilitanti, TirCurriculari, TirExtraCurriculari, DataRec, DataModifica, Bloccato FROM t_TipoRepertorioCompetenze WHERE IDtrepcompe=" + Conversions.ToString(vID);
PerseoNET/frmDettInteresseFormativo.cs:				string str = "SELECT IDintform, FK_Studente, FK_Azienda, FK_SettoreInterno, FK_TipoFormativo, FK_TipoCertificazione, DescrInteresse, NoteInteresse, LivelloFormazione, Stage, NumeroDipendenti, MinOreFormazione, MaxOreFormazione, OrarioSvolgimento, PrioritaForm, NoteContattoAzienda, Intervistatore, AttivoForm, DataRec, DataModifica FROM t_InteressiFormativi ";
PerseoNET/frmDettInteresseFormativo.cs:				str = "SELECT IDtsettin, TipoSettoreInt FROM t_TipoSettoreInterno WHERE Obsoleto=False ORDER BY TipoSettoreInt ";
PerseoNET/frmDettInteresseFormativo.cs:				str = "SELECT IDtformaint, TipoFormativoInterno FROM t_TipoFormativoInterno WHERE Obsoleto=False ORDER BY TipoFormativoInterno";
PerseoNET/frmDettInteresseFormativo.cs:				str = "SELECT IDtcertificazione, TipoCertificazione FROM t_TipoCertificazione WHERE Obsoleto=0 ORDER BY IndTCE, TipoCertificazione ";
PerseoNET/frmDettDocumento.cs:				string str = "SELECT IDdocumento, FK_Studente, FK_iscrizione, FK_TipoDoc, FK_Docente, DescrDocumento, DataPubblicazione, DataScadenza, Redattore, CodiceDoc, NoteDocumento, Attivo, DataRec, DataModifica FROM t_Documenti ";
PerseoNET/frmDettDocumento.cs:					str = "SELECT IDtdoc, TipoDocumento FROM t_TipoDocumento WHERE Obsoleto=False AND Studente=True ORDER BY IndTipoDoc, TipoDocumento ";
PerseoNET/frmDettDocumento.cs:					str = "SELECT IDtdoc, TipoDocumento FROM t_TipoDocumento WHERE Obsoleto=False AND CertificazioneStudente=True ORDER BY IndTipoDoc, TipoDocumento ";
PerseoNET/frmDettDocumento.cs:					string text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento, FK_TipoDoc FROM t_Documenti WHERE FK_TipoDoc=", FormDoc.get_ValoreSelezioneCombo(cmbFK_TipoDoc)), " "), "AND FK_Studente="), MyProject.Forms.frmDettStudente.FormUt.ChiavePrimaria), " "));
PerseoNET/frmDettDocumento.cs:					string text = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtdoc, TipoDocumento, IndTipoDoc, DocRiconoscimento, DurataMesiMax, ObbligoDataScadenza, Obsoleto FROM t_TipoDocumento WHERE IDtdoc=", FormDoc.get_ValoreSelezioneCombo(cmbFK_TipoDoc)));
PerseoNET/frmDettDocumento.cs:				string vSQL = "SELECT IDtdoc, TipoDocumento FROM t_TipoDocumento WHERE Studente=True AND CertificazioneStudente=True ";
PerseoNET/frmDettDocumento.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtdoc, AttestatoPercorso, CertificazioneStudente FROM t_TipoDocumento WHERE IDtdoc=", FormDoc.get_ValoreSelezioneCombo(cmbFK_TipoDoc)));
PerseoNET/frmDettEdizione.cs:					string origineDati = "SELECT IDedizione, FK_Azione, FK_SedeEdizione, FK_SettoreEdizione, FK_Anno, FK_DurataAnni, FK_TipoFormativoInterno, EdizioneAttiva, DescrEdizione, CodiceEdizione, IDmwe, DataAvvio, DataFine, DataInizioEsame, DataFineEsame, AllieviMIN, AllieviMAX, Durata, DurataAnni, QuotaIscr, QuotaInteg, Gruppo, PercMaxSubentro, PercMinOFA, DataBloccoEdizione, DataBloccoStudenti, DataAggRegistro, DataBlocco, GestionePersonale, PianoIncarichi, MassimaleDDIF, RegistraDocenteEsterno, MezzaOra, EdizioneIscrizioneDote, DataInizioFA, DataFineFA, PagaConsuntivoMese, ModelloEdizione, Manutenzione,  ObbligoIscritti, ConsuntivoStagePagamento, ControlloSovraStudenti, GiorniINAIL, RecuperoAssenzaProgrammata, RecuperoEsternoAssenza, ConsenteTirocinioCurr, ConsenteTirocinioExtraCurr, AbilitaFAD, PercMaxFAD, DataRec, DataModifica, Bloccato FROM t_PianoServizi WHERE IDedizione=" + Conversions.ToString(Variabili.Edizione.PKEdizione);
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT IDtanno, TipoAnnualita FROM t_TipoAnnualita WHERE Obsoleto=False ORDER BY TipoAnnualita ";
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT IDtdurata, TipoDurataAnni FROM t_TipoDurataAnni WHERE Obsoleto=False ORDER BY NumeroAnni ";
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE Attiva=True AND FK_TipoSede<>2 AND IDsede " + Variabili.FiltroSedi + " ORDER BY OrdGruppo, SiglaSede ";
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT IDtsettin, TipoSettoreInt FROM t_TipoSettoreInterno WHERE Obsoleto=False ORDER BY IndTSI, TipoSettoreInt ";
PerseoNET/frmDettEdizione.cs:					origineDati = (Variabili.Progetto.LetturaTipologieFormative() ? "SELECT IDtformaint, TipoFormativoInterno FROM t_TipoFormativoProgetto ORDER BY TipoFormativoInterno " : "SELECT IDtformaint, TipoFormativoInterno FROM t_TipoFormativoInterno WHERE Obsoleto=False ORDER BY TipoFormativoInterno");
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT IDcalatt, FK_Edizione, FK_Argomento, DATEDIFF(mi, OraInizio, OraFine) AS Minuti FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Edizione=" + Conversions.ToString(FormED.ChiavePrimaria) + " AND FK_Argomento IS NOT NULL ";
PerseoNET/frmDettEdizione.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_VincoliOrariEdizioni.IDvincolo, FK_GiornoSettimana, TipoGiornoSettimana, Dalle, Alle, DATEDIFF(mi, Dalle, Alle) AS Minuti FROM t_VincoliOrariEdizioni INNER JOIN t_TipoGiornoSettimana ON t_VincoliOrariEdizioni.FK_GiornoSettimana = t_TipoGiornoSettimana.IDtgiornosett WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY NumeroGiorno, Dalle"));
PerseoNET/frmDettEdizione.cs:									string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT FK_Edizione, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotMinuti FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE DataAttivita<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " AND FK_Argomento IS NOT NULL GROUP BY FK_Edizione HAVING FK_Edizione=", Variabili.Edizione.get_Campo((object)0)));
PerseoNET/frmDettEdizione.cs:									origineDati = "SELECT t_Iscrizioni.IDiscrizione, FK_Edizione, FK_Utente, PosRegistro, (Cognome + ' ' + Nome) AS Studente, Uditore, DataIscr, DataRitiro, PresenzaEsame, EsameINAIL, PuntFinale, IdoneoAmmesso, ProseguePercorso FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE FK_Edizione=" + Conversions.ToString(FormED.ChiavePrimaria) + " AND DataIscr IS NOT NULL ORDER BY PosRegistro, (Cognome + ' ' + Nome) ";
PerseoNET/frmDettEdizione.cs:								origineDati = "SELECT t_Iscrizioni.IDiscrizione, FK_Edizione, FK_Utente, ComResidenza, IndirResidenza, CAPresidenza, ProvResidenza, CodFiscale, PosRegistro, (Cognome + ' ' + Nome) AS Studente, IDmwiscr, (CASE WHEN IscrizioneSenzaDote=0 THEN (CASE WHEN DoteChiusa=0 THEN ID_Dote ELSE (ID_Dote + ' (C)') END) ELSE 'senza dote' END) AS ID_Dote, Uditore, DataIscr, DataRitiro, Sostegno, (CASE WHEN Sostegno=1 THEN OreSostegno ELSE NULL END) AS OreSostegno, " + text + "(0) AS QuotaVersa, EsenzioneVersamento, OreUtente, OreCredito, OreAttivitaIndividuali, PresenzaEsame, EsameINAIL, PuntFinale, IdoneoAmmesso, ProseguePercorso, UtenteTest FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE FK_Edizione=" + Conversions.ToString(FormED.ChiavePrimaria) + " AND DataIscr IS NOT NULL ORDER BY PosRegistro, (Cognome + ' ' + Nome) ";
PerseoNET/frmDettEdizione.cs:								tblIscr.AssegnaCampoSubQuery(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, SUM(Quota) AS QuotaVersa FROM t_Iscrizioni INNER JOIN t_IscrizioniVersamenti ON t_Iscrizioni.IDiscrizione = t_IscrizioniVersamenti.FK_Iscrizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " GROUP BY IDiscrizione ORDER BY IDiscrizione ")), "IDiscrizione", "QuotaVersa", "int,sing2");
PerseoNET/frmDettEdizione.cs:									origineDati = "SELECT (FK_Iscrizione) AS IDiscrizione, SUM(QuotaDoteIscrizione) AS ImpegnoDote FROM t_IscrizioniDoti GROUP BY FK_Iscrizione HAVING FK_Iscrizione " + tblIscr.StringaFiltroIN("IDiscrizione");
PerseoNET/frmDettEdizione.cs:								string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_AttivitaEdizioni.IDattedi, t_AttivitaEdizioni.FK_Edizione, FK_TipoAttivita, TipoGruppo, TipoAttivita, DescrAttivita, (CASE WHEN CostoOraServizio>0 THEN CostoOraServizio ELSE NULL END) AS CostoOraServizio, OreAttivita, DeltaOreAttivita, SUM(OreAssegnate) AS TotaleOreAttivita FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_IncarichiEdizioni ON t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita GROUP BY t_AttivitaEdizioni.IDattedi, t_AttivitaEdizioni.FK_Edizione, FK_TipoAttivita, IndTG, IndTA, TipoGruppo, TipoAttivita, DescrAttivita, OreAttivita, DeltaOreAttivita, CostoOraServizio HAVING t_AttivitaEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY IndTG, IndTA"));
PerseoNET/frmDettEdizione.cs:								string origineDati = (Operators.ConditionalCompareObjectEqual(Variabili.TblRiferimenti.get_CampoTipoFormInterno((object)"SoloFunzioniAggiuntive"), true, TextCompare: false) ? "SELECT IDtattivita, IndTG, IndTA, TipoGruppo, TipoAttivita, MonteOreEdizione, PresenzaOFA, PresenzaINAIL, ContrattoAula, Aula, Primaria, Secondaria, FinanziamentoExtra, TipoCategoriaRisorsa FROM t_TipoAttivitaEdizione WHERE Obsoleto=False AND Aula=False AND ContrattoAula=False ORDER BY IIf(TipoCategoriaRisorsa='STUDENTE',2,1), IndTG, IndTCat, TipoCategoria, IndTA, TipoAttivita " : ((!Operators.ConditionalCompareObjectEqual(Variabili.TblRiferimenti.get_CampoTipoFormInterno((object)"EdizioneAmpliamento"), true, TextCompare: false)) ? "SELECT IDtattivita, IndTG, IndTA, TipoGruppo, TipoAttivita, MonteOreEdizione, PresenzaOFA, PresenzaINAIL, ContrattoAula, Aula, Primaria, Secondaria, FinanziamentoExtra, TipoCategoriaRisorsa FROM t_TipoAttivitaEdizione WHERE Obsoleto=False ORDER BY IIf(TipoCategoriaRisorsa<>'STUDENTE',1,2), IndTG, IndTCat, TipoCategoria, IndTA, TipoAttivita " : "SELECT IDtattivita, IndTG, IndTA, TipoGruppo, TipoAttivita, MonteOreEdizione, PresenzaOFA, PresenzaINAIL, ContrattoAula, Aula, Primaria, Secondaria, FinanziamentoExtra, TipoCategoriaRisorsa FROM t_TipoAttivitaEdizione WHERE (PresenzaOFA=True AND IscrittiSostegno=False AND Aula=False AND AttivitaPIP=False AND Obsoleto=False) OR (MonteOreEdizione=0 and IscrittiSostegno=False AND Aula=False AND AttivitaPIP=False and Obsoleto=False AND TipoAttivita<>'ATTIVITÃ DI RECUPERO') ORDER BY IIf(TipoCategoriaRisorsa='STUDENTE',2,1), IndTG, IndTCat, TipoCategoria, IndTA, TipoAttivita "));
PerseoNET/frmDettEdizione.cs:								string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ModuliEdizioni.IDmodulo, FK_Attivita, IndModulo, DescrModulo, TipoModulo, OreModulo, SUM(OreArgomento) AS TotaleOreDisc FROM t_ModuliEdizioni INNER JOIN t_TipoModulo ON t_ModuliEdizioni.FK_TipoModulo = t_TipoModulo.IDtmodulo LEFT OUTER JOIN t_ArgomentiModuli ON t_ModuliEdizioni.IDmodulo = t_ArgomentiModuli.FK_Modulo WHERE t_ModuliEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY t_ModuliEdizioni.IDmodulo, FK_Attivita, IndModulo, DescrModulo, TipoModulo, OreModulo "), "ORDER BY IndModulo, DescrModulo"));
PerseoNET/frmDettEdizione.cs:								origineDati = "SELECT t_ArgomentiModuli.IDargomento, FK_Modulo, IndArgomento, DescrArgomento, TipoArgomento, OreArgomento, (SELECT SUM(OreAssegnate) FROM t_IncarichiEdizioni WHERE FK_Argomento=Idargomento) AS OreAssegnate FROM t_ArgomentiModuli INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg ";
PerseoNET/frmDettEdizione.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ArgomentiModuli.IDargomento, t_ModuliEdizioni.FK_Attivita, IndModulo, IndArgomento, DescrArgomento, DescrBreveArgomento, OreArgomento, SUM(OreAssegnate) AS TotOreAss, (0) AS DiscResidue FROM t_ModuliEdizioni INNER JOIN t_ArgomentiModuli ON t_ModuliEdizioni.IDmodulo = t_ArgomentiModuli.FK_Modulo LEFT OUTER JOIN t_IncarichiEdizioni ON t_ArgomentiModuli.IDargomento = t_IncarichiEdizioni.FK_Argomento WHERE FK_TipoArgomento<>" + Conversions.ToString(Variabili.PK_TipoArgomentoStage) + " GROUP BY IDargomento, t_ModuliEdizioni.FK_Edizione, t_ModuliEdizioni.FK_Attivita, IndModulo, IndArgomento, DescrArgomento, DescrBreveArgomento, OreArgomento HAVING t_ModuliEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY IndModulo, IndArgomento, DescrBreveArgomento "));
PerseoNET/frmDettEdizione.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, IDargomento, (FK_Edizione) AS IDedizione, IDdocente, FK_Tipo, DescrIncarico, (Cognome + ' ' + Nome) AS StrDOC, DescrArgomento, OreAssegnate, (0) AS OrePianificate, IncaricoGenericoGratuito, DescrGratuito, (NULL) AS TotContr, FK_IncaricoClassiRiunite, (CASE WHEN FK_IncaricoClassiRiunite IS NULL THEN 0 ELSE 1 END) AS IncClassiRiunite, OreStraordinario, IncaricoBloccato, SbloccoTemporaneo FROM t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY (Cognome + ' ' + Nome), DescrArgomento, IDincarico "));
PerseoNET/frmDettEdizione.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, SUM(OreSvolgere) AS TotContr FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione=t_IncarichiEdizioni.IDincarico WHERE ApprovaIncarico=1 AND FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY IDincarico ORDER BY IDincarico "));
PerseoNET/frmDettEdizione.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, SUM(DATEDIFF(mi,OraInizio, OraFine)) AS TotaleMinuti FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY IDincarico "));
PerseoNET/frmDettEdizione.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_IncaricoEdizione, SUM(OreSvolgere) AS TotaleAppr FROM t_IncarichiEdizioniContratti WHERE ApprovaIncarico=1 GROUP BY FK_IncaricoEdizione HAVING FK_IncaricoEdizione=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "));
PerseoNET/frmDettEdizione.cs:								string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_AttivitaEdizioni.IDattedi, FK_TipoAttivita, IndTA, TipoAttivita, ContrattoAula, (CASE WHEN DeltaOreAttivita=0 THEN OreAttivita ELSE (OreAttivita + DeltaOreAttivita) END) AS OreAttivita, SUM(t_IncarichiEdizioni.OreAssegnate) AS TotOreAss, (0) AS AttResidue FROM t_IncarichiEdizioni RIGHT OUTER JOIN t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi WHERE (FK_Argomento Is NULL And Aula=1 And Primaria=1 And MonteOreEdizione=0 And t_AttivitaEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), ") "), "Or (FK_Argomento Is NULL And Aula=0 And Primaria=0 And VincoloOrario=0 And MonteOreEdizione=0 "), "And t_AttivitaEdizioni.FK_Edizione="), Variabili.Edizione.get_Campo((object)0)), ") "), "Or (FK_Argomento Is NULL And Aula=1 And Primaria=0 And Secondaria=1 "), "And t_AttivitaEdizioni.FK_Edizione="), Variabili.Edizione.get_Campo((object)0)), ") "), "GROUP BY t_AttivitaEdizioni.IDattedi, FK_TipoAttivita, IndTG, IndTA, "), "TipoAttivita, OreAttivita, ContrattoAula, DeltaOreAttivita "), "ORDER BY IndTG, IndTA, TipoAttivita"));
PerseoNET/frmDettEdizione.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, IDattedi, (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, (IDtattivita) AS FK_TipoAttivita, IDdocente, FK_Tipo, (Cognome + ' ' + Nome) AS StrDOC, IndTA, TipoAttivita, DescrIncarico, OreAssegnate, (0) AS OrePianificate, IncaricoGenericoGratuito, DescrGratuito, (NULL) AS TotContr, OreStraordinario, IncaricoBloccato, SbloccoTemporaneo FROM t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE FK_Argomento IS NULL AND t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY (Cognome + ' ' + Nome), IndTA, IDincarico "));
PerseoNET/frmDettEdizione.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, SUM(OreSvolgere) AS TotContr FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione=t_IncarichiEdizioni.IDincarico WHERE ApprovaIncarico=1 AND FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY IDincarico ORDER BY IDincarico "));
PerseoNET/frmDettEdizione.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, (SUM(DATEDIFF(mi,OraInizio, OraFine))/60) AS TotaleMinuti FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY IDincarico "), "UNION "), "SELECT t_IncarichiEdizioni.IDincarico, (SUM(DATEDIFF(mi,OraInizio, OraFine))/60) AS TotaleMinuti "), "FROM t_IncarichiEdizioni INNER JOIN "), "t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN "), "t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt "), "WHERE FK_Edizione="), Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY IDincarico "));
PerseoNET/frmDettEdizione.cs:										origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_IncaricoEdizione, SUM(OreSvolgere) AS TotaleAppr FROM t_IncarichiEdizioniContratti WHERE ApprovaIncarico=1 GROUP BY FK_IncaricoEdizione HAVING FK_IncaricoEdizione=", tblIncAltro.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "));
PerseoNET/frmDettEdizione.cs:								string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_VincoliOrariEdizioni.IDvincolo, FK_GiornoSettimana, TipoGiornoSettimana, Dalle, Alle FROM  t_VincoliOrariEdizioni INNER JOIN t_TipoGiornoSettimana ON t_VincoliOrariEdizioni.FK_GiornoSettimana = t_TipoGiornoSettimana.IDtgiornosett WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY NumeroGiorno, Dalle"));
PerseoNET/frmDettEdizione.cs:								origineDati = "SELECT IDtgiornosett, (CASE WHEN NumeroGiorno=1 THEN 7 ELSE (NumeroGiorno-1) END) AS IndG, TipoGiornoSettimana, (0) AS Selezione FROM t_TipoGiornoSettimana ORDER BY (CASE WHEN NumeroGiorno=1 THEN 7 ELSE (NumeroGiorno-1) END)";
PerseoNET/frmDettEdizione.cs:								string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_DateEscluse.IDesclusa, DateEscluseDAL, DateEscluseAL, Aula, Stage FROM  t_DateEscluse WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY DateEscluseDAL "));
PerseoNET/frmDettEdizione.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_LocaliEdizioni.IDloced, IDlocale, CodiceLocale, TipoLocale FROM t_Locali INNER JOIN t_TipoLocale ON t_Locali.FK_Tipo = t_TipoLocale.IDtloc INNER JOIN t_LocaliEdizioni ON t_Locali.IDlocale = t_LocaliEdizioni.FK_LocaleAssegnato WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " ORDER BY FK_Sede, DescrLocale"));
PerseoNET/frmDettEdizione.cs:									origineDati = "SELECT IDsede FROM t_Sedi WHERE SiglaSede LIKE 'BUSTO ARSIZIO%' AND Attiva=1 ";
PerseoNET/frmDettEdizione.cs:							origineDati = "SELECT t_Locali.IDlocale, SiglaSede, CodiceLocale, DescrLocale, TipoLocale, Posti, Sovrapponibile, INAIL, LocaleEsterno, Fittizio, LocaleAttivo, (0) AS Selezione FROM t_Locali INNER JOIN t_TipoLocale ON t_Locali.FK_Tipo = t_TipoLocale.IDtloc LEFT OUTER JOIN t_Sedi ON t_Locali.FK_Sede = t_Sedi.IDsede WHERE " + str + " OR (Fittizio=1 AND LocaleAttivo=1) ORDER BY Fittizio DESC, SiglaSede, TipoLocale, CodiceLocale ";
PerseoNET/frmDettEdizione.cs:					string vSQL = "SELECT IDedizione, MIN(DataSvolgimento) AS Prima, MAX(DataSvolgimento) AS Ultima FROM v_DettaglioOreSvoltePerIncarico WHERE RegistrazioneEstesa=1 GROUP BY IDedizione HAVING IDedizione=" + Conversions.ToString(FormED.ChiavePrimaria) + " ";
PerseoNET/frmDettEdizione.cs:					vSQL = "SELECT IDpresenze, DataPresenza FROM t_CommissioniEsameEdizioni INNER JOIN t_CommissioniEsameComponenti ON t_CommissioniEsameEdizioni.FK_Commissione = t_CommissioniEsameComponenti.FK_Commissione INNER JOIN t_CommissioniEsamePresenze ON t_CommissioniEsameComponenti.IDcomponente = t_CommissioniEsamePresenze.FK_Componente WHERE FK_Edizione=" + Conversions.ToString(chiavePrimaria) + " ";
PerseoNET/frmDettEdizione.cs:					vSQL = "SELECT IDedizione, MIN(DataSvolgimento) AS Prima, MAX(DataSvolgimento) AS Ultima FROM v_DettaglioOreSvoltePerIncarico WHERE Aula=1 AND Primaria=1 GROUP BY IDedizione HAVING IDedizione=" + Conversions.ToString(FormED.ChiavePrimaria) + " ";
PerseoNET/frmDettEdizione.cs:						vSQL = "SELECT IDiscrizione, IDconvenzione, DataAvvio, DataFine FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE (FK_Edizione=" + Conversions.ToString(chiavePrimaria) + " AND DataAvvio<" + FunzStringa.StrDataSQL(txtDataAvvio.Text, FlagSqlServer: true) + ") OR (FK_Edizione=" + Conversions.ToString(chiavePrimaria) + " AND DataFine>" + FunzStringa.StrDataSQL(txtDataFine.Text, FlagSqlServer: true) + ") ";
PerseoNET/frmDettEdizione.cs:						vSQL = "SELECT FK_Edizione, FK_Docente FROM t_IncarichiEdizioni WHERE FK_Edizione=" + Conversions.ToString(Variabili.Edizione.PKEdizione);
PerseoNET/frmDettEdizione.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_AttivitaEdizioni.IDattedi, t_AttivitaEdizioni.FK_Edizione, FK_TipoAttivita, TipoAttivita, DescrAttivita FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_IncarichiEdizioni ON t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita GROUP BY t_AttivitaEdizioni.IDattedi, t_AttivitaEdizioni.FK_Edizione, FK_TipoAttivita, IndTG, IndTA, TipoGruppo, TipoAttivita, DescrAttivita, OreAttivita, DeltaOreAttivita, CostoOraServizio HAVING t_AttivitaEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY IndTG, IndTA"));
PerseoNET/frmDettEdizione.cs:						vSQL = "SELECT t_IncarichiEdizioni.FK_Edizione, MIN(DataAttivita) AS PrimaData, MAX(DataAttivita) AS UltimaData FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE RegistrazioneEstesa=1 GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(FormED.ChiavePrimaria);
PerseoNET/frmDettEdizione.cs:						vSQL = "SELECT IDcalatt, DataAttivita FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE TipoAttivita='ESAME' AND t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(FormED.ChiavePrimaria) + " AND (DataAttivita<" + FunzStringa.StrDataSQL(txtDataInizioEsame.Text, FlagSqlServer: true) + " OR DataAttivita>" + FunzStringa.StrDataSQL(txtDataFineEsame.Text, FlagSqlServer: true) + ") ";
PerseoNET/frmDettEdizione.cs:					vSQL = "SELECT IDcalatt, DataAttivita FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE TipoAttivita='ESAME' AND t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(FormED.ChiavePrimaria) + " ";
PerseoNET/frmDettEdizione.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDincarico FROM t_IncarichiEdizioni WHERE FK_Docente<=3 AND FK_Edizione=", Variabili.Edizione.get_Campo((object)0)));
PerseoNET/frmDettEdizione.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDiscrizione FROM t_Iscrizioni WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)));
PerseoNET/frmDettEdizione.cs:						vSQL = "SELECT FK_Iscrizione, COUNT(IDcalatt) AS NReg FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Edizione=" + Conversions.ToString(FormED.ChiavePrimaria) + " GROUP BY FK_Iscrizione ";
PerseoNET/frmDettEdizione.cs:					vSQL = ((FormED.ChiavePrimaria <= 0) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, FK_SedeEdizione, CodiceEdizione FROM t_PianoServizi WHERE FK_SedeEdizione=", FormED.get_ValoreSelezioneCombo(cmbFK_SedeEdizione)), " "), "AND CodiceEdizione='"), FunzStringa.StringaSQL(txtCodiceEdizione.Text)), "' ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, FK_SedeEdizione, CodiceEdizione FROM t_PianoServizi WHERE IDedizione<>" + Conversions.ToString(FormED.ChiavePrimaria) + " AND FK_SedeEdizione=", FormED.get_ValoreSelezioneCombo(cmbFK_SedeEdizione)), " "), "AND CodiceEdizione='"), FunzStringa.StringaSQL(txtCodiceEdizione.Text)), "' ")));
PerseoNET/frmDettEdizione.cs:					vSQL = "SELECT IDedizione, (IDmwe) AS CodiceMWE FROM t_PianoServizi WHERE IDmwe='" + FunzStringa.StringaSQL(txtIDmwe.Text) + "' ";
PerseoNET/frmDettEdizione.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IscrizioniDoti.IDdoteiscr, IDedizione, t_IscrizioniDoti.FK_TipoAttivita, QuotaDoteIscrizione, CostoOraAttivita, CostoOraServizio, OreBonusGratuito, RegolaDote, MaxOreAttivita, OraGratuitaProroga, DoteDeroga, (0) AS OreEdizioneAssegnate FROM t_IscrizioniDoti INNER JOIN t_Iscrizioni ON t_IscrizioniDoti.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_ProgettiEdizioniRegole ON t_Azioni.FK_Progetto = t_ProgettiEdizioniRegole.FK_Progetto AND t_IscrizioniDoti.FK_TipoAttivita = t_ProgettiEdizioniRegole.FK_TipoAttivitaEdizione LEFT OUTER JOIN t_AttivitaEdizioni ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione AND t_IscrizioniDoti.FK_TipoAttivita = t_AttivitaEdizioni.FK_TipoAttivita WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " AND RegolaDote=1 AND t_IscrizioniDoti.FK_TipoAttivita IS NOT NULL AND IgnoraRegoleProgetto=0 "), "ORDER BY t_IscrizioniDoti.FK_TipoAttivita, IDiscrizione "));
PerseoNET/frmDettEdizione.cs:							origineDati = "SELECT IDdoteiscr, IDedizione, IDtattivita, QuotaDoteIscrizione, CostoOraAttivita, CostoOraServizio, OreBonusGratuito, RegolaDote, MaxOreAttivita, OraGratuitaProroga, DoteDeroga, OreEdizioneAssegnate FROM t_QuoteDotiOreAttivita";
PerseoNET/frmDettEdizione.cs:							origineDati = "SELECT IDtattivita, SUM(OreEdizioneAssegnate) AS TotaleOreAttivita FROM t_QuoteDotiOreAttivita GROUP BY IDtattivita ";
PerseoNET/frmDettEdizione.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Edizione, SUM(OreArgomento) AS OreStage FROM t_ArgomentiModuli INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo WHERE DescrArgomento='STAGE' GROUP BY FK_Edizione HAVING FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/frmDettEdizione.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, FK_Iscrizione FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/frmDettEdizione.cs:				vSQL = "SELECT IDiscrizione, OreAttivitaIndividuali FROM t_Iscrizioni WHERE OreAttivitaIndividuali=0 AND IDiscrizione " + clsTblDatiDR.StringaFiltroIN("FK_Iscrizione");
PerseoNET/frmDettEdizione.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/frmDettEdizione.cs:				string origineDati = ((iD_Cliente != FunzPerseo.PerseoClienti.RED) ? ("SELECT IDargomento, FK_Modulo, FK_TipoArgomento, IndArgomento, DescrArgomento, OreArgomento, DescrBreveArgomento, DataRec, DataModifica FROM t_ArgomentiModuli WHERE IDArgomento=" + Conversions.ToString(ID_Arg)) : ((!Operators.ConditionalCompareObjectEqual(Variabili.Edizione.get_CampoSede((object)"PROVsede"), "VA", TextCompare: false)) ? ("SELECT IDargomento, FK_Modulo, FK_TipoArgomento, IndArgomento, DescrArgomento, OreArgomento, DescrBreveArgomento, ID_Disciplina, DataRec, DataModifica FROM t_ArgomentiModuli WHERE IDArgomento=" + Conversions.ToString(ID_Arg)) : ("SELECT IDargomento, FK_Modulo, FK_TipoArgomento, IndArgomento, DescrArgomento, OreArgomento, DescrBreveArgomento, DataRec, DataModifica FROM t_ArgomentiModuli WHERE IDArgomento=" + Conversions.ToString(ID_Arg))));
PerseoNET/frmDettEdizione.cs:						origineDati = (Conversions.ToBoolean(Conversions.ToBoolean(Operators.CompareObjectEqual(left, "TRASVERSALE", TextCompare: false)) || Conversions.ToBoolean(Operators.CompareObjectEqual(left, "PERSONALIZZAZIONE", TextCompare: false)) || Conversions.ToBoolean(Operators.CompareObjectEqual(left, "FLESSIBILITÃ", TextCompare: false))) ? "SELECT IDtarg, TipoArgomento FROM t_TipoArgomento WHERE Obsoleto=False AND TipoArgomento IN('TRASVERSALE', 'PERSONALIZZAZIONE', 'FLESSIBILITÃ') ORDER BY IndTipoArg, TipoArgomento " : (Operators.ConditionalCompareObjectEqual(left, "TECNICO PROFESSIONALE", TextCompare: false) ? "SELECT IDtarg, TipoArgomento FROM t_TipoArgomento WHERE Obsoleto=False AND (Professionale=True OR SicurezzaGenerale=True OR SicurezzaSpecifica=True OR Certificabile=True) ORDER BY IndTipoArg, TipoArgomento " : ((!Operators.ConditionalCompareObjectEqual(left, "STAGE", TextCompare: false)) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtarg, TipoArgomento FROM t_TipoArgomento WHERE Obsoleto=False AND TipoArgomento IN('", tblModuli.get_Campo((object)"TipoModulo", vFlagUpdateDB: false)), "') "), "ORDER BY IndTipoArg, TipoArgomento ")) : "SELECT IDtarg, TipoArgomento FROM t_TipoArgomento WHERE Obsoleto=False AND TipoArgomento IN('STAGE') ORDER BY IndTipoArg, TipoArgomento ")));
PerseoNET/frmDettEdizione.cs:						origineDati = "SELECT IDtarg, TipoArgomento FROM t_TipoArgomento WHERE Obsoleto=False AND TipoArgomento IN('BASE') ORDER BY IndTipoArg, TipoArgomento ";
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT IDtarg, TipoArgomento FROM t_TipoArgomento WHERE Obsoleto=False ORDER BY IndTipoArg, TipoArgomento ";
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT TipoDescrizioneDisciplina FROM t_TipoDescrizioneDisciplina " + str + "ORDER BY TecnicoProfessionale, Base, Trasversale, TipoDescrizioneDisciplina ";
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT TipoDescrizioneDisciplina FROM t_TipoDescrizioneDisciplina " + str + "ORDER BY TecnicoProfessionale, Base, Trasversale, TipoDescrizioneDisciplina ";
PerseoNET/frmDettEdizione.cs:				string origineDati = "SELECT IDmodulo, FK_Edizione, FK_Attivita, FK_TipoModulo, IndModulo, DescrModulo, OreModulo, DataRec, DataModifica FROM t_ModuliEdizioni WHERE IDmodulo=" + Conversions.ToString(intModulo);
PerseoNET/frmDettEdizione.cs:				origineDati = "SELECT IDattedi, TipoAttivita FROM t_AttivitaEdizione WHERE TipoAttivita IN('DOCENZA','STAGE') ORDER BY TipoAttivita ";
PerseoNET/frmDettEdizione.cs:				origineDati = "SELECT IDtmodulo, TipoModulo FROM t_TipoModulo WHERE Obsoleto=False ORDER BY IndTipoMod ";
PerseoNET/frmDettEdizione.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDmodulo, DescrModulo, OreModulo FROM t_ModuliEdizioni INNER JOIN t_AttivitaEdizioni ON t_ModuliEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE t_ModuliEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), "AND TipoAttivita<>'STAGE' "));
PerseoNET/frmDettEdizione.cs:							vSQL = "SELECT IDtarg FROM t_TipoArgomento WHERE TipoArgomento LIKE 'SICUREZZA %'";
PerseoNET/frmDettEdizione.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDargomento, DescrArgomento FROM t_ArgomentiModuli INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo WHERE DescrArgomento='" + FunzStringa.StringaSQL(txtDescrArgomento.Text) + "' AND FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/frmDettEdizione.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDargomento, DescrArgomento FROM t_ArgomentiModuli INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo WHERE DescrArgomento='" + FunzStringa.StringaSQL(txtDescrArgomento.Text) + "' AND FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND IDargomento<>"), tblArg.get_Campo((object)"IDargomento", vFlagUpdateDB: false)), " "));
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiAttivi ";
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiAttivi ";
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiAttivi WHERE Attivo=True AND Parcelle=False AND FK_Tipo=1 ORDER BY StrDOC ";
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiAttivi ";
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiAttivi ";
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiAttivi WHERE Attivo=True AND Parcelle=False AND FK_Tipo=1 ORDER BY StrDOC ";
PerseoNET/frmDettEdizione.cs:						string vSQL = "SELECT IDincarico, (Cognome + ' ' + Nome) AS StrDOC, DescrArgomento, DescrBreveArgomento, OreAssegnate FROM t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDincarico " + tblInc.StringaFiltroIN("FK_IncaricoClassiRiunite");
PerseoNET/frmDettEdizione.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtattivita FROM t_TipoAttivitaEdizione WHERE Primaria=False AND Secondaria=False AND IDtattivita=", tblIncAltro.get_Campo((object)"FK_TipoAttivita", vFlagUpdateDB: false)));
PerseoNET/frmDettEdizione.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico FROM t_IncarichiEdizioni WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND FK_Docente="), tblDoc.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "), "AND FK_Argomento="), tblDisc.get_Campo((object)"IDargomento", vFlagUpdateDB: false)), " AND OreAssegnate="), txtAssegnate.Text), " "));
PerseoNET/frmDettEdizione.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT COUNT(IDoremese) AS NumeroRecord FROM t_IncarichiEdizioniOrePerMese WHERE FK_Incarico=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND OreSvolte>0 "));
PerseoNET/frmDettEdizione.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_IncaricoEdizione, FK_Contratto, ApprovaIncarico FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " ORDER BY FK_Contratto "));
PerseoNET/frmDettEdizione.cs:								string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)) AS Minuti FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE IDincarico=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND DataAttivita>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " "));
PerseoNET/frmDettEdizione.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento FROM t_ProgettiPagamenti WHERE FK_Sede=", Variabili.Edizione.get_Campo((object)"FK_SedeEdizione")), "AND FK_Progetto="), Variabili.Progetto.get_Campo((object)0)), " AND DataPagamento IS NULL "));
PerseoNET/frmDettEdizione.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico FROM t_IncarichiEdizioni WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND FK_Docente="), tblDocAltro.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "), "AND FK_Argomento IS NULL AND FK_Attivita="), tblAltro.get_Campo((object)"IDattedi", vFlagUpdateDB: false)), " AND OreAssegnate="), txtAssegnateAltro.Text), " "));
PerseoNET/frmDettEdizione.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT COUNT(IDoremese) AS NumeroRecord FROM t_IncarichiEdizioniOrePerMese WHERE FK_Incarico=", tblIncAltro.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND OreSvolte>0 "));
PerseoNET/frmDettEdizione.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_IncaricoEdizione, FK_Contratto, ApprovaIncarico FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=", tblIncAltro.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " ORDER BY FK_Contratto "));
PerseoNET/frmDettEdizione.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT COUNT(t_CalendarioAttivita.IDcalatt) AS NumeroRecord FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE (FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND OraInizio>="), FunzStringa.StrOrarioSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblVinc.get_Campo((object)"Dalle", vFlagUpdateDB: false)), VariabiliClassi.StrFormatoOraBrevePC), FlagSqlServer: true)), " "), "AND OraInizio<"), FunzStringa.StrOrarioSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblVinc.get_Campo((object)"Alle", vFlagUpdateDB: false)), VariabiliClassi.StrFormatoOraBrevePC), FlagSqlServer: true)), " AND DATEPART(dw,DataAttivita)="), num2), ") "), "OR "), "(FK_Edizione="), Variabili.Edizione.get_Campo((object)0)), " "), "AND OraFine>"), FunzStringa.StrOrarioSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblVinc.get_Campo((object)"Dalle", vFlagUpdateDB: false)), VariabiliClassi.StrFormatoOraBrevePC), FlagSqlServer: true)), " "), "AND OraFine<="), FunzStringa.StrOrarioSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblVinc.get_Campo((object)"Alle", vFlagUpdateDB: false)), VariabiliClassi.StrFormatoOraBrevePC), FlagSqlServer: true)), " AND DATEPART(dw,DataAttivita)="), num2), ") "));
PerseoNET/frmDettEdizione.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDvincolo, FK_GiornoSettimana, Dalle, Alle, DataRec, DataModifica FROM t_VincoliOrariEdizioni WHERE IDvincolo=", tblVinc.get_Campo((object)0, vFlagUpdateDB: false)));
PerseoNET/frmDettEdizione.cs:											string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataAttivita>="), FunzStringa.StrDataSQL(txtDateEscluseDAL.Text, FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(txtDateEscluseAL.Text, FlagSqlServer: true)), " "));
PerseoNET/frmDettEdizione.cs:					string origineDati = "SELECT Studente, CodFiscale, IDmwiscr, ID_Dote, TipoDote, ImportoTotaleDote, DataAvvioDote, DataFineDote, QuotaDisabile, Esito FROM t_StudentiDoti ";
PerseoNET/frmDettEdizione.cs:					origineDati = "SELECT IDtdote, TipoDote FROM t_TipoDoteStudente ";
PerseoNET/frmDettEdizione.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDmwiscr FROM t_Iscrizioni WHERE IDmwiscr='", clsTblDatiDR.get_Campo((object)"IDmwiscr")), "' "), "AND IDiscrizione<>"), tblIscr.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)));
PerseoNET/frmDettEdizione.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdotestud, ID_Dote FROM t_StudentiDoti WHERE ID_Dote='", clsTblDatiDR.get_Campo((object)"ID_Dote")), "' AND FK_Studente<>"), Variabili.Edizione.get_CampoIscrizione((object)"IDutente")));
PerseoNET/frmDettEdizione.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdotestud FROM t_StudentiDoti WHERE ID_Dote='", clsTblDatiDR.get_Campo((object)"ID_Dote")), "' AND FK_Studente="), Variabili.Edizione.get_CampoIscrizione((object)"IDutente")));
PerseoNET/frmDettEdizione.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDmodulo, TipoModulo, IndModulo, DescrModulo, OreModulo FROM t_ModuliEdizioni INNER JOIN t_TipoModulo ON t_ModuliEdizioni.FK_TipoModulo=t_TipoModulo.IDtmodulo WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/frmDettEdizione.cs:						origineDati = "SELECT FK_Modulo, FK_TipoArgomento, IndArgomento, DescrArgomento, DescrBreveArgomento, OreArgomento FROM t_ArgomentiModuli ";
PerseoNET/frmDettEdizione.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtarg, TipoArgomento FROM t_TipoArgomento WHERE TipoArgomento='", clsTblDatiDR.get_Campo((object)"TipoModulo")), "' "));
PerseoNET/frmDettEdizione.cs:								origineDati = "SELECT IDtarg, TipoArgomento FROM t_TipoArgomento WHERE TipoArgomento='STAGE' ";
PerseoNET/frmDettEdizione.cs:						origineDati = "SELECT FK_Modulo, FK_TipoArgomento, IndArgomento, DescrArgomento, DescrBreveArgomento, OreArgomento FROM t_ArgomentiModuli ";
PerseoNET/frmDettEdizione.cs:				string origineDati = "SELECT IDargomento, DescrContenutiArg, DataRec, DataModifica FROM t_ArgomentiModuli WHERE IDArgomento=" + Conversions.ToString(ID_Arg);
PerseoNET/frmDettEdizione.cs:						string origineDati = "SELECT t_Iscrizioni.IDiscrizione, IDedizione, FK_Utente, DataFine, DescrEdizione, PosRegistro, (Cognome + ' ' + Nome) AS Studente, DataIscr, DataRitiro, IdoneoAmmesso, ProseguePercorso, (0) AS Sel FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE IDedizione=" + Conversions.ToString(Variabili.Edizione.PKImportaIscritti) + " AND DataIscr IS NOT NULL ORDER BY PosRegistro, (Cognome + ' ' + Nome) ";
PerseoNET/frmDettEdizione.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDedizione, SUM(OreUtente) AS TotaleOre, SUM(OreStage) AS TotaleOreStage FROM t_IscrittiEdizione GROUP BY IDedizione HAVING IDedizione=", Variabili.Edizione.get_Campo((object)0)));
PerseoNET/frmDettEdizione.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)) AS Minuti FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE IDincarico=", tblIncAltro.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND DataAttivita>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " "));
PerseoNET/frmDettEdizione.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(Minuti) AS TotaleMinuti FROM v_DettaglioOreSvoltePerIncarico WHERE IDincarico=", tblIncAltro.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND DataSvolgimento>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)), " "), "AND DataSvolgimento<="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " "));
PerseoNET/frmDettEdizione.cs:				string origineDati = "SELECT t_Locali.IDlocale, SiglaSede, CodiceLocale, DescrLocale, TipoLocale, Posti, Sovrapponibile, INAIL, LocaleEsterno, Fittizio, LocaleAttivo, (0) AS Selezione FROM t_Locali INNER JOIN t_TipoLocale ON t_Locali.FK_Tipo = t_TipoLocale.IDtloc LEFT OUTER JOIN t_Sedi ON t_Locali.FK_Sede = t_Sedi.IDsede WHERE (" + str + "AND LocaleAttivo=1) OR (Fittizio=1 AND LocaleAttivo=1) ORDER BY Fittizio DESC, TipoLocale, CodiceLocale ";
PerseoNET/frmDettEdizione.cs:					string origineDati = "SELECT DescrModulo, OreModulo, DescrArgomento, DescrBreveArgomento, TipoArgomento, OreArgomento, ID_Disciplina FROM t_ModuliEdizioni ";
PerseoNET/frmDettEdizione.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtattivita FROM t_TipoAttivitaEdizione WHERE Primaria=False AND Secondaria=False AND IDtattivita=", tblAltro.get_Campo((object)"FK_TipoAttivita", vFlagUpdateDB: false)));
PerseoNET/frmDettEdizione.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtattivita FROM t_TipoAttivitaEdizione WHERE Primaria=False AND Secondaria=False AND IDtattivita=", tblIncAltro.get_Campo((object)"FK_TipoAttivita", vFlagUpdateDB: false)));
PerseoNET/frmDettEdizione.cs:				string origineDati = "SELECT TipoCertificazione, (CASE WHEN TipoArgomento IS NOT NULL THEN TipoArgomento ELSE DescrDisciplinaCertificata END) AS TipoArgomento, OrePreviste, PercentualeMinimaOFA, ModelloAttivo FROM t_ModelliCertificazione INNER JOIN t_TipoDocumento ON t_ModelliCertificazione.FK_TipoDocumento = t_TipoDocumento.IDtdoc LEFT OUTER JOIN t_TipoArgomento ON t_ModelliCertificazione.FK_TipoArgomento = t_TipoArgomento.IDtarg ORDER BY ModelloAttivo DESC, IndModello, TipoCertificazione ";
PerseoNET/frmDettEdizione.cs:				string origineDati = "SELECT IDesclusa, FK_Edizione, DateEscluseDAL, DateEscluseAL, Aula, Stage, DataRec, DataModifica FROM  t_DateEscluse WHERE IDesclusa=" + Conversions.ToString(vID);
PerseoNET/frmDettEdizione.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT MAX(DataAttivita) AS UltimaData FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND FK_Argomento IS NOT NULL "), "AND DataAttivita<="), FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true)));
PerseoNET/frmDettEdizione.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT FK_IncaricoEdizione, FK_CodicePF FROM t_DocentiContrattiEsterni INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE FK_IncaricoEdizione=", clsTblDatiDR.get_Campo((object)"IDincarico")));
PerseoNET/frmDettEdizione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcontratto FROM t_DocentiContratti WHERE FK_Docente=", tblDoc.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " AND DataDimissioneDipendente IS NOT NULL "), "AND DataDimissioneDipendente>"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataAvvio")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataDimissioneDipendente<"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataFine")), "dd/MM/yyyy"), FlagSqlServer: true)), " "));
PerseoNET/frmDettEdizione.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT FK_IncaricoEdizione, FK_CodicePF FROM t_DocentiContrattiEsterni INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE FK_IncaricoEdizione=", clsTblDatiDR.get_Campo((object)"IDincarico")));
PerseoNET/frmDettEdizione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcontratto FROM t_DocentiContratti WHERE FK_Docente=", tblDocAltro.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " AND DataDimissioneDipendente IS NOT NULL "), "AND DataDimissioneDipendente>"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataAvvio")), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataDimissioneDipendente<"), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataFine")), "dd/MM/yyyy"), FlagSqlServer: true)), " "));
PerseoNET/frmDettEdizione.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDcompensi FROM t_ProgettiPagamentiCompensiOneri WHERE DataPagatoFine>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND IDincarico=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)));
PerseoNET/frmDettEdizione.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDpagainc, FK_Incarico FROM t_PagamentiIndividualiIncarichi INNER JOIN t_PagamentiIndividuali ON t_PagamentiIndividualiIncarichi.FK_Pagamento = t_PagamentiIndividuali.IDpagaindiv WHERE FK_Incarico=", tblInc.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " AND DataRichiestaFine>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)));
PerseoNET/frmDettEdizione.cs:					vSQL = "SELECT IDincarico FROM t_IncarichiEdizioni WHERE PagamentoIndividuale=1 AND IDincarico=" + Conversions.ToString(value);
PerseoNET/frmDettEdizione.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento FROM t_ProgettiPagamenti WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " AND FK_Sede="), Variabili.Edizione.get_Campo((object)"FK_Sedeedizione")), " "), "AND DataRichiestaFine>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)));
PerseoNET/frmDettEdizione.cs:					vSQL = "SELECT FK_Incarico, SUM(DATEDIFF(mi,OraInizio,OraFine)) AS Minuti FROM t_CalendarioAttivita WHERE DataAttivita<" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " GROUP BY FK_Incarico HAVING FK_Incarico=" + Conversions.ToString(value) + " ";
PerseoNET/frmDettEdizione.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDcompensi FROM t_ProgettiPagamentiCompensiOneri WHERE DataPagatoFine>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND IDincarico=", tblIncAltro.get_Campo((object)"IDincarico", vFlagUpdateDB: false)));
PerseoNET/frmDettEdizione.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDpagainc, FK_Incarico FROM t_PagamentiIndividualiIncarichi INNER JOIN t_PagamentiIndividuali ON t_PagamentiIndividualiIncarichi.FK_Pagamento = t_PagamentiIndividuali.IDpagaindiv WHERE FK_Incarico=", tblIncAltro.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " AND DataRichiestaFine>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)));
PerseoNET/frmDettEdizione.cs:					vSQL = "SELECT IDincarico FROM t_IncarichiEdizioni WHERE PagamentoIndividuale=1 AND IDincarico=" + Conversions.ToString(value);
PerseoNET/frmDettEdizione.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento FROM t_ProgettiPagamenti WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " AND FK_Sede="), Variabili.Edizione.get_Campo((object)"FK_Sedeedizione")), " "), "AND DataRichiestaFine>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)));
PerseoNET/frmDettEdizione.cs:						vSQL = "SELECT t_CalendarioCodocenza.FK_Incarico, SUM(DATEDIFF(mi,OraInizio,OraFine)) AS Minuti FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE DataAttivita<" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " GROUP BY t_CalendarioCodocenza.FK_Incarico HAVING t_CalendarioCodocenza.FK_Incarico=" + Conversions.ToString(value) + " ";
PerseoNET/frmDettEdizione.cs:					vSQL = "SELECT FK_Incarico, SUM(DATEDIFF(mi,OraInizio,OraFine)) AS Minuti FROM t_CalendarioAttivita WHERE DataAttivita<" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " GROUP BY FK_Incarico HAVING FK_Incarico=" + Conversions.ToString(value) + " ";
PerseoNET/clsEdizione.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtrepcompe, TitoloGrande, TitoloPiccolo, Nota1, Nota2, Nota3 FROM t_IscrizioniCompetenzeCertificate INNER JOIN t_Iscrizioni ON t_IscrizioniCompetenzeCertificate.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_ProfessioniConoAbiRL ON t_IscrizioniCompetenzeCertificate.FK_ConoscenzaAbilita = t_ProfessioniConoAbiRL.IDconoabi INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniConoAbiRL.FK_Competenza = t_ProfessioniCompetenzeRL.IDcompestd INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl INNER JOIN t_ProfessioniSettoriStandardRL ON t_ProfessioniStandardRL.FK_TipoSettProfessionale = t_ProfessioniSettoriStandardRL.IDtsettprof INNER JOIN t_TipoRepertorioCompetenze ON t_ProfessioniSettoriStandardRL.FK_TipoRepertorio = t_TipoRepertorioCompetenze.IDtrepcompe WHERE FK_Edizione=", this.get_Campo((object)0)), " "), "GROUP BY IDtrepcompe, TitoloGrande, TitoloPiccolo, Nota1, Nota2, Nota3 "));
PerseoNET/clsEdizione.cs:					string vSQL = "SELECT IDincarico, TipoArgomento FROM t_IncarichiContrattiEdizioni INNER JOIN t_TipoArgomento ON t_IncarichiContrattiEdizioni.FK_TipoArgomento = t_TipoArgomento.IDtarg WHERE TipoArgomento='LARSA' ";
PerseoNET/clsEdizione.cs:						vSQL = "SELECT IDincarico, TipoAttivita FROM t_IncarichiContrattiEdizioni WHERE TipoAttivita='LARSA' ";
PerseoNET/clsEdizione.cs:						vSQL = "SELECT IDedizione, FK_Azione, FK_SedeEdizione, FK_SettoreEdizione, FK_TipoFormativoInterno, FK_Anno, FK_DurataAnni, EdizioneAttiva, DescrEdizione, CodiceEdizione, IDmwe, DataAvvio, DataFine, DataInizioEsame, DataFineEsame, PresidenteCommissione, AllieviMIN, AllieviMAX, Durata, DurataAnni, QuotaIscr, QuotaInteg, t_PianoServizi.Gruppo, MassimaleDDIF, DataAggRegistro, DataBlocco, t_Sedi.DataBloccoCollProf, t_Sedi.DataBloccoIncassi, t_Sedi.DataBloccoIncassiTemp, DataBloccoEdizione,PercMaxSubentro, PercMinOFA, RecuperoOre, GestionePersonale, PianoIncarichi, RegistraDocenteEsterno, MezzaOra, DataInizioFA, DataFineFA, PagineRegistroStage, PagaConsuntivoMese, ModelloEdizione, ObbligoIscritti, EdizioneIscrizioneDote, PersonalizzaOrario, CompattazioneOFA, ConsuntivoStagePagamento, ControlloSovraStudenti, FK_LivelloSpecificoSicurezza, Manutenzione, CertificaTitoloGrande, CertificaTitoloPiccolo, CertificaNota1, CertificaNota2, CertificaNota3, CertificatoPersonalizzato, DataBloccoStudenti, RecuperoAssenzaProgrammata, RecuperoEsternoAssenza, ConsenteTirocinioCurr, ConsenteTirocinioExtraCurr, (NULL) AS EdizioneAmpliamento, AbilitaFAD, PercMaxFAD, t_PianoServizi.DataRec, t_PianoServizi.DataModifica, t_PianoServizi.Bloccato, t_Azioni.IDazione, FK_Progetto, FK_SedeAzione, FK_StatoAzione, AzioneAttiva, DescrAzione, IDmwa, CodiceAzione, DataAvvioAzione, DataFineAzione, ModelloAzione, t_Progetti.IDprogetto, FK_Bando, FK_TipoProgetto, FK_SedeProgetto, ConsenteCreaEdizioni, GestioneProgettoPersonale, ProgettoAttivo, DescrProgetto, IDmwp, CodiceProgetto, DataAvvioProg, DataFineProg, NoteProgetto, (NULL) AS SiglaSede, (t_Progetti.DelegaAzienda) AS DelegaAziendaProg, IscrizioneDote, BudgetProgetto, BudgetProgSostegnoFin, ProgettoStandard, (0) AS IscrittiProgetto, (0) AS IscrittiDote, (0) AS BudgetDoti, (0) AS BudgetPrivato, (0) AS BudgetPrivatoStage, BudgetPrivatoTeorico, BloccoDescrEdizione, CodiceCIG, CodiceCUP, DescrBando, CodiceBando, AnnoBando, TipoBando, ObbligoCodiceMW, DescrDecreto, DataBando, (t_Bandi.DelegaAzienda) AS DelegaAziendaBando, ObbligatorioID, ObbligatorioEdizioneID, PossiedeRegole, LegendaAttivitaPIP, OreCostiAttivitaPIP, OreSostegnoPreviste, OreSostegnoPrevisteIndiv, FAGiorniPrima, FAGiorniDopo, PeriodoPagaLibero, OreModuliBasePreviste, DeltaOreModuliBase, OreModuliProfPreviste, DeltaOreModuliProf, OreStagePrevisteMIN, OreStagePrevisteMAX, TblDescrDiscipline, FK_TipoLogoRegistroStage, RilevanzaProgetto, OreIndividualiStudenteMax, t_Progetti.DataRec, t_Progetti.DataModifica, t_Progetti.Bloccato FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando INNER JOIN t_TipoBando ON t_Bandi.FK_TipoBando = t_TipoBando.IDtbando ";
PerseoNET/clsEdizione.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDsede, FK_TipoSede, DescrSede, SiglaSede, IDMW_Sede, ID_SedeFOL, ComuneSede, IndirizzoSede, CAPsede, PROVsede, TelSede, FaxSede, EmailSede, Attiva, SedeTest, RapprLegaleCognome, RapprLegaleNome, CF_RapprLegale, RuoloRapprLegale, FirmaRapprLegaleIMG, CF_PIVA, FirmaDocumenti, RuoloFirmaDocumenti, FirmaDocumentiIMG, FirmaAltro, RuoloFirmaAltro, OrdGruppo, ContrattoPregresso, DeltaAvvioContratto, DataRipristinoPregresso, DataBloccoIncassi, DataBloccoIncassiTemp, DataRipristinoBloccoInc, DataBloccoCollProf, DataRipristinoBloccoCProf, FileIntegrazione_LI, DettaglioEdizione_LI, AccreditataFormazione, AccreditataServizi, CodFiscaleSede, PIVASede, DescrAccreditamento, INAIL_Lab, BloccoLettereIncarico, (NULL) AS ComuneProvCAP, (NULL) AS IndirComuneProvCAP FROM t_Sedi WHERE IDsede=", mvEdizione.get_Campo((object)"FK_SedeEdizione")), " "));
PerseoNET/clsEdizione.cs:							vSQL = "SELECT t_Azioni.IDazione, FK_Progetto, FK_SedeAzione, FK_StatoAzione, AzioneAttiva, DescrAzione, IDmwa, CodiceAzione, DataAvvioAzione, DataFineAzione, ModelloAzione FROM t_Azioni ";
PerseoNET/clsEdizione.cs:							vSQL = "SELECT t_Progetti.IDprogetto, FK_Bando, FK_TipoProgetto, FK_SedeProgetto, ConsenteCreaEdizioni, GestioneProgettoPersonale, ProgettoAttivo, DescrProgetto, IDmwp, CodiceProgetto, DataAvvioProg, DataFineProg, NoteProgetto, SiglaSede, (t_Progetti.DelegaAzienda) AS DelegaAziendaProg, IscrizioneDote, BudgetProgetto, BudgetProgSostegnoFin, ProgettoStandard, (NumeroIscritti) AS IscrittiProgetto, (NumeroIscrittiDote) AS IscrittiDote, (TotaleVersatoDote) AS BudgetDoti, (TotaleVersato) AS BudgetPrivato, (TotaleVersatoStage) AS BudgetPrivatoStage, BudgetPrivatoTeorico, BloccoDescrEdizione, CodiceCIG, CodiceCUP, DescrBando, CodiceBando, AnnoBando, TipoBando, ObbligoCodiceMW, DescrDecreto, DataBando, (t_Bandi.DelegaAzienda) AS DelegaAziendaBando, ObbligatorioID, ObbligatorioEdizioneID, PossiedeRegole, LegendaAttivitaPIP, OreCostiAttivitaPIP, OreSostegnoPreviste, OreSostegnoPrevisteIndiv, FAGiorniPrima, FAGiorniDopo, PeriodoPagaLibero, OreModuliBasePreviste, DeltaOreModuliBase, OreModuliProfPreviste, DeltaOreModuliProf, OreStagePrevisteMIN, OreStagePrevisteMAX, TblDescrDiscipline, FK_TipoLogoRegistroStage, RilevanzaProgetto, OreIndividualiStudenteMax, t_Progetti.DataRec, t_Progetti.DataModifica, t_Progetti.Bloccato FROM t_Progetti ";
PerseoNET/clsEdizione.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDedizione, DescrEdizione, IDmwe, CodiceEdizione, FK_Anno, Durata, (SELECT OreAttivita FROM t_AttivitaEdizioni WHERE FK_Edizione=IDedizione AND FK_TipoAttivita=2) AS OreStage FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione WHERE IDiscrizione=", this.get_CampoIscrizione((object)"FK_IscrizioneAmpliamento")));
PerseoNET/clsEdizione.cs:					string vSQL = "SELECT TipoAttivita, OreAttivita FROM t_IncarichiContrattiEdizioni GROUP BY TipoAttivita, OreAttivita HAVING TipoAttivita='DOCENZA' ";
PerseoNET/clsEdizione.cs:						string vSQL = "SELECT DescrNazione, TipoNazionalita FROM t_TipoNazioniCF INNER JOIN t_TipoNazionalita ON t_TipoNazioniCF.FK_ProvenienzaGeo = t_TipoNazionalita.IDtnaz WHERE DescrNazione='" + FunzStringa.StringaSQL(Conversions.ToString(this.get_CampoIscrizione((object)"NazResidenza"))) + "' ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT IDedizione, Bloccato FROM t_PianoServizi WHERE IDedizione=" + Conversions.ToString(mvIDedizione) + " ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT IDedizione, Bloccato FROM t_PianoServizi WHERE IDedizione=" + Conversions.ToString(mvIDedizione) + " ";
PerseoNET/clsEdizione.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT TipoAnnualitaFinanziatore FROM t_TipoAnnualita WHERE IDtanno=", Variabili.Edizione.get_Campo((object)"FK_Anno")));
PerseoNET/clsEdizione.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Edizione, IDcommissione, MIN(DataPresenza) AS DataDAL, MAX(dataPresenza) AS DataAL FROM t_CommissioniEsamePresenze INNER JOIN t_CommissioniEsameComponenti ON t_CommissioniEsamePresenze.FK_Componente = t_CommissioniEsameComponenti.IDcomponente INNER JOIN t_CommissioniEsame ON t_CommissioniEsameComponenti.FK_Commissione = t_CommissioniEsame.IDcommissione INNER JOIN t_CommissioniEsameEdizioni ON t_CommissioniEsame.IDcommissione = t_CommissioniEsameEdizioni.FK_Commissione WHERE RecuperoAssenti=1 GROUP BY IDcommissione, FK_Edizione HAVING FK_Edizione=", this.get_Campo((object)0)), " "));
PerseoNET/clsEdizione.cs:				string origineDati = "SELECT IDconvenzione, (FK_Utente) AS IDutente, FK_Tutor, FK_TipoForma, IDazienda, (FK_SedeFormativa) AS IDsede, IDsedeaz, FK_TipoConvenzione, FK_LivelloSpecificoSicurezza, NumAltriTirocinanti, CreditiSicurezzaGen, CreditiSicurezzaSpec, ContenutiSicurSpec, ProtocolloConv, DataProtocollo, NumeroConv, AnnoFormativo, DataConvenzione, DataScadenza, DataAvvio, DataFine, DataInterruzione, MaxOreGiorno, MaxOreSettimana, DurataStage, GiorniStage, GiorniRientro, NoteStage, DescrFacilitazioni, NoteAltreSediStage, DataStampaConvenzione, (t_ReferentiAziende.Cognome + ' ' +  t_ReferentiAziende.Nome) AS TutorAzienda, TelRef_1, TelRef_2, FaxRefAz, EmailRefAz, DescrEsperienzaProf, AnniEsperienzaProf, (SELECT TipoRuoloAz FROM t_TipoRuoloAziendale WHERE IDtruoloaz=FK_RuoloAz) AS RuoloLivelloTutor, DescrSedeAzienda, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, TelSedeAz_2, FaxSedeAz, EmailSedeAz, PosizioneINAIL, DescrAzienda, t_Aziende.PIVA, t_Aziende.CodFiscale, TipoAreaProduttiva, TipoSettoreProd, (NULL) AS DescrQualifica, StagePagamento, (CASE WHEN CompensoStage IS NOT NULL THEN CompensoStage ELSE 0 END) AS CompensoStage, DataAccordoEconomico, ProtocolloAccordo, OrdineAzienda, GiorniPagare, NumeroStudentiPrevisti, (NULL) AS DescrContestoStraniero, (NULL) AS ProgrammaStraniero, (NULL) AS AreaAttivitaStraniero, ImportoIndennita, DescrValutaCompe, DescrCertCompe, DescrCertSicurezza, DescrAmbitoStage, CodiceIscrCCIAA, ComuneCCIAA, DataIscrCCIAA, DocValutazioneRischi, RSPP, MedicoCompetente, AddettoIncendioSoccorso, PianoEvacuazione, TipoSettoreProd, DescrCCNL, CodiceATECO, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS Tutor, TelTutorStage, EmailTutorStage, TipoPosizioneTutorAzienda, ComunicaAvvioAzienda, ComunicaAvvioCSF, AltriMotiviRecesso, ModoComunicaRecesso, FirmatarioAzienda, AttestatoAttivitaStage, CertificazioneCompetenze, FormSicurGenAzienda, FormSicurGenCSF, FormSicurSpecAzienda, FormSicurSpecCSF, IndennitaStudenteAzienda, (CASE WHEN FK_TipoStudio IS NOT NULL THEN DescrTitoloStudio ELSE NULL END) AS DescrTitoloStudio, FK_TipoStudio, DescrQualificaUscita, NumeroDipendenti, NoteInterruzione, DataSospesoDal, DataSospesoAl, AnnoPresenzaRegione, t_ConvenzioniStage.Indennita, DescrIndennita, NumStudentiTutorAzienda, CertificareCompetenze, CertificareConoscenze, DescrRuolo, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, AziendaPosizioneINAIL, AziendaDescrINAIL, DataProlungamento, DescrVariazioni, FileAccordoEconomicoPDF, FK_TutorAzienda, IDconvazienda, (SELECT TipoIndennitaCorrisposta FROM t_TipoStageIndennitaCorrisposta WHERE IDtindennitacorrisposta=FK_TipoIndennita) AS TipoIndennita, (SELECT TipoDipendentiSedeStage FROM t_TipoDipendentiSedeStage WHERE IDtdipedesestage=FK_NumeroDipendenti) AS NumeroDipendentiSedeStage, (SELECT TipoAttivazioneDeroga FROM t_TipoConvenzioneAttivazioneDeroga WHERE IDtconvderoga=FK_TipoAttivazioneDeroga) AS TipoAttivazioneDeroga, (SELECT TipoStatoTirocinante FROM t_TipoStatoTirocinante WHERE IDtstirocinante=FK_TipoStatoTirocinante) AS TipoStatoTirocinante, IndennitaPromotore, IndennitaAzienda, BuoniPasto, Mensa, DescrAttivitaPreviste, NumeroExtraCurrAttivi, OraIngressoM, OraUscitaM, OraIngressoP, OraUscitaP, NumeroAddettiSede, LivelloTitoloStudio, (CF_RapprLegale) AS CF_TutorAzienda, (t_Docenti.CodFiscale) AS CF_Tutor, FK_SedeStage, IDiscrizione, AltroSettore FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_SediAziende ON t_ConvenzioniStage.FK_SedeStage = t_SediAziende.IDsedeaz AND t_Aziende.IDazienda = t_SediAziende.FK_Azienda INNER JOIN t_ReferentiAziende ON t_ConvenzioniStage.FK_TutorAzienda = t_ReferentiAziende.IDreferaz INNER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod INNER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag INNER JOIN t_Docenti ON t_ConvenzioniStage.FK_Tutor = t_Docenti.IDdocente LEFT OUTER JOIN t_TipoPosizioneTutorAzienda ON t_ReferentiAziende.FK_TipoPosizioneTutor = t_TipoPosizioneTutorAzienda.IDttutoraz WHERE IDiscrizione=" + Conversions.ToString(vIDiscrizione) + " ORDER BY DataAvvio ";
PerseoNET/clsEdizione.cs:					string text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, (Cognome + ' ' + Nome) AS Studente, ID_Dote, IDmwiscr, DataIscr, DataRitiro, ('AttivitÃ  come da piano formativo.') AS DescrModulo, ('AttivitÃ  come da piano formativo.') AS DescrArgomento, ('STAGE') AS TipoArgomento, SUM(DISTINCT DurataStage) AS OrePreviste, SUM(OreAttivita) AS OrePresenza, (0) AS OreAssenza, MIN(t_IscrizioniConsuntivoAttivita.DataInizio) AS DallaData, MAX(t_IscrizioniConsuntivoAttivita.DataFine) AS FinoAllaData FROM t_Iscrizioni INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud LEFT OUTER JOIN t_IscrizioniConsuntivoAttivita ON t_Iscrizioni.IDiscrizione = t_IscrizioniConsuntivoAttivita.FK_Iscrizione AND t_ConvenzioniStage.IDconvenzione = t_IscrizioniConsuntivoAttivita.FK_Convenzione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/clsEdizione.cs:				string origineDati = "SELECT IDiscrizione, Studente, ID_Dote, IDmwiscr, DataIscr, DataRitiro, DescrModulo, DescrArgomento, TipoArgomento, OreSvolte, OrePresenza, (OreSvolte-OrePresenza) AS OreAssenza, ('" + vStrAl + "') AS FinoAllaData FROM q_OrePresenzaPerDisciplinaStudente ORDER BY Studente, IndModulo, IndArgomento ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT IDiscrizione, DescrModulo, DescrArgomento, TipoArgomento, (SUM(Minuti)/60) AS OreSvolte FROM t_PianificazioneDocente GROUP BY IDiscrizione, DescrModulo, DescrArgomento, TipoArgomento HAVING DescrModulo LIKE '%STAGE%' ORDER BY IDiscrizione ";
PerseoNET/clsEdizione.cs:						vSQL = "SELECT Sum(QuotaTotaleVersata) AS TotaleIncassi, Sum(QuotaTotaleDote) AS TotaleDoti FROM t_IscrittiEdizione ";
PerseoNET/clsEdizione.cs:						vSQL = "SELECT IDincarico, IDdocente, ('" + FunzStringa.StringaSQL(Conversions.ToString(this.get_CampoSede((object)"SiglaSede"))) + "') AS SiglaSede, ('" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.Progetto.get_Campo((object)"DescrProgetto"))) + "') AS DescrProgetto, ('" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.Progetto.get_Campo((object)"CodiceProgetto"))) + "') AS CodiceProgetto, (" + Conversions.ToString(Conversions.ToLong(Operators.AddObject(Variabili.Progetto.get_Campo((object)"BudgetProgetto"), Variabili.Progetto.get_Campo((object)"BudgetProgSostegnoFin")))) + ") AS BudgetProgetto, (" + Conversions.ToString(Conversions.ToLong(Variabili.Progetto.get_Campo((object)"BudgetPrivatoTeorico"))) + ") AS BudgetPrivatoTeorico, (" + Conversions.ToString((long)Math.Round(Variabili.Progetto.TotaleIncassiProgetto())) + ") AS TotaleIncassiProgetto, (" + Conversions.ToString((long)Math.Round(Variabili.Progetto.TotaleDotiProgetto())) + ") AS TotaleDotiProgetto, ('" + FunzStringa.StringaSQL(Conversions.ToString(this.get_Campo((object)"DescrEdizione"))) + "') AS DescrEdizione, ('" + FunzStringa.StringaSQL(Conversions.ToString(this.get_Campo((object)"CodiceEdizione"))) + "') AS CodiceEdizione, ('" + FunzStringa.StringaSQL(Conversions.ToString(Variabili.TblRiferimenti.get_CampoTipoFormInterno((object)"TipoFormativoInterno"))) + "') AS TipoFormativoInterno, (" + text + ") AS TipoAnno, (" + Conversions.ToString((long)Math.Round(num2)) + ") AS TotaleIncassi, (" + Conversions.ToString((long)Math.Round(num3)) + ") AS TotaleDoti, IIf(FK_Tipo=1,'Generico',IIf(FK_Tipo=2,'Interno','Esterno')) AS Tipo , StrDOC, CodFiscale, (NULL) AS DescrAzienda, (NULL) AS PIVA_CF, TipoAttivita, DescrArgomento, OreAssegnate, QuotaOraIncarico, (0) AS CostoInterno, (OreFatteInc) AS TotaleOreSvolte, IIf(FK_Tipo<3,OreFatteInc,0) AS TotaleOrePagate, (0) AS TotaleParcelle, (0) AS TotalePagato, (0) AS TotaleSpalmatoCR, (0) AS OreSvolteCR, (NULL) AS CodiceEdizioniCR, (0) AS TotalePrevisto, (0) AS TotaleImponibilePrevisto, MIN(DataInizioIncarico) AS DataInizioContratto, MAX(DataFineIncarico) AS DataFineContratto, MAX(DataProlungamento) AS DataProlungamento, (NULL) AS DataPagatoDAL, (NULL) AS DataPagatoAL, (NULL) AS DescrParFiscale FROM t_IncarichiContrattiEdizioni WHERE IDedizione=" + Conversions.ToString(mvIDedizione) + " GROUP BY IDincarico, IDdocente, FK_Tipo, CodFiscale, StrDOC, IndArgomento, DescrBreveArgomento, DescrArgomento, OreAssegnate, OreFatteInc, IndTA, TipoAttivita, QuotaOraIncarico ORDER BY StrDOC, IndTA, TipoAttivita, DescrArgomento ";
PerseoNET/clsEdizione.cs:						vSQL = "SELECT (FK_Docente) AS IDdocente, AVG(CostoDocenza) AS CostoDocenza, AVG(CostoCoordTutor) AS CostoCoordTutor, AVG(CostoAltreFunzioni) AS CostoAltreFunzioni FROM t_DocentiContratti WHERE FK_LivelloInterno IS NOT NULL AND DataFineContratto>=" + FunzStringa.StrDataSQL(Variabili.Annualita.GeneraStringaAvvioAnnoAmministrativo(Conversions.ToDate(this.get_Campo((object)"DataAvvio"))), FlagSqlServer: true) + " AND DataFineContratto<=" + FunzStringa.StrDataSQL(Variabili.Annualita.GeneraStringaFineAnnoAmministrativo(Conversions.ToDate(this.get_Campo((object)"DataFine"))), FlagSqlServer: true) + " GROUP BY FK_Docente HAVING FK_Docente " + clsTblDatiDR.StringaFiltroIN("IDdocente");
PerseoNET/clsEdizione.cs:						vSQL = "SELECT IDincarico, t_Aziende.DescrAzienda, SUM(TotOreFatte) AS TotaleOrePagate, SUM(sngTotale) As TotaleCosto, MIN(DataPagatoInizio) AS DataPagatoDAL, MAX(DataPagatoFine) AS DataPagatoAL FROM t_ProgettiPagamentiCompensiOneri LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda GROUP BY IDincarico, DescrAzienda HAVING IDincarico " + clsTblDatiDR.StringaFiltroIN("IDincarico") + " ";
PerseoNET/clsEdizione.cs:						vSQL = "SELECT (FK_IncaricoEdizione) AS IDincarico, QuotaOraIncarico, FK_CodicePF, FK_AliquotaPrevSepa, DescrAzienda, (CASE WHEN PIVA IS NOT NULL THEN PIVA ELSE CodFiscale END) AS PIVA_CF FROM t_IncarichiEdizioniContratti INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE FK_IncaricoEdizione " + clsTblDatiDR.StringaFiltroIN("IDincarico") + " ORDER BY DataInizioIncarico DESC";
PerseoNET/clsEdizione.cs:							vSQL = "SELECT IDincarico, IDcalatt, IDdocente, DataAttivita, OraInizio, OraFine, Cognome, Nome, DescrBreveArgomento, IDcalattGenerico, (DATEDIFF(mi,OraInizio,OraFine)) AS Minuti, (0) AS QuotaOraIncarico, (0) AS QuotaOraSpalmata, (SELECT CodiceEdizione FROM t_PianoServizi WHERE t_PianoServizi.IDedizione=IDedizioneGenerico) AS CodiceEdizione FROM v_PianificazioneDocenteGenerico WHERE IDincarico " + text2 + " ORDER BY IDincarico, IDcalatt ";
PerseoNET/clsEdizione.cs:							vSQL = "SELECT IDincarico, IDcalatt, IDdocente, IDincaricoGenerico, DataAttivita, OraInizio, OraFine, Cognome, Nome, DescrBreveArgomento, IDcalattGenerico, (DATEDIFF(mi,OraInizio,OraFine)) AS Minuti, (0) AS QuotaOraIncarico, (0) AS QuotaOraSpalmata, (SELECT CodiceEdizione FROM t_PianoServizi WHERE t_PianoServizi.IDedizione=v_PianificazioneDocenteGenerico.IDedizione) AS CodiceEdizione FROM v_PianificazioneDocenteGenerico WHERE IDincaricoGenerico " + text3 + " ORDER BY IDincarico, IDcalatt ";
PerseoNET/clsEdizione.cs:							vSQL = "SELECT (FK_IncaricoEdizione) AS IDincarico, QuotaOraIncarico, FK_CodicePF, FK_AliquotaPrevSepa, DescrAzienda, (CASE WHEN PIVA IS NOT NULL THEN PIVA ELSE CodFiscale END) AS PIVA_CF FROM t_IncarichiEdizioniContratti INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE FK_IncaricoEdizione " + clsTblDatiDR5.StringaFiltroIN("IDincarico") + " ORDER BY DataInizioIncarico DESC";
PerseoNET/clsEdizione.cs:							vSQL = "SELECT (FK_Docente) AS IDdocente, AVG(CostoDocenza) AS CostoDocenza, AVG(CostoCoordTutor) AS CostoCoordTutor, AVG(CostoAltreFunzioni) AS CostoAltreFunzioni FROM t_DocentiContratti WHERE FK_LivelloInterno IS NOT NULL AND DataFineContratto>=" + FunzStringa.StrDataSQL(Variabili.Annualita.GeneraStringaAvvioAnnoAmministrativo(Conversions.ToDate(this.get_Campo((object)"DataAvvio"))), FlagSqlServer: true) + " AND DataFineContratto<=" + FunzStringa.StrDataSQL(Variabili.Annualita.GeneraStringaFineAnnoAmministrativo(Conversions.ToDate(this.get_Campo((object)"DataFine"))), FlagSqlServer: true) + " GROUP BY FK_Docente HAVING FK_Docente " + clsTblDatiDR5.StringaFiltroIN("IDdocente");
PerseoNET/clsEdizione.cs:							vSQL = "SELECT FK_CalAttivita, COUNT(IDcalatt) AS ncr FROM t_CalendarioAttivita GROUP BY FK_CalAttivita HAVING FK_CalAttivita " + clsTblDatiDR5.StringaFiltroIN("IDcalatt");
PerseoNET/clsEdizione.cs:				string origineDati = "SELECT IDprogpagamento, FK_Progetto, DataRichiestaInizio, DataRichiestaFine, DataPagamento FROM t_ProgettiPagamenti WHERE FK_Progetto=" + Conversions.ToString(vIDprogetto) + " ORDER BY DataRec DESC";
PerseoNET/clsEdizione.cs:				origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DataPagatoInizio, DataPagatoFine, MIN(DataPagamento) AS DataPagamento FROM t_ProgettiPagamentiCompensiOneri WHERE IDedizione=", this.get_Campo((object)"IDedizione")), " GROUP BY DataPagatoInizio, DataPagatoFine "), "ORDER BY DataPagatoInizio "));
PerseoNET/clsEdizione.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_ProgettiPagamentiFatture(FK_ProgPagamento, t_ProgettiPagamentiFatture.FK_Docente, FK_Fattura, CostiAnticipo, CostiVitto, CostiViaggio, AltriRedditiOccasionale, sngAliquotaPrevSepa, FK_AltraAssINPS, ImponibileOccasionale, Autorizzazione, Sospeso, DataStampaAutorizzazione) SELECT (", clsTblDatiDR.get_Campo((object)"IDprogpagamento")), ") AS FK_ProgPag, t_ProgettiPagamentiFatture.FK_Docente, FK_Fattura, "), "CostiAnticipo, CostiVitto, CostiViaggio, AltriRedditiOccasionale, sngAliquotaPrevSepa, FK_AltraAssINPS, ImponibileOccasionale, t_ProgettiPagamentiFatture.Autorizzazione, t_ProgettiPagamentiFatture.Sospeso, t_ProgettiPagamentiFatture.DataStampaAutorizzazione "), "FROM t_ProgettiPagamentiCompensiOneri INNER JOIN "), "t_Progetti ON t_ProgettiPagamentiCompensiOneri.FK_Progetto = t_Progetti.IDprogetto INNER JOIN "), "t_ProgettiPagamenti ON t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento = t_ProgettiPagamenti.IDprogpagamento AND "), "t_Progetti.IDprogetto = t_ProgettiPagamenti.FK_Progetto INNER JOIN "), "t_ProgettiPagamentiFatture ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiFatture.FK_ProgPagamento "), "WHERE t_ProgettiPagamentiCompensiOneri.IDedizione="), this.get_Campo((object)"IDedizione")));
PerseoNET/clsEdizione.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, IDincarico, DataAttivita, OraInizio, OraFine, TipoAttivita FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE t_IncarichiEdizioni.FK_Edizione=", this.get_Campo((object)0)), " AND Aula=1 AND Primaria=1 AND PresenzaOFA=1 "), "ORDER BY MonteOreEdizione DESC, DataAttivita, OraInizio, OraFine "));
PerseoNET/clsEdizione.cs:					string origineDati = "SELECT IDedizione, Bloccato FROM t_PianoServizi WHERE IDedizione=" + Conversions.ToString(mvIDedizione) + " ";
PerseoNET/clsEdizione.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDiscrizione FROM t_IscrittiEdizione WHERE IDedizione=", this.get_Campo((object)0)));
PerseoNET/clsEdizione.cs:					vSQL = ((Operators.CompareString(vDataRilevazione, "", TextCompare: false) != 0) ? ("SELECT IDiscrizione FROM t_IscrittiEdizione WHERE (Sostegno=True AND DataIscr IS NOT NULL AND DataIscr<=" + FunzStringa.StrDataSQL(vDataRilevazione) + " AND DataRitiro IS NULL) OR (Sostegno=True AND DataIscr IS NOT NULL AND DataIscr<=" + FunzStringa.StrDataSQL(vDataRilevazione) + " AND DataRitiro IS NOT NULL AND DataRitiro>" + FunzStringa.StrDataSQL(vDataRilevazione) + ") ") : "SELECT IDiscrizione FROM t_IscrittiEdizione WHERE Sostegno=True AND DataIscr IS NOT NULL ");
PerseoNET/clsEdizione.cs:					string vSQL = "SELECT IDedizione, CodiceEdizione FROM t_PianoServizi WHERE IDedizione=" + Conversions.ToString(vIDedizione);
PerseoNET/clsEdizione.cs:					vSQL = "SELECT t_Iscrizioni.IDiscrizione, IDcalatt, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, SiglaSede, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, IDmwiscr, ID_Dote, (v_DettaglioIscrittiSostegno.Cognome + ' ' + v_DettaglioIscrittiSostegno.Nome) AS StrDOC, TipoAttivita, DescrAttivita, (OreSostegno) AS OrePreviste, (OreSostegnoIndividuale) AS DiCuiIndividuali, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi,OraInizio,OraFine)/60) AS OreSvolte, (SostegnoIndividuale) AS Individuale, (NULL) AS Sovrapposizione FROM v_DettaglioIscrittiSostegno INNER JOIN t_Iscrizioni ON v_DettaglioIscrittiSostegno.IDiscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE t_PianoServizi.IDedizione=" + Conversions.ToString(vIDedizione) + " ORDER BY (t_Utenti.Cognome + ' ' + t_Utenti.Nome), ID_Dote, DataAttivita, OraInizio ";
PerseoNET/clsEdizione.cs:							vSQL = "SELECT IDcalatt, CodiceEdizione, TipoAnnualita FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno WHERE IDcalatt " + mvTblEsportazione.StringaFiltroIN("IDcalatt") + " ";
PerseoNET/clsEdizione.cs:					string vSQL = "SELECT IDedizione, CodiceEdizione, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede FROM t_PianoServizi WHERE IDedizione=" + Conversions.ToString(vIDedizione);
PerseoNET/clsEdizione.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDiscrizione, FK_Edizione, IDconvenzione FROM t_Iscrizioni INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda WHERE FK_Edizione=" + Conversions.ToString(PKEdizione) + " AND FK_SedeFormativa=", this.get_Campo((object)"FK_SedeEdizione")));
PerseoNET/clsEdizione.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDlettinc FROM t_DocentiLettereIncarichi WHERE FK_Sede=", this.get_Campo((object)"FK_SedeEdizione")), " AND FK_Contratto "), text));
PerseoNET/clsEdizione.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT COUNT(IDprogpagamento) AS NumeroRecord FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_ProgettiPagamenti ON t_PianoServizi.FK_SedeEdizione = t_ProgettiPagamenti.FK_Sede AND t_Azioni.FK_Progetto = t_ProgettiPagamenti.FK_Progetto AND t_PianoServizi.DataAvvio <= t_ProgettiPagamenti.DataRichiestaFine WHERE IDedizione=", this.get_Campo((object)0)), " AND FK_SedeEdizione="), this.get_Campo((object)"FK_SedeEdizione")), " "));
PerseoNET/clsEdizione.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalattGenerico, IDcalatt, IDAttivitaCollegata, IDincarico, IDdocente, IDargomento, DataAttivita, OraInizio, OraFine, DescrBreveArgomento, (Cognome + ' ' + Nome) AS StrDOC FROM v_PianificazioneDocenteGenerico WHERE (IDedizioneGenerico=", this.get_Campo((object)"IDedizione")), " AND DataAttivita<="), FunzStringa.StrDataSQL(left, FlagSqlServer: true)), " AND IDAttivitaCollegata IS NULL) "), "OR "), "(IDedizioneGenerico="), this.get_Campo((object)"IDedizione")), " AND DataAttivita<="), FunzStringa.StrDataSQL(left, FlagSqlServer: true)), " AND IDcalatt IS NULL) "), "OR "), "(IDedizioneGenerico="), this.get_Campo((object)"IDedizione")), " AND DataAttivita<="), FunzStringa.StrDataSQL(left, FlagSqlServer: true)), " AND IDcalatt IS NOT NULL "), "AND IDcalatt<>IDAttivitaCollegata) "));
PerseoNET/clsEdizione.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocenteGenerico, IDcalatt, IDcalattGenerico, IDincarico, IDdocente, IDargomento, IDAttivitaCollegata, DataAttivita, OraInizio, OraFine, DescrBreveArgomento, (Cognome + ' ' + Nome) AS StrDOC FROM v_PianificazioneDocenteGenerico WHERE IDcalatt IS NOT NULL AND IDedizioneGenerico=", this.get_Campo((object)"IDedizione")), " "));
PerseoNET/clsEdizione.cs:					origineDati = "SELECT IDdocenteGenerico, IDcalatt, IDcalattGenerico, FK_Incarico, IDdocente, IDargomento, IDAttivitaCollegata, DataAttivita, OraInizio, OraFine, DescrBreveArgomento, StrDOC FROM t_DocenteClassiRiunite ";
PerseoNET/clsEdizione.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CalendarioAvvioFinale.IDcalstage, FK_Edizione, DataDAL, DataAL, IngressoM, UscitaM, IngressoP, UscitaP, Lun, Mar, Mer, Gio, Ven, Sab, Dom FROM t_CalendarioAvvioFinale WHERE FK_Edizione=", this.get_Campo((object)0)), " "), "AND CalendarioStage=1 ORDER BY DataDAL "));
PerseoNET/clsEdizione.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDstruttura, FK_TipoAreaModulo, IndAreaModulo, DescrAreaModulo, OreAreaModulo, TolleranzaOreModulo, IDstruttdisc, FK_TipoDisciplina, IndDisciplina, DescrDisciplina, StrTipoAttivita, OreDisciplina, TolleranzaOreDisciplina FROM wt_StruttureModuli WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " "), "ORDER BY IndAreaModulo, DescrAreaModulo, IndDisciplina, DescrDisciplina "));
PerseoNET/clsEdizione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDstruttura, DescrAreaModulo, OreAreaModulo, SUM(OreDisciplina) AS TotaleOreDiscipline FROM wt_StruttureModuli WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " "), "GROUP BY IDstruttura, DescrAreaModulo, OreAreaModulo "));
PerseoNET/clsEdizione.cs:					string origineDati = "SELECT t_ModuliEdizioni.IDmodulo, IDargomento, (t_ModuliEdizioni.FK_Edizione) AS IDedizione, FK_TipoModulo, (IDtarg) AS FK_TipoArgomento, IDtattivita, IDattedi, TipoAttivita, IndModulo, DescrModulo, TipoModulo, OreModulo, IndArgomento, DescrArgomento, DescrBreveArgomento, TipoArgomento, (DescrModulo) AS TipoAreaFormativa, OreArgomento, DescrContenutiArg, DescrContenutiModulo, t_TipoModulo.Base, t_TipoModulo.Professionale FROM t_TipoAttivitaEdizione INNER JOIN t_ModuliEdizioni INNER JOIN t_AttivitaEdizioni ON t_ModuliEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoModulo ON t_ModuliEdizioni.FK_TipoModulo = t_TipoModulo.IDtmodulo ON t_TipoAttivitaEdizione.IDtattivita = t_AttivitaEdizioni.FK_TipoAttivita LEFT OUTER JOIN t_TipoArgomento RIGHT OUTER JOIN t_ArgomentiModuli ON t_TipoArgomento.IDtarg = t_ArgomentiModuli.FK_TipoArgomento ON t_ModuliEdizioni.IDmodulo = t_ArgomentiModuli.FK_Modulo WHERE t_ModuliEdizioni.FK_Edizione=" + Conversions.ToString(value) + " ORDER BY (CASE WHEN TipoModulo='BASE' THEN 1 WHEN TipoModulo LIKE '%PROFESS%' THEN 2 WHEN TipoModulo='STAGE' THEN 3 ELSE 9 END), IndModulo, DescrModulo, IndArgomento, DescrArgomento ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT IDmodulo, IDargomento, IDedizione, FK_TipoModulo, FK_TipoArgomento, IDtattivita, IDattedi, TipoAttivita, IndModulo, DescrModulo, TipoModulo, OreModulo, IndArgomento, DescrArgomento, DescrBreveArgomento, TipoArgomento, TipoAreaFormativa, OreArgomento, DescrContenutiArg, DescrContenutiModulo, Base, Professionale FROM t_StrutturaEdizione ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT IDmodulo, FK_TipoModulo, IndModulo, TipoModulo, DescrModulo, OreModulo, Base, Professionale FROM t_StrutturaEdizione GROUP BY IDmodulo, FK_TipoModulo, IndModulo, TipoModulo, DescrModulo, OreModulo, Base, Professionale ORDER BY IndModulo, DescrModulo ";
PerseoNET/clsEdizione.cs:						string origineDati = "SELECT IDmodulo, IDargomento, IndModulo, IndArgomento, DescrModulo, TipoModulo, DescrArgomento, TipoArgomento, DescrContenutiArg, FK_Iscrizione, (SUM(DATEDIFF(mi,OraInizio,OraFine))/60) AS OreArgomento FROM t_TipoArgomento INNER JOIN t_ModuliEdizioni INNER JOIN t_TipoModulo ON t_ModuliEdizioni.FK_TipoModulo = t_TipoModulo.IDtmodulo INNER JOIN t_ArgomentiModuli ON t_ModuliEdizioni.IDmodulo = t_ArgomentiModuli.FK_Modulo ON t_TipoArgomento.IDtarg = t_ArgomentiModuli.FK_TipoArgomento INNER JOIN t_IncarichiEdizioni ON t_ArgomentiModuli.IDargomento = t_IncarichiEdizioni.FK_Argomento INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico GROUP BY IDmodulo, IDargomento, IndModulo, IndArgomento, DescrModulo, TipoModulo, DescrArgomento, TipoArgomento, DescrContenutiArg, FK_Iscrizione HAVING FK_Iscrizione=" + Conversions.ToString(vIDiscrizione) + " ORDER BY IndModulo, IndArgomento ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT IDmodulo, IndModulo, DescrModulo, TipoModulo, OreModulo FROM t_ModuliEdizioni ";
PerseoNET/clsEdizione.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, IDincacontra, t_Docenti.IDdocente, FK_Tipo, IDargomento, FK_TipoArgomento, t_IncarichiEdizioniContratti.FK_Contratto, t_IncarichiEdizioni.FK_Edizione, (", this.get_Campo((object)"FK_SedeEdizione")), ") AS FK_SedeEdizione, IDtattivita, IDattedi, "), "(Cognome + ' ' + Nome) AS StrDOC, IndTA, t_TipoAttivitaEdizione.TipoAttivita, IndArgomento, DescrBreveArgomento, t_ArgomentiModuli.DescrArgomento, "), "OreArgomento, OreAssegnate, OreSvolgere, t_IncarichiEdizioniContratti.QuotaOraIncarico, DataInizioIncarico, DataFineIncarico, "), "(0) AS OreFatteInc, "), "(NULL) AS UltimaData, DataApprovaIncarico, ApprovaIncarico, DataProlungamento, ApprovaProlungamento, PreDimissione, PagamentoIndividuale, "), "MAX(DataPagatoFine) AS DataUltimoPagamento, "), "OreAttivita, DescrIncarico, Aula, Primaria, Secondaria, MonteOreEdizione, VincoloOrario, AttivitaPIP, MaxStudenti, "), "SbloccoTemporaneo, DeltaOreAttivita, DescrAttivita, CostoOraServizio, FK_IncaricoClassiRiunite, "), "IncaricoGenericoGratuito, IncaricoBloccato, t_ProgettiPagamentiCompensiOneri.FK_Azienda "), "FROM t_Docenti INNER JOIN "), "t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN "), "t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN "), "t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN "), "t_ProgettiPagamentiCompensiOneri ON t_IncarichiEdizioni.IDincarico = t_ProgettiPagamentiCompensiOneri.IDincarico LEFT OUTER JOIN "), "t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN "), "t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione "), "GROUP BY t_IncarichiEdizioni.IDincarico, IDincacontra, t_Docenti.IDdocente, FK_Tipo, IDargomento, FK_TipoArgomento, "), "t_IncarichiEdizioniContratti.FK_Contratto, t_IncarichiEdizioni.FK_Edizione, IDtattivita, IDattedi, IncaricoGenericoGratuito, "), "Cognome, Nome, IndTA, t_TipoAttivitaEdizione.TipoAttivita, IndArgomento, DescrBreveArgomento, t_ArgomentiModuli.DescrArgomento, "), "OreArgomento, OreAssegnate, OreSvolgere, t_IncarichiEdizioniContratti.QuotaOraIncarico, DataInizioIncarico, DataFineIncarico, "), "DataApprovaIncarico, ApprovaIncarico, DataProlungamento, ApprovaProlungamento, PreDimissione, PagamentoIndividuale, "), "OreAttivita, DescrIncarico, Aula, Primaria, Secondaria, MonteOreEdizione, VincoloOrario, MaxStudenti, IncaricoBloccato, "), "SbloccoTemporaneo, AttivitaPIP, DeltaOreAttivita, DescrAttivita, CostoOraServizio, FK_IncaricoClassiRiunite, "), "t_ProgettiPagamentiCompensiOneri.FK_Azienda "));
PerseoNET/clsEdizione.cs:							vSQL = "SELECT FK_Incarico, SUM(Minuti) AS OreFatteInc FROM v_DettaglioCalendarioAttivita GROUP BY FK_Incarico HAVING FK_Incarico " + mvIncarichiContratti.StringaFiltroIN("IDincarico") + " ";
PerseoNET/clsEdizione.cs:							vSQL = "SELECT FK_Incarico, SUM(Minuti) AS OreFatteInc FROM v_DettaglioCalendarioAttivita WHERE DataAttivita>=" + FunzStringa.StrDataSQL(vStrDal, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(vStrAl, FlagSqlServer: true) + " GROUP BY FK_Incarico HAVING FK_Incarico " + mvIncarichiContratti.StringaFiltroIN("IDincarico") + " ";
PerseoNET/clsEdizione.cs:						vSQL = "SELECT IDincarico, IDincacontra, IDdocente, FK_Tipo, IDargomento, FK_TipoArgomento, IDcontratto, IDedizione, IDsede, FK_TipoAttivita, IDattedi, StrDOC, IndTA, TipoAttivita, IndArgomento, DescrBreveArgomento, DescrArgomento, OreArgomento, OreAssegnate, OreSvolgere, QuotaOraIncarico, DataInizioIncarico, DataFineIncarico, OreFatteInc, UltimaData, DataApprovaIncarico, ApprovaIncarico, DataProlungamento, ApprovaProlungamento, PreDimissione, PagamentoIndividuale, DataUltimoPagamento, OreAttivita, DescrIncarico, Aula, Primaria, Secondaria, MonteOreEdizione, VincoloOrario, AttivitaPIP, MaxStudenti, SbloccoTemporaneo, DeltaOreAttivita, DescrAttivita, CostoOraServizio, FK_IncaricoClassiRiunite, IncaricoGenericoGratuito, IncaricoBloccato, FK_Azienda FROM t_IncarichiContrattiEdizioni ";
PerseoNET/clsEdizione.cs:						vSQL = "SELECT IDincarico, OreFatteInc FROM t_IncarichiContrattiEdizioni WHERE TipoAttivita='DOCENZA' GROUP BY IDincarico, OreFatteInc ";
PerseoNET/clsEdizione.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDargomento, DescrArgomento, OreArgomento, SUM(OreAssegnate) AS TotaleAssegnate FROM t_IncarichiEdizioni INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE FK_Edizione=", this.get_Campo((object)0)), " "), "GROUP BY IDargomento, DescrArgomento, OreArgomento "), "HAVING SUM(OreAssegnate)>OreArgomento"));
PerseoNET/clsEdizione.cs:				string vSQL = "SELECT IDincarico, IncaricoBloccato FROM t_IncarichiEdizioni WHERE IDincarico=" + Conversions.ToString(vIDincarico);
PerseoNET/clsEdizione.cs:					string origineDati = "SELECT IDincarico, IDdocente, IDargomento, FK_TipoArgomento, FK_Tipo, StrDOC, IndArgomento, DescrBreveArgomento, DescrArgomento, OreAssegnate, (OreFatteInc) AS torep, FK_IncaricoClassiRiunite FROM t_IncarichiContrattiEdizioni WHERE IDedizione=" + Conversions.ToString(mvIDedizione) + " AND FK_TipoAttivita=1 GROUP BY IDincarico, IDdocente, IDargomento, FK_TipoArgomento, FK_Tipo, IncaricoBloccato, StrDOC, IndArgomento, DescrBreveArgomento, DescrArgomento, OreAssegnate, OreFatteInc, FK_IncaricoClassiRiunite HAVING IDargomento IS NOT NULL ORDER BY StrDOC, DescrArgomento ";
PerseoNET/clsEdizione.cs:					string origineDati = "SELECT IDincarico, IDdocente, IDattedi, FK_TipoAttivita, FK_Tipo, ('no') AS Occupato, StrDOC, IndTA, TipoAttivita, DescrIncarico, OreAssegnate, (OreFatteInc) AS torep FROM t_IncarichiContrattiEdizioni WHERE IDedizione=" + Conversions.ToString(mvIDedizione) + " AND Aula=True AND Primaria=True AND MonteOreEdizione=False AND IDargomento IS NULL GROUP BY IDincarico, IDdocente, IDattedi, FK_TipoAttivita, FK_Tipo, StrDOC, IndTA, TipoAttivita, DescrIncarico, OreAssegnate, OreFatteInc ORDER BY StrDOC, IndTA, TipoAttivita ";
PerseoNET/clsEdizione.cs:				string origineDati = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.FK_Edizione, IDtattivita, DataAttivita, OraInizio, OraFine, TipoAttivita, TipoArgomento, DescrArgomento, DescrBreveArgomento, DATEDIFF(mi,OraInizio,OraFine) AS Minuti FROM t_TipoArgomento INNER JOIN t_ArgomentiModuli ON t_TipoArgomento.IDtarg = t_ArgomentiModuli.FK_TipoArgomento RIGHT OUTER JOIN t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_ArgomentiModuli.IDargomento = t_IncarichiEdizioni.FK_Argomento WHERE t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(mvIDedizione) + " AND t_CalendarioAttivita.FK_Iscrizione IS NULL AND PresenzaOFA=1 AND Aula=1 " + text + "ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsEdizione.cs:				origineDati = "SELECT IDcalatt, IDedizione, IDtattivita, DataAttivita, OraInizio, OraFine, TipoAttivita, TipoArgomento, DescrArgomento, DescrBreveArgomento, Minuti FROM t_PianificazioneAula ";
PerseoNET/clsEdizione.cs:					string str = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.FK_Edizione, DataAttivita, OraInizio, OraFine, IDtattivita, IDattedi, IDmodulo, FK_TipoModulo, DescrModulo, IDargomento, FK_TipoArgomento, FK_Docente, TipoArgomento, DescrArgomento, (Cognome + ' ' + Nome) AS StrDOC, TipoGruppo, Aula, Primaria, Secondaria, VincoloOrario, MonteOreEdizione, PresenzaOFA, PresenzaINAIL FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(mvIDedizione) + " AND t_CalendarioAttivita.FK_Iscrizione IS NULL AND FK_Argomento IS NOT NULL ";
PerseoNET/clsEdizione.cs:					str = str + "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.FK_Edizione, DataAttivita, OraInizio, OraFine, IDtattivita, IDattedi, IDmodulo, FK_TipoModulo, DescrModulo, IDargomento, FK_TipoArgomento, FK_Docente, TipoArgomento, DescrArgomento, (Cognome + ' ' + Nome) AS StrDOC, TipoGruppo, Aula, Primaria, Secondaria, VincoloOrario, MonteOreEdizione, PresenzaOFA, PresenzaINAIL FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(mvIDedizione) + " AND t_CalendarioAttivita.FK_Iscrizione IS NOT NULL AND FK_Argomento IS NOT NULL ";
PerseoNET/clsEdizione.cs:					str = str + "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.FK_Edizione, DataAttivita, OraInizio, OraFine, IDtattivita, IDattedi, (0) AS IDmodulo, (0) AS FK_TipoModulo, (NULL) AS DescrModulo, (NULL) AS IDargomento, (0) AS FK_TipoArgomento, FK_Docente, (TipoAttivita) AS TipoArgomento, (TipoAttivita) AS DescrArgomento, (Cognome + ' ' + Nome) AS StrDOC, TipoGruppo, Aula, Primaria, Secondaria, VincoloOrario, MonteOreEdizione, PresenzaOFA, PresenzaINAIL FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(mvIDedizione) + " AND t_CalendarioAttivita.FK_Iscrizione IS NULL AND FK_Argomento IS NULL ";
PerseoNET/clsEdizione.cs:					str = str + "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.FK_Edizione, DataAttivita, OraInizio, OraFine, IDtattivita, IDattedi, (0) AS IDmodulo, (NULL) AS FK_TipoModulo, (NULL) AS DescrModulo, (0) AS IDargomento, (0) AS FK_TipoArgomento, FK_Docente, (TipoAttivita) AS TipoArgomento, (TipoAttivita) AS DescrArgomento, (Cognome + ' ' + Nome) AS StrDOC,  TipoGruppo, Aula, Primaria, Secondaria, VincoloOrario, MonteOreEdizione, PresenzaOFA, PresenzaINAIL FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(mvIDedizione) + " AND Primaria=1 AND Aula=1 AND MonteOreEdizione=0 ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsEdizione.cs:					string origineDati = "SELECT t_DateEscluse.IDesclusa, FK_Edizione, DateEscluseDAL, DateEscluseAL, Aula, Stage FROM t_DateEscluse WHERE FK_Edizione=" + Conversions.ToString(mvIDedizione) + " ORDER BY DateEscluseDAL ";
PerseoNET/clsEdizione.cs:					string origineDati = "SELECT IDvincolo, FK_Edizione, Dalle, Alle, NumeroGiorno, TipoGiornoSettimana, FK_GiornoSettimana FROM t_VincoliOrariEdizioni INNER JOIN t_TipoGiornoSettimana ON t_VincoliOrariEdizioni.FK_GiornoSettimana = t_TipoGiornoSettimana.IDtgiornosett WHERE FK_Edizione=" + Conversions.ToString(mvIDedizione) + " ORDER BY NumeroGiorno, Dalle";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT IDvincolo, FK_Edizione, Dalle, Alle, NumeroGiorno, TipoGiornoSettimana, FK_GiornoSettimana FROM t_VincoliOrariEdizione ";
PerseoNET/clsEdizione.cs:						string origineDati = "SELECT IDvincolo, FK_Edizione, Dalle, Alle, NumeroGiorno, TipoGiornoSettimana FROM t_VincoliOrariEdizione ORDER BY NumeroGiorno, Dalle ";
PerseoNET/clsEdizione.cs:					string origineDati = "SELECT IDcalatt, IDedizione, t_CalendarioAttivita.DataAttivita, OraInizio, OraFine, DATEDIFF(mi,OraInizio,OraFine) AS Minuti, DescrEdizione, CodiceEdizione, ('DOCENZA') AS TipoAttivita, DescrArgomento, (Cognome + ' ' + Nome) AS Docente, (1) AS INAIL, ('P') AS Presenza, (1) AS OFA, t_CalendarioAttivita.FK_Iscrizione FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE IDedizione " + mvAltreIscrizioni.StringaFiltroIN("IDedizione") + " AND DataAttivita>=" + FunzStringa.StrDataSQL(vStrDataDal, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(vStrDataAL, FlagSqlServer: true) + " ORDER BY DataAttivita, OraInizio, OraFine ";
PerseoNET/clsEdizione.cs:					origineDati = "SELECT IDcalatt, IDedizione, DataAttivita, OraInizio, OraFine, Minuti, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, Docente, INAIL, Presenza, OFA, IDiscrizione FROM zt_PianificazioneAltraEdizione ";
PerseoNET/clsEdizione.cs:					origineDati = "SELECT IDassenza, (FK_Iscrizione) AS IDiscrizione, (FK_Attivita) AS IDcalatt, DataAssenza, Minuti FROM t_AssenzeAttivita WHERE FK_Iscrizione " + mvAltreIscrizioni.StringaFiltroIN("IDiscrizione") + " AND DataAssenza>=" + FunzStringa.StrDataSQL(vStrDataDal, FlagSqlServer: true) + " AND DataAssenza<=" + FunzStringa.StrDataSQL(vStrDataAL, FlagSqlServer: true) + " ORDER BY DataAssenza ";
PerseoNET/clsEdizione.cs:					origineDati = "SELECT IDassenza, IDiscrizione, IDcalatt, DataAttivita, Minuti FROM zt_AssenzeAltraEdizione ";
PerseoNET/clsEdizione.cs:					origineDati = "SELECT t_RegistroStage.IDregstage, (FK_Iscrizione) AS IDiscrizione, IDedizione, (FK_Utente) AS IDstudente, (DataStage) AS DataAttivita, (OraIngresso) AS OraInizio, (OraUscita) AS OraFine, DATEDIFF(mi,OraIngresso,OraUscita) AS Minuti, DescrEdizione, CodiceEdizione, (TipoAttivitaStage) AS TipoAttivita, (DescrAttivitaStage) AS DescrArgomento, (1) AS INAIL, ('P') AS Presenza, (1) AS OFA FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Iscrizione " + mvAltreIscrizioni.StringaFiltroIN("IDiscrizione") + " AND DataStage>=" + FunzStringa.StrDataSQL(vStrDataDal, FlagSqlServer: true) + " AND DataStage<=" + FunzStringa.StrDataSQL(vStrDataAL, FlagSqlServer: true) + " ORDER BY DataStage, OraIngresso, OraUscita ";
PerseoNET/clsEdizione.cs:					origineDati = (clsTblDatiDR3.OrigineDatiUnione = "SELECT t_CalendarioAttivita.IDcalatt, IDiscrizione, IDedizione, (FK_Utente) AS IDstudente, DataAttivita, OraInizio, OraFine, DATEDIFF(mi,OraInizio,OraFine) AS Minuti, DescrEdizione, CodiceEdizione, TipoAttivita, (t_CalendarioAttivita.DescrAttivita) AS DescrArgomento, (1) AS INAIL, ('P') AS Presenza, (1) AS OFA FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE DataAttivita>=" + FunzStringa.StrDataSQL(vStrDataDal, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(vStrDataAL, FlagSqlServer: true) + " AND PresenzaStudentePIP=1 AND FK_Iscrizione " + mvAltreIscrizioni.StringaFiltroIN("IDiscrizione") + " AND FK_Iscrizione IS NOT NULL ORDER BY DataAttivita, OraInizio ");
PerseoNET/clsEdizione.cs:					origineDati = "SELECT IDregstage, IDiscrizione, IDedizione, IDstudente, DataAttivita, OraInizio, OraFine, Minuti, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, INAIL, Presenza, OFA FROM zt_RegistroStageAltreIscrizioni ";
PerseoNET/clsEdizione.cs:				string origineDati = "SELECT IDcompestd, IDiscrcompe, IDconoabi, (FK_Iscrizione) AS IDiscrizione, IndSett, IndProf, IndCompe, IndCA, DescrSettoreProfessione, CodiceSettoreProf, DescrProfessione, ProfessioneISTAT, AttivitaEconomicaISTAT, DescrCompetenza, LivelloEQF, DescrConoAbi, Tipo FROM t_IscrizioniCompetenzeCertificate INNER JOIN t_ProfessioniConoAbiRL ON t_IscrizioniCompetenzeCertificate.FK_ConoscenzaAbilita = t_ProfessioniConoAbiRL.IDconoabi INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniConoAbiRL.FK_Competenza = t_ProfessioniCompetenzeRL.IDcompestd INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl INNER JOIN t_ProfessioniSettoriStandardRL ON t_ProfessioniStandardRL.FK_TipoSettProfessionale = t_ProfessioniSettoriStandardRL.IDtsettprof WHERE t_IscrizioniCompetenzeCertificate.FK_Iscrizione=" + Conversions.ToString(vIDiscrizione) + " ORDER BY IndSett, IndProf, IndCompe, IDcompestd, IndCA ";
PerseoNET/clsEdizione.cs:				string origineDati = "SELECT DescrSettoreProfessione, CodiceSettoreProf, DescrProfessione, ProfessioneISTAT, AttivitaEconomicaISTAT, DescrCompetenza, LivelloEQF, DescrConoscenze, DescrAbilita FROM t_IscrizioniCompetenzeCertificate ";
PerseoNET/clsEdizione.cs:						string origineDati = "SELECT t_AssenzeAttivita.IDassenza, IDcalatt, IDiscrizione, FK_Edizione, (FK_Incarico) AS IDargomento, PosRegistro, DataAttivita, (NULL) AS TipoAttivita, (NULL) AS TipoArgomento, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS MinutiLezione, Minuti, DataRecupero, FK_EdizioneRecupero, SedeRecupero, Giustificata FROM t_AssenzeAttivita INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE FK_Edizione=" + Conversions.ToString(mvIDedizione) + text + " ORDER BY DataAttivita, OraInizio, OraFine, t_Iscrizioni.PosRegistro ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT IDincarico, TipoAttivita, IDargomento, TipoArgomento, DescrArgomento FROM t_TipoArgomento RIGHT OUTER JOIN t_ArgomentiModuli ON t_TipoArgomento.IDtarg = t_ArgomentiModuli.FK_TipoArgomento RIGHT OUTER JOIN t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_ArgomentiModuli.IDargomento = t_IncarichiEdizioni.FK_Argomento WHERE t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(mvIDedizione);
PerseoNET/clsEdizione.cs:							origineDati = "SELECT IDedizione, (CodiceEdizione + ' - ' + SiglaSede) AS SedeRecupero FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDedizione " + text2;
PerseoNET/clsEdizione.cs:						origineDati = "SELECT IDassenza, IDcalatt, IDiscrizione, FK_Edizione, IDargomento, PosRegistro, DataAttivita, TipoAttivita, TipoArgomento, OraInizio, OraFine, MinutiLezione, Minuti, DataRecupero, FK_EdizioneRecupero, SedeRecupero, Giustificata FROM t_AssenzeEdizione";
PerseoNET/clsEdizione.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_AttivitaEdizioni.IDattedi, t_AttivitaEdizioni.FK_Edizione, FK_TipoAttivita, TipoGruppo, TipoAttivita, DescrAttivita, OreAttivita, DeltaOreAttivita, SUM(OreAssegnate) AS TotaleOreAttivita FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_IncarichiEdizioni ON t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita GROUP BY t_AttivitaEdizioni.IDattedi, t_AttivitaEdizioni.FK_Edizione, FK_TipoAttivita, IndTG, IndTA, TipoGruppo, TipoAttivita, DescrAttivita, OreAttivita, DeltaOreAttivita, CostoOraServizio HAVING t_AttivitaEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY IndTG, IndTA"));
PerseoNET/clsEdizione.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtattivita, TipoAttivita, OreAttivita, SUM(OreModulo) AS TotaleOreModuli FROM t_AttivitaEdizioni INNER JOIN t_ModuliEdizioni ON t_AttivitaEdizioni.IDattedi = t_ModuliEdizioni.FK_Attivita INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita GROUP BY IDtattivita, TipoAttivita, OreAttivita, t_AttivitaEdizioni.FK_Edizione HAVING t_AttivitaEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/clsEdizione.cs:								origineDati = "SELECT IDargomento, DescrArgomento, TipoDescrizioneDisciplina FROM t_StrutturaEdizione LEFT JOIN t_TipoDescrizioneDisciplina ON t_StrutturaEdizione.DescrArgomento = t_TipoDescrizioneDisciplina.TipoDescrizioneDisciplina WHERE TipoDescrizioneDisciplina IS NULL AND DescrArgomento IS NOT NULL AND DescrArgomento<>'STAGE' ";
PerseoNET/clsEdizione.cs:				string origineDati = "SELECT t_Iscrizioni.IDiscrizione, IDutente, DoteChiusa, PosRegistro, (Cognome + ' ' + Nome) AS Studente, DataIscr, DataRitiro, OreSostegno, OreSostegnoIndividuale FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud AND t_Utenti.IDutente = t_StudentiDoti.FK_Studente WHERE t_Iscrizioni.FK_Edizione=" + Conversions.ToString(value) + " AND Sostegno=1 AND DataIscr IS NOT NULL ORDER BY PosRegistro, t_Utenti.Cognome, t_Utenti.Nome ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT t_AssenzeAttivita.IDassenza, IDcalatt, IDiscrizione, t_IncarichiEdizioni.FK_Edizione, IDargomento, PosRegistro, DataAttivita, TipoAttivita, TipoArgomento, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS MinutiLezione, Minuti FROM t_AttivitaEdizioni INNER JOIN t_AssenzeAttivita INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico ON t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_TipoArgomento INNER JOIN t_ArgomentiModuli ON t_TipoArgomento.IDtarg = t_ArgomentiModuli.FK_TipoArgomento ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(value) + " AND IDiscrizione " + clsTblDatiDR.StringaFiltroIN("IDiscrizione") + " ORDER BY IDiscrizione, DataAttivita, OraInizio, OraFine ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT IDsostegnoiscr, IDiscrizione, FK_SostegnoAula, IDcalatt, DataAttivita, OraInizio, OraFine, DescrAttivita, (NULL) AS Studente, ('P') AS PresenteAssente FROM v_DettaglioIscrittiSostegno WHERE IDiscrizione " + clsTblDatiDR.StringaFiltroIN("IDiscrizione") + " ORDER BY IDiscrizione, DataAttivita, OraInizio ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT IDregstage, FK_Iscrizione, DataStage, OraIngresso, OraUscita FROM t_RegistroStage WHERE FK_Iscrizione " + clsTblDatiDR.StringaFiltroIN("IDiscrizione") + " ORDER BY FK_Iscrizione, DataStage, OraIngresso ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT SUM(Minuti) AS intProgrFatte, (1) AS Tipo FROM t_PianificazioneAula WHERE DataAttivita<" + FunzStringa.StrDataSQL(vGiorno) + " UNION SELECT SUM(Minuti) AS intProgrFatte, (2) AS Tipo FROM t_PianificazioneAula WHERE DataAttivita=" + FunzStringa.StrDataSQL(vGiorno) + " AND TipoAttivita='DOCENZA' AND TipoArgomento<>'LARSA' ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT SUM(Minuti) AS intProgrFatte, (1) AS Tipo FROM t_PianificazioneAula WHERE DataAttivita<" + FunzStringa.StrDataSQL(vGiorno) + " UNION SELECT SUM(Minuti) AS intProgrFatte, (2) AS Tipo FROM t_PianificazioneAula WHERE DataAttivita=" + FunzStringa.StrDataSQL(vGiorno) + " AND TipoAttivita='DOCENZA' ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT SUM(Minuti) AS intProgrFatte, (3) AS Tipo FROM t_PianificazioneAula WHERE DataAttivita<=" + FunzStringa.StrDataSQL(vGiorno) + " ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT SUM(Minuti) AS intProgrAssenze, (1) AS Tipo FROM t_AssenzeEdizione WHERE DataAttivita<" + FunzStringa.StrDataSQL(vGiorno) + " UNION SELECT SUM(Minuti) AS intProgrAssenze, (2) AS Tipo FROM t_AssenzeEdizione WHERE DataAttivita=" + FunzStringa.StrDataSQL(vGiorno) + " AND TipoAttivita='DOCENZA' AND TipoArgomento<>'LARSA' ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT SUM(Minuti) AS intProgrAssenze, (1) AS Tipo FROM t_AssenzeEdizione WHERE DataAttivita<" + FunzStringa.StrDataSQL(vGiorno) + " UNION SELECT SUM(Minuti) AS intProgrAssenze, (2) AS Tipo FROM t_AssenzeEdizione WHERE DataAttivita=" + FunzStringa.StrDataSQL(vGiorno) + " AND TipoAttivita='DOCENZA' ";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT SUM(Minuti) AS intProgrAssenze, (3) AS Tipo FROM t_AssenzeEdizione WHERE DataAttivita<=" + FunzStringa.StrDataSQL(vGiorno) + " ";
PerseoNET/clsEdizione.cs:							origineDati = "SELECT SUM(Minuti) AS intProgrAssenze, (1) AS Tipo FROM t_AssenzeEdizione WHERE DataAttivita<" + FunzStringa.StrDataSQL(vGiorno) + " AND IDiscrizione " + text + "UNION SELECT SUM(Minuti) AS intProgrAssenze, (2) AS Tipo FROM t_AssenzeEdizione WHERE DataAttivita=" + FunzStringa.StrDataSQL(vGiorno) + " AND TipoAttivita='DOCENZA' AND TipoArgomento<>'LARSA' AND IDiscrizione " + text;
PerseoNET/clsEdizione.cs:							origineDati = "SELECT SUM(Minuti) AS intProgrAssenze, (1) AS Tipo FROM t_AssenzeEdizione WHERE DataAttivita<" + FunzStringa.StrDataSQL(vGiorno) + " AND IDiscrizione " + text + "UNION SELECT SUM(Minuti) AS intProgrAssenze, (2) AS Tipo FROM t_AssenzeEdizione WHERE DataAttivita=" + FunzStringa.StrDataSQL(vGiorno) + " AND TipoAttivita='DOCENZA' AND IDiscrizione " + text;
PerseoNET/clsEdizione.cs:							origineDati = "SELECT SUM(Minuti) AS intProgrAssenze, (3) AS Tipo FROM t_AssenzeEdizione WHERE DataAttivita<=" + FunzStringa.StrDataSQL(vGiorno) + "  AND IDiscrizione " + text;
PerseoNET/clsEdizione.cs:							origineDati = "SELECT (1) AS Tipo, SUM(Minuti) AS intProgrFatte FROM t_PianificazioneAula WHERE DataAttivita<" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_CampoIscrizione((object)"DataIscr")), "dd/MM/yyyy")) + " ";
PerseoNET/clsEdizione.cs:								origineDati = "SELECT (1) AS Tipo, SUM(Minuti) AS intProgrFatte FROM t_PianificazioneAula WHERE DataAttivita<" + FunzStringa.StrDataSQL(vGiorno) + " UNION SELECT (2) AS Tipo, SUM(Minuti) AS intProgrFatte FROM t_PianificazioneAula WHERE DataAttivita=" + FunzStringa.StrDataSQL(vGiorno) + " AND TipoAttivita='DOCENZA' AND TipoArgomento<>'LARSA' ";
PerseoNET/clsEdizione.cs:								origineDati = "SELECT (1) AS Tipo, SUM(Minuti) AS intProgrFatte FROM t_PianificazioneAula WHERE DataAttivita<" + FunzStringa.StrDataSQL(vGiorno) + " UNION SELECT (2) AS Tipo, SUM(Minuti) AS intProgrFatte FROM t_PianificazioneAula WHERE DataAttivita=" + FunzStringa.StrDataSQL(vGiorno) + " AND TipoAttivita='DOCENZA' ";
PerseoNET/clsEdizione.cs:								origineDati = "SELECT (1) AS Tipo, SUM(Minuti) AS intProgrFatte FROM t_PianificazioneAula WHERE DataAttivita<=" + FunzStringa.StrDataSQL(vGiorno) + " ";
PerseoNET/clsEdizione.cs:								origineDati = "SELECT (1) AS Tipo, SUM(Minuti) AS intProgrFatte FROM t_PianificazioneAula WHERE DataAttivita>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_CampoIscrizione((object)"DataRitiro")), "dd/MM/yyyy")) + " AND DataAttivita<" + FunzStringa.StrDataSQL(vGiorno) + " UNION SELECT (2) AS Tipo, SUM(Minuti) AS intProgrFatte FROM t_PianificazioneAula WHERE DataAttivita=" + FunzStringa.StrDataSQL(vGiorno) + " AND TipoAttivita='DOCENZA' AND TipoArgomento<>'LARSA' ";
PerseoNET/clsEdizione.cs:								origineDati = "SELECT (1) AS Tipo, SUM(Minuti) AS intProgrFatte FROM t_PianificazioneAula WHERE DataAttivita>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_CampoIscrizione((object)"DataRitiro")), "dd/MM/yyyy")) + " AND DataAttivita<" + FunzStringa.StrDataSQL(vGiorno) + " UNION SELECT (2) AS Tipo, SUM(Minuti) AS intProgrFatte FROM t_PianificazioneAula WHERE DataAttivita=" + FunzStringa.StrDataSQL(vGiorno) + " AND TipoAttivita='DOCENZA' ";
PerseoNET/clsEdizione.cs:								origineDati = "SELECT (1) AS Tipo, SUM(Minuti) AS intProgrFatte FROM t_PianificazioneAula WHERE DataAttivita>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_CampoIscrizione((object)"DataRitiro")), "dd/MM/yyyy")) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(vGiorno) + " ";
PerseoNET/clsEdizione.cs:				string origineDati = "SELECT FK_Causale, DescrAvviso, DataGenerazione, NomeTabella, PKRecord FROM t_AvvisiUtentiPerseo INNER JOIN t_TipoCausaleAvviso ON t_AvvisiUtentiPerseo.FK_Causale = t_TipoCausaleAvviso.IDtcausaleavv GROUP BY FK_Causale, DescrAvviso, DataGenerazione, NomeTabella, PKRecord HAVING (FK_Causale=" + Conversions.ToString(VariabiliClassi.Notifica.get_PKCausale(clsNotificaEvento.TipoNotificaEvento.NotificaSovraStudente)) + " AND DescrAvviso LIKE '%edizione ID=" + Conversions.ToString(mvIDedizione) + "%') OR (FK_Causale=" + Conversions.ToString(VariabiliClassi.Notifica.get_PKCausale(clsNotificaEvento.TipoNotificaEvento.NotificaSovraStudente)) + " AND NomeTabella='t_PianoServizi' AND PKRecord=" + Conversions.ToString(mvIDedizione) + ") OR (FK_Causale=" + Conversions.ToString(VariabiliClassi.Notifica.get_PKCausale(clsNotificaEvento.TipoNotificaEvento.NotificaSovraStudente)) + " AND NomeTabella='t_Iscrizioni' AND PKRecord " + StrFiltroIN_PKIscritti + ") ORDER BY DataGenerazione ";
PerseoNET/clsEdizione.cs:					string text2 = (clsDataRecordDR.OrigineDati = "SELECT t_ArgomentiModuli.IDargomento, SUM(OreAssegnate) AS tass FROM t_ArgomentiModuli INNER JOIN t_IncarichiEdizioni ON t_ArgomentiModuli.IDargomento = t_IncarichiEdizioni.FK_Argomento WHERE IDargomento=" + Conversions.ToString(vIDarg) + " AND FK_Edizione=" + Conversions.ToString(mvIDedizione) + " GROUP BY t_ArgomentiModuli.IDargomento ");
PerseoNET/clsEdizione.cs:					string origineDati = "SELECT t_AttivitaEdizioni.IDattedi, SUM(OreAssegnate) AS tass FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi WHERE FK_Argomento IS NULL AND FK_TipoAttivita=" + Conversions.ToString(vIDtipoatt) + " AND t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(mvIDedizione) + " GROUP BY t_AttivitaEdizioni.IDattedi ";
PerseoNET/clsEdizione.cs:					string text2 = (clsDataRecordDR.OrigineDati = "SELECT t_ModuliEdizioni.IDmodulo, SUM(OreArgomento) AS OreArg FROM t_ArgomentiModuli INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo WHERE IDmodulo=" + Conversions.ToString(vIDmodulo) + " AND FK_Edizione=" + Conversions.ToString(mvIDedizione) + " GROUP BY t_ModuliEdizioni.IDmodulo");
PerseoNET/clsEdizione.cs:					string str = "SELECT IDedizione, IDmodulo, OreModulo FROM t_StrutturaEdizione ";
PerseoNET/clsEdizione.cs:					string text2 = (clsDataRecordDR.OrigineDati = "SELECT SUM(OreModulo) AS OreMod FROM t_ModuliEdizioni INNER JOIN t_AttivitaEdizioni ON t_ModuliEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi WHERE t_ModuliEdizioni.FK_Edizione=" + Conversions.ToString(mvIDedizione) + " AND FK_TipoAttivita=2");
PerseoNET/clsEdizione.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, FK_IncaricoClassiRiunite FROM t_IncarichiContrattiEdizioni GROUP BY IDincarico, FK_IncaricoClassiRiunite, FK_Tipo, IDedizione HAVING IDedizione=", this.get_Campo((object)0)), " AND FK_Tipo=1 AND FK_IncaricoClassiRiunite IS NOT NULL "));
PerseoNET/clsEdizione.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, IDincarico, DataAttivita, OraInizio, OraFine, (Cognome + ' ' + Nome) AS StrDOC, CodiceEdizione, DescrBreveArgomento, DocenzaFAD FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE IDedizione<>", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataAttivita>="), FunzStringa.StrDataSQL(value, FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(stringa, FlagSqlServer: true)), " "), "AND IDdocente>3 "), right), "ORDER BY IDincarico, DataAttivita, OraInizio, CodiceEdizione "));
PerseoNET/clsEdizione.cs:				if (mvIncarichiContratti == null || VariabiliClassi.CmdSQL.ConteggioRecord("SELECT COUNT(IDincarico) AS NumeroRecord FROM t_IncarichiContrattiEdizioni WHERE IDedizione=" + Conversions.ToString(mvIDedizione), Variabili.pathLog) <= 0)
PerseoNET/clsEdizione.cs:				if (mvIncarichiContratti == null || VariabiliClassi.CmdSQL.ConteggioRecord("SELECT COUNT(IDincarico) AS NumeroRecord FROM t_IncarichiContrattiEdizioni WHERE IDedizione=" + Conversions.ToString(mvIDedizione), Variabili.pathLog) <= 0)
PerseoNET/clsEdizione.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDcalatt FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico=t_IncarichiEdizioni.IDincarico WHERE DATEDIFF(mi,OraInizio,OraFine)>60 AND FK_Argomento IS NOT NULL AND FK_Edizione=", this.get_Campo((object)0)));
PerseoNET/clsEdizione.cs:				string origineDati = "SELECT IDcalatt, IDincarico, (FK_Docente) AS IDdocente, DataAttivita, OraInizio, OraFine, DocenzaFAD, DATEDIFF(mi,OraInizio,OraFine) AS Minuti FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON FK_Incarico = dbo.t_IncarichiEdizioni.IDincarico WHERE FK_Edizione=" + Conversions.ToString(mvIDedizione) + " AND FK_Argomento IS NOT NULL ORDER BY DataAttivita, OraInizio, OraFine ";
PerseoNET/clsEdizione.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)) AS tore FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE t_IncarichiEdizioni.FK_Edizione=", mvEdizione.get_Campo((object)0)), " "), text), "AND FK_Argomento IS NOT NULL "));
PerseoNET/clsEdizione.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, FK_Incarico, DataAttivita, OraInizio, OraFine, DocenzaFAD FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE t_IncarichiEdizioni.FK_Edizione=", mvEdizione.get_Campo((object)0)), " AND DocenzaFAD=1 "), "AND FK_Argomento IS NOT NULL "));
PerseoNET/clsEdizione.cs:					string origineDati = "SELECT IDloced, IDlocale, IDedizione, TipoLocale, CodiceTLOC, CodiceLocale, DescrLocale, Posti, CostoMQ, LocaleAttivo, LocaleEsterno, INAIL, Fittizio, Sovrapponibile FROM t_LocaliEdizioni WHERE IDedizione=" + Conversions.ToString(mvIDedizione) + " ORDER BY Fittizio DESC, CodiceLocale";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT t_LocaliEdizioni.IDloced, IDlocale, FK_Edizione, TipoLocale, CodiceTLOC, CodiceLocale, DescrLocale, Posti, CostoMQ, LocaleAttivo, LocaleEsterno, INAIL, Fittizio, Sovrapponibile FROM t_Locali INNER JOIN t_LocaliEdizioni ON t_Locali.IDlocale = t_LocaliEdizioni.FK_LocaleAssegnato INNER JOIN  t_TipoLocale ON t_Locali.FK_Tipo = t_TipoLocale.IDtloc WHERE FK_Edizione=" + Conversions.ToString(mvIDedizione) + " ORDER BY Fittizio DESC, CodiceLocale";
PerseoNET/clsEdizione.cs:						origineDati = "SELECT IDloced, IDlocale, IDedizione, TipoLocale, CodiceTLOC, CodiceLocale, DescrLocale, Posti, CostoMQ, LocaleAttivo, LocaleEsterno, INAIL, Fittizio, Sovrapponibile FROM t_LocaliEdizioni ";
PerseoNET/clsEdizione.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_TipoAttivitaEdizione.IDtattivita, TipoAttivita, IndTA FROM t_TipoAttivitaEdizione INNER JOIN t_ProgettiEdizioniRegole ON t_TipoAttivitaEdizione.IDtattivita = t_ProgettiEdizioniRegole.FK_TipoAttivitaEdizione WHERE (FK_Progetto=", this.get_Campo((object)"IDprogetto")), " AND RegolaDote=1) "), "OR (FK_Progetto="), this.get_Campo((object)"IDprogetto")), " AND RegolaOreIscritto=1) "), "ORDER BY IndTA "));
PerseoNET/clsEdizione.cs:				origineDati = "SELECT IDtattivita, TipoAttivita, IndTA FROM t_AttivitaEdizioneDote ";
PerseoNET/clsEdizione.cs:					string vSQL = "SELECT IDtattivita FROM t_TipoAttivitaEdizione WHERE TipoAttivita='LARSA' ";
PerseoNET/clsEdizione.cs:					vSQL = "SELECT IDtarg FROM t_TipoArgomento WHERE TipoArgomento='LARSA' ";
PerseoNET/clsEdizione.cs:					string vSQL = "SELECT IDtattivita FROM t_TipoAttivitaEdizione WHERE TipoAttivita='LARSA' ";
PerseoNET/clsEdizione.cs:					string origineDati = (vExtra ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CalendarioAttivita.IDcalatt, t_CalendarioAttivita.FK_Incarico, FK_Locale, IDdocente, (NULL) AS IDargomento, FK_CalAttivita, DataAttivita, OraInizio, OraFine, TipoAttivita, (Cognome + ' ' + Nome) AS StrDOC, CodiceLocale, DocenzaFAD, (SELECT COUNT(IDcalcod) FROM t_CalendarioCodocenza WHERE FK_Calendario = IDcalatt) AS ncod, (0) AS Griglia FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND Aula=1 AND Primaria=1 AND MonteOreEdizione=0 "), "AND DataAttivita>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)), " AND DataAttivita<="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " "), "ORDER BY DataAttivita, OraInizio ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CalendarioAttivita.IDcalatt, t_CalendarioAttivita.FK_Incarico, FK_Locale, IDdocente, IDargomento, FK_CalAttivita, DataAttivita, OraInizio, OraFine, DescrBreveArgomento, (Cognome + ' ' + Nome) AS StrDOC, CodiceLocale, DocenzaFAD, (SELECT COUNT(IDcalcod) FROM t_CalendarioCodocenza WHERE FK_Calendario = IDcalatt) AS ncod, (0) AS Griglia FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale WHERE t_IncarichiEdizioni.FK_Edizione=", this.get_Campo((object)0)), " "), "AND DataAttivita>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)), " AND DataAttivita<="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " "), "ORDER BY DataAttivita, OraInizio ")));
PerseoNET/clsEdizione.cs:						origineDati = "SELECT IDcalatt, FK_Incarico, IDdocente, IDargomento, DataAttivita, OraInizio, OraFine, DescrBreveArgomento, StrDOC FROM t_DocenteClassiRiunite WHERE DataAttivita>=" + FunzStringa.StrDataSQL(text) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(text2) + " AND IDcalatt IS NOT NULL ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsEdizione.cs:					origineDati = (vExtra ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, FK_Incarico, FK_Locale, IDdocente, (NULL) AS IDargomento, FK_CalAttivita, DataAttivita, OraInizio, OraFine, TipoAttivita, StrDOC, CodiceLocale, DocenzaFAD, ncod FROM zt_GrigliaSettimana WHERE IDedizione=", this.get_Campo((object)0)), " "), "ORDER BY DataAttivita, OraInizio ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, FK_Incarico, FK_Locale, IDdocente, IDargomento, FK_CalAttivita, DataAttivita, OraInizio, OraFine, DescrBreveArgomento, StrDOC, CodiceLocale, DocenzaFAD, ncod FROM zt_GrigliaSettimana WHERE IDedizione=", this.get_Campo((object)0)), " "), "ORDER BY DataAttivita, OraInizio ")));
PerseoNET/clsEdizione.cs:						origineDati = (vExtra ? "SELECT IDcalatt, FK_Incarico, FK_Locale, IDdocente, IDargomento, FK_CalAttivita, DataAttivita, OraInizio, OraFine, TipoAttivita, StrDOC, CodiceLocale, DocenzaFAD, ncod FROM zt_GrigliaSettimana " : "SELECT IDcalatt, FK_Incarico, FK_Locale, IDdocente, IDargomento, FK_CalAttivita, DataAttivita, OraInizio, OraFine, DescrBreveArgomento, StrDOC, CodiceLocale, DocenzaFAD, ncod FROM zt_GrigliaSettimana ");
PerseoNET/clsEdizione.cs:					string origineDati = ((vTipoAula != TipoRegistrazioneAttivita.TipoRegistraDocenza) ? ("SELECT t_CalendarioAttivita.IDcalatt, IDincarico, IDlocale, FK_Docente, DataAttivita, OraInizio, OraFine, FK_TipoAttivita, (0) AS FK_TipoArgomento, (" + Conversions.ToString(mvIDedizione) + ") AS IDedizione FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(mvIDedizione) + " AND Aula=1 AND Primaria=1 AND MonteOreEdizione=0 ORDER BY DataAttivita, OraInizio ") : ("SELECT t_CalendarioAttivita.IDcalatt, IDincarico, IDlocale, FK_Docente, DataAttivita, OraInizio, OraFine, FK_TipoAttivita, FK_TipoArgomento, (" + Conversions.ToString(mvIDedizione) + ") AS IDedizione FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(mvIDedizione) + " AND DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " ORDER BY DataAttivita, OraInizio "));
PerseoNET/clsEdizione.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDattedi FROM t_AttivitaEdizione WHERE FK_Edizione=", this.get_Campo((object)0)));
PerseoNET/clsEdizione.cs:						vSQL = "SELECT t_AttivitaEdizioni.IDattedi, t_AttivitaEdizioni.FK_Edizione, FK_TipoAttivita, IndTG, IndTA, TipoGruppo, TipoAttivita, TipoCategoria, TipoCategoriaRisorsa, DescrAttivita, OreAttivita, CostoOraServizio, DeltaOreAttivita, Aula, Primaria, Secondaria, VincoloOrario, MonteOreEdizione, AttivitaPIP, FinanziamentoExtra, IscrittiSostegno, PresenzaOFA, PresenzaINAIL, MaxStudenti, SUM(OreAssegnate) AS OreAssegnateAttivita FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_IncarichiEdizioni ON t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita GROUP BY t_AttivitaEdizioni.IDattedi, t_AttivitaEdizioni.FK_Edizione, FK_TipoAttivita, IndTG, IndTA, TipoGruppo, TipoAttivita, TipoCategoria, TipoCategoriaRisorsa, DescrAttivita, OreAttivita, CostoOraServizio, DeltaOreAttivita, PresenzaOFA, PresenzaINAIL, MaxStudenti, Aula, Primaria, Secondaria, VincoloOrario, MonteOreEdizione, AttivitaPIP, FinanziamentoExtra, IscrittiSostegno HAVING t_AttivitaEdizioni.FK_Edizione=" + Conversions.ToString(mvIDedizione);
PerseoNET/clsEdizione.cs:						vSQL = "SELECT IDattedi, FK_Edizione, FK_TipoAttivita, IndTG, IndTA, TipoGruppo, TipoAttivita, TipoCategoria, TipoCategoriaRisorsa, DescrAttivita, OreAttivita, CostoOraServizio, DeltaOreAttivita, Aula, Primaria, Secondaria, VincoloOrario, MonteOreEdizione, AttivitaPIP, FinanziamentoExtra, IscrittiSostegno, PresenzaOFA, PresenzaINAIL, MaxStudenti, OreAssegnateAttivita FROM t_AttivitaEdizione ";
PerseoNET/clsEdizione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDpipprogetto, (0) AS IDpfdote, FK_TipoAttivitaPF, DescrAttivita, MaxOrePreviste, IndPIP, (0) AS IDiscrizione, CostoOra FROM t_ProgettiServiziPIP WHERE FK_progetto=", Variabili.Progetto.get_Campo((object)0)), " ORDER BY IndPIP, DescrAttivita"));
PerseoNET/clsEdizione.cs:					text = "SELECT IDpipprogetto, IDpfdote, FK_TipoAttivitaPF, DescrAttivita, MaxOrePreviste, IndPIP, IDiscrizione, CostoOra FROM t_DescrAttivitaAltreFunzioni ";
PerseoNET/clsEdizione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDpfdote, (0) AS IDpipprogetto, FK_TipoAttivitaPF, DescrAttivita, MaxOrePreviste, IndPIP, IDiscrizione, CostoOra FROM t_StudentiDotiPianiFormativi INNER JOIN t_Iscrizioni ON t_StudentiDotiPianiFormativi.FK_Dote = t_Iscrizioni.FK_DoteStudente WHERE FK_Edizione=", this.get_Campo((object)0)), " "), "ORDER BY IDiscrizione, IndPIP, DescrAttivita "));
PerseoNET/clsEdizione.cs:					text = "SELECT IDpfdote, IDpipprogetto, FK_TipoAttivitaPF, DescrAttivita, MaxOrePreviste, IndPIP, IDiscrizione, CostoOra FROM t_DescrAttivitaAltreFunzioni ";
PerseoNET/clsEdizione.cs:				origineDati = "SELECT IDpfdote, FK_TipoAttivitaPF FROM t_DescrAttivitaAltreFunzioni WHERE FK_TipoAttivitaPF IS NULL OR FK_TipoAttivitaPF=0 ";
PerseoNET/clsEdizione.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Incarico, DescrAttivita FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Edizione=", this.get_Campo((object)0)), " AND DescrAttivita IS NOT NULL AND FK_Iscrizione IS NULL "), "GROUP BY FK_Incarico, DescrAttivita "), "ORDER BY DescrAttivita "));
PerseoNET/clsEdizione.cs:				origineDati = "SELECT IDincarico, DescrAttivita FROM t_DescrAttivitaAltreFunzioni ";
PerseoNET/clsEdizione.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, (FK_Utente) AS IDutente, IDedizione, DataIscr, DataRitiro, OreAttivitaIndividuali, Gruppo, CodiceEdizione, DescrEdizione, SiglaSede, DataAvvio, DataFine, ObbligoIscritti, (SELECT OreAttivita FROM t_TipoAttivitaEdizione INNER JOIN t_AttivitaEdizioni ON t_TipoAttivitaEdizione.IDtattivita = t_AttivitaEdizioni.FK_TipoAttivita WHERE FK_Edizione=IDedizione AND VincoloOrario=0 AND MonteOreEdizione=1 AND Aula=1) AS OreStage FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione=t_Sedi.IDsede WHERE (FK_Utente " + mvIscritti.StringaFiltroIN("IDutente") + " AND DataIscr IS NOT NULL AND IDedizione<>", this.get_Campo((object)0)), " "), right), "AND DataAvvio>="), FunzStringa.StrDataSQL(Conversions.ToString(this.get_Campo((object)"DataAvvio")), FlagSqlServer: true)), " AND DataAvvio<="), FunzStringa.StrDataSQL(Conversions.ToString(this.get_Campo((object)"DataFine")), FlagSqlServer: true)), right2), ") "), "OR (FK_Utente "), mvIscritti.StringaFiltroIN("IDutente")), " AND DataIscr IS NOT NULL AND IDedizione<>"), this.get_Campo((object)0)), " "), right), "AND DataFine>="), FunzStringa.StrDataSQL(Conversions.ToString(this.get_Campo((object)"DataAvvio")), FlagSqlServer: true)), " AND DataFine<="), FunzStringa.StrDataSQL(Conversions.ToString(this.get_Campo((object)"DataFine")), FlagSqlServer: true)), right2), ") "), "OR (FK_Utente "), mvIscritti.StringaFiltroIN("IDutente")), " AND DataIscr IS NOT NULL AND IDedizione<>"), this.get_Campo((object)0)), " "), right), "AND DataAvvio<="), FunzStringa.StrDataSQL(Conversions.ToString(this.get_Campo((object)"DataAvvio")), FlagSqlServer: true)), " AND DataFine>="), FunzStringa.StrDataSQL(Conversions.ToString(this.get_Campo((object)"DataFine")), FlagSqlServer: true)), right2), ") "), "OR (FK_Utente "), mvIscritti.StringaFiltroIN("IDutente")), " AND DataIscr IS NOT NULL AND IDedizione<>"), this.get_Campo((object)0)), " "), right), "AND DataAvvio>="), FunzStringa.StrDataSQL(Conversions.ToString(this.get_Campo((object)"DataAvvio")), FlagSqlServer: true)), " AND DataFine<="), FunzStringa.StrDataSQL(Conversions.ToString(this.get_Campo((object)"DataFine")), FlagSqlServer: true)), right2), ") "), "ORDER BY FK_Utente, IDiscrizione, IDedizione "));
PerseoNET/clsEdizione.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdotestud, FK_Studente, ID_Dote, DoteChiusa FROM t_StudentiDoti INNER JOIN t_Iscrizioni ON t_StudentiDoti.FK_Studente = t_Iscrizioni.FK_Utente WHERE (t_Iscrizioni.FK_Edizione=", this.get_Campo((object)"IDedizione")), ") "), "AND (t_StudentiDoti.DataAvvioDote >= '"), right), "') AND (t_StudentiDoti.DataAvvioDote < '"), right2), "') "), "OR "), "(t_Iscrizioni.FK_Edizione="), this.get_Campo((object)"IDedizione")), ") "), "AND (t_StudentiDoti.DataFineDote >= '"), right), "') AND (t_StudentiDoti.DataFineDote < '"), right2), "') "), "OR "), "(t_Iscrizioni.FK_Edizione="), this.get_Campo((object)"IDedizione")), ") "), "AND (t_StudentiDoti.DataAvvioDote <= '"), right), "') AND (t_StudentiDoti.DataFineDote > '"), right), "') "), "OR "), "(t_Iscrizioni.FK_Edizione="), this.get_Campo((object)"IDedizione")), ") "), "AND (t_StudentiDoti.DataAvvioDote <= '"), right2), "') AND (t_StudentiDoti.DataFineDote > '"), right2), "') "), "ORDER BY ID_Dote "));
PerseoNET/clsEdizione.cs:				origineDati = "SELECT IDdotestud, FK_Studente, ID_Dote, DoteChiusa FROM zt_DotiIscrittiEdizione ";
PerseoNET/clsEdizione.cs:				string vSQL = "SELECT OreAttivita FROM t_AttivitaEdizioni WHERE FK_TipoAttivita=2 AND FK_Edizione=" + Conversions.ToString(mvIDedizione);
PerseoNET/clsEdizione.cs:				vSQL = "SELECT IDiscrizione, IDutente, (FK_Edizione) AS IDedizione, IDdotestud, (Cognome + ' ' + Nome) AS Studente, Cognome, Nome, PosRegistro, IDmwiscr, IDmwstage, ID_Dote, DataAvvioDote, DataFineDote, PIPEsterno, IscrizioneSenzaDote, Uditore, DataPreIscr, DataIscr, DataRitiro, OreUtente, OreCredito, OreAttivitaIndividuali, (" + Conversions.ToString(value) + ") AS OreStage, (0) AS OrePresenza, (0) AS OreAula, (0) AS PresenzaStage, (0) AS PresenzaIndiv, (0) AS PresenzaServ, FK_MotivoRitiro, NoteRitiro, CodFiscale, PIVA, Sesso, DataNascita, LuogoNascita, ProvNascita, NazNascita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, ComAbitazione, CAPabitazione, IndirAbitazione, ProvAbitazione, TipoNazionalita, DataProtocolloCredito, ProtocolloCredito, EsameINAIL, PresenzaEsame, Dipendente, SedeEsternaRecupero, DescrCertAttivitaApprendista, Sostegno, OreSostegno, OreSostegnoIndividuale, Disabile, TipoStatoLav, TipoStatoLavEsteso, TipoLivelloMW, Tel_1, Tel_2, Tel_3, Email, (CASE WHEN ID_Dote IS NOT NULL THEN ImportoTotaleDote ELSE 0 END) AS QuotaTotaleDote, (0) AS QuotaTotaleVersata, EsenzioneVersamento, QuotaEsenzione, NoteEsenzione, DoteChiusa, DataDoteChiusa, OraGratuitaProroga, DoteDeroga, IgnoraRegoleProgetto, IdoneoAmmesso, PuntFinale, StatoCivile, LuogoNascitaStraniero, (CodiceDoc) AS NumDocId, (TipoDocumento) AS TipoDocId, (DataScadenza) AS DataScadenzaDocId, (Redattore) AS RilasciaDocId, (DataPubblicazione) AS DataRilasciaDocId, NazResidenza, DataResidenzaItalia, NoteProvenienza, NoteStudente, Anno, UtenteTest, FK_TipoScalaPunt, DropOut, Svantaggio, CittadinanzaNonAcquisita, StatoDisagioSociale, Cittadinanza, FK_IscrizioneAmpliamento, ProseguePercorso, LezioneReligioneCattolica, LingueStraniere FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz LEFT OUTER JOIN v_DocumentiRiconoscimentoStudenti ON t_Utenti.IDutente = v_DocumentiRiconoscimentoStudenti.FK_Studente LEFT OUTER JOIN t_TipoStatoLav ON t_Utenti.FK_StatoLav = t_TipoStatoLav.IDtslav LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud LEFT OUTER JOIN v_StudentiLivelloTitoloStudio ON t_Utenti.IDutente = v_StudentiLivelloTitoloStudio.IDstudente WHERE FK_Edizione=" + Conversions.ToString(mvIDedizione) + " ORDER BY PosRegistro, (Cognome + ' ' + Nome), IDiscrizione ";
PerseoNET/clsEdizione.cs:				string vSQL2 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, SUM(QuotaDoteIscrizione*NumeroVoucher) AS TotaleDote FROM t_IscrizioniDoti INNER JOIN t_Iscrizioni ON t_IscrizioniDoti.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE FK_Edizione=", this.get_Campo((object)0)), " GROUP BY IDiscrizione"));
PerseoNET/clsEdizione.cs:				vSQL2 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, SUM(Quota) AS TotaleVersamenti FROM t_Iscrizioni INNER JOIN t_IscrizioniVersamenti ON t_Iscrizioni.IDiscrizione = t_IscrizioniVersamenti.FK_Iscrizione WHERE FK_Edizione=", this.get_Campo((object)0)), " GROUP BY IDiscrizione"));
PerseoNET/clsEdizione.cs:						vSQL = "SELECT IDiscrizione, IDutente, IDedizione, IDdotestud, Studente, Cognome, Nome, PosRegistro, IDmwiscr, IDmwstage, ID_Dote, DataAvvioDote, DataFineDote, PIPEsterno, IscrizioneSenzaDote, Uditore, DataPreIscr, DataIscr, DataRitiro, OreUtente, OreCredito, OreAttivitaIndividuali, OreStage, OrePresenza, OreAula, PresenzaStage, PresenzaIndiv, PresenzaServ, FK_MotivoRitiro, NoteRitiro, CodFiscale, PIVA, Sesso, DataNascita, LuogoNascita, ProvNascita, NazNascita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, ComAbitazione, CAPabitazione, IndirAbitazione, ProvAbitazione, TipoNazionalita, DataProtocolloCredito, ProtocolloCredito, EsameINAIL, PresenzaEsame, Dipendente, SedeEsternaRecupero, DescrCertAttivitaApprendista, Sostegno, OreSostegno, OreSostegnoIndividuale, Disabile, TipoStatoLav, TipoStatoLavEsteso, TipoLivelloMW, Tel_1, Tel_2, Tel_3, Email, QuotaTotaleDote, QuotaTotaleVersata, EsenzioneVersamento, QuotaEsenzione, NoteEsenzione, DoteChiusa, DataDoteChiusa, OraGratuitaProroga, DoteDeroga, IgnoraRegoleProgetto, IdoneoAmmesso, PuntFinale, StatoCivile, LuogoNascitaStraniero, NumDocId, TipoDocId, DataScadenzaDocId, RilasciaDocId, DataRilasciaDocId, NazResidenza, DataResidenzaItalia, NoteProvenienza, NoteStudente, Anno, UtenteTest, FK_TipoScalaPunt, DropOut, Svantaggio, CittadinanzaNonAcquisita, StatoDisagioSociale, Cittadinanza, FK_IscrizioneAmpliamento, ProseguePercorso, LezioneReligioneCattolica, LingueStraniere FROM t_IscrittiEdizione ";
PerseoNET/clsEdizione.cs:					vSQL = "SELECT IDdotestud, IDutente, (Cognome + ' ' + Nome) AS Studente, CodFiscale FROM t_Utenti INNER JOIN t_StudentiDoti ON t_StudentiDoti.FK_Studente = t_Utenti.IDutente WHERE IDdotestud " + mvIscritti.StringaFiltroIN("IDdotestud");
PerseoNET/clsEdizione.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, FormSicurGenAzienda, FormSicurSpecAzienda FROM t_Iscrizioni INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda WHERE (FK_Edizione=", this.get_Campo((object)0)), " And FormSicurGenAzienda=1) "), "Or (FK_Edizione="), this.get_Campo((object)0)), " And FormSicurSpecAzienda=1) "), "ORDER BY IDiscrizione "));
PerseoNET/clsEdizione.cs:				string origineDati = "SELECT IDutente, (Cognome & ' ' & Nome) AS Studente, CodFiscale, COUNT(IDiscrizione) AS NumeroRecord FROM t_IscrittiEdizione GROUP BY IDutente, (Cognome & ' ' & Nome), CodFiscale HAVING COUNT(IDiscrizione)>1 ORDER BY (Cognome & ' ' & Nome) ";
PerseoNET/clsEdizione.cs:				string origineDati = "SELECT IDincarico, (OreAssegnate*60) AS MinutiAssegnati, SUM(DATEDIFF(mi,OraInizio,OraFine)) AS TotaleMinutiSvolti FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Edizione= " + Conversions.ToString(value) + " GROUP BY IDincarico, OreAssegnate ";
PerseoNET/clsEdizione.cs:				origineDati = (clsTblDatiDR.OrigineDatiUnione = "SELECT IDincarico, (OreAssegnate*60) AS MinutiAssegnati, SUM(DATEDIFF(mi,OraInizio,OraFine)) AS TotaleMinutiSvolti FROM t_IncarichiEdizioni INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE FK_Edizione= " + Conversions.ToString(value) + " GROUP BY IDincarico, OreAssegnate ");
PerseoNET/clsEdizione.cs:				if (mvIncarichiContratti == null || VariabiliClassi.CmdSQL.CreaDataTbl("SELECT IDincarico FROM t_IncarichiContrattiEdizioni WHERE IDedizione=" + Conversions.ToString(mvIDedizione), Variabili.pathLog, "int") <= 0)
PerseoNET/clsEdizione.cs:				vSQL = "INSERT INTO t_StampaTbl_1 (Numerico_1, Numerico_2, Numerico_3, Testo_1, Numerico_4, Numerico_5, Numerico_6) SELECT FK_TipoAttivita, IndTA, IDincarico, TipoAttivita, OreAttivita, OreAssegnate, DeltaOreAttivita FROM t_IncarichiContrattiEdizioni GROUP BY FK_TipoAttivita, IndTA, IDincarico, TipoAttivita, OreAttivita, OreAssegnate, DeltaOreAttivita ORDER BY IndTA, IDincarico";
PerseoNET/clsEdizione.cs:				vSQL = "SELECT (Testo_1) AS TipoAttivita, (Numerico_4) AS OreAttivita, SUM(Numerico_5) AS OreAssegnate, (Numerico_6) AS DeltaOreAttivita FROM t_StampaTbl_1 GROUP BY Testo_1, Numerico_4, Numerico_6 ";
PerseoNET/clsEdizione.cs:					string str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_PianoServizi.IDedizione, IDiscrizione, ('O') AS TipoRegistra, DescrEdizione, CodiceEdizione, SiglaSede, CodiceProgetto, DataAvvio, DataFine, Studente, OreAttivitaIndividuali, DescrAttivita, DescrAttivitaPIP, MaxOrePreviste, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS Ore, MAX(DataAttivita) AS UltimaDataAttivita, (NULL) AS AttenzioneOre, (NULL) AS Attenzione FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN v_ProgettoPIPStudenteOperatore ON t_PianoServizi.IDedizione = v_ProgettoPIPStudenteOperatore.IDedizione GROUP BY t_PianoServizi.IDedizione, DescrEdizione, CodiceEdizione, SiglaSede, CodiceProgetto, DataAvvio, DataFine, DescrAttivita, DescrAttivitaPIP, Studente, OreAttivitaIndividuali, MaxOrePreviste, IDiscrizione HAVING t_PianoServizi.IDedizione=", this.get_Campo((object)"IDedizione")), " "));
PerseoNET/clsEdizione.cs:					str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(str + "UNION SELECT t_PianoServizi.IDedizione, IDiscrizione, ('I') AS TipoRegistra, DescrEdizione, CodiceEdizione, SiglaSede, CodiceProgetto, DataAvvio, DataFine, Studente, OreAttivitaIndividuali, DescrAttivitaStage, DescrAttivitaPIP, MaxOrePreviste, SUM(DATEDIFF(mi, OraIngresso, OraUscita)) AS Minuti, (SUM(DATEDIFF(mi, OraIngresso, OraUscita))/60) AS Ore, MAX(DataStage) AS UltimaDataAttivita, (NULL) AS AttenzioneOre, (NULL) AS Attenzione FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN v_ProgettoPIPStudenteIndividuale ON t_PianoServizi.IDedizione = v_ProgettoPIPStudenteIndividuale.IDedizione GROUP BY t_PianoServizi.IDedizione, DescrEdizione, CodiceEdizione, SiglaSede, CodiceProgetto, DataAvvio, DataFine, DescrAttivitaStage, DescrAttivitaPIP, Studente, OreAttivitaIndividuali, MaxOrePreviste, IDiscrizione HAVING t_PianoServizi.IDedizione=", this.get_Campo((object)"IDedizione")), " "), "ORDER BY Studente "));
PerseoNET/clsEdizione.cs:				string text = "SELECT IDdocente, (Cognome + ' ' + Nome) AS Nominativo, DataAttivita, OraInizio, OraFine, DescrArgomento, CodiceEdizione, SiglaSede FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDdocente " + mvIncarichiContratti.StringaFiltroIN("IDdocente") + " AND DataAttivita>=" + FunzStringa.StrDataSQL(strDataDal, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(strDataAl, FlagSqlServer: true) + " ";
PerseoNET/clsEdizione.cs:				text = text + "UNION SELECT IDdocente, (Cognome + ' ' + Nome) AS Nominativo, DataAttivita, OraInizio, OraFine, TipoAttivita, CodiceEdizione, SiglaSede FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE IDdocente " + mvIncarichiContratti.StringaFiltroIN("IDdocente") + " AND DataAttivita>=" + FunzStringa.StrDataSQL(strDataDal, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(strDataAl, FlagSqlServer: true) + " ";
PerseoNET/clsEdizione.cs:				text = text + "UNION SELECT IDdocente, (Cognome + ' ' + Nome) AS Nominativo, DataAttivita, OraInizio, OraFine, TipoAttivita, CodiceEdizione, SiglaSede FROM t_LocaliEdizioni RIGHT OUTER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale RIGHT OUTER JOIN t_CalendarioAttivita INNER JOIN t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico ON t_LocaliEdizioni.IDloced = t_CalendarioAttivita.FK_Locale WHERE FK_Argomento IS NULL AND IDdocente " + mvIncarichiContratti.StringaFiltroIN("IDdocente") + " AND DataAttivita>=" + FunzStringa.StrDataSQL(strDataDal, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(strDataAl, FlagSqlServer: true) + " ORDER BY (Cognome + ' ' + Nome), IDdocente, DataAttivita, OraInizio";
PerseoNET/clsEdizione.cs:				text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT CodiceLocale, DataAttivita, OraInizio, OraFine, DescrArgomento, (Cognome + ' ' + Nome) AS Nominativo, CodiceEdizione, SiglaSede FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE DataAttivita>=" + FunzStringa.StrDataSQL(strDataDal, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(strDataAl, FlagSqlServer: true) + " AND FK_SedeEdizione=", this.get_Campo((object)"FK_SedeEdizione")), " AND CodiceLocale<>'ZZZAF' AND CodiceLocale<>'ZZZLF' "), "ORDER BY CodiceLocale, DataAttivita, OraInizio "));
PerseoNET/clsEdizione.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, PosRegistro, Studente, ID_Dote, PIPEsterno, IDmwiscr, DataIscr, DataRitiro, OreUtente, (0) AS OreDOC, (0) AS OreStage, OreCredito, OreAttivitaIndividuali, ('A') AS StatoStud, (0) AS PresenzaDOC, (0) AS OreAssenza, (0) AS PresenzaStage, (0) AS PresenzaIndiv, (0) AS PresenzaTotale, (0) AS OFAperc, (0) AS OFAperct, (NULL) AS SuperaOreIndividuali, (0) AS OreAulaSvolte FROM t_IscrittiEdizione WHERE IDedizione=", this.get_Campo((object)0)), " ORDER BY PosRegistro, Studente "));
PerseoNET/clsEdizione.cs:				string origineDati = "SELECT IDiscrizione, (Cognome + ' ' + Nome) AS Studente, CodFiscale, PosRegistro, IDmwiscr, ID_Dote, Uditore, DataNascita, LuogoNascita, ProvNascita, NazNascita, (NULL) AS LuogoDataNascita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, (NULL) AS Residenza, Tel_1, Tel_2, Email, DataRitiro FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE FK_Edizione=" + Conversions.ToString(mvIDedizione) + " AND DataIscr IS NOT NULL ORDER BY PosRegistro, (Cognome + ' ' + Nome), IDiscrizione ";
PerseoNET/clsEdizione.cs:			string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, IDcalatt, CodiceEdizione, (Cognome + ' ' + Nome) AS Docente, DataAttivita, OraInizio, OraFine, (0) AS Sovrapposta FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_AttivitaEdizioni ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione AND t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE IDedizione=", vIDedizione), " AND FK_Argomento IS NOT NULL AND TipoAttivita='DOCENZA' "), "ORDER BY DataAttivita, OraInizio "));
PerseoNET/clsEdizione.cs:					string origineDati = "SELECT IDedp, (FK_Edizione) AS IDedizione FROM t_PersonaleEdizioniVisibili WHERE FK_Persona=" + Conversions.ToString(VariabiliClassi.IDaccesso);
PerseoNET/clsEdizione.cs:					string origineDati = "SELECT DescrAvviso, DataGenerazione, NomeTabella, (PKRecord) AS IDedizione FROM t_AvvisiUtentiPerseo INNER JOIN t_TipoCausaleAvviso ON t_AvvisiUtentiPerseo.FK_Causale = t_TipoCausaleAvviso.IDtcausaleavv WHERE (FK_Causale=" + Conversions.ToString(VariabiliClassi.Notifica.get_PKCausale(clsNotificaEvento.TipoNotificaEvento.NotificaSovraStudente)) + " AND DescrAvviso LIKE '%edizione ID=%') OR (FK_Causale=" + Conversions.ToString(VariabiliClassi.Notifica.get_PKCausale(clsNotificaEvento.TipoNotificaEvento.NotificaSovraStudente)) + " AND NomeTabella='t_PianoServizi') OR (FK_Causale=" + Conversions.ToString(VariabiliClassi.Notifica.get_PKCausale(clsNotificaEvento.TipoNotificaEvento.NotificaSovraStudente)) + " AND NomeTabella='t_Iscrizioni') ";
PerseoNET/clsEdizione.cs:					string origineDati = "SELECT IDpers, Cognome, Nome, Email FROM t_Personale WHERE Cognome IN('BIROLINI','POLLAZZON','PIGNI') AND Email IS NOT NULL ORDER BY Cognome ";
PerseoNET/frmPannelloTblRiferimenti.cs:				string str = "SELECT zt_MenuRiferimenti.IDmr, Sezione, Indice, Descrizione, FattoreAltezzaRiga, Tabella, FonteDati, Etichette, LarghezzaColonne, Allineamento, CampiModificabili, DimensioneCampi, FormatoColonne, CampiUnivoci, SubQuery, CampoSubQuery, EtichettaCampoSubquery, CampiNonObbligatori, SoloAdmin, SoloAggiornamento, ConsentireProfilo, UpdateCampoVersione, ComboTesto1, ComboTesto2, CampoEvidenziaRighe FROM zt_MenuRiferimenti ";
PerseoNET/frmPersonaleEsterno.cs:				string str = ((!VariabiliClassi.Diritti.get_InserimentoRecord("AMMINISTRAZIONE DB", "APPROVA CONTRATTO", "", "", "")) ? ("SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " AND FK_TipoSede>=3 AND Attiva=True ") : ("SELECT IDsede, IIf(Attiva=False,(SiglaSede & ' (*)'),SiglaSede) AS SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " AND FK_TipoSede>=3 "));
PerseoNET/frmPersonaleEsterno.cs:				str = "SELECT IDdocente, (Docente) AS StrDOC, CodFiscale, (0) AS NumPropo, (0) AS NumAttesa, (0) AS NumAppr, (0) NonCollegati FROM t_IncarichiEdizione GROUP BY IDdocente, Docente, CodFiscale ORDER BY Docente ";
PerseoNET/frmPersonaleEsterno.cs:					strContrSede = "(SELECT COUNT(IDincacontra) FROM t_IncarichiEdizioniContratti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Contratto=IDcontratto AND FK_SedeEdizione=" + Conversions.ToString(ComboSede.PKSelezionatoCombo) + ") ";
PerseoNET/frmPersonaleEsterno.cs:					str = "SELECT t_DocentiContratti.IDcontratto, FK_Docente, FK_Azienda, (CASE WHEN BloccoValutazione=0 THEN 1 WHEN (BloccoValutazione=1 AND ContrattoApprovato=0 AND Respinto=0) THEN 2 WHEN (BloccoValutazione=1 AND ContrattoApprovato=1 AND Respinto=0) THEN 3 ELSE 4 END) AS Stato, DescrParFiscale, DataInizioContratto, DataFineContratto, (0) AS NumIncarichi, (CASE WHEN RegolaAnnoSolare=1 THEN NumeroGiorniLavorativi ELSE NULL END) AS NumeroGiorniLavorativi, BloccoValutazione, ContrattoApprovato, Respinto, DescrAzienda, (CASE WHEN BloccoValutazione=0 THEN 'preparazione' WHEN (BloccoValutazione=1 AND ContrattoApprovato=0 AND Respinto=0) THEN 'da approvare' WHEN (BloccoValutazione=1 AND ContrattoApprovato=1 AND Respinto=0) THEN 'approvato' ELSE 'respinto' END) AS DescrStato FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda ORDER BY (CASE WHEN BloccoValutazione=0 THEN 1 WHEN (BloccoValutazione=1 AND ContrattoApprovato=0 AND Respinto=0) THEN 2 WHEN (BloccoValutazione=1 AND ContrattoApprovato=1 AND Respinto=0) THEN 3 ELSE 4 END), DataInizioContratto ";
PerseoNET/frmPersonaleEsterno.cs:						str = "SELECT t_DocentiContratti.IDcontratto, DataInizioContratto, DataFineContratto, BloccoValutazione, ContrattoApprovato, Respinto, RespintoCausale, LeggereNoteContratto, NoteContratto FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY t_DocentiContratti.IDcontratto, DataInizioContratto, DataFineContratto, BloccoValutazione, ContrattoApprovato, Respinto, RespintoCausale, LeggereNoteContratto, NoteContratto HAVING (DataInizioContratto>='" + text + "' AND DataInizioContratto<='" + text2 + "' AND Respinto=1 AND ContrattoApprovato=0) OR (DataInizioContratto>='" + text + "' AND DataInizioContratto<='" + text2 + "' AND LeggereNoteContratto=1 AND NoteContratto IS NOT NULL) ORDER BY t_DocentiContratti.IDcontratto ";
PerseoNET/frmPersonaleEsterno.cs:							str = "SELECT (t_DocentiContratti.IDcontratto) AS NumContratto, (Cognome + ' ' + Nome) AS Collaboratore, DataInizioContratto, DataAutorizzaPubblicaAmm, ProtAutorizzaPubblicaAmm, (DataUploadPAmm) AS DataSpedizioneSede FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE DataAutorizzaPubblicaAmm IS NOT NULL AND DataInizioContratto>=" + FunzStringa.StrDataSQL("20/04/2011", FlagSqlServer: true) + " AND DataUploadPAmm IS NOT NULL AND DataLetturaPAmm IS NULL AND ContrattoApprovato=1 ORDER BY DataUploadPAmm, (Cognome + ' ' + Nome) ";
PerseoNET/frmPersonaleEsterno.cs:				string origineDati = "SELECT IDdocente, IDincarico, (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, OreAssegnate, (FK_Contratto) AS IDcontratto, ApprovaIncarico, (SELECT BloccoValutazione FROM t_DocentiContratti WHERE IDcontratto=FK_Contratto) AS BloccoValutazione, DataInizioIncarico, DataFineIncarico, OreSvolgere FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE (FK_Tipo>2 AND " + text + " AND DataAvvio<'" + text2 + "' AND DataFine>='" + text2 + "' AND IncaricoGenericoGratuito=0 AND IncaricoBloccato=0) OR (FK_Tipo>2 AND " + text + " AND DataAvvio>='" + text2 + "' AND DataAvvio<='" + text3 + "' AND IncaricoGenericoGratuito=0 AND IncaricoBloccato=0) OR (FK_Tipo>2 AND " + text + " AND DataAvvio<'" + text2 + "' AND DataFineFA>='" + text2 + "' AND RegistrazioneEstesa=1 AND IncaricoGenericoGratuito=0 AND IncaricoBloccato=0) OR (FK_Tipo>2 AND " + text + " AND DataAvvio>'" + text3 + "' AND DataInizioFA<='" + text3 + "' AND RegistrazioneEstesa=1 AND IncaricoGenericoGratuito=0 AND IncaricoBloccato=0) ORDER BY IDdocente, IDincarico ";
PerseoNET/frmPersonaleEsterno.cs:				origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT IDdocente, IDincarico, Docente, CodFiscale, OreAssegnate, IDcontratto, ApprovaIncarico, BloccoValutazione, DataInizioIncarico, DataFineIncarico, OreSvolgere FROM t_IncarichiEdizione ");
PerseoNET/frmPersonaleEsterno.cs:				origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT IDdocente, IDincarico, Docente, CodFiscale, OreAssegnate, IDcontratto, ApprovaIncarico, BloccoValutazione, DataInizioIncarico, DataFineIncarico, OreSvolgere FROM t_IncarichiContrattiEdizioni ");
PerseoNET/frmPersonaleEsterno.cs:				string origineDati = "SELECT IDdocente, (Docente) AS StrDOC, CodFiscale, (0) AS NumPropo, (0) AS NumAttesa, (0) AS NumAppr, (0) AS NonCollegati FROM t_IncarichiEdizione GROUP BY IDdocente, Docente, CodFiscale ORDER BY Docente ";
PerseoNET/frmPersonaleEsterno.cs:				origineDati = "SELECT IDdocente, IDincarico, OreAssegnate, SUM(OreSvolgere) AS TotaleOreContratto FROM t_IncarichiEdizione GROUP BY IDdocente, IDincarico, OreAssegnate ORDER BY IDdocente, IDincarico, OreAssegnate ";
PerseoNET/frmPersonaleEsterno.cs:					strContrSede = "(SELECT COUNT(IDincacontra) FROM t_IncarichiEdizioniContratti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Contratto=IDcontratto AND FK_SedeEdizione=" + Conversions.ToString(ComboSede.PKSelezionatoCombo) + ") ";
PerseoNET/frmPersonaleEsterno.cs:					origineDati = "SELECT (FK_Docente) AS IDdocente, t_DocentiContratti.IDcontratto, FK_Azienda, (CASE WHEN BloccoValutazione=0 THEN 1 WHEN (BloccoValutazione=1 AND ContrattoApprovato=0 AND Respinto=0) THEN 2 WHEN (BloccoValutazione=1 AND ContrattoApprovato=1 AND Respinto=0) THEN 3 ELSE 4 END) AS Stato, DescrParFiscale, DataInizioContratto, DataFineContratto, (" + strContrSede + ") AS NumIncarichi, (CASE WHEN RegolaAnnoSolare=1 THEN NumeroGiorniLavorativi ELSE NULL END) AS NumeroGiorniLavorativi, BloccoValutazione, ContrattoApprovato, Respinto, DescrAzienda, (CASE WHEN BloccoValutazione=0 THEN 'preparazione' WHEN (BloccoValutazione=1 AND ContrattoApprovato=0 AND Respinto=0) THEN 'da approvare' WHEN (BloccoValutazione=1 AND ContrattoApprovato=1 AND Respinto=0) THEN 'approvato' ELSE 'respinto' END) AS DescrStato FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE DataInizioContratto>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioContratto<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND FK_Docente " + clsTblDatiDR.StringaFiltroIN("IDdocente") + " AND " + strContrSede + ">0 ORDER BY FK_Docente ";
PerseoNET/frmPersonaleEsterno.cs:				string origineDati = "SELECT IDdocente, IDincarico, Docente, CodFiscale, OreAssegnate, IDcontratto, ApprovaIncarico, BloccoValutazione, DataInizioIncarico, DataFineIncarico, OreSvolgere FROM t_IncarichiContrattiEdizioni ";
PerseoNET/frmPersonaleEsterno.cs:				origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT IDdocente, IDincarico, Docente, CodFiscale, OreAssegnate, IDcontratto, ApprovaIncarico, BloccoValutazione, DataInizioIncarico, DataFineIncarico, OreSvolgere FROM t_IncarichiEdizione ");
PerseoNET/frmPersonaleEsterno.cs:							strContrSede = "(SELECT COUNT(IDincacontra) FROM t_IncarichiEdizioniContratti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Contratto=IDcontratto AND FK_SedeEdizione=" + Conversions.ToString(ComboSede.PKSelezionatoCombo) + ") ";
PerseoNET/frmPersonaleEsterno.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_DocentiContratti.IDcontratto, FK_Docente, FK_Azienda, (CASE WHEN BloccoValutazione=0 THEN 1 WHEN (BloccoValutazione=1 AND ContrattoApprovato=0 AND Respinto=0) THEN 2 WHEN (BloccoValutazione=1 AND ContrattoApprovato=1 AND Respinto=0) THEN 3 ELSE 4 END) AS Stato, DescrParFiscale, DataInizioContratto, DataFineContratto, (" + strContrSede + ") AS NumIncarichi, (CASE WHEN RegolaAnnoSolare=1 THEN NumeroGiorniLavorativi ELSE NULL END) AS NumeroGiorniLavorativi, BloccoValutazione, ContrattoApprovato, Respinto, DescrAzienda, (CASE WHEN BloccoValutazione=0 THEN 'preparazione' WHEN (BloccoValutazione=1 AND ContrattoApprovato=0 AND Respinto=0) THEN 'da approvare' WHEN (BloccoValutazione=1 AND ContrattoApprovato=1 AND Respinto=0) THEN 'approvato' ELSE 'respinto' END) AS DescrStato FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE DataInizioContratto>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioContratto<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND FK_Docente=", tblDoc.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "), "AND "), strContrSede), ">0 "), "ORDER BY (CASE WHEN BloccoValutazione=0 THEN 1 WHEN (BloccoValutazione=1 AND ContrattoApprovato=0 AND Respinto=0) THEN 2 "), "WHEN (BloccoValutazione=1 AND ContrattoApprovato=1 AND Respinto=0) THEN 3 ELSE 4 END), DataInizioContratto DESC "));
PerseoNET/frmPersonaleEsterno.cs:				string origineDati = "SELECT t_DocentiContratti.IDcontratto, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS StrDest, DataInizioContratto, DataFineContratto, BloccoValutazione, ContrattoApprovato, Respinto, RespintoCausale, LeggereNoteContratto, NoteContratto FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY t_DocentiContratti.IDcontratto, Cognome, Nome, FK_Azienda, DescrAzienda, DataInizioContratto, DataFineContratto, ContrattoApprovato, BloccoValutazione, Respinto, RespintoCausale, LeggereNoteContratto, NoteContratto HAVING DataInizioContratto>='" + text + "' AND DataInizioContratto<='" + text2 + "' AND (RespintoCausale IS NOT NULL OR NoteContratto IS NOT NULL OR LeggereNoteContratto=1) ORDER BY t_DocentiContratti.IDcontratto ";
PerseoNET/frmPersonaleEsterno.cs:						string str = "SELECT t_Docenti.IDdocente, IDcontratto, IDincarico, (Cognome + ' ' + Nome) AS StrDOC, DescrAzienda, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE (CASE WHEN t_Aziende.PIVA IS NULL THEN t_Aziende.CodFiscale ELSE t_Aziende.PIVA END) END) AS StrFiscale, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.PIVA ELSE NULL END) AS StrPIVA, SiglaSede, CodiceEdizione, DescrEdizione, CodiceProgetto, IDmwp, DescrProgetto, IDmwa, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, (CASE WHEN DescrLetteraIncarico IS NOT NULL THEN DescrLetteraIncarico ELSE DescrIncarico END) AS DescrizioneIncarico, (CASE WHEN TipoAttivita='DOCENZA' THEN DescrArgomento ELSE NULL END) AS DescrizioneAttivita, OreSvolgere, QuotaOraIncarico, DataInizioIncarico, DataFineIncarico, DataProlungamento, BloccoValutazione, ContrattoApprovato, Respinto, DescrParFiscale, TipoDipendente, DescrPubblicaAmm, DataAutorizzaPubblicaAmm, ProtAutorizzaPubblicaAmm, (NULL) AS DescrDimesso, t_DocentiContrattiEsterni.DescrProfessione, t_Docenti.DescrDatoreLavoro, TipoFasciaDOC, FilePAmmPDF FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_TipoFasciaDocenteEsterno ON t_DocentiContrattiEsterni.FK_TipoFasciaContr = t_TipoFasciaDocenteEsterno.IDtfasciadoc LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda RIGHT OUTER JOIN t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento ";
PerseoNET/frmPersonaleEsterno.cs:							string origineDati = "SELECT IDdocente, (Cognome + ' ' + Nome) AS Collaboratore, CodFiscale, (NULL) AS Sedi, TipoDipendente, DescrProfessione, (NULL) AS DescrParFiscale, (0) AS OreAssegnate, (0) AS OreFatte, (NULL) AS OreResidue, (NULL) AS DataCompetenze, (0) AS TotaleOrePagate, (0) AS TotaleCostoPagate, (0) TotaleCostoNonPagate, (0) AS TotaleCostoAnno, ('" + cmbAnno.Text + "') AS Annualita FROM t_Docenti INNER JOIN t_TipoDipendenteDocEsterno ON t_Docenti.FK_TipoLavoroAttuale = t_TipoDipendenteDocEsterno.IDtestdipe INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Tipo=3 AND t_Docenti.Attivo=1 AND DataAvvio<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataFine>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DocenteTest=0 " + text4 + "GROUP BY IDdocente, Cognome, Nome, Sesso, CodFiscale, TipoDipendente, DescrProfessione " + text5 + "ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmPersonaleEsterno.cs:							origineDati = "SELECT FK_Docente, FK_IncaricoEdizione, FK_CodicePF, CodiceParFiscale, DescrParFiscale, QuotaOraIncarico FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE ContrattoApprovato=1 AND Respinto=0 AND QuotaOraIncarico>0 AND FK_Azienda IS NULL AND DataInizioIncarico>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataFineIncarico<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " GROUP BY FK_Docente, FK_IncaricoEdizione, FK_CodicePF, CodiceParFiscale, DescrParFiscale, QuotaOraIncarico HAVING FK_IncaricoEdizione " + clsTblDatiDR4.StringaFiltroIN("IDincarico") + " AND QuotaOraIncarico>0 ORDER BY FK_Docente, FK_IncaricoEdizione ";
PerseoNET/frmPersonaleEsterno.cs:										origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDdocente, FK_ParFiscaleAttuale FROM t_Docenti WHERE IDdocente=", clsTblDatiDR.get_Campo((object)"FK_Docente")));
PerseoNET/frmPersonaleEsterno.cs:									origineDati = "SELECT DescrParFiscale FROM t_DecodificatoreParametroFiscale WHERE IDparfisc IN(" + expression + ") ";
PerseoNET/frmPersonaleEsterno.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT DescrParFiscale FROM t_Docenti INNER JOIN t_DecodificatoreParametroFiscale ON FK_ParFiscaleAttuale=IDparfisc WHERE IDdocente=", clsTblDatiDR2.get_Campo((object)"IDdocente")));
PerseoNET/frmPersonaleEsterno.cs:							origineDati = "SELECT FK_Docente, FK_IncaricoEdizione, FK_CodicePF, CodiceParFiscale, DescrParFiscale, QuotaOraIncarico FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE ContrattoApprovato=1 AND Respinto=0 AND QuotaOraIncarico>0 AND FK_Azienda IS NULL AND DataInizioIncarico>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataFineIncarico<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " GROUP BY FK_Docente, FK_IncaricoEdizione, FK_CodicePF, CodiceParFiscale, DescrParFiscale, QuotaOraIncarico HAVING FK_IncaricoEdizione " + clsTblDatiDR4.StringaFiltroIN("IDincarico") + " AND QuotaOraIncarico>0 ORDER BY FK_Docente, FK_IncaricoEdizione ";
PerseoNET/frmPersonaleEsterno.cs:										origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDdocente, FK_ParFiscaleAttuale FROM t_Docenti WHERE IDdocente=", clsTblDatiDR.get_Campo((object)"FK_Docente")));
PerseoNET/frmPersonaleEsterno.cs:									origineDati = "SELECT DescrParFiscale FROM t_DecodificatoreParametroFiscale WHERE IDparfisc IN(" + expression + ") ";
PerseoNET/frmPersonaleEsterno.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT DescrParFiscale FROM t_Docenti INNER JOIN t_DecodificatoreParametroFiscale ON FK_ParFiscaleAttuale=IDparfisc WHERE IDdocente=", clsTblDatiDR2.get_Campo((object)"IDdocente")));
PerseoNET/frmPersonaleEsterno.cs:					string str = "SELECT t_Docenti.IDdocente, IDincarico, IDedizione, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Tipo=1 THEN 'Generico' WHEN FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS StrTipo, CodFiscale, SiglaSede, CodiceEdizione, DescrEdizione, CodiceProgetto, DescrProgetto, TipoFormativoInterno, DataAvvio, DataFine, DataInizioFA, DataFineFA, Durata, TipoAttivita, Aula, ContrattoAula, DescrArgomento, OreAssegnate, (CASE WHEN FK_Tipo<=2 THEN OreAssegnate ELSE (SELECT SUM(OreSvolgere) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico AND ApprovaIncarico=1) END) AS OreApprovate, (0) AS OreAssegnateAnno, (0) AS OreFatte, (0) AS OreFatte_" + text4 + ", (0) AS OreResidue, PagamentoIndividuale, IncaricoBloccato, IncaricoGenericoGratuito, DescrGratuito, DescrIncarico, PreDimissione, (0) AS OrePagate, (NULL) AS DataCompetenzePagate, (0) AS TotaleCostoPagato FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE (DataAvvio<='" + text3 + "' AND DataFine>='" + text2 + "' " + strFiltroDOC + text + ") OR (DataInizioFA<='" + text3 + "' AND DataFineFA>='" + text2 + "' " + strFiltroDOC + text + ") ";
PerseoNET/frmPersonaleEsterno.cs:					str = "SELECT IDincarico, (SUM(Minuti)/60) AS OreFatte FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE DataSvolgimento>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(text5, FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico " + text6 + " ";
PerseoNET/frmPersonaleEsterno.cs:					str = "SELECT IDincarico, (SUM(Minuti)/60) AS OreFatte FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE DataSvolgimento<" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico " + text6 + " ";
PerseoNET/frmPersonaleEsterno.cs:					str = "SELECT IDincarico, (SUM(Minuti)/60) AS OreFatte FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE DataSvolgimento>" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico " + text6 + " ";
PerseoNET/frmPersonaleEsterno.cs:					str = "SELECT IDincarico, SUM(TotOreFatte) AS OrePagate, MAX(DataPagatoFine) AS DataCompetenzePagate, SUM(sngTotale) AS TotaleCosto FROM t_ProgettiPagamentiCompensiOneri WHERE DataPagatoFine>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataPagatoFine<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico " + text6 + " ";
PerseoNET/frmPersonaleEsterno.cs:					string origineDati = "SELECT IDsede, SiglaSede, (SELECT COUNT(DISTINCT t_IncarichiEdizioniContratti.FK_Contratto) FROM t_IncarichiEdizioniContratti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE (t_IncarichiEdizioniContratti.DataRec>='" + value + "') AND FK_SedeEdizione = IDsede) AS NumeroContratti, (SELECT COUNT(DISTINCT t_IncarichiEdizioniContratti.FK_Contratto) FROM t_IncarichiEdizioniContratti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE (t_IncarichiEdizioniContratti.DataRec>='" + value + "') AND (DATEDIFF(d, t_IncarichiEdizioniContratti.DataInizioIncarico, t_IncarichiEdizioniContratti.DataRec) > 0) AND (DATEDIFF(d, t_IncarichiEdizioniContratti.DataInizioIncarico, t_IncarichiEdizioniContratti.DataRec) <= 7) AND FK_SedeEdizione = IDsede) AS Ritardo_1_7, (SELECT COUNT(DISTINCT t_IncarichiEdizioniContratti.FK_Contratto) FROM t_IncarichiEdizioniContratti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE (t_IncarichiEdizioniContratti.DataRec>='" + value + "') AND (DATEDIFF(d, t_IncarichiEdizioniContratti.DataInizioIncarico, t_IncarichiEdizioniContratti.DataRec) >= 8) AND (DATEDIFF(d, t_IncarichiEdizioniContratti.DataInizioIncarico, t_IncarichiEdizioniContratti.DataRec) <= 15) AND FK_SedeEdizione = IDsede) AS Ritardo_8_15, (SELECT COUNT(DISTINCT t_IncarichiEdizioniContratti.FK_Contratto) FROM t_IncarichiEdizioniContratti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE (t_IncarichiEdizioniContratti.DataRec>='" + value + "') AND (DATEDIFF(d, t_IncarichiEdizioniContratti.DataInizioIncarico,  t_IncarichiEdizioniContratti.DataRec) >= 16) AND (DATEDIFF(d, t_IncarichiEdizioniContratti.DataInizioIncarico, t_IncarichiEdizioniContratti.DataRec) <= 30) AND FK_SedeEdizione = IDsede) AS Ritardo_16_30, (SELECT COUNT(DISTINCT t_IncarichiEdizioniContratti.FK_Contratto) FROM t_IncarichiEdizioniContratti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE (t_IncarichiEdizioniContratti.DataRec>='" + value + "') AND (DATEDIFF(d, t_IncarichiEdizioniContratti.DataInizioIncarico, t_IncarichiEdizioniContratti.DataRec) > 30) AND FK_SedeEdizione = IDsede) AS Ritardo_Oltre FROM t_Sedi WHERE FK_TipoSede>=3 AND SedeTest=0 AND t_Sedi.Attiva=1 AND SiglaSede NOT IN('BRESCIA','SEDE EST - SCUOLE CIVICHE MILANO') ORDER BY SiglaSede ";
PerseoNET/frmDettSettoreProfessioniRL.cs:				string origineDati = "SELECT IDconoabi, FK_Competenza, IndCA, DescrConoAbi, Tipo, ConoAbilitaAttiva, DataRec, DataModifica FROM t_ProfessioniConoAbiRL WHERE IDconoabi=" + Conversions.ToString(vID);
PerseoNET/frmDettSettoreProfessioniRL.cs:				string origineDati = "SELECT IDcompestd, FK_Professione, IndCompe, DescrCompetenza, LivelloEQF, CompetenzaAttiva, DataRec, DataModifica FROM t_ProfessioniCompetenzeRL WHERE IDcompestd=" + Conversions.ToString(vID);
PerseoNET/frmDettSettoreProfessioniRL.cs:				string origineDati = "SELECT IDprofessionerl, FK_TipoSettProfessionale, IndProf, DescrProfessione, DescrVersioneProfessione, ProfessioneISTAT, AttivitaEconomicaISTAT, ProfessioneISCO, DescrProfilo, DescrContesto, Attiva FROM t_ProfessioniStandardRL WHERE IDprofessionerl=" + Conversions.ToString(vID);
PerseoNET/frmDettSettoreProfessioniRL.cs:				string origineDati = "SELECT IDtsettprof, FK_TipoRepertorio, IndSett, DescrSettoreProfessione, CodiceSettoreProf, Attivo, DataRec, DataModifica, Bloccato FROM t_ProfessioniSettoriStandardRL WHERE IDtsettprof=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettSettoreProfessioniRL.cs:				origineDati = "SELECT t_ProfessioniStandardRL.IDprofessionerl, FK_TipoSettProfessionale, IndProf, DescrProfessione, DataVersioneProfessione, Attiva FROM t_ProfessioniStandardRL WHERE FK_TipoSettProfessionale=" + Conversions.ToString(VariabiliClassi.IDform) + " ORDER BY IndProf, DescrProfessione ";
PerseoNET/frmDettSettoreProfessioniRL.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProfessioniCompetenzeRL.IDcompestd, FK_Professione, IndCompe, DescrCompetenza, CompetenzaAttiva FROM t_ProfessioniCompetenzeRL WHERE FK_Professione=", tblProf.get_Campo((object)0, vFlagUpdateDB: false)), " ORDER BY  IndCompe, DescrCompetenza "));
PerseoNET/frmDettSettoreProfessioniRL.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProfessioniConoAbiRL.IDconoabi, FK_Competenza, (CASE WHEN Tipo='C' THEN 'conoscenza' ELSE 'abilitÃ ' END) AS TipoConoAbi, Tipo, IndCA, DescrConoAbi, ConoAbilitaAttiva FROM t_ProfessioniConoAbiRL WHERE FK_Competenza=", tblComp.get_Campo((object)0, vFlagUpdateDB: false)), " ORDER BY Tipo DESC, IndCA "));
PerseoNET/frmDettSettoreProfessioniRL.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcompestd, FK_Professione, IndCompe, DescrCompetenza, CompetenzaAttiva FROM t_ProfessioniCompetenzeRL WHERE FK_Professione=", tblProf.get_Campo((object)0, vFlagUpdateDB: false)), " ORDER BY  IndCompe, DescrCompetenza "));
PerseoNET/frmDettSettoreProfessioniRL.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProfessioniConoAbiRL.IDconoabi, FK_Competenza, (CASE WHEN Tipo='C' THEN 'conoscenza' ELSE 'abilitÃ ' END) AS TipoConoAbi, Tipo, IndCA, DescrConoAbi, ConoAbilitaAttiva FROM t_ProfessioniConoAbiRL WHERE FK_Competenza=", tblComp.get_Campo((object)0, vFlagUpdateDB: false)), " ORDER BY Tipo DESC, IndCA "));
PerseoNET/frmDettSettoreProfessioniRL.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcompestd, FK_Professione, IndCompe, DescrCompetenza, CompetenzaAttiva FROM t_ProfessioniCompetenzeRL WHERE FK_Professione=", tblProf.get_Campo((object)0, vFlagUpdateDB: false)), " ORDER BY  IndCompe, DescrCompetenza "));
PerseoNET/frmDettSettoreProfessioniRL.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProfessioniConoAbiRL.IDconoabi, FK_Competenza, (CASE WHEN Tipo='C' THEN 'conoscenza' ELSE 'abilitÃ ' END) AS TipoConoAbi, Tipo, IndCA, DescrConoAbi, ConoAbilitaAttiva FROM t_ProfessioniConoAbiRL WHERE FK_Competenza=", tblComp.get_Campo((object)0, vFlagUpdateDB: false)), " ORDER BY Tipo DESC, IndCA "));
PerseoNET/frmDettSettoreProfessioniRL.cs:													string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDcompestd, DescrCompetenza FROM t_ProfessioniCompetenzeRL WHERE DescrCompetenza='" + FunzStringa.StringaSQL(txtDescrCompetenza.Text) + "' AND FK_Professione=", tblProf.get_Campo((object)"IDprofessionerl", vFlagUpdateDB: false)));
PerseoNET/frmDettSettoreProfessioniRL.cs:												string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDcompestd, DescrCompetenza FROM t_ProfessioniCompetenzeRL WHERE FK_Professione=", tblProf.get_Campo((object)"IDprofessionerl", vFlagUpdateDB: false)));
PerseoNET/frmDettAzienda.cs:					VariabiliClassi.Vedetta.ControlloMancanzaProtezioneRecord("SELECT IDazienda, Bloccato FROM t_Aziende WHERE IDazienda=" + Conversions.ToString(FormAz.ChiavePrimaria));
PerseoNET/frmDettAzienda.cs:				string origineDati = "SELECT IDazienda, DescrAzienda, FK_SettoreProd,  FK_TipoForma, PIVA, CodFiscale, URLAzienda, EmailAzienda, FK_ParFiscaleAttuale, FK_TipoDimensione, FK_TipoAssociazioneImpre, FK_TipoFondoIP, CodiceIscrCCIAA, ComuneCCIAA, DataIscrCCIAA, DescrCCNL, Fornitore, CodiceATECO, AnnoPresenzaRegione, FileSchedaAziendaPDF, NoteContatto, Attiva, AltroSettore, FatturaElettronicaCD, AziendaTest, DataRec, DataModifica, Bloccato FROM t_Aziende WHERE IDazienda=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettAzienda.cs:				origineDati = "SELECT IDtsetprod, TipoSettoreProd FROM t_TipoSettoreProduttivo WHERE Obsoleto=False ORDER BY OrdArea, OrdSett ";
PerseoNET/frmDettAzienda.cs:				origineDati = "SELECT IDparfisc, ('(' + CodiceParFiscale + ') ' + DescrParFiscale) AS StrCodice FROM t_DecodificatoreParametroFiscale WHERE Attivo=True AND PF_Azienda=True ORDER BY TipoContratto, CodiceParFiscale";
PerseoNET/frmDettAzienda.cs:				origineDati = "SELECT IDtformag, IIf(VerificaDelegaFormazione=False, TipoFormaGiuridica & ' [*]', TipoFormaGiuridica) AS StrFormaGiuridica FROM t_TipoFormaGiuridica WHERE Obsoleto=False ORDER BY IndTFG, TipoFormaGiuridica ";
PerseoNET/frmDettAzienda.cs:				origineDati = "SELECT IDtdimaz, TipoDimensione FROM t_TipoDimensioneAzienda WHERE Obsoleto=0 ORDER BY IndDZ ";
PerseoNET/frmDettAzienda.cs:				origineDati = "SELECT IDtassimpre, TipoAssociazioneImprenditoriale FROM t_TipoAssociazioneImprenditoriale WHERE Obsoleto=0 ORDER BY TipoAssociazioneImprenditoriale ";
PerseoNET/frmDettAzienda.cs:				origineDati = "SELECT IDtfondoprof, DescrFondoInterprof FROM t_TipoFondoInterprofessionale WHERE Obsoleto=0 ORDER BY Settore, DescrFondoInterprof ";
PerseoNET/frmDettAzienda.cs:				origineDati = "SELECT t_SediAziende.IDsedeaz, FK_Azienda, FK_TipoSede, TipoSedeAzienda, IndirSedeAz, ComSedeAz, ProvSedeAz, (CASE WHEN (TelSedeAz_1 IS NOT NULL AND TelSedeAz_2 IS NULL) THEN TelSedeAz_1 WHEN (TelSedeAz_1 IS NULL AND TelSedeAz_2 IS NOT NULL) THEN TelSedeAz_2 WHEN (TelSedeAz_1 IS NOT NULL AND TelSedeAz_2 IS NOT NULL) THEN (TelSedeAz_1 + CHAR(10) + TelSedeAz_2) ELSE NULL END) AS Telefoni, FaxSedeAz, EmailSedeAz, Attiva FROM t_SediAziende INNER JOIN t_TipoSedeAzienda ON t_SediAziende.FK_TipoSede = t_TipoSedeAzienda.IDtsedeaz WHERE FK_Azienda=" + Conversions.ToString(FormAz.ChiavePrimaria) + " ";
PerseoNET/frmDettAzienda.cs:				string origineDati = "SELECT IDreferaz, FK_SedeAzienda, FK_RuoloAz, FK_TipoPosizioneTutor, Cognome, Nome, DataNascita, LuogoNascita, ProvNascita, NazNascita, TelRef_1, TelRef_2, FaxRefAz, EmailRefAz, RapprLegale, ResponsabileSede, TutorStage, TutorApprendista, CF_RapprLegale, DescrEsperienzaProf, AnniEsperienzaProf, ReferenteAmministrativo, LivelloTitoloStudio, Attivo, DataRec, DataModifica FROM t_ReferentiAziende WHERE IDreferaz=" + Conversions.ToString(vID);
PerseoNET/frmDettAzienda.cs:				origineDati = "SELECT IDtruoloaz, TipoRuoloAz FROM t_TipoRuoloAziendale WHERE Obsoleto=False ORDER BY IndTRA, TipoRuoloAz ";
PerseoNET/frmDettAzienda.cs:				origineDati = "SELECT IDsedeaz, IIf(FK_TipoSede=1,(ComSedeAz & ' ' & IndirSedeAz & ' (*)'),(ComSedeAz + ' ' + IndirSedeAz)) AS SedeLav FROM t_SediAziende WHERE Attiva=True AND IDazienda=" + Conversions.ToString(FormAz.ChiavePrimaria) + " ORDER BY FK_TipoSede, (ComSedeAz + ' ' + IndirSedeAz) ";
PerseoNET/frmDettAzienda.cs:				origineDati = "SELECT IDttutoraz, TipoPosizioneTutorAzienda FROM t_TipoPosizioneTutorAzienda WHERE Obsoleto=False ORDER BY IndTPTA ";
PerseoNET/frmDettAzienda.cs:					text = "SELECT IDtformag, TipoFormaGiuridica, SiglaTFG, IndTFG, VerificaDelegaFormazione, SenzaPIVA, PIVAEstero, Obsoleto FROM t_TipoFormaGiuridica ORDER BY IndTFG, TipoFormaGiuridica ";
PerseoNET/frmDettAzienda.cs:					text = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, SenzaPIVA, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", FormAz.get_ValoreSelezioneCombo(cmbFK_TipoForma)));
PerseoNET/frmDettAzienda.cs:					text = ((FormAz.ChiavePrimaria <= 0) ? ("SELECT IDazienda, DescrAzienda FROM t_Aziende WHERE PIVA='" + FunzStringa.StringaSQL(txtPIVA.Text) + "' OR CodFiscale='" + txtPIVA.Text + "' ") : ("SELECT IDazienda, DescrAzienda FROM t_Aziende WHERE (PIVA='" + FunzStringa.StringaSQL(txtPIVA.Text) + "' AND IDazienda<>" + Conversions.ToString(FormAz.ChiavePrimaria) + ") OR (CodFiscale='" + txtPIVA.Text + "' AND IDazienda<>" + Conversions.ToString(FormAz.ChiavePrimaria) + ") "));
PerseoNET/frmDettAzienda.cs:				text = ((FormAz.ChiavePrimaria <= 0) ? ("SELECT IDazienda, DescrAzienda FROM t_Aziende WHERE PIVA='" + FunzStringa.StringaSQL(this.txtCodFiscale.Text) + "' OR CodFiscale='" + FunzStringa.StringaSQL(this.txtCodFiscale.Text) + "' ") : ("SELECT IDazienda, DescrAzienda FROM t_Aziende WHERE (PIVA='" + FunzStringa.StringaSQL(this.txtCodFiscale.Text) + "' AND IDazienda<>" + Conversions.ToString(FormAz.ChiavePrimaria) + ") OR (CodFiscale='" + FunzStringa.StringaSQL(this.txtCodFiscale.Text) + "' AND IDazienda<>" + Conversions.ToString(FormAz.ChiavePrimaria) + ") "));
PerseoNET/frmDettAzienda.cs:								string origineDati = "SELECT t_ReferentiAziende.IDreferaz, ComSedeAz, (Cognome + ' ' + Nome) AS Referente, RapprLegale, ResponsabileSede, TutorStage, ReferenteAmministrativo, TipoRuoloAz, (CASE WHEN (TelRef_1 IS NOT NULL AND TelRef_2 IS NULL) THEN TelRef_1 WHEN (TelRef_1 IS NULL AND TelRef_2 IS NOT NULL) THEN TelRef_2 WHEN (TelRef_1 IS NOT NULL AND TelRef_2 IS NOT NULL) THEN (TelRef_1 + CHAR(10) + TelRef_2) ELSE NULL END) AS Telefoni, FaxRefAz, EmailRefAz, Attiva, Attivo, Cognome, Nome, CF_RapprLegale FROM t_ReferentiAziende INNER JOIN t_SediAziende ON t_ReferentiAziende.FK_SedeAzienda = t_SediAziende.IDsedeaz LEFT OUTER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz WHERE FK_Azienda=" + Conversions.ToString(FormAz.ChiavePrimaria) + " ";
PerseoNET/frmDettAzienda.cs:								string origineDati = "SELECT t_AziendeSediFormativeConvenzioni.IDconvazienda, IDsede, FK_TipoConvenzione, SiglaSede, (IDconvazienda) AS ConvenzioneAzienda, DataConvenzione, DataScadenza, DataAutorizzazioneEE, (CASE WHEN t_TipoConvenzioneStage.Obsoleto=1 THEN (TipoConvenzione + ' {*}') ELSE TipoConvenzione END) AS TipoConvenzione, t_AziendeSediFormativeConvenzioni.ResidenteEstero, NazioneStudenteEstero, NumeroStudentiPrevisti, (SELECT COUNT(DISTINCT FK_Utente) FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione GROUP BY FK_ConvenzioneAzienda HAVING FK_ConvenzioneAzienda=t_AziendeSediFormativeConvenzioni.IDconvazienda) AS NumeroStudenti, ConvenzioneAttiva, FK_TipoLogo FROM t_AziendeSediFormativeConvenzioni INNER JOIN t_Sedi ON t_AziendeSediFormativeConvenzioni.FK_SedeFormativa = t_Sedi.IDsede INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione ";
PerseoNET/frmDettAzienda.cs:								origineDati = "SELECT t_ConvenzioniStage.IDconvenzione, IDiscrizione, IDutente, IDedizione, ComSedeAz, ProvSedeAz, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, ID_Dote, DescrEdizione, CodiceEdizione, TipoFormativoInterno, (CASE WHEN FK_Anno IS NOT NULL THEN (CAST(FK_Anno AS VARCHAR) + 'Â°') ELSE NULL END) AS Anno, t_ConvenzioniStage.DataAvvio, t_ConvenzioniStage.DataFine, DataInterruzione, DataProlungamento, (CASE WHEN DataInterruzione IS NULL THEN DurataStage ELSE VariazioneDurataStage END) AS OreStage, (t_ReferentiAziende.Cognome + ' ' + t_ReferentiAziende.Nome) AS TutorAzienda, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS Tutor FROM t_ConvenzioniStage INNER JOIN t_SediAziende ON t_ConvenzioniStage.FK_SedeStage = t_SediAziende.IDsedeaz INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_ReferentiAziende ON t_ConvenzioniStage.FK_TutorAzienda = t_ReferentiAziende.IDreferaz INNER JOIN t_Docenti ON t_ConvenzioniStage.FK_Tutor = t_Docenti.IDdocente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud ";
PerseoNET/frmDettAzienda.cs:								origineDati = "SELECT IDtlogoregstage, TipoLogoRegistroStage FROM t_TipoLogoRegistroStage WHERE Obsoleto=0 ORDER BY IndLogo, TipoLogoRegistroStage ";
PerseoNET/frmDettAzienda.cs:									string origineDati = "SELECT t_InteressiFormativi.IDintform, DescrInteresse, TipoSettoreInt, TipoFormativoInterno, TipoCertificazione, LivelloFormazione, DataModifica FROM t_InteressiFormativi LEFT OUTER JOIN t_TipoCertificazione ON t_InteressiFormativi.FK_TipoCertificazione = t_TipoCertificazione.IDtcertificazione LEFT OUTER JOIN t_TipoFormativoInterno ON t_InteressiFormativi.FK_TipoFormativo = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_TipoSettoreInterno ON t_InteressiFormativi.FK_SettoreInterno = t_TipoSettoreInterno.IDtsettin WHERE FK_Azienda=" + Conversions.ToString(FormAz.ChiavePrimaria) + " ORDER BY DataModifica";
PerseoNET/frmDettAzienda.cs:									string origineDati = "SELECT t_InteressiLavorativi.IDilav, DescrMansione, TipoSettoreProd, TipoContratto, DispStage, Formazione, NumeroAssunzioni, t_InteressiLavorativi.DataModifica FROM t_InteressiLavorativi INNER JOIN t_TipoSettoreProduttivo ON t_InteressiLavorativi.FK_SettoreProduttivo = t_TipoSettoreProduttivo.IDtsetprod LEFT OUTER JOIN t_TipoDistanzaLav ON t_InteressiLavorativi.FK_Distanza = t_TipoDistanzaLav.IDtdist LEFT OUTER JOIN t_TipoContratto ON t_InteressiLavorativi.FK_TipoContratto = t_TipoContratto.IDcontr WHERE FK_Azienda=" + Conversions.ToString(FormAz.ChiavePrimaria) + " ORDER BY DataModifica ";
PerseoNET/frmDettAzienda.cs:									string origineDati = "SELECT IDincarico, IDdocente, (Cognome + ' ' + Nome) AS Collaboratore, SiglaSede, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, TipoAttivita, DescrBreveArgomento, OreAssegnate, SUM(OreSvolgere) AS OreApprovate, (NULL) AS DataDal, (NULL) AS DataAl, (0) AS OreFatte, (0) AS OrePagate FROM t_Aziende INNER JOIN t_DocentiContrattiEsterni ON t_Aziende.IDazienda = t_DocentiContrattiEsterni.FK_Azienda INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDazienda=" + Conversions.ToString(FormAz.ChiavePrimaria) + " GROUP BY IDincarico, IDdocente, Cognome, Nome, SiglaSede, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, OreAssegnate, TipoAttivita, DescrBreveArgomento, DescrArgomento ORDER BY YEAR(DataFine) DESC, SiglaSede, (Cognome + ' ' + Nome), DataAvvio ";
PerseoNET/frmDettAzienda.cs:									origineDati = "SELECT IDincarico, MIN(DataSvolgimento) AS SvolteDal, MAX(DataSvolgimento) AS SvolteAl, SUM(Minuti) AS OreFatteInc FROM v_DettaglioOreSvoltePerIncarico GROUP BY IDincarico HAVING IDincarico " + tblContratti.StringaFiltroIN("IDincarico") + " ";
PerseoNET/frmDettAzienda.cs:									origineDati = "SELECT IDincarico, SUM(TotOreFatte) AS OrePagate FROM t_ProgettiPagamentiCompensiOneri GROUP BY IDincarico HAVING IDincarico " + tblContratti.StringaFiltroIN("IDincarico") + " ";
PerseoNET/frmDettAzienda.cs:				string text2 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_SedeAzienda, Cognome, Nome FROM t_ReferentiAziende WHERE FK_SedeAzienda=", FormRef.get_ValoreSelezioneCombo(cmbFK_SedeAzienda)), " "), "AND Cognome='"), FunzStringa.StringaSQL(txtCognome.Text)), "' AND Nome='"), FunzStringa.StringaSQL(txtNome.Text)), "' "), "AND FK_RuoloAz="), FormRef.get_ValoreSelezioneCombo(cmbFK_RuoloAz)), " "));
PerseoNET/frmDettAzienda.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT Curriculare, CurriculareDDIF, ExtraCurriculare, ResidenteEstero FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", tblConv.get_Campo((object)"FK_TipoConvenzione", vFlagUpdateDB: false)));
PerseoNET/frmDettAzienda.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDprogetto, FK_TipoLogoRegistroStage FROM t_progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione WHERE IDedizione=", tblStage.get_Campo((object)"IDedizione", vFlagUpdateDB: false)));
PerseoNET/frmAssenzeEdizione.cs:					string origineDati = "SELECT t_IscrittiEdizione.IDiscrizione, t_IscrittiEdizione.PosRegistro, t_IscrittiEdizione.Studente, SUM(Minuti) AS TotaleGiorno FROM t_AssenzeEdizione INNER JOIN t_IscrittiEdizione ON t_AssenzeEdizione.IDiscrizione = t_IscrittiEdizione.IDiscrizione GROUP BY t_IscrittiEdizione.IDiscrizione, t_IscrittiEdizione.PosRegistro, t_IscrittiEdizione.Studente ";
PerseoNET/frmAssenzeEdizione.cs:					origineDati = "SELECT IDcalatt, t_IscrittiEdizione.IDiscrizione, t_IscrittiEdizione.PosRegistro, IDargomento, Studente, DataAttivita, OraInizio, OraFine, Minuti, Giustificata FROM t_AssenzeEdizione INNER JOIN t_IscrittiEdizione ON t_AssenzeEdizione.IDiscrizione = t_IscrittiEdizione.IDiscrizione ";
PerseoNET/frmAssenzeEdizione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, IDutente, DoteChiusa, PosRegistro, Studente, DataIscr, DataRitiro, Uditore, Sostegno, (0) AS Assente FROM t_IscrittiEdizione WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "ORDER BY PosRegistro, Studente "));
PerseoNET/frmAssenzeEdizione.cs:					origineDati = "SELECT t_IscrizioniSostegno.IDsostegnoiscr, (t_IscrizioniSostegno.FK_Iscrizione) AS Idiscrizione, IDcalatt, DataAttivita, OraInizio, OraFine FROM t_IscrizioniSostegno INNER JOIN t_CalendarioCodocenza ON t_IscrizioniSostegno.FK_SostegnoAula = t_CalendarioCodocenza.IDcalcod INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE t_IscrizioniSostegno.FK_Iscrizione " + Variabili.Edizione.StrFiltroIN_PKIscritti + " ORDER BY t_IscrizioniSostegno.FK_Iscrizione, DataAttivita, OraInizio ";
PerseoNET/frmAssenzeEdizione.cs:					origineDati = "SELECT t_CalendarioAttivita.IDcalatt, (NULL) AS TipoAttivita, (NULL) AS TipoArgomento, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, (1) AS Assente FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi ";
PerseoNET/frmAssenzeEdizione.cs:				text = "SELECT t_IscrittiEdizione.IDiscrizione, t_IscrittiEdizione.PosRegistro, Studente, SUM(Minuti) AS TotaleGiorno FROM t_AssenzeEdizione INNER JOIN t_IscrittiEdizione ON t_AssenzeEdizione.IDiscrizione = t_IscrittiEdizione.IDiscrizione ";
PerseoNET/frmAssenzeEdizione.cs:					origineDati = "SELECT FK_Iscrizione,  MAX(DataAssenza) AS UltimaData FROM t_AssenzeAttivita GROUP BY FK_Iscrizione HAVING FK_Iscrizione " + Variabili.Edizione.StrFiltroIN_PKIscritti + " ORDER BY MAX(DataAssenza) ";
PerseoNET/frmAssenzeEdizione.cs:					origineDati = "SELECT (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, IDiscrizione, PosRegistro, (Cognome + ' ' + Nome) AS Studente, DataAttivita, OraInizio, OraFine, Minuti, Giustificata, (CASE WHEN FK_Argomento IS NULL THEN 1 ELSE 0 END) AS LarsaExtra, (NULL) AS Esito FROM xt_AssenzeAttivita INNER JOIN xt_CalendarioAttivita ON xt_AssenzeAttivita.FK_Attivita = xt_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni ON xt_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN  t_Iscrizioni ON xt_AssenzeAttivita.FK_Iscrizione=t_Iscrizioni.IDiscrizione INNER JOIN  t_Utenti ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente WHERE IDiscrizione " + Variabili.Edizione.StrFiltroIN_PKIscritti + " AND DataAttivita>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " ORDER BY IDiscrizione, DataAttivita, OraInizio ";
PerseoNET/frmAssenzeEdizione.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT  t_CalendarioAttivita.IDcalatt, DataAttivita, OraInizio, OraFine FROM  t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Argomento IS NOT NULL AND FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY DataAttivita, OraInizio "));
PerseoNET/frmAssenzeEdizione.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, (FK_Attivita) AS IDcalatt, DataIscr, DataRitiro, DataAssenza, IDassenza FROM t_Iscrizioni INNER JOIN t_AssenzeAttivita ON t_Iscrizioni.IDiscrizione = t_AssenzeAttivita.FK_Iscrizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " "), "ORDER BY FK_Attivita, IDiscrizione "));
PerseoNET/frmAssenzeEdizione.cs:								origineDati = "SELECT IDiscrizione, DataAttivita, OraInizio, OraFine, Minuti, Giustificata, LarsaExtra, Esito FROM zt_StoricoImportazioneRegistro ";
PerseoNET/frmTblRifAttivitaEdizioni.cs:				string origineDati = "SELECT IDtattivita, IndTG, IndTA, TipoGruppo, TipoCategoria, IndCatRisorsa, TipoCategoriaRisorsa, TipoAttivita, MonteOreEdizione, Aula, Primaria, Secondaria, VincoloOrario, FAD, PresenzaOFA, PresenzaINAIL, ContrattoAula, RegistrazioneEstesa, AttivitaPIP, IscrittiSostegno, CompensoUnico, MaxStudenti, Obsoleto FROM t_TipoAttivitaEdizione ORDER BY IndTG, Obsoleto, IndTA, TipoAttivita ";
PerseoNET/frmTblRifAttivitaEdizioni.cs:				string origineDati = "SELECT IDtattivita, IndTA, IndTG, IndTCat, TipoGruppo, TipoCategoria, TipoCategoriaRisorsa, TipoAttivita, MaxStudenti, MaxCambioCompenso, Aula, Primaria, Secondaria, MonteOreEdizione, VincoloOrario, PresenzaOFA, PresenzaINAIL, ContrattoAula, RegistrazioneEstesa, AttivitaPIP, IscrittiSostegno, CompensoUnico, IndCatRisorsa, Obsoleto FROM t_TipoAttivitaEdizione WHERE IDtattivita=" + Conversions.ToString(vID) + " ";
PerseoNET/frmTblRifAttivitaEdizioni.cs:					string vSQL = "SELECT TipoAttivita FROM t_TipoAttivitaEdizione WHERE TipoAttivita='" + FunzStringa.StringaSQL(txtTipoAttivita.Text) + "' AND IDtattivita<>" + Conversions.ToString(FormAtt.ChiavePrimaria) + " ";
PerseoNET/frmDettRigaTblRiferimento.cs:							i = Strings.InStr(i, text2, ", (SELECT ", CompareMethod.Text);
PerseoNET/clsNonDisponibili.cs:				string origineDati = "SELECT IDlocale, CodiceLocale, DescrPrenotazione, DescrCliente, (CASE WHEN Formazione=1 THEN 'Formazioni' ELSE 'Affitto' END) AS Tipo, DataDAL, DataAL, Dalle, Alle, Lun, Mar, Mer, Gio, Ven, Sab, Dom FROM t_Locali INNER JOIN t_LocaliPrenotazioni ON IDlocale = FK_Locale) INNER JOIN t_LocaliPrenotazioniDate ON IDprenoloc = t_LocaliPrenotazioniDate.FK_PrenoLocale WHERE DataAL>=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " ORDER BY CodiceLocale, DataDAL, Dalle ";
PerseoNET/clsNonDisponibili.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocente FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY IDdocente "));
PerseoNET/clsNonDisponibili.cs:					vSQL = "SELECT IDdocente FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_SedeEdizione " + Variabili.FiltroSediAttive + " GROUP BY IDdocente ";
PerseoNET/clsNonDisponibili.cs:				vSQL = "SELECT t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS StrDOC, TipoCausaNonDispo, DescrCausale, DataDAL, DataAL, Dalle, Alle, Lun, Mar, Mer, Gio, Ven, Sab, Dom FROM t_DocentiPeriodiIndisponibili INNER JOIN t_Docenti ON t_DocentiPeriodiIndisponibili.FK_Docente = t_Docenti.IDdocente INNER JOIN t_TipoCausaNonDisponibile ON t_DocentiPeriodiIndisponibili.FK_TipoCausaNonDispo = t_TipoCausaNonDisponibile.IDtnondispo WHERE DataDAL<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND DataAL>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND IDdocente " + text + " ORDER BY (Cognome + ' ' + Nome), DataDAL, DataAL ";
PerseoNET/clsNonDisponibili.cs:							string origineDati = "SELECT IDloced, IDlocale, IDedizione FROM t_LocaliEdizioni WHERE IDedizione=" + Conversions.ToString(mvIDedizione) + " AND Fittizio=False ";
PerseoNET/clsNonDisponibili.cs:								string origineDati = "SELECT IDloced, IDlocale, IDedizione FROM t_LocaliEdizioni WHERE IDedizione=" + Conversions.ToString(mvIDedizione) + " AND Fittizio=False ";
PerseoNET/clsNonDisponibili.cs:				string origineDati = "SELECT IDnondispo, (t_DocentiPeriodiIndisponibili.FK_Docente) AS IDdocente, FK_TipoCausaNonDispo, TipoCausaNonDispo, DescrCausale, DataDAL, DataAL, Dalle, Alle, Lun, Mar, Mer, Gio, Ven, Sab, Dom FROM t_IncarichiEdizioni INNER JOIN t_DocentiPeriodiIndisponibili ON t_IncarichiEdizioni.FK_Docente = t_DocentiPeriodiIndisponibili.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_TipoCausaNonDisponibile ON t_DocentiPeriodiIndisponibili.FK_TipoCausaNonDispo = t_TipoCausaNonDisponibile.IDtnondispo WHERE FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY IDnondispo, t_DocentiPeriodiIndisponibili.FK_Docente, FK_TipoCausaNonDispo, TipoCausaNonDispo, DescrCausale, DataDAL, DataAL, Dalle, t_DocentiPeriodiIndisponibili.Alle, t_DocentiPeriodiIndisponibili.Lun, t_DocentiPeriodiIndisponibili.Mar, t_DocentiPeriodiIndisponibili.Mer, t_DocentiPeriodiIndisponibili.Gio, t_DocentiPeriodiIndisponibili.Ven, t_DocentiPeriodiIndisponibili.Sab , t_DocentiPeriodiIndisponibili.Dom HAVING DataAL>=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " ORDER BY t_DocentiPeriodiIndisponibili.FK_Docente, DataDal, Dalle ";
PerseoNET/clsNonDisponibili.cs:				string origineDati = "SELECT IDlocale, CodiceLocale, DescrPrenotazione, (CASE WHEN Formazione=1 THEN 'Formazioni' ELSE 'Affitto' END) AS Tipo, DataDAL, DataAL, Dalle, Alle, Lun, Mar, Mer, Gio, Ven, Sab, Dom FROM (t_Locali INNER JOIN t_LocaliPrenotazioni ON t_Locali.IDlocale = t_LocaliPrenotazioni.FK_Locale) INNER JOIN t_LocaliPrenotazioniDate ON t_LocaliPrenotazioni.IDprenoloc = t_LocaliPrenotazioniDate.FK_PrenoLocale WHERE DataAL>=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " ORDER BY CodiceLocale, DataDAL, Dalle ";
PerseoNET/frmRichiestaPagamenti.cs:				string str = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " ";
PerseoNET/frmRichiestaPagamenti.cs:				str = "SELECT IDtprogetto, TipoProgetto FROM t_TipoProgetto ORDER BY TipoProgetto ";
PerseoNET/frmRichiestaPagamenti.cs:				str = "SELECT t_Progetti.IDprogetto, SiglaSede, DescrProgetto, IDmwp, CodiceProgetto, TipoProgetto, DataAvvioProg, DataFineProg, DescrBando, CodiceBando, (SELECT COUNT(IDedizione) FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione WHERE FK_SedeEdizione " + Variabili.FiltroSedi + " AND FK_Progetto=IDprogetto) AS NumEdizioni, (SELECT COUNT(IDprogpagamento) FROM t_ProgettiPagamenti WHERE FK_Progetto=IDprogetto AND DataPagamento IS NULL) AS NumeroAttesa, (SELECT COUNT(IDprogpagamento) FROM t_ProgettiPagamenti WHERE FK_Progetto=IDprogetto AND DataPagamento IS NOT NULL) AS NumeroPagate, (SELECT MAX(DataRichiestaFine) FROM t_ProgettiPagamenti WHERE FK_Progetto=IDprogetto AND DataPagamento IS NOT NULL) AS UltimoPag, PeriodoPagaLibero FROM t_Progetti INNER JOIN t_Sedi ON t_Progetti.FK_SedeProgetto = t_Sedi.IDsede INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando LEFT OUTER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto ORDER BY FK_TipoSede, SiglaSede, DataAvvioProg, DescrProgetto ";
PerseoNET/frmRichiestaPagamenti.cs:							origineDati = "SELECT IDprogetto FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto WHERE FK_SedeEdizione=" + Conversions.ToString(ComboSedi.PKSelezionatoCombo) + " AND DataAvvioProg<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataFineProg>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " GROUP BY IDprogetto ";
PerseoNET/frmRichiestaPagamenti.cs:							text3 = " OR (IDprogetto " + clsTblDatiDR.StringaFiltroIN("IDprogetto") + " AND (SELECT COUNT(IDprogpagamento) FROM t_ProgettiPagamenti WHERE FK_Progetto=IDprogetto AND DataPagamento IS NULL)>0) ";
PerseoNET/frmRichiestaPagamenti.cs:						text2 = ((Operators.CompareString(text2, "", TextCompare: false) != 0) ? (text2 + "AND (SELECT COUNT(IDprogpagamento) FROM t_ProgettiPagamenti WHERE FK_Progetto=IDprogetto AND DataPagamento IS NULL AND FK_Sede " + Variabili.FiltroSedi + ")>0 ") : ("WHERE (SELECT COUNT(IDprogpagamento) FROM t_ProgettiPagamenti WHERE FK_Progetto=IDprogetto AND DataPagamento IS NULL AND FK_Sede " + Variabili.FiltroSedi + ")>0 "));
PerseoNET/frmRichiestaPagamenti.cs:						text2 = ((Operators.CompareString(text2, "", TextCompare: false) != 0) ? (text2 + "AND (SELECT COUNT(IDprogpagamento) FROM t_ProgettiPagamenti WHERE FK_Progetto=IDprogetto AND DataPagamento IS NULL AND FK_Sede " + Variabili.FiltroSedi + ")=0 ") : ("WHERE (SELECT COUNT(IDprogpagamento) FROM t_ProgettiPagamenti WHERE FK_Progetto=IDprogetto AND DataPagamento IS NULL AND FK_Sede " + Variabili.FiltroSedi + ")=0 "));
PerseoNET/frmRichiestaPagamenti.cs:						text2 = ((Operators.CompareString(text2, "", TextCompare: false) != 0) ? (text2 + "AND (SELECT COUNT(IDprogpagamento) FROM t_ProgettiPagamenti WHERE FK_Progetto=IDprogetto AND DataPagamento IS NOT NULL AND FK_Sede " + Variabili.FiltroSedi + ")>0 ") : ("WHERE (SELECT COUNT(IDprogpagamento) FROM t_ProgettiPagamenti WHERE FK_Progetto=IDprogetto AND DataPagamento IS NOT NULL AND FK_Sede " + Variabili.FiltroSedi + ")>0 "));
PerseoNET/frmRichiestaPagamenti.cs:						origineDati = "SELECT t_PianoServizi.IDedizione, IDprogetto FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto " + text5 + "ORDER BY SiglaSede, DataAvvio, CodiceEdizione ";
PerseoNET/frmRichiestaPagamenti.cs:							string origineDati = "SELECT IDprogetto, IDsede, CodiceProgetto, DescrProgetto, DataAvvioProg, DataFineProg, SiglaSede, (NULL) AS DataPagatoInizio, (NULL) AS DataPagatoFine, COUNT(IDedizione) AS Edizioni, (0) AS OreDaPagare, (NULL) AS NuovaRichiestaDAL, (NULL) AS NuovaRichiestaAL, (0) AS Sospesi FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto " + left + "GROUP BY IDprogetto, CodiceProgetto, DescrProgetto, DataAvvioProg, DataFineProg, SiglaSede, IDsede ORDER BY DataAvvioProg, CodiceProgetto ";
PerseoNET/frmRichiestaPagamenti.cs:							origineDati = "SELECT (FK_Progetto) AS IDprogetto, IDsede, SiglaSede, MIN(DataPagatoInizio) AS DataPagatoInizio, MAX(DataPagatoFine) AS DataPagatoFine FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE FK_ProgettoPagamento IS NOT NULL ";
PerseoNET/frmRichiestaPagamenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, SiglaSede, DescrEdizione, CodiceEdizione, (CAST(FK_Anno AS VARCHAR) +'Â°') AS TipoAnnualita, TipoFormativoInterno, CodiceProgetto, DescrProgetto, DataAvvioProg, DataFineProg, DataAvvio, DataFine, DataBloccoPagato, Durata, (0) AS OreDaPagare FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint WHERE IDprogetto=", clsTblDatiDR.get_Campo((object)"IDprogetto")), " "));
PerseoNET/frmRichiestaPagamenti.cs:								origineDati = "SELECT IDincarico FROM t_IncarichiEdizioni WHERE PagamentoIndividuale=1 AND IncaricoBloccato=0 AND FK_Edizione " + clsTblDatiDR4.StringaFiltroIN("IDedizione");
PerseoNET/frmRichiestaPagamenti.cs:								origineDati = ((clsTblDatiDR5.Righe != 0) ? ("SELECT IDedizione, SUM(Minuti) AS TotaleMinuti FROM v_DettaglioOreSvoltePerIncarico WHERE DataSvolgimento>" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND FK_Tipo=3 AND NOT(IDincarico " + clsTblDatiDR5.StringaFiltroIN("IDincarico") + ") GROUP BY IDedizione HAVING IDedizione " + clsTblDatiDR4.StringaFiltroIN("IDedizione")) : ("SELECT IDedizione, SUM(Minuti) AS TotaleMinuti FROM v_DettaglioOreSvoltePerIncarico WHERE DataSvolgimento>" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND FK_Tipo=3 GROUP BY IDedizione HAVING IDedizione " + clsTblDatiDR4.StringaFiltroIN("IDedizione")));
PerseoNET/frmRichiestaPagamenti.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento, DataRichiestaInizio, DataRichiestaFine FROM t_ProgettiPagamenti WHERE FK_Sede=", clsTblDatiDR.get_Campo((object)"IDsede")), " AND DataPagamento IS NULL "), "AND FK_Progetto="), clsTblDatiDR.get_Campo((object)"IDprogetto")));
PerseoNET/frmRichiestaPagamenti.cs:							origineDati = "SELECT IDincarico, (Cognome + ' ' + Nome) AS Collaboratore, SiglaSede, CodiceEdizione, TipoAttivita, DescrArgomento, OreAssegnate, DataPagatoInizio, DataPagatoFine, TotaleOrePagate, (0) AS OreDaPagare, (NULL) AS NuovaRichiestaDAL, (NULL) AS NuovaRichiestaAL FROM v_IncarichiPagamentoIndividuale ";
PerseoNET/frmRichiestaPagamenti.cs:							origineDati = "SELECT IDincarico, SUM(Minuti) AS TotaleMinuti FROM v_DettaglioOreSvoltePerIncarico WHERE DataSvolgimento>" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico " + clsTblDatiDR7.StringaFiltroIN("IDincarico");
PerseoNET/frmRichiestaPagamenti.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDpagaindiv, DataRichiestaInizio, DataRichiestaFine FROM t_PagamentiIndividuali INNER JOIN t_PagamentiIndividualiIncarichi ON t_PagamentiIndividuali.IDpagaindiv = t_PagamentiIndividualiIncarichi.FK_Pagamento WHERE Autorizzazione=0 AND FK_Incarico=", clsTblDatiDR7.get_Campo((object)"IDincarico")));
PerseoNET/frmRichiestaPagamenti.cs:					string origineDati = ((ComboSedi.PKSelezionatoCombo != 0L) ? ("SELECT t_ProgettiPagamenti.IDprogpagamento, FK_Progetto, FK_Sede, SiglaSede, DataRichiestaInizio, DataRichiestaFine, DataPagamento, DescrProgetto, IDmwp, CodiceProgetto FROM t_ProgettiPagamenti INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto WHERE IDsede=" + Conversions.ToString(ComboSedi.PKSelezionatoCombo) + " AND DataPagamento IS NULL " + text + "ORDER BY SiglaSede, DataRichiestaFine ") : ("SELECT t_ProgettiPagamenti.IDprogpagamento, FK_Progetto, FK_Sede, SiglaSede, DataRichiestaInizio, DataRichiestaFine, DataPagamento, DescrProgetto, IDmwp, CodiceProgetto FROM t_ProgettiPagamenti INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto WHERE IDsede " + Variabili.FiltroSedi + " AND DataPagamento IS NULL " + text + "ORDER BY SiglaSede, DataRichiestaFine "));
PerseoNET/frmRichiestaPagamenti.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_PianoServizi.IDedizione, CodiceEdizione, DataAvvio, DataFine, DataBloccoSCO, ObbligoIscritti, MezzaOra, PagaConsuntivoMese, (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE DataIscr IS NOT NULL AND FK_Edizione=IDedizione) AS Niscr, t_PianoServizi.Bloccato FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE FK_Progetto=", rsSedePag.get_Campo((object)"FK_Progetto")), " AND FK_SedeEdizione="), rsSedePag.get_Campo((object)"FK_Sede")), " "), "AND GestionePersonale=1 ORDER BY CodiceEdizione "));
PerseoNET/frmRichiestaPagamenti.cs:				origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiPagamentiFatture.IDprogfatt, t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, Autorizzazione, Sospeso, CostiAnticipo, CostiViaggio, CostiVitto, (t_ProgettiPagamentiFatture.DataModifica) AS DataAutorizzazione, DataFattura, NumeroFattura, FK_PFAutorizzazione, DescrAzienda FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento LEFT OUTER JOIN t_DocentiFatture ON t_ProgettiPagamentiFatture.FK_Fattura = t_DocentiFatture.IDfattura LEFT OUTER JOIN t_Aziende ON t_DocentiFatture.FK_Azienda = t_Aziende.IDazienda WHERE FK_Progetto=", rsSedePag.get_Campo((object)"FK_Progetto")), " "), "AND t_ProgettiPagamenti.FK_Sede="), rsSedePag.get_Campo((object)"FK_Sede")), " "), "AND DataRichiestaFine='"), rsSedePag.get_Campo((object)"DataRichiestaFine")), "' "), "AND (CASE WHEN Autorizzazione=1 THEN 1 WHEN Sospeso=1 THEN 1 ELSE 0 END)=1 "), "ORDER BY t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda "));
PerseoNET/frmRichiestaPagamenti.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE FK_Tipo>2 AND FK_Progetto=", rsSedePag.get_Campo((object)"FK_Progetto")), " AND FK_SedeEdizione="), rsSedePag.get_Campo((object)"FK_Sede")), " "), "AND DataAttivita>='"), text), "' AND DataAttivita<='"), text2), "' AND GestionePersonale=1 "), "GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) "), "UNION "), "SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, "), "(SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte "), "FROM t_Azioni INNER JOIN "), "t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN "), "t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN "), "t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN "), "t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN "), "t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente "), "WHERE FK_Tipo>2 AND FK_Progetto="), rsSedePag.get_Campo((object)"FK_Progetto")), " AND FK_SedeEdizione="), rsSedePag.get_Campo((object)"FK_Sede")), " "), "AND DataAttivita>='"), text), "' AND DataAttivita<='"), text2), "' AND GestionePersonale=1 "), "GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) "), "ORDER BY IDdocente, IDincarico, YEAR(DataAttivita), MONTH(DataAttivita) "));
PerseoNET/frmRichiestaPagamenti.cs:						string text3 = "(SELECT FK_CodicePF FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE (FK_IncaricoEdizione=IDincarico AND DataInizioIncarico<='" + text2 + "' AND DataFineIncarico>='" + text + "' AND DataProlungamento IS NULL) OR (FK_IncaricoEdizione=IDincarico AND DataInizioIncarico<='" + text2 + "' AND DataProlungamento>='" + text + "' AND DataProlungamento IS NOT NULL) GROUP BY FK_CodicePF) AS FK_ParFiscaleAttuale, ";
PerseoNET/frmRichiestaPagamenti.cs:						string text4 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("(SELECT MAX(sngAliquotaPrevSepa) FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE FK_Progetto=", rsSedePag.get_Campo((object)"FK_Progetto")), " AND FK_Sede="), rsSedePag.get_Campo((object)"FK_Sede")), " "), "AND DataRichiestaInizio='"), rsSedePag.get_Campo((object)"DataRichiestaInizio")), "' AND t_ProgettiPagamentiFatture.FK_Docente=IDdocente AND FK_Fattura IS NULL) AS FK_AliquotaPrevSepa, "));
PerseoNET/frmRichiestaPagamenti.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, " + text3 + "IDtattivita, " + text5 + "Aula, Secondaria, " + text6 + " (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, (NULL) AS DescrParFiscale, " + text4 + "DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, (0) AS TotOreFatte, (SELECT QuotaOraIncarico FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico GROUP BY QuotaOraIncarico) AS QuotaOraIncarico, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS Autorizzazione, (NULL) AS DataAutorizzazione, (NULL) DataPagatoInizio, (NULL) DataPagatoFine, (NULL) AS DataPagamento, (NULL) AS StrFattura, (0) AS Autorizzato, (0) AS Sospeso FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDprogetto=", rsSedePag.get_Campo((object)"FK_Progetto")), " AND FK_SedeEdizione="), rsSedePag.get_Campo((object)"FK_Sede")), " "), "AND GestionePersonale=1 AND FK_Tipo>2 AND PagamentoIndividuale=0 AND IncaricoGenericoGratuito=0 "), "ORDER BY (Cognome + ' ' + Nome), IDdocente, "), " IndTA, TipoAttivita, IDincarico "));
PerseoNET/frmRichiestaPagamenti.cs:						origineDati = "SELECT (FK_IncaricoEdizione) AS IDincarico, IDazienda, DescrAzienda FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE (DataFineIncarico>='" + text + "' AND DataProlungamento IS NULL) OR (DataProlungamento IS NOT NULL and DataProlungamento>='" + text + "') GROUP BY FK_IncaricoEdizione, IDazienda, DescrAzienda ORDER BY FK_IncaricoEdizione ";
PerseoNET/frmRichiestaPagamenti.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, TotOreFatte, DataPagatoInizio, DataPagatoFine, Anticipo FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE Anticipo=1 AND t_ProgettiPagamenti.FK_Progetto=", rsSedePag.get_Campo((object)"FK_Progetto")), " "), "ORDER BY IDincarico, DataRichiestaFine "));
PerseoNET/frmRichiestaPagamenti.cs:								origineDati = "SELECT t_Docenti.IDdocente, FK_Azienda, IDprogetto, FK_ParFiscaleAttuale, StrDOC, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, IDmwp, CodiceProgetto, SiglaSede, (NULL) DataPagatoInizio, (NULL) DataPagatoFine, (0) AS TotOreFatte, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (0) AS AltriAutorizzati, (NULL) AS StrFattura, (0) AS Autorizzato, (0) AS Sospeso FROM t_ProgettiPagamentiCompensiOneri ";
PerseoNET/frmRichiestaPagamenti.cs:											origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogfatt, FK_Docente, ImponibileOccasionale, Autorizzazione FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE FK_Docente=", rsCompensi.get_Campo((object)"IDdocente")), " AND FK_Fattura IS NULL AND Autorizzazione=1 "), "AND DataPagamento IS NULL AND IDprogpagamento<"), rsSedePag.get_Campo((object)"IDprogpagamento")), " ORDER BY IDprogfatt "));
PerseoNET/frmCalendarioMulti.cs:					vSQL = "SELECT IDedizione, CodiceEdizione FROM t_PianoServizi INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_AttivitaEdizioni ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita=t_TipoAttivitaEdizione.IDtattivita WHERE Aula=1 AND Primaria=1 AND t_TipoAttivitaEdizione.Obsoleto=0 AND TipoAttivita<>'STAGE' AND Gruppo=1 AND Durata>0 AND DataFine>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataAvvio<" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND FK_SedeEdizione " + text + " AND EdizioneAttiva=1 GROUP BY IDedizione, CodiceEdizione, FK_Anno, FK_TipoFormativoInterno HAVING (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE FK_Edizione=IDedizione)>0 ORDER BY FK_TipoFormativoInterno, FK_Anno, CodiceEdizione ";
PerseoNET/frmCalendarioMulti.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDloced, CodiceLocale FROM t_LocaliEdizioni WHERE IDedizione=", Variabili.Edizioni[num].get_Campo((object)0)), " "), "ORDER BY Fittizio DESC, CodiceLocale "));
PerseoNET/frmCalendarioMulti.cs:					vSQL = "SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDargomento, FK_TipoArgomento, FK_Tipo, ('no') AS Occupato, StrDOC, IndArgomento, DescrBreveArgomento, DescrArgomento, OreAssegnate, torep, FK_IncaricoClassiRiunite FROM t_IncarichiContrattiEdizioni ";
PerseoNET/frmCalendarioMulti.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDloced, CodiceLocale FROM t_LocaliEdizioni WHERE IDedizione=", Variabili.Edizioni[num].get_Campo((object)0)), " "), "ORDER BY Fittizio DESC, CodiceLocale "));
PerseoNET/frmCalendarioMulti.cs:					origineDati = "SELECT IDloced, CodiceLocale FROM t_LocaliEdizioni ";
PerseoNET/frmCalendarioMulti.cs:						string origineDati = "SELECT IDcalatt, FK_Incarico, FK_Locale, IDdocente, IDargomento, FK_CalAttivita, DataAttivita, OraInizio, OraFine, DescrBreveArgomento, StrDOC, CodiceLocale, DocenzaFAD, ncod FROM zt_GrigliaSettimana ORDER BY DataAttivita, OraInizio ";
PerseoNET/frmCalendarioMulti.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT TipoArgomento FROM t_TipoArgomento WHERE IDtarg=", Variabili.Edizioni[num].get_CampoIncarichi((object)"FK_TipoArgomento")));
PerseoNET/frmCalendarioMulti.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt FROM t_CalendarioAttivita WHERE FK_Incarico=", tblCal[num].get_Campo((object)"FK_Incarico", vFlagUpdateDB: false)), " "), "AND DataAttivita="), FunzStringa.StrDataSQL(Conversions.ToString(tblCal[num].get_Campo((object)"DataAttivita", vFlagUpdateDB: false)), FlagSqlServer: true)), " "), "AND OraInizio="), FunzStringa.StrOrarioSQL(Conversions.ToString(tblCal[num].get_Campo((object)"OraInizio", vFlagUpdateDB: false)), FlagSqlServer: true)), " "));
PerseoNET/frmCalendarioMulti.cs:				string origineDati = "SELECT t_CalendarioAttivita.IDcalatt, t_CalendarioAttivita.FK_Incarico, FK_Locale, IDdocente, IDargomento, DataAttivita, OraInizio, OraFine, " + text + "FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale WHERE " + Variabili.dtSettimana.FiltroAttuale + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/frmCalendarioMulti.cs:				origineDati = "SELECT IDcalatt, IDincarico, FK_Locale, IDdocente, IDargomento, DataAttivita, OraInizio, OraFine, DocenzaFAD FROM zt_CopiaIncollaSettimana ";
PerseoNET/frmCalendarioMulti.cs:					string origineDati = "SELECT IDcalatt, IDincarico, FK_Locale, IDdocente, IDargomento, DataAttivita, OraInizio, OraFine, DocenzaFAD FROM zt_CopiaIncollaSettimana ORDER BY DataAttivita, OraInizio ";
PerseoNET/frmCalendarioMulti.cs:						string text = "SELECT t_CalendarioCodocenza.IDcalcod, t_CalendarioCodocenza.FK_Incarico, IDdocente, FK_Tipo, DataAttivita, OraInizio, OraFine, TipoAttivita, (Cognome + ' ' + Nome) AS StrDOC FROM t_CalendarioCodocenza INNER JOIN t_IncarichiEdizioni ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt ";
PerseoNET/frmCalendarioMulti.cs:							text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDattedi, (IDedizione) AS FK_Edizione, IDincarico, FK_Tipo, FK_TipoAttivita, (IDdocente) AS FK_Docente, IndTA, TipoAttivita, OreAttivita, ('no') AS Occupato, StrDOC, OreAssegnate, (OreFatteInc) AS torep FROM t_IncarichiContrattiEdizioni WHERE IDargomento IS NULL AND Aula=True AND Secondaria=True GROUP BY IDattedi, IDedizione, IDincarico, FK_Tipo, FK_TipoAttivita, IDdocente, IndTA, TipoAttivita, OreAttivita, StrDOC, OreAssegnate, OreFatteInc HAVING IDedizione=", Variabili.Edizioni[num2].get_Campo((object)0)), " "), "ORDER BY IndTA, TipoAttivita, StrDOC "));
PerseoNET/frmCalendarioMulti.cs:							string origineDati = "SELECT t_VincoliOrariEdizione.IDvincolo, FK_GiornoSettimana, TipoGiornoSettimana, Dalle, Alle FROM  t_VincoliOrariEdizione ORDER BY NumeroGiorno, Dalle";
PerseoNET/frmCalendarioMulti.cs:							origineDati = "SELECT IDtgiornosett, (CASE WHEN NumeroGiorno=1 THEN 7 ELSE (NumeroGiorno-1) END) AS IndG, TipoGiornoSettimana, (0) AS Selezione FROM t_TipoGiornoSettimana ORDER BY (CASE WHEN NumeroGiorno=1 THEN 7 ELSE (NumeroGiorno-1) END)";
PerseoNET/frmCalendarioMulti.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT MAX(IDvincolo) AS ID_Vincolo FROM t_VincoliOrariEdizione WHERE FK_Edizione=", Variabili.Edizioni[num2].get_Campo((object)0)));
PerseoNET/frmCalendarioMulti.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT MIN(Dalle) AS dalle, MAX(Alle) AS Alle FROM t_VincoliOrariEdizione WHERE FK_Edizione=", Variabili.Edizioni[Conversions.ToInteger(value)].get_Campo((object)0)));
PerseoNET/frmCalendarioMulti.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDdocente, IDedizione, StrDOC FROM t_IncarichiContrattiEdizioni GROUP BY IDdocente, IDedizione, StrDOC HAVING IDedizione=", Variabili.Edizioni[Conversions.ToInteger(value)].get_Campo((object)0)));
PerseoNET/frmDettSedeAzienda.cs:				string origineDati = "SELECT IDsedeaz, FK_Azienda, FK_TipoSede, DescrSedeAzienda, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, TelSedeAz_2, FaxSedeAz, EmailSedeAz, PosizioneINAIL, CognomeIBAN, CodiceIBAN, Assegno, Attiva, DataRec, DataModifica FROM t_SediAziende WHERE IDsedeaz=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettSedeAzienda.cs:				origineDati = ((VariabiliClassi.IDform == 0L) ? ((Variabili.Azienda.CercaSedeAzienda(1, "FK_TipoSede") != 0) ? "SELECT IDtsedeaz, TipoSedeAzienda FROM t_TipoSedeAzienda WHERE Obsoleto=0 AND IDtsedeaz>=2 ORDER BY IDtsedeaz " : "SELECT IDtsedeaz, TipoSedeAzienda FROM t_TipoSedeAzienda WHERE Obsoleto=0 AND IDtsedeaz=1 ORDER BY IDtsedeaz ") : ((Conversions.ToLong(FormSede.get_Campo((object)"FK_TipoSede")) == 1) ? "SELECT IDtsedeaz, TipoSedeAzienda FROM t_TipoSedeAzienda WHERE Obsoleto=0 AND IDtsedeaz=1 " : ((Variabili.Azienda.NumeroSediAziende > 1) ? "SELECT IDtsedeaz, TipoSedeAzienda FROM t_TipoSedeAzienda WHERE Obsoleto=0 AND IDtsedeaz>=2 " : "SELECT IDtsedeaz, TipoSedeAzienda FROM t_TipoSedeAzienda WHERE Obsoleto=0 AND IDtsedeaz=1 ")));
PerseoNET/frmDettSedeAzienda.cs:				origineDati = "SELECT IDconvazienda, IDconvenzione, FK_Azienda, DataAvvio FROM t_AziendeSediFormativeConvenzioni INNER JOIN t_ConvenzioniStage ON t_AziendeSediFormativeConvenzioni.IDconvazienda = t_ConvenzioniStage.FK_ConvenzioneAzienda WHERE FK_Azienda=" + Conversions.ToString(Variabili.Azienda.PKAzienda) + " AND DataAvvio<" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true);
PerseoNET/frmDettSedeAzienda.cs:				origineDati = "SELECT IDcontrest, FK_Azienda FROM t_DocentiContrattiEsterni WHERE FK_Azienda=" + Conversions.ToString(Variabili.Azienda.PKAzienda);
PerseoNET/frmDettSedeAzienda.cs:					origineDati = "SELECT IDordine, FK_Fornitore FROM t_RichiesteOrdini WHERE FK_Fornitore=" + Conversions.ToString(Variabili.Azienda.PKAzienda);
PerseoNET/frmDettSedeAzienda.cs:				origineDati = "SELECT IDcomune, Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni ORDER BY Attivo DESC, Comune ";
PerseoNET/frmDettSedeAzienda.cs:						string origineDati = ((Operators.CompareString(sender.ToString(), "salva", TextCompare: false) != 0) ? ("SELECT IDcomune, Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni WHERE Comune LIKE '%" + FunzStringa.StringaSQL(txtComSedeAz.Text) + "%' AND Attivo=1 ORDER BY Attivo DESC, Comune ") : ("SELECT IDcomune, Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni WHERE Comune='" + FunzStringa.StringaSQL(txtComSedeAz.Text) + "' AND Attivo=1 ORDER BY Attivo DESC, Comune "));
PerseoNET/frmDettSedeAzienda.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtformag, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=", Variabili.Azienda.get_Campo((object)"FK_TipoForma")));
PerseoNET/frmDettSedeAzienda.cs:				vSQL = ((FormSede.ChiavePrimaria <= 0) ? ("SELECT IDsedeaz, FK_Azienda, FK_TipoSede, IndirSedeAz, ComSedeAz FROM t_SediAziende WHERE FK_Azienda=" + Conversions.ToString(Variabili.Azienda.PKAzienda) + " AND IndirSedeAz='" + FunzStringa.StringaSQL(txtIndirSedeAz.Text) + "' AND ComSedeAz='" + FunzStringa.StringaSQL(txtComSedeAz.Text) + "' ") : ("SELECT IDsedeaz, FK_Azienda, FK_TipoSede, IndirSedeAz, ComSedeAz FROM t_SediAziende WHERE FK_Azienda=" + Conversions.ToString(Variabili.Azienda.PKAzienda) + " AND IndirSedeAz='" + FunzStringa.StringaSQL(txtIndirSedeAz.Text) + "' AND ComSedeAz='" + FunzStringa.StringaSQL(txtComSedeAz.Text) + "' AND IDsedeaz<>" + Conversions.ToString(FormSede.ChiavePrimaria)));
PerseoNET/frmDettSedeAzienda.cs:				vSQL = "SELECT IDsedeaz FROM t_SediAziende WHERE IDsedeaz<>" + Conversions.ToString(chiavePrimaria) + " AND FK_Azienda=" + Conversions.ToString(Variabili.Azienda.PKAzienda) + " AND FK_TipoSede=1 AND Attiva=1 ";
PerseoNET/frmDettIscrizione.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDiscrizione, FK_Utente, FK_Edizione, FK_DoteStudente, PosRegistro, DataIscr, Uditore, IscrizioneSenzaDote, DataRitiro, ProtRitiro, FK_MotivoRitiro, NoteRitiro, OreUtente, OreCredito, OreAttivitaIndividuali, DataProtocolloCredito, ProtocolloCredito, EsameINAIL, PresenzaEsame, FK_TipoScalaPunt, PuntFinale, IdoneoAmmesso, Sostegno, OreSostegno, OreSostegnoIndividuale, IDmwiscr, IDmwstage, FK_IscrizioneAmpliamento, EsenzioneVersamento, QuotaEsenzione, OraGratuitaProroga, NoteEsenzione, DropOut, ProseguePercorso, LezioneReligioneCattolica, LingueStraniere, DataRec, DataModifica FROM t_Iscrizioni WHERE IDiscrizione=", Variabili.Edizione.get_CampoIscrizione((object)"IDiscrizione")));
PerseoNET/frmDettIscrizione.cs:					origineDati = "SELECT IDtritiro, TipoMotivoRitiro FROM t_TipoMotivoRitiro WHERE Obsoleto=False ORDER BY IndMR, TipoMotivoRitiro";
PerseoNET/frmDettIscrizione.cs:					origineDati = "SELECT IDtscalapunt, TipoScalaPunteggio FROM t_TipoScalaPunteggioFinale WHERE Obsoleto=false ORDER BY intTipoScalaPunteggio, TipoScalaPunteggio";
PerseoNET/frmDettIscrizione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdotestud, (CASE WHEN DoteChiusa=0 AND DoteDeroga=0 THEN ID_Dote WHEN DoteChiusa=0 AND DoteDeroga=1 THEN (ID_dote + ' (P)') WHEN DoteChiusa=1 AND DoteDeroga=1 THEN (ID_dote + ' (PC)') ELSE (ID_dote + ' (C)') END) AS Dote FROM t_StudentiDoti WHERE FK_Studente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")), " "), "AND "), FunzStringa.StrDataSQL(stringa, FlagSqlServer: true)), "<t_StudentiDoti.DataFineDote "), "AND "), FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true)), ">t_StudentiDoti.DataAvvioDote "), "ORDER BY ID_Dote "));
PerseoNET/frmDettIscrizione.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdotestud, IIf(DoteChiusa=False,ID_Dote,(ID_dote & ' (C)')) AS Dote FROM zt_DotiIscrittiEdizione WHERE FK_Studente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")), " "), "ORDER BY ID_Dote "));
PerseoNET/frmDettIscrizione.cs:							origineDati = "SELECT FK_Iscrizione, QuotaDoteIscrizione FROM t_IscrizioniDoti WHERE FK_Iscrizione=" + Conversions.ToString(FormIscr.ChiavePrimaria) + " ";
PerseoNET/frmDettIscrizione.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDiscrizione, FK_DoteStudente FROM t_Iscrizioni WHERE IDiscrizione<>" + Conversions.ToString(FormIscr.ChiavePrimaria) + " AND FK_DoteStudente=", FormIscr.get_ValoreSelezioneCombo(cmbFK_DoteStudente)));
PerseoNET/frmDettIscrizione.cs:					vSQL = "SELECT IDiscrizione, FK_Edizione, DataRitiro FROM t_Iscrizioni WHERE FK_IscrizioneAmpliamento=" + Conversions.ToString(FormIscr.ChiavePrimaria);
PerseoNET/frmDettIscrizione.cs:						vSQL = "SELECT FK_Iscrizione, QuotaDoteIscrizione FROM t_IscrizioniDoti WHERE FK_Iscrizione=" + Conversions.ToString(FormIscr.ChiavePrimaria) + " ";
PerseoNET/frmDettIscrizione.cs:					vSQL = "SELECT SUM(DATEDIFF(mi, OraIngresso, OraUscita)) AS TotMinuti FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_tipoStage=t_tipoAttivitaStage.IDtstage WHERE FK_Iscrizione=" + Conversions.ToString(FormIscr.ChiavePrimaria) + " AND PIP=0 AND Stage=1 ";
PerseoNET/frmDettIscrizione.cs:					vSQL = "SELECT SUM(DATEDIFF(mi, OraIngresso, OraUscita)) AS TotMinuti FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_tipoStage=t_tipoAttivitaStage.IDtstage WHERE FK_Iscrizione=" + Conversions.ToString(FormIscr.ChiavePrimaria) + " AND PIP=0 AND Stage=0 ";
PerseoNET/frmDettIscrizione.cs:					vSQL = "SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotMinuti FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico=t_IncarichiEdizioni.IDincarico WHERE FK_Iscrizione=" + Conversions.ToString(FormIscr.ChiavePrimaria) + " AND FK_Argomento IS NULL ";
PerseoNET/frmDettIscrizione.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Edizione, SUM(OreUtente) AS TotaleOreUtente FROM t_Iscrizioni WHERE IDiscrizione<>" + Conversions.ToString(FormIscr.ChiavePrimaria) + " GROUP BY FK_Edizione HAVING FK_Edizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " "));
PerseoNET/frmDettIscrizione.cs:					vSQL = "SELECT IDiscrizione, IDmwiscr FROM t_Iscrizioni WHERE DataIscr IS NOT NULL AND DataIscr>'01/05/2008' AND IDiscrizione<>" + Conversions.ToString(FormIscr.ChiavePrimaria) + " AND IDmwiscr='" + txtIDmwiscr.Text + "' ";
PerseoNET/frmDettIscrizione.cs:					vSQL = "SELECT t_Utenti.IDutente, (Cognome + ' ' + Nome) AS Studente, IDmwiscr, SiglaSede, CodiceEdizione, DataAvvio, DataFine FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDmwiscr='" + txtIDmwiscr.Text + "' ORDER BY Cognome, Nome ";
PerseoNET/frmDettIscrizione.cs:									string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IscrizioniDoti.IDdoteiscr, IDtattivita, QuotaDoteIscrizione, TipoAttivita, (SELECT CostoOraAttivita FROM t_ProgettiEdizioniRegole WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " "), "AND FK_TipoAttivitaEdizione=IDtattivita) AS CostoOraAttivita, "), "(SELECT CostoOraServizio FROM t_AttivitaEdizioni WHERE FK_Edizione="), Variabili.Edizione.get_Campo((object)0)), " "), "AND FK_TipoAttivita=IDtattivita) AS CostoOraServizio, NumeroVoucher "), "FROM t_IscrizioniDoti LEFT OUTER JOIN "), "t_TipoAttivitaEdizione ON t_IscrizioniDoti.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita "), "WHERE FK_Iscrizione="), FormIscr.ChiavePrimaria), " ORDER BY TipoAttivita "));
PerseoNET/frmDettIscrizione.cs:								string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IscrizioniVersamenti.IDversaiscr, t_IscrizioniVersamenti.FK_Iscrizione, IDazienda, TipoModoVersamento, Quota, Reso, DataVersamento, NumeroFatturaMago, DataFatturaMago, DescrAzienda, (CASE WHEN IDazienda IS NOT NULL THEN (SELECT (ComSedeAz + ' (' + ProvSedeAz + ')') FROM t_SediAziende WHERE FK_Azienda=IDazienda AND FK_TipoSede=1) ELSE NULL END) AS SedeAz, (CASE WHEN PIVA IS NOT NULL THEN PIVA ELSE CodFiscale END) AS CF_PIVA, DescrQuota FROM t_IscrizioniVersamenti INNER JOIN t_TipoModoVersamento ON t_IscrizioniVersamenti.FK_ModoVersamento = t_TipoModoVersamento.IDtmodoversa LEFT OUTER JOIN t_IscrizioniFatture ON t_IscrizioniVersamenti.FK_Fattura = t_IscrizioniFatture.IDiscrfatt LEFT OUTER JOIN t_Aziende ON t_IscrizioniVersamenti.FK_Azienda = t_Aziende.IDazienda WHERE t_IscrizioniVersamenti.FK_Iscrizione=", Variabili.Edizione.get_CampoIscrizione((object)0)), " "), "ORDER BY DataVersamento "));
PerseoNET/frmDettIscrizione.cs:								origineDati = "SELECT t_IscrizioniFatture.IDiscrfatt, t_IscrizioniFatture.FK_Iscrizione, IDazienda, NumeroFatturaMago, DataFatturaMago, (CASE WHEN FK_ConvenzioneStage IS NOT NULL THEN (DescrAzienda + ' - ' + ComSedeAz + ' (' + ProvSedeAz + ')') ELSE NULL END) AS SedeStage, DataAvvio, DataFine, CompensoStage FROM t_SediAziende LEFT OUTER JOIN t_Aziende ON t_SediAziende.FK_Azienda = t_Aziende.IDazienda RIGHT OUTER JOIN t_ConvenzioniStage ON t_SediAziende.IDsedeaz = t_ConvenzioniStage.FK_SedeStage RIGHT OUTER JOIN t_IscrizioniFatture ON t_ConvenzioniStage.IDconvenzione = t_IscrizioniFatture.FK_ConvenzioneStage WHERE t_IscrizioniFatture.FK_Iscrizione=" + Conversions.ToString(FormIscr.ChiavePrimaria) + " ORDER BY DataFatturaMago ";
PerseoNET/frmDettIscrizione.cs:								origineDati = "SELECT t_Aziende.IDazienda, DescrAzienda, (CASE WHEN PIVA IS NOT NULL AND CodFiscale IS NULL THEN PIVA WHEN PIVA IS NULL AND CodFiscale IS NOT NULL THEN CodFiscale WHEN PIVA IS NOT NULL AND CodFiscale IS NOT NULL THEN PIVA ELSE NULL END) AS PIVA_CF, (SELECT (ComSedeAz + ' (' + ProvSedeAz + ')') FROM t_SediAziende WHERE FK_Azienda=t_Aziende.IDazienda AND FK_TipoSede=1 AND t_Aziende.Attiva=1) AS SedeLegale FROM t_Aziende ORDER BY DescrAzienda, TipoSettoreProd ";
PerseoNET/frmDettIscrizione.cs:								origineDati = "SELECT t_ConvenzioniStage.IDconvenzione, DataAvvio, DataFine, CompensoStage, DescrAzienda, PIVA, ComSedeAz, ProvSedeAz FROM t_ConvenzioniStage INNER JOIN t_SediAziende ON t_ConvenzioniStage.FK_SedeStage = t_SediAziende.IDsedeaz INNER JOIN t_Aziende ON t_SediAziende.FK_Azienda = t_Aziende.IDazienda WHERE FK_Iscrizione=" + Conversions.ToString(FormIscr.ChiavePrimaria) + " AND StagePagamento=1 ORDER BY DataAvvio ";
PerseoNET/frmDettIscrizione.cs:				string origineDati = "SELECT IDversaiscr, FK_Iscrizione, FK_ModoVersamento, DataVersamento, Quota, NoteVersamento, FK_Azienda, DescrQuota, Fatturare, Reso, DataRec, DataModifica FROM t_IscrizioniVersamenti WHERE IDversaiscr=" + Conversions.ToString(vID);
PerseoNET/frmDettIscrizione.cs:				origineDati = "SELECT IDtmodoversa, TipoModoVersamento FROM t_TipoModoVersamento WHERE Obsoleto=False ORDER BY IndTMV ";
PerseoNET/frmDettIscrizione.cs:				string origineDati = "SELECT IDdoteiscr, FK_Iscrizione, FK_TipoAttivita, QuotaDoteIscrizione, DataRec, DataModifica FROM t_IscrizioniDoti WHERE IDdoteiscr=" + Conversions.ToString(vID) + " ";
PerseoNET/frmDettIscrizione.cs:				origineDati = "SELECT (FK_TipoAttivita) AS IDtattivita, TipoAttivita FROM t_AttivitaEdizione WHERE TipoAttivita='DOCENZA' OR AttivitaPIP=True ORDER BY IndTA ";
PerseoNET/frmDettIscrizione.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtmodoversa, DescrQuietanza FROM t_TipoModoVersamento WHERE TipoModoVersamento='", tblVers.get_Campo((object)"TipoModoVersamento", vFlagUpdateDB: false)), "' "));
PerseoNET/frmDettIscrizione.cs:				string origineDati = "SELECT IDiscrfatt, FK_Iscrizione, FK_ConvenzioneStage, NumeroFatturaMago, DataFatturaMago, DataRec, DataModifica FROM t_IscrizioniFatture WHERE IDiscrfatt=" + Conversions.ToString(vID);
PerseoNET/frmDettIscrizione.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdotestud, (FK_ProgettoRendiconta) AS IDprogetto, COUNT(DISTINCT IDiscrizione) AS NIscr FROM t_StudentiDoti LEFT OUTER JOIN t_Iscrizioni ON t_StudentiDoti.IDdotestud = t_Iscrizioni.FK_DoteStudente WHERE FK_Studente=", Variabili.Edizione.get_CampoIscrizione((object)"IDutente")), " "), "GROUP BY IDdotestud, FK_ProgettoRendiconta "), "HAVING IDdotestud="), FormIscr.get_ValoreSelezioneCombo(cmbFK_DoteStudente)), " "));
PerseoNET/frmRegistrazioneConsuntivoPresenze.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, (FK_Edizione) AS IDedizione, IDutente, IDconvenzione, (Cognome + ' ' + Nome) AS Studente, ID_Dote, DataIscr, DataRitiro, (CASE WHEN DataRitiro IS NULL THEN 'A' ELSE 'R' END) AS Stato, OreAttivitaIndividuali, SUM(OreAttivita) AS OrePresenza, DataAvvio, (CASE WHEN DataProlungamento IS NOT NULL THEN DataProlungamento ELSE t_ConvenzioniStage.DataFine END) AS DataFine FROM t_Iscrizioni INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud LEFT OUTER JOIN t_IscrizioniConsuntivoAttivita ON t_Iscrizioni.IDiscrizione = t_IscrizioniConsuntivoAttivita.FK_Iscrizione AND t_ConvenzioniStage.IDconvenzione = t_IscrizioniConsuntivoAttivita.FK_Convenzione GROUP BY IDiscrizione, FK_Edizione, IDutente, IDconvenzione, PosRegistro, Cognome, Nome, ID_Dote, DataIscr, DataRitiro, OreAttivitaIndividuali, DataAvvio, t_ConvenzioniStage.DataFine, DataProlungamento, NumeroConv HAVING FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "ORDER BY PosRegistro, DataAvvio "));
PerseoNET/frmRegistrazioneConsuntivoPresenze.cs:				vSQL = "SELECT t_IscrizioniConsuntivoAttivita.IDofa, FK_Iscrizione, FK_Argomento, FK_TipoStage, (DataInizio) AS OrdData, Individuali, Aula, (CASE WHEN DescrArgomento IS NOT NULl THEN DescrArgomento ELSE TipoAttivitaStage END) AS DescrAttivita, DataInizio, DataFine, OreAttivita, MinutiAttivita, GiorniINAIL, NoteRegistrazione FROM t_IscrizioniConsuntivoAttivita LEFT OUTER JOIN t_TipoAttivitaStage ON t_IscrizioniConsuntivoAttivita.FK_TipoStage = t_TipoAttivitaStage.IDtstage LEFT OUTER JOIN t_ArgomentiModuli ON t_IscrizioniConsuntivoAttivita.FK_Argomento = t_ArgomentiModuli.IDargomento ";
PerseoNET/frmRegistrazioneConsuntivoPresenze.cs:				string origineDati = "SELECT IDofa, FK_Iscrizione, FK_Convenzione, FK_Argomento, FK_TipoStage, Individuali, Aula, DataInizio, DataFine, OreAttivita, GiorniINAIL, NoteRegistrazione, DataRec, DataModifica FROM t_IscrizioniConsuntivoAttivita WHERE IDofa=" + Conversions.ToString(vID);
PerseoNET/frmRegistrazioneConsuntivoPresenze.cs:				origineDati = "SELECT IDtstage, TipoAttivitaStage FROM t_TipoAttivitaStage WHERE Obsoleto=False ORDER BY IndTAS";
PerseoNET/frmRegistrazioneConsuntivoPresenze.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT COUNT(IDofa) AS NumeroRecord FROM t_IscrizioniConsuntivoAttivita WHERE (IDofa<>" + Conversions.ToString(FormCons.ChiavePrimaria) + " AND FK_Iscrizione=", tblIscr.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " "), "AND DataInizio>="), FunzStringa.StrDataSQL(Conversions.ToString(txtDataInizio.Value), FlagSqlServer: true)), " AND DataInizio<="), FunzStringa.StrDataSQL(Conversions.ToString(txtDataFine.Value), FlagSqlServer: true)), ") "), "OR "), "(IDofa<>"), FormCons.ChiavePrimaria), " AND FK_Iscrizione="), tblIscr.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " "), "AND DataFine>="), FunzStringa.StrDataSQL(Conversions.ToString(txtDataInizio.Value), FlagSqlServer: true)), " AND DataFine<="), FunzStringa.StrDataSQL(Conversions.ToString(txtDataFine.Value), FlagSqlServer: true)), ") "));
PerseoNET/frmRegistrazioneConsuntivoPresenze.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT COUNT(IDofa) AS NumeroRecord FROM t_IscrizioniConsuntivoAttivita WHERE (FK_Iscrizione=", tblIscr.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " "), "AND DataInizio>="), FunzStringa.StrDataSQL(Conversions.ToString(txtDataInizio.Value), FlagSqlServer: true)), " AND DataInizio<="), FunzStringa.StrDataSQL(Conversions.ToString(txtDataFine.Value), FlagSqlServer: true)), ") "), "OR "), "(FK_Iscrizione="), tblIscr.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " "), "AND DataFine>="), FunzStringa.StrDataSQL(Conversions.ToString(txtDataInizio.Value), FlagSqlServer: true)), " AND DataFine<="), FunzStringa.StrDataSQL(Conversions.ToString(txtDataFine.Value), FlagSqlServer: true)), ") "));
PerseoNET/frmRegistrazioneConsuntivoPresenze.cs:						string origineDati = "SELECT Studente, NumeroConv, DataInizio, DataFine, OreAttivita, GiorniINAIL, Esito FROM t_IscrizioniConsuntivoAttivita ";
PerseoNET/frmRegistrazioneConsuntivoPresenze.cs:								origineDati = "SELECT IDiscrizione, Studente FROM t_IscrittiEdizione WHERE Studente='" + FunzStringa.StringaSQL(Conversions.ToString(clsTblDatiDR.get_Campo((object)"Studente"))) + "' ";
PerseoNET/frmRegistrazioneConsuntivoPresenze.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (IDiscrizione) AS MatricolaIscritto, (Cognome + ' ' + Nome) AS Studente, (IDconvenzione) AS ProgettoTirocinio, ID_Dote, DataIscr, DataRitiro, (CASE WHEN DataRitiro IS NULL THEN 'A' ELSE 'R' END) AS Stato, DataAvvio, (CASE WHEN DataProlungamento IS NOT NULL THEN DataProlungamento ELSE t_ConvenzioniStage.DataFine END) AS DataFine, OreAttivitaIndividuali, SUM(OreAttivita) AS OrePresenza, SUM(GiorniINAIL) AS StageINAIL, MAX(t_IscrizioniConsuntivoAttivita.DataFine) AS UltimaData FROM t_Iscrizioni INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud LEFT OUTER JOIN t_IscrizioniConsuntivoAttivita ON t_Iscrizioni.IDiscrizione = t_IscrizioniConsuntivoAttivita.FK_Iscrizione AND t_ConvenzioniStage.IDconvenzione = t_IscrizioniConsuntivoAttivita.FK_Convenzione GROUP BY IDiscrizione, FK_Edizione, IDutente, IDconvenzione, PosRegistro, Cognome, Nome, ID_Dote, DataIscr, DataRitiro, OreAttivitaIndividuali, DataAvvio, t_ConvenzioniStage.DataFine, DataProlungamento, NumeroConv HAVING FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "ORDER BY PosRegistro, DataAvvio "));
PerseoNET/frmRegistrazioneConsuntivoPresenze.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (IDiscrizione) AS MatricolaIscritto, (Cognome + ' ' + Nome) AS Studente, (IDconvenzione) AS ProgettoTirocinio, ID_Dote, t_IscrizioniConsuntivoAttivita.DataInizio, t_IscrizioniConsuntivoAttivita.DataFine, OreAttivita, GiorniINAIL FROM t_Iscrizioni INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud LEFT OUTER JOIN t_IscrizioniConsuntivoAttivita ON t_Iscrizioni.IDiscrizione = t_IscrizioniConsuntivoAttivita.FK_Iscrizione AND t_ConvenzioniStage.IDconvenzione = t_IscrizioniConsuntivoAttivita.FK_Convenzione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataIscr IS NOT NULL "), "ORDER BY PosRegistro, DataAvvio, DataInizio "));
PerseoNET/frmPannelloCertificazionePagamenti.cs:					string origineDati = "SELECT t_Docenti.IDdocente, FK_Azienda, Cognome, Nome, (Cognome + ' ' + Nome) AS StrDOC, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, CodFiscale, PIVA, t_DecodificatoreParametroFiscale.DescrParFiscale, CodiceRedditoCertificazione, CodiceTributo, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCassaPrev) AS sngCassaPrev, SUM(sngCostiAnticipo) AS sngCostiAnticipo, SUM(sngCostiViaggio) AS sngCostiViaggio, SUM(sngCostiVitto) AS sngCostiVitto, SUM(sngIVA) AS sngIVA, SUM(sngINPS) AS sngINPS, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente WHERE YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin) - 1) + " AND Reso=0 GROUP BY t_Docenti.IDdocente, FK_AZienda, Cognome, Nome, ComResidenza, CAPresidenza, CodiceRedditoCertificazione, IndirResidenza, ProvResidenza, CodFiscale, PIVA, t_DecodificatoreParametroFiscale.DescrParFiscale, CodiceTributo HAVING CodiceTributo IN('1040','1040*','1038') AND FK_Azienda IS NULL ORDER BY (Cognome + ' ' + Nome), t_Docenti.IDdocente ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDdocente, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, CodFiscale FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente WHERE sngINPS>0 AND CodiceTributo IN('1040','1040*','1038') AND FK_Azienda IS NULL AND Reso=0 AND YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin) - 1) + " GROUP BY t_ProgettiPagamentiCompensiOneri.IDdocente, t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa, CodFiscale HAVING t_ProgettiPagamentiCompensiOneri.FK_AliquotaPrevSepa IS NOT NULL ORDER BY t_ProgettiPagamentiCompensiOneri.IDdocente ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT (t_DocentiParcelle.FK_Docente) AS IDdocente, (sngAliquotaPrevSepa) AS FK_AliquotaPrevSepa, CodFiscale FROM t_DocentiParcelle INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente WHERE sngINPS>0 AND CodiceTributo IN('1040','1040*','1038') AND FK_Azienda IS NULL AND YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin) - 1) + " GROUP BY t_DocentiParcelle.FK_Docente, sngAliquotaPrevSepa, CodFiscale HAVING sngAliquotaPrevSepa IS NOT NULL ORDER BY t_DocentiParcelle.FK_Docente ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT IDdocente, FK_Azienda, Cognome, Nome, StrDOC, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, CodFiscale, PIVA, DescrParFiscale, CodiceRedditoCertificazione, CodiceTributo, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc FROM t_Pagamenti ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT IDdocente, FK_Azienda, Cognome, Nome, (Cognome + ' ' + Nome) AS StrDOC, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, CodFiscale, PIVA, DescrParFiscale, CodiceRedditoCertificazione, CodiceTributo, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCassaPrev) AS sngCassaPrev, SUM(CostiAnticipo) AS sngCostiAnticipo, SUM(CostiViaggio) AS sngCostiViaggio, SUM(CostiVitto) AS sngCostiVitto, SUM(sngIVA) AS sngIVA, SUM(sngINPS) AS sngINPS, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc FROM t_DocentiParcelle INNER JOIN t_DecodificatoreParametroFiscale ON t_DecodificatoreParametroFiscale.IDparfisc = t_DocentiParcelle.FK_PF INNER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente WHERE YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin) - 1) + " GROUP BY t_Docenti.IDdocente, FK_Azienda, Cognome, Nome, ComResidenza, CAPresidenza, CodiceRedditoCertificazione, IndirResidenza, ProvResidenza, CodFiscale, PIVA, DescrParFiscale, CodiceTributo HAVING CodiceTributo IN('1040','1040*','1038') AND FK_Azienda IS NULL ORDER BY (Cognome + ' ' + Nome), t_Docenti.IDdocente ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT t_Aziende.IDazienda, t_ProgettiPagamentiCompensiOneri.FK_Azienda, (DescrAzienda) AS StrDOC, ComSedeAz, CAPSedeAZ, IndirSedeAz, ProvSedeAz, CodFiscale, PIVA, t_DecodificatoreParametroFiscale.DescrParFiscale, CodiceRedditoCertificazione, CodiceTributo, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCassaPrev) AS sngCassaPrev, SUM(sngCostiAnticipo) AS sngCostiAnticipo, SUM(sngCostiViaggio) AS sngCostiViaggio, SUM(sngCostiVitto) AS sngCostiVitto, SUM(sngIVA) AS sngIVA, SUM(sngINPS) AS sngINPS, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_SediAziende ON t_SediAziende.FK_Azienda = t_Aziende.IDazienda WHERE YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin) - 1) + " AND FK_TipoSede=1 GROUP BY t_Aziende.IDazienda, t_ProgettiPagamentiCompensiOneri.FK_Azienda, DescrAzienda, ComSedeAz, CAPSedeAZ, IndirSedeAz, ProvSedeAz, CodFiscale, PIVA, t_DecodificatoreParametroFiscale.DescrParFiscale, CodiceTributo, CodiceRedditoCertificazione HAVING CodiceTributo IN('1040','1040*','1038') AND t_ProgettiPagamentiCompensiOneri.FK_Azienda IS NOT NULL ORDER BY DescrAzienda, t_Aziende.IDazienda ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT IDazienda, FK_Azienda, StrDOC, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, CodFiscale, PIVA, DescrParFiscale, CodiceRedditoCertificazione, CodiceTributo, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc FROM t_Pagamenti ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT t_Aziende.IDazienda, t_DocentiParcelle.FK_Azienda, (DescrAzienda) AS StrDOC, ComSedeAz, CAPSedeAZ, IndirSedeAz, ProvSedeAz, CodFiscale, PIVA, DescrParFiscale, CodiceRedditoCertificazione, CodiceTributo, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCassaPrev) AS sngCassaPrev, SUM(CostiAnticipo) AS sngCostiAnticipo, SUM(CostiViaggio) AS sngCostiViaggio, SUM(CostiVitto) AS sngCostiVitto, SUM(sngIVA) AS sngIVA, SUM(sngINPS) AS sngINPS, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc FROM t_DocentiParcelle INNER JOIN t_DecodificatoreParametroFiscale ON t_DecodificatoreParametroFiscale.IDparfisc = t_DocentiParcelle.FK_PF INNER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_SediAziende ON t_SediAziende.FK_Azienda = t_Aziende.IDazienda WHERE YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin) - 1) + " AND FK_TipoSede=1 GROUP BY t_Aziende.IDazienda, t_DocentiParcelle.FK_Azienda, DescrAzienda, ComSedeAz, CAPSedeAZ, CodiceRedditoCertificazione, IndirSedeAz, ProvSedeAz, CodFiscale, PIVA, t_DecodificatoreParametroFiscale.DescrParFiscale, CodiceTributo HAVING CodiceTributo IN('1040','1040*','1038') AND t_DocentiParcelle.FK_Azienda IS NOT NULL ORDER BY DescrAzienda, t_Aziende.IDazienda ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT IDdocente, IDazienda, Cognome, Nome, StrDOC, IIf(IDazienda IS NULL, CodFiscale, PIVA) AS CodFiscale, DescrParFiscale, CodiceRedditoCertificazione, ProvResidenza, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCassaPrev) AS sngCassaPrev, SUM(sngCostiAnticipo) AS sngCostiAnticipo, SUM(sngCostiViaggio) AS sngCostiViaggio, SUM(sngCostiVitto) AS sngCostiVitto, SUM(sngIVA) AS sngIVA, SUM(sngINPS) AS sngINPS, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, (0) AS AmmLordo, (0) AS IVA, (0) AS NonSoggettoRegConv, (0) AS AltreNonSogg, (0) AS ImponibileFiscale, (0) AS RitenutaAcconto, (0) AS ImponibilePrev, (0) AS SpeseRimborso, (0) AS ContributiPrevDovuti, (0) AS ContributiCollaborazioni, (0) AS AmmNetto, (0) AS AmmLordoGPP, (0) AS IVAGPP, (0) AS NonSoggettoRegConvGPP, (0) AS AltreNonSoggGPP, (0) AS ImponibileFiscaleGPP, (0) AS RitenutaAccontoGPP, (0) AS ImponibilePrevGPP, (0) AS SpeseRimborsoGPP, (0) AS ContributiPrevDovutiGPP, (0) AS ContributiCollaborazioniGPP, (0) AS AmmNettoGPP FROM t_Pagamenti GROUP BY IDdocente, IDazienda, StrDOC, DescrParFiscale, ProvResidenza, CodFiscale, PIVA, CodiceRedditoCertificazione, Cognome, Nome ORDER BY StrDOC ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT IDdocente, CodFiscale FROM t_Docenti WHERE IDdocente " + clsTblDatiDR.StringaFiltroIN("IDdocente");
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT IDdocente, IDazienda, Cognome, Nome, StrDOC, CodFiscale, DescrParFiscale, CodiceRedditoCertificazione, ProvResidenza, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AmmLordo, IVA, NonSoggettoRegConv, AltreNonSogg, ImponibileFiscale, RitenutaAcconto, ImponibilePrev, SpeseRimborso, ContributiPrevDovuti, ContributiCollaborazioni, AmmNetto FROM t_Pagamenti ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT IDdocente, IDazienda, Cognome, Nome, StrDOC, CodFiscale, DescrParFiscale, CodiceRedditoCertificazione, ProvResidenza, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AmmLordo, IVA, NonSoggettoRegConv, AltreNonSogg, ImponibileFiscale, RitenutaAcconto, ImponibilePrev, SpeseRimborso, ContributiPrevDovuti, ContributiCollaborazioni, AmmNetto FROM t_Pagamenti ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT IDdocente, IDazienda, (NULL) AS SiglaSede, Cognome, Nome, StrDOC, CodFiscale, CodiceRedditoCertificazione, (NULL) AS ParFisc, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCassaPrev) as sngCassaPrev, SUM(sngCostiAnticipo) AS sngCostiAnticipo, SUM(sngCostiViaggio) AS sngCostiViaggio, SUM(sngCostiVitto) AS sngCostiVitto, SUM(sngIVA) AS sngIVA, SUM(sngINPS) AS sngINPS, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(AmmLordo) AS AmmLordo, SUM(IVA) AS IVA, SUM(NonSoggettoRegConv) AS NonSoggettoRegConv, SUM(AltreNonSogg) AS AltreNonSogg, SUM(ImponibileFiscale) AS ImponibileFiscale, SUM(RitenutaAcconto) AS RitenutaAcconto, SUM(ImponibilePrev) AS ImponibilePrev, SUM(SpeseRimborso) AS SpeseRimborso, SUM(ContributiPrevDovuti) AS ContributiPrevDovuti, SUM(ContributiCollaborazioni) AS ContributiCollaborazioni, SUM(AmmNetto) AS AmmNetto FROM t_Pagamenti GROUP BY IDdocente, IDazienda, StrDOC, CodFiscale, CodiceRedditoCertificazione, Cognome, Nome ORDER BY StrDOC ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDdocente, IDsede, SUM(sngCostoInc) AS LordoPerSCO FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin) - 1) + " AND FK_Azienda IS NULL GROUP BY IDdocente, IDsede HAVING IDsede IS NOT NULL ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = origineDati + "UNION SELECT t_ProgettiPagamentiCompensiOneri.IDdocente, IDsede, SUM(sngCostoInc) AS LordoPerSCO FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin) - 1) + "AND FK_Azienda IS NULL AND IDsede IS NULL GROUP BY IDdocente, IDsede ORDER BY IDdocente, SUM(sngCostoInc) DESC ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT t_DocentiParcelle.FK_Docente, IDsede, SUM(sngCostoInc) AS LordoPerSCO FROM t_DocentiParcelle INNER JOIN t_Sedi ON t_DocentiParcelle.FK_Sede = t_Sedi.IDsede WHERE YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin) - 1) + " AND FK_Azienda IS NULL GROUP BY FK_Docente, IDsede ORDER BY FK_Docente, SUM(sngCostoInc) DESC, t_Sedi.IDsede ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT  (t_ProgettiPagamentiCompensiOneri.FK_Azienda) AS IDazienda, IDsede, SUM(sngCostoInc) AS LordoPerSCO FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Sedi ON t_ProgettiPagamentiCompensiOneri.FK_SedeEdizione = t_Sedi.IDsede WHERE YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin) - 1) + " AND FK_Azienda IS NOT NULL GROUP BY t_ProgettiPagamentiCompensiOneri.FK_Azienda, IDsede ORDER BY t_ProgettiPagamentiCompensiOneri.FK_Azienda, SUM(sngCostoInc) DESC, IDsede ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT t_DocentiParcelle.FK_Azienda, IDsede, SUM(sngCostoInc) AS LordoPerSCO FROM t_DocentiParcelle INNER JOIN t_Sedi ON t_DocentiParcelle.FK_Sede = t_Sedi.IDsede WHERE YEAR(DataPagamento)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.DataLogin) - 1) + " GROUP BY t_DocentiParcelle.FK_Azienda, IDsede HAVING FK_Azienda IS NOT NULL ORDER BY t_DocentiParcelle.FK_Azienda, SUM(sngCostoInc) DESC, t_Sedi.IDsede ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT IDdocente, IDazienda, SiglaSede, Cognome, Nome, StrDOC, CodFiscale, CodiceRedditoCertificazione, DescrParFiscale, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AmmLordo, IVA, NonSoggettoRegConv, AltreNonSogg, ImponibileFiscale, RitenutaAcconto, ImponibilePrev, SpeseRimborso, ContributiPrevDovuti, ContributiCollaborazioni, AmmNetto FROM t_Pagamenti ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:					origineDati = "SELECT IDdocente, IDazienda, SiglaSede, Cognome, Nome, Sesso, StrDOC, (NULL) AS CF_PIVA, CodiceRedditoCertificazione, SUM(sngCostoInc) AS sngCostoInc, SUM(sngRiva) AS sngRiva, SUM(sngCassaPrev) as sngCassaPrev, SUM(sngCostiAnticipo) AS sngCostiAnticipo, SUM(sngCostiViaggio) AS sngCostiViaggio, SUM(sngCostiVitto) AS sngCostiVitto, SUM(sngIVA) AS sngIVA, SUM(sngINPS) AS sngINPS, SUM(sngINPS23) AS sngINPS23, SUM(sngTotale) AS sngTotale, SUM(sngINPS13) AS sngINPS13, SUM(sngRiteAcc) AS sngRiteAcc, SUM(sngNettoInc) AS sngNettoInc, SUM(AmmLordo) AS AmmLordo, SUM(IVA) AS IVA, SUM(NonSoggettoRegConv) AS NonSoggettoRegConv, SUM(AltreNonSogg) AS AltreNonSogg, SUM(ImponibileFiscale) AS ImponibileFiscale, SUM(RitenutaAcconto) AS RitenutaAcconto, SUM(ImponibilePrev) AS ImponibilePrev, SUM(SpeseRimborso) AS SpeseRimborso, SUM(ContributiPrevDovuti) AS ContributiPrevDovuti, SUM(ContributiCollaborazioni) AS ContributiCollaborazioni, SUM(AmmNetto) AS AmmNetto, (NULL) AS DataNascita, (NULL) AS LuogoNascita, (NULL) AS ProvNascita, (NULL) AS ComResidenza, (NULL) AS ProvResidenza, (NULL) AS IndirResidenza FROM t_Pagamenti GROUP BY IDdocente, IDazienda, SiglaSede, StrDOC, CodiceRedditoCertificazione, Sesso, Cognome, Nome ORDER BY StrDOC ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:							origineDati = "SELECT (FK_Docente) AS IDdocente, Sesso, StrDOC, CodFiscale, DataNascita, LuogoNascita, ProvNascita, IndirResidenza, CAPresidenza, ComResidenza, ProvResidenza FROM zzz_t_CertificazioneGPP_2008 WHERE StrDOC='" + FunzStringa.StringaSQL(Conversions.ToString(dtCert.get_Campo((object)"StrDOC"))) + "' ";
PerseoNET/frmPannelloCertificazionePagamenti.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocente, Sesso, (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, DataNascita, (CASE WHEN NazNascita='ITALIA' THEN LuogoNascita ELSE NazNascita END) AS LuogoNascita, ProvNascita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza FROM t_Docenti WHERE IDdocente=", dtCert.get_Campo((object)"IDdocente")), " "));
PerseoNET/frmPannelloCertificazionePagamenti.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDazienda, (NULL) AS Sesso, (DescrAzienda) AS StrDOC, (PIVA) AS CodFiscale, (NULL) AS DataNascita, (NULL) AS LuogoNascita, (NULL) AS ProvNascita, (IndirSedeAz) AS IndirResidenza, (CAPSedeAZ) AS CAPresidenza, (ComSedeAz) AS ComResidenza, (ProvSedeAz) AS ProvResidenza FROM t_Aziende INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda WHERE IDazienda=", dtCert.get_Campo((object)"IDazienda")), " AND FK_TipoSede=1 "));
PerseoNET/frmPannelloCertificazionePagamenti.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcertgpp2008, Cognome, Nome, StrDOC, CodFiscale, ProvNascita, IndirResidenza, CAPresidenza, ComResidenza, ProvResidenza, Sesso, DataNascita, LuogoNascita, ProvNascita FROM zzz_t_CertificazioneGPP_2008 WHERE CodFiscale='", dtCert.get_Campo((object)"CF_PIVA")), "'"));
PerseoNET/clsPagaPrestazioni.cs:					string origineDati = "SELECT IDprogpagamento, FK_Progetto, FK_Sede, DataRichiestaInizio, DataRichiestaFine, DataPagamento, Assegni, MatricolaTracciatoAssegni, DataRec, DataModifica, Bloccato FROM t_ProgettiPagamenti ";
PerseoNET/clsPagaPrestazioni.cs:					string origineDati = "SELECT IDdocente, (Cognome + ' ' + Nome) AS Collaboratore, PIVA, CodFiscale FROM t_Docenti WHERE IDdocente " + strFiltroIN_Collaboratori + " AND CodiceIBAN IS NULL\tORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/clsPagaPrestazioni.cs:					origineDati = (clsTblDatiDR.OrigineDatiUnione = "SELECT IDazienda, DescrAzienda, PIVA, CodFiscale FROM t_Aziende INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda WHERE FK_TipoSede=1 AND t_SediAziende.Attiva = 1 And CodiceIBAN IS NULL AND IDazienda " + strFiltroIN_Aziende + " ORDER BY DescrAzienda ");
PerseoNET/clsPagaPrestazioni.cs:				string vSQL = "SELECT COUNT(IDcompensi) AS NErr FROM t_ProgettiPagamentiCompensiOneri WHERE Bloccato=1 ";
PerseoNET/clsPagaPrestazioni.cs:				string vSQL = "SELECT MAX(IDcompensi) AS PKMax FROM t_ProgettiPagamentiCompensiOneri ";
PerseoNET/clsPagaPrestazioni.cs:				string origineDati = "SELECT IDvers, BloccoContratti, BloccoRichiedePagamento, BloccoPagamento FROM zt_Versione";
PerseoNET/clsPagaPrestazioni.cs:				string text2 = (clsTblDatiDR.OrigineDati = "SELECT IDvers, BloccoContratti, BloccoRichiedePagamento, BloccoPagamento FROM zt_Versione");
PerseoNET/clsPagaPrestazioni.cs:				string text2 = (clsTblDatiDR.OrigineDati = "SELECT IDvers, BloccoContratti, BloccoRichiedePagamento, BloccoPagamento FROM zt_Versione");
PerseoNET/clsPagaPrestazioni.cs:				string origineDati = "SELECT IDvers, FK_Pagatore, Prestazioni, (SELECT (Cognome + ' ' + Nome) FROM t_Personale WHERE IDpers=FK_Pagatore) AS Pagatore FROM zt_Versione ";
PerseoNET/clsPagaPrestazioni.cs:				string origineDati = "SELECT IDvers, FK_Pagatore, (SELECT (Cognome + ' '  + Nome) FROM t_Personale WHERE IDpers=FK_Pagatore) AS Pagatore FROM zt_Versione ";
PerseoNET/clsPagaPrestazioni.cs:				string origineDati = "SELECT IDvers, FK_Pagatore, Prestazioni FROM zt_Versione ";
PerseoNET/clsPagaPrestazioni.cs:			string origineDati = "SELECT IDprogpagamento, IDcompensi, SiglaSede, CodiceProgetto, DataRichiestaInizio, DataRichiestaFine FROM t_ProgettiPagamenti INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento WHERE t_ProgettiPagamenti.DataPagamento IS NULL ORDER BY IDcompensi DESC";
PerseoNET/clsPagaPrestazioni.cs:				string str = "SELECT t_ProgettiPagamenti.IDprogpagamento, IDprogetto, IDsede, CodiceProgetto, SiglaSede, DataRichiestaInizio, DataRichiestaFine, DataPagamento, (0) AS ErroreCritico FROM t_ProgettiPagamenti INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede WHERE Anticipo=0 ";
PerseoNET/clsPagaPrestazioni.cs:				str = "SELECT t_ProgettiPagamenti.IDprogpagamento, IDprogetto, IDsede, CodiceProgetto, SiglaSede, DataPagamento FROM t_ProgettiPagamenti ";
PerseoNET/clsPagaPrestazioni.cs:				string origineDati = "SELECT IDprogpagamento, FK_Progetto, FK_Sede, DataRichiestaInizio, DataRichiestaFine, DataPagamento, Assegni, MatricolaTracciatoAssegni, DataRec, DataModifica, Bloccato FROM t_ProgettiPagamenti ";
PerseoNET/Funzioni.cs:				string origineDati = ((Operators.CompareString(strProvNascita, "EE", TextCompare: false) == 0) ? ("SELECT IDtnazione, CodiceNazione, DescrNazione FROM t_TipoNazioniCF WHERE DescrNazione='" + FunzStringa.StringaSQL(strLuogoNascita) + "' ") : ("SELECT IDcomune, CodiceComune, Comune FROM t_TipoComuni WHERE Comune='" + FunzStringa.StringaSQL(strLuogoNascita) + "' "));
PerseoNET/Funzioni.cs:					string origineDati = ((Operators.CompareString(Strings.Mid(strCF, 12, 1), "Z", TextCompare: false) == 0) ? ("SELECT CodiceNazione, DescrNazione, (TipoNazionalita) AS ProvenienzaGeografica, FK_ProvenienzaGeo, Attiva FROM t_TipoNazioniCF LEFT OUTER JOIN t_TipoNazionalita ON t_TipoNazioniCF.FK_ProvenienzaGeo = t_TipoNazionalita.IDtnaz WHERE CodiceNazione='" + Strings.Mid(strCF, 12, 4) + "' ") : ("SELECT CodiceComune, Comune, Prov, (1) AS FK_ProvenienzaGeo, Attivo FROM t_TipoComuni WHERE CodiceComune='" + Strings.Mid(strCF, 12, 4) + "' "));
PerseoNET/frmAvvisi.cs:				string str = "SELECT IDtcausaleavv, TipoCausaleAvviso FROM t_TipoCausaleAvviso ";
PerseoNET/frmAvvisi.cs:				str = "SELECT t_AvvisiUtentiPerseo.IDavviso, Enumerazione, TipoCausaleAvviso, DescrAvviso, NomeTabella, PKRecord, DataGenerazione, (Cognome + ' ' + Nome) AS Utente, Conservare FROM t_AvvisiUtentiPerseo INNER JOIN t_TipoCausaleAvviso ON t_AvvisiUtentiPerseo.FK_Causale = t_TipoCausaleAvviso.IDtcausaleavv LEFT OUTER JOIN t_Personale ON t_AvvisiUtentiPerseo.FK_Persona=t_Personale.IDpers ";
PerseoNET/frmAvvisi.cs:									string vSQL = "SELECT IDiscrizione, Cognome, Nome, CodiceEdizione, SiglaSede FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDiscrizione=" + Conversions.ToString(num2);
PerseoNET/frmAvvisi.cs:						string origineDati = "SELECT DataAssenza, OraInizio, OraFine FROM t_Assenze";
PerseoNET/frmAvvisi.cs:				string origineDati = "SELECT IDavviso, DescrAvviso, DataGenerazione FROM t_AvvisiUtentiPerseo WHERE FK_Causale=" + Conversions.ToString(30) + " ORDER BY DataGenerazione DESC ";
PerseoNET/frmAvvisi.cs:				origineDati = "SELECT IDdocente, Dipendente, CodiceEdizione, SiglaSede, DataGenerazione, Periodo FROM t_Docenti ";
PerseoNET/clsAzione.cs:						string origineDati = "SELECT t_Azioni.IDazione, FK_Progetto, FK_SedeAzione, FK_StatoAzione, AzioneAttiva, DescrAzione, IDmwa, CodiceAzione, DataAvvioAzione, DataFineAzione, ModelloAzione FROM t_Azioni ";
PerseoNET/clsAzione.cs:				string origineDati = "SELECT t_Azioni.IDazione, FK_Progetto, FK_SedeAzione, FK_StatoAzione, AzioneAttiva, DescrAzione, IDmwa, CodiceAzione, DataAvvioAzione, DataFineAzione, ModelloAzione FROM t_Azioni ";
PerseoNET/frmParametriFiscali.cs:				string origineDati = "SELECT IDparfisc, CodiceParFiscale, DescrParFiscale, Gruppo, AliquotaIva, IvaAggiuntaAnticipo, IvaAggiuntaVitto, IvaAggiuntaViaggio, AliquotaRitenutaAcconto, ImponibileRitenutaAcconto, RitenutaAggiuntaAnticipo, RitenutaAggiuntaVitto, RitenutaAggiuntaViaggio, ContributoCassaPrev, ImponibileCassaPrev, CassaPrevIncludeRivalsa, AliquotaRivalsa, ImponibileRivalsa, CodiceTributo, TipoContratto, chbEsclusioneIVA, chbRivalsaGestSeparata, chbIscrittoRegImprese, chbRegimeFiscAgevolato, chbParasubordinato, cmbFK_AliquotaPrevSepa, cmbFK_ContributoCassaPrev, CommissioneEsame, ModelloLetteraIncarico, DettaglioEdizione_LI, TipoCococo, CodiceRedditoCertificazione, ResidenteEstero, PF_PersonaFisica, PF_Azienda, chbContribuenteMinimo, DataFatturaValida, FK_PFSuccessore, FK_PFPredecessore, AccettazioneCIGCUP, ObbligoDataScadenza, ParasubSenzaFranchigia, ObbligoIscrizioneAlbo, ObbligoAttestazioneProf, RegolaAnnoSolare, GiorniAnnoSolare, Attivo, DataRec, DataModifica, Bloccato FROM t_DecodificatoreParametroFiscale WHERE IDparfisc=" + Conversions.ToString(vID);
PerseoNET/frmParametriFiscali.cs:				origineDati = "SELECT IDutente, IDrecord, Tabella, NomeCampoPK FROM zt_RecordBloccati WHERE Tabella='t_DecodificatoreParametroFiscale' AND IDutente<>" + Conversions.ToString(VariabiliClassi.IDaccesso);
PerseoNET/frmParametriFiscali.cs:				string origineDati = "SELECT IDparfisc, CodiceParFiscale, DescrParFiscale, TipoContratto, PF_PersonaFisica, PF_Azienda, CommissioneEsame, ModelloLetteraIncarico, Attivo FROM t_DecodificatoreParametroFiscale WHERE Attivo=1 ORDER BY Attivo DESC, TipoContratto, CodiceParFiscale ";
PerseoNET/frmParametriFiscali.cs:				origineDati = "SELECT TipoContratto FROM t_DecodificatoreParametroFiscale GROUP BY TipoContratto ORDER BY TipoContratto ";
PerseoNET/frmParametriFiscali.cs:					string vSQL = "SELECT IDutente, IDrecord, Tabella, NomeCampoPK FROM zt_RecordBloccati WHERE Tabella='t_DecodificatoreParametroFiscale' AND IDutente<>" + Conversions.ToString(VariabiliClassi.IDaccesso);
PerseoNET/frmParametriFiscali.cs:				string vSQL = "SELECT IDutente, IDrecord, Tabella, NomeCampoPK FROM zt_RecordBloccati WHERE Tabella='t_DecodificatoreParametroFiscale' AND IDutente<>" + Conversions.ToString(VariabiliClassi.IDaccesso);
PerseoNET/frmParametriFiscali.cs:					string vSQL = "SELECT CodiceParFiscale FROM t_DecodificatoreParametroFiscale ORDER BY CodiceParFiscale DESC ";
PerseoNET/frmParametriFiscali.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("INSERT INTO t_DecodificatoreParametroFiscale(CodiceParFiscale, DescrParFiscale, MaxOreAnno, chbEsclusioneIVA, chbRivalsaGestSeparata, cmbFK_AliquotaPrevSepa, cmbFK_ContributoCassaPrev, chbIscrittoRegImprese, chbRegimeFiscAgevolato, chbParasubordinato, chbContribuenteMinimo, CommissioneEsame, Gruppo, AliquotaIva, ImponibileIva, IvaAggiuntaAnticipo, IvaAggiuntaVitto, IvaAggiuntaViaggio, AliquotaRitenutaAcconto, ImponibileRitenutaAcconto, RitenutaAggiuntaAnticipo, RitenutaAggiuntaVitto, RitenutaAggiuntaViaggio, Allievi, AliquotaRivalsa, ContributoCassaPrev, AliquotaRivalsa_old, ImponibileRivalsa, AliquotaTrattenutaINPS, ImponibileTrattenutaINPS, QuotaPercipiente, QuotaCommittente, VersamentoInps, IvaRivalsa, IrpefRivalsa, CodiceTributo, SedeInps, Irap, TipoContratto, CodiceRedditoCertificazione, TipoCococo, ModelloLetteraIncarico, ModelloNotula, ResidenteEstero, PF_PersonaFisica, PF_Azienda, ObbligoIscrizioneAlbo, ObbligoAttestazioneProf, Attivo) SELECT ('" + value + "') AS CPF, ('" + FunzStringa.StringaSQL(stringa) + "') AS DescrParFiscale, MaxOreAnno, chbEsclusioneIVA, chbRivalsaGestSeparata, cmbFK_AliquotaPrevSepa, cmbFK_ContributoCassaPrev, chbIscrittoRegImprese, chbRegimeFiscAgevolato, chbParasubordinato, chbContribuenteMinimo, CommissioneEsame, Gruppo, AliquotaIva, ImponibileIva, IvaAggiuntaAnticipo, IvaAggiuntaVitto, IvaAggiuntaViaggio, AliquotaRitenutaAcconto, ImponibileRitenutaAcconto, RitenutaAggiuntaAnticipo, RitenutaAggiuntaVitto, RitenutaAggiuntaViaggio, Allievi, AliquotaRivalsa, ContributoCassaPrev, AliquotaRivalsa_old, ImponibileRivalsa, AliquotaTrattenutaINPS, ImponibileTrattenutaINPS, QuotaPercipiente, QuotaCommittente, VersamentoInps, IvaRivalsa, IrpefRivalsa, CodiceTributo, SedeInps, Irap, TipoContratto, CodiceRedditoCertificazione, TipoCococo, ModelloLetteraIncarico, ModelloNotula, ResidenteEstero, PF_PersonaFisica, PF_Azienda, ObbligoIscrizioneAlbo, ObbligoAttestazioneProf, Attivo FROM t_DecodificatoreParametroFiscale where IDparfisc=", tblPF.get_Campo((object)"IDparfisc", vFlagUpdateDB: false)));
PerseoNET/frmParametriFiscali.cs:						str = "SELECT IDparfisc, CodiceParFiscale, DescrParFiscale, TipoContratto, PF_PersonaFisica, PF_Azienda, CommissioneEsame, ModelloLetteraIncarico, Attivo FROM t_DecodificatoreParametroFiscale ";
PerseoNET/frmParametriFiscali.cs:						str = "SELECT IDparfisc, CodiceParFiscale, DescrParFiscale, TipoContratto, PF_PersonaFisica, PF_Azienda, CommissioneEsame, ModelloLetteraIncarico, Attivo FROM t_DecodificatoreParametroFiscale WHERE TipoContratto='" + FunzStringa.StringaSQL(cmbFiltraTipoContratto.Text) + "' ";
PerseoNET/frmParametriFiscali.cs:						str = "SELECT IDparfisc, CodiceParFiscale, DescrParFiscale, TipoContratto, PF_PersonaFisica, PF_Azienda, CommissioneEsame, ModelloLetteraIncarico, Attivo FROM t_DecodificatoreParametroFiscale WHERE Attivo=1 ";
PerseoNET/frmParametriFiscali.cs:						str = "SELECT IDparfisc, CodiceParFiscale, DescrParFiscale, TipoContratto, PF_PersonaFisica, PF_Azienda, CommissioneEsame, ModelloLetteraIncarico, Attivo FROM t_DecodificatoreParametroFiscale WHERE Attivo=0 ";
PerseoNET/frmParametriFiscali.cs:						str = "SELECT IDparfisc, CodiceParFiscale, DescrParFiscale, TipoContratto, PF_PersonaFisica, PF_Azienda, CommissioneEsame, ModelloLetteraIncarico, Attivo FROM t_DecodificatoreParametroFiscale ";
PerseoNET/frmParametriFiscali.cs:				string origineDati = "SELECT IDparfisc, CodiceParFiscale, DescrParFiscale, MaxOreAnno, chbEsclusioneIVA, chbRivalsaGestSeparata, cmbFK_AliquotaPrevSepa, cmbFK_ContributoCassaPrev, chbIscrittoRegImprese, chbRegimeFiscAgevolato, chbParasubordinato, chbContribuenteMinimo, ObbligoDataScadenza, CommissioneEsame, Gruppo, AliquotaIva, ImponibileIva, IvaAggiuntaAnticipo, IvaAggiuntaVitto, IvaAggiuntaViaggio, AliquotaRitenutaAcconto, ImponibileRitenutaAcconto, RitenutaAggiuntaAnticipo, RitenutaAggiuntaVitto, RitenutaAggiuntaViaggio, Allievi, ContributoCassaPrev, ImponibileCassaPrev, CassaPrevIncludeRivalsa, AliquotaRivalsa, ImponibileRivalsa, AliquotaRivalsa_old, AliquotaTrattenutaINPS, ImponibileTrattenutaINPS, QuotaPercipiente, QuotaCommittente, VersamentoInps, IvaRivalsa, IrpefRivalsa, CodiceTributo, SedeInps, Irap, TipoContratto, CodiceRedditoCertificazione, TipoCococo, ModelloLetteraIncarico, AccettazioneCIGCUP, DettaglioEdizione_LI, ModelloNotula, ResidenteEstero, PF_PersonaFisica, PF_Azienda, ObbligoIscrizioneAlbo, ObbligoAttestazioneProf, DataFatturaValida, FK_PFSuccessore, FK_PFPredecessore, Attivo FROM t_DecodificatoreParametroFiscale WHERE Attivo=1 ";
PerseoNET/clsGestioneEventi.cs:						num = Strings.InStr(1, strerr, "SELECT ");
PerseoNET/clsGestioneEventi.cs:					num = Strings.InStr(1, strerr, "SELECT ");
PerseoNET/clsGestioneEventi.cs:				string origineDati = "SELECT IDstorico, Persona, Azione, Tipo, Data FROM t_StoricoEventi ";
PerseoNET/frmCalendarioIndividuale.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDaccesso, Data, Azione FROM t_StoricoEventi WHERE Azione LIKE '%edizione ID=", Variabili.Edizione.get_Campo((object)0)), "%' AND Azione LIKE '%ore assegnate%' "), "AND Tipo='"), VariabiliClassi.Evento.ConversioneTipoStringaTipo(clsGestioneEventi.TipoEvento.DatoCritico)), "' "), "AND Data>="), FunzStringa.StrDataSQL(Strings.Format(DateAndTime.DateAdd(DateInterval.Day, -8.0, VariabiliClassi.DataLogin), "dd/MM/yyyy") + " 00:00:00", FlagSqlServer: true)));
PerseoNET/frmCalendarioIndividuale.cs:					string str = ((!Operators.ConditionalCompareObjectEqual(Variabili.Edizione.get_Campo((object)"AbilitaFAD"), false, TextCompare: false)) ? "(SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS tore FROM t_CalendarioAttivita WHERE FK_Incarico=t_IncarichiEdizioni.IDincarico AND DocenzaFAD=1) AS torefad, " : "(0) AS torefad, ");
PerseoNET/frmCalendarioIndividuale.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDargomento, FK_TipoArgomento, FK_Tipo, (Cognome + ' ' + Nome) AS StrDOC, IndArgomento, DescrBreveArgomento, DescrArgomento, OreAssegnate, (SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS tore FROM t_CalendarioAttivita WHERE FK_Incarico=t_IncarichiEdizioni.IDincarico) AS torep, " + str + "t_IncarichiEdizioni.DataModifica FROM t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND FK_Argomento IS NOT NULL AND FK_TipoAttivita=1 "), "ORDER BY (Cognome + ' ' + Nome), DescrArgomento"));
PerseoNET/frmCalendarioIndividuale.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDargomento, FK_TipoArgomento, FK_Tipo, (Cognome + ' ' + Nome) AS StrDOC, IndArgomento, DescrBreveArgomento, DescrArgomento, OreAssegnate, (SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS tore FROM t_CalendarioAttivita WHERE FK_Incarico=t_IncarichiEdizioni.IDincarico) AS torep, " + str + "t_IncarichiEdizioni.DataModifica FROM t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND FK_Argomento IS NOT NULL AND FK_TipoAttivita=1 "), "ORDER BY (Cognome + ' ' + Nome), DescrArgomento"));
PerseoNET/frmCalendarioIndividuale.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Iscrizioni.IDiscrizione, IDutente, PosRegistro, (Cognome + ' ' + Nome) AS Studente, DataIscr, DataRitiro, OreUtente, (0) AS Fatte, (0) AS OreFAD FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataIscr IS NOT NULL "), "ORDER BY PosRegistro, (Cognome + ' ' + Nome) "));
PerseoNET/frmCalendarioIndividuale.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (FK_Iscrizione) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DocenzaFAD FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND FK_Argomento IS NOT NULL "), "ORDER BY FK_iscrizione, DataAttivita, OraInizio "));
PerseoNET/frmCalendarioIndividuale.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDloced, CodiceLocale FROM t_LocaliEdizioni WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " AND Fittizio=FALSE "));
PerseoNET/frmCalendarioIndividuale.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_CalendarioAttivita.IDcalatt, t_CalendarioAttivita.FK_Incarico, FK_Locale, IDdocente, IDargomento, IDiscrizione, (NULL) AS DataOraInizio, DataAttivita, OraInizio, OraFine, DescrArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS StrDOC, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS StrUtente, DocenzaFAD, (DATEDIFF(mi,OraInizio,OraFine)/60) AS OreSvolte, CodiceLocale FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY DataAttivita, OraInizio "));
PerseoNET/frmCalendarioIndividuale.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDloced, CodiceLocale FROM t_LocaliEdizioni WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " ORDER BY Fittizio DESC, CodiceLocale "));
PerseoNET/frmCalendarioIndividuale.cs:					string text2 = (clsTblDatiDR.OrigineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt FROM t_CalendarioAttivita WHERE FK_Incarico=", tblCal.get_Campo((object)"FK_Incarico", vFlagUpdateDB: false)), " "), "AND DataAttivita="), FunzStringa.StrDataSQL(Conversions.ToString(tblCal.get_Campo((object)"DataAttivita", vFlagUpdateDB: false)), FlagSqlServer: true)), " "), "AND OraInizio="), FunzStringa.StrOrarioSQL(Conversions.ToString(tblCal.get_Campo((object)"OraInizio", vFlagUpdateDB: false)), FlagSqlServer: true)), " "), "AND FK_Iscrizione="), tblCal.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " ")));
PerseoNET/frmCalendarioIndividuale.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, DataAttivita, OraInizio, OraFine, Locale, IDiscrizione, Cognome & ' ' & Nome) AS Formatore, DescrArgomento, IDiscrizione, ('riga non importata') AS Esito FROM v_DettaglioCalendarioAttivitaIncaricoGPR INNER JOIN t_LocaliEdizioni ON v_DettaglioCalendarioAttivitaIncaricoGPR.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale WHERE TipoAttivita='DOCENZA' AND IDedizione=", Variabili.Edizione.get_Campo((object)"IDedizione")), " AND IDiscrizione IS NULL "), "AND DataAttivita>="), FunzStringa.StrDataSQL(stringa)), " AND DataAttivita<="), FunzStringa.StrDataSQL(stringa2)), " "), "ORDER BY DataAttivita, OraInizio "));
PerseoNET/frmCalendarioIndividuale.cs:					string origineDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, Locale, Formatore, DescrAttivita, Esito FROM t_CalendarioAttivita ";
PerseoNET/frmCalendarioIndividuale.cs:					string origineDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, Locale, Formatore, DescrArgomento, IDiscrizione, Esito FROM t_CalendarioAttivita ";
PerseoNET/frmCalendarioIndividuale.cs:						string origineDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine, Locale, IDiscrizione, Formatore, DescrAttivita, Studente, Esito FROM t_CalendarioAttivita ";
PerseoNET/frmCalendarioIndividuale.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT MIN(Dalle) AS dalle, MAX(Alle) AS Alle FROM t_VincoliOrariEdizione WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)));
PerseoNET/frmCalendarioIndividuale.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDdocente, IDedizione, StrDOC FROM t_IncarichiContrattiEdizioni GROUP BY IDdocente, IDedizione, StrDOC HAVING IDedizione=", Variabili.Edizione.get_Campo((object)0)));
PerseoNET/clsOrdine.cs:					string origineDati = "SELECT IDordine, FK_TipoOrdineSpesa, FK_Sede, FK_Fornitore, DescrRichiedente, DataRichiesta, NumeroRichiesta, NumeroOrdLab, DescrOrdine, Sconto, DataInizioContratto, DataFineContratto, DescrCausale, RichiestaPronta, Autorizzato, DataAutorizzazione, Respinto, NoteRespinto, AutorizzatoSCO, DataAutorizzazioneSCO, RespintoSCO, NoteRespintoSCO, DescrConsegna, NoteScadenzaPagamenti, TipoTempiPagamento, TipoModoPagaOrdine, NoteSconto, FK_TempoPagamento, FK_ModoPagamento, DataOrdineEvaso, Provvisorio, ModalitaAutorizzazione, SospesoRevisionare FROM t_RichiesteOrdini LEFT OUTER JOIN t_TipoModoPagamentoOrdine ON t_RichiesteOrdini.FK_ModoPagamento = t_TipoModoPagamentoOrdine.IDtmodopag LEFT OUTER JOIN t_TipoTempiPagamentoOrdine ON t_RichiesteOrdini.FK_TempoPagamento = t_TipoTempiPagamentoOrdine.IDttempipag WHERE IDordine=" + Conversions.ToString(value);
PerseoNET/clsOrdine.cs:				string origineDati = "SELECT IDordine, NumeroRichiesta, DataRichiesta, RichiestaPronta, AutorizzatoSCO, Autorizzato, Provvisorio, SiglaSede, t_RichiesteOrdini.DataModifica FROM t_RichiesteOrdini INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede WHERE Autorizzato=0 AND Respinto=0 AND RespintoSCO=0 AND IDsede " + Variabili.FiltroSedi + " AND t_RichiesteOrdini.DataRec<=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataRichiesta>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " ORDER BY DataRichiesta DESC ";
PerseoNET/clsOrdine.cs:				string origineDati = "SELECT IDordine, IDsede, NumeroRichiesta, DataRichiesta, RichiestaPronta, AutorizzatoSCO, Autorizzato, Provvisorio, SiglaSede, t_RichiesteOrdini.DataModifica FROM t_RichiesteOrdini INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede WHERE DataRichiesta>=" + FunzStringa.StrDataSQL(str, FlagSqlServer: true) + " AND t_RichiesteOrdini.DataModifica<" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND IDsede " + Variabili.FiltroSedi + " AND Provvisorio=0 AND AutorizzatoSCO=0 AND RespintoSCO=0 ORDER BY DataRichiesta DESC ";
PerseoNET/clsOrdine.cs:				string origineDati = "SELECT IDordine, NumeroRichiesta, DataRichiesta, RichiestaPronta, AutorizzatoSCO, Autorizzato, Provvisorio, SiglaSede FROM t_RichiesteOrdini INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede INNER JOIN t_RichiesteOrdiniFatture ON t_RichiesteOrdini.IDordine = t_RichiesteOrdiniFatture.FK_Ordine WHERE Autorizzato=0 AND DataRichiesta>=" + FunzStringa.StrDataSQL(str, FlagSqlServer: true) + " AND IDsede " + Variabili.FiltroSedi + " ORDER BY DataRichiesta DESC ";
PerseoNET/clsOrdine.cs:				string origineDati = "SELECT IDordine, NumeroRichiesta, DataRichiesta, RichiestaPronta, AutorizzatoSCO, Autorizzato, Provvisorio, SiglaSede, t_RichiesteOrdini.DataModifica FROM t_RichiesteOrdini INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede INNER JOIN t_RichiesteOrdiniFatture ON t_RichiesteOrdini.IDordine = t_RichiesteOrdiniFatture.FK_Ordine WHERE Provvisorio=1 AND DataRichiesta>=" + FunzStringa.StrDataSQL(str, FlagSqlServer: true) + " AND IDsede " + Variabili.FiltroSedi + " ORDER BY DataRichiesta DESC ";
PerseoNET/clsOrdine.cs:				string origineDati = "SELECT t_Progetti.IDprogetto, (FK_RichiestaOrdine) AS IDordine, DescrProgetto, CodiceProgetto, IDmwp, DataAvvioProg, DataFineProg, CodiceCIG, CodiceCUP, DescrBando, CodiceBando, AnnoBando FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN  t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando GROUP BY t_Progetti.IDprogetto, FK_RichiestaOrdine, DescrProgetto, CodiceProgetto, IDmwp, DataAvvioProg, DataFineProg, CodiceCIG, CodiceCUP, DescrBando, CodiceBando, AnnoBando HAVING FK_RichiestaOrdine=" + Conversions.ToString(mvIDordine) + " ORDER BY CodiceProgetto ";
PerseoNET/clsOrdine.cs:				string origineDati = "SELECT IDrigaord, FK_RichiestaOrdine, FK_UnitaMisura, IndRiga, DescrRigaOrdine, CodiceFornitore, QuantRiga, CifreDecimali, SiglaUnitaMisura, CostoUnitario, IVAunitario, Omaggio, IntestazioneGruppo FROM t_RichiesteOrdiniRighe LEFT OUTER JOIN t_TipoUnitaMisura ON t_RichiesteOrdiniRighe.FK_UnitaMisura = t_TipoUnitaMisura.IDtunitamis WHERE FK_RichiestaOrdine=" + Conversions.ToString(mvIDordine) + " ORDER BY IndRiga, IDrigaord ";
PerseoNET/clsOrdine.cs:				string origineDati = "SELECT t_RichiesteOrdiniFatture.IDfattord, FK_Ordine, DataRegistrazione, ProtocolloRegistrazione, NoteRegistrazione, Registra, TotaleImponibile FROM t_RichiesteOrdiniFatture WHERE FK_Ordine=" + Conversions.ToString(PKOrdine) + " ORDER BY DataRegistrazione ";
PerseoNET/clsOrdine.cs:				string origineDati = "SELECT IDtipospesa, IDtordine, TipoOrdine, ModelloOrdine, PreventiviRichiesti, ModelloStampa, IndTO, SedeCentrale, t_TipoOrdine.Obsoleto, TipoSpesa, IndSpesa, Contratto, AutorizzaLocale, MaxAutorizzaLocale, StampaBozza, CollegareProgetto, PreventiviMIN, t_TipoSpesa.Obsoleto FROM t_TipoSpesa INNER JOIN t_TipoOrdine ON t_TipoSpesa.FK_TipoOrdine = t_TipoOrdine.IDtordine ORDER BY IndTO, IndSpesa, TipoSpesa ";
PerseoNET/clsOrdine.cs:				origineDati = "SELECT IDtipospesa, IDtordine, TipoOrdine, ModelloOrdine, PreventiviRichiesti, ModelloStampa, IndTO, SedeCentrale, TipoOrdineObsoleto, TipoSpesa, IndSpesa, Contratto, AutorizzaLocale, MaxAutorizzaLocale, StampaBozza, CollegareProgetto, PreventiviMIN, TipoSpesaObsoleto FROM t_TipoOrdineSpesa ";
PerseoNET/clsOrdine.cs:				origineDati = "SELECT IDtunitamis, TipoUnitaMisura, SiglaUnitaMisura, IndUM, CifreDecimali, Obsoleto FROM t_TipoUnitaMisura ORDER BY IndUM, TipoUnitaMisura ";
PerseoNET/clsOrdine.cs:				origineDati = "SELECT IDtunitamis, TipoUnitaMisura, SiglaUnitaMisura, IndUM, CifreDecimali, Obsoleto FROM t_TipoUnitaMisura";
PerseoNET/clsOrdine.cs:				origineDati = "SELECT IDtivaprod, TipoIVAProdotto, TipoNumericoIVA, DataValidaDAL, DataValidaAL, Obsoleto FROM t_TipoIVAProdotto ORDER BY TipoNumericoIVA ";
PerseoNET/clsOrdine.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDordine, NumeroRichiesta FROM t_RichiesteOrdini WHERE FK_Sede=", this.get_Campo((object)"FK_Sede")), " "), "AND DataRichiesta>='"), right), "' AND DataRichiesta<='"), right2), "' "), "AND NumeroRichiesta="), num2), " "), "AND IDordine<>"), PKOrdine));
PerseoNET/clsOrdine.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT MAX(NumeroRichiesta) AS MaxNR FROM t_RichiesteOrdini WHERE FK_Sede=", this.get_Campo((object)"FK_Sede")), " "), "AND DataRichiesta>='"), right), "' AND DataRichiesta<='"), right2), "' "));
PerseoNET/frmBandi.cs:					string text = "SELECT t_Bandi.IDbando, TipoBando, DescrBando, CodiceBando, DescrEstesaBando, DataBando, AnnoBando, ObbligatorioID, BandoAttivo, (0) AS Nprog FROM t_Bandi INNER JOIN t_TipoBando ON t_Bandi.FK_TipoBando = t_TipoBando.IDtbando ";
PerseoNET/frmBandi.cs:					string vSQL = "SELECT (FK_Bando) AS IDbando, COUNT(IDprogetto) AS NProg FROM t_Progetti GROUP BY FK_Bando HAVING FK_Bando IN() ";
PerseoNET/frmBandi.cs:					text = "SELECT IDtbando, TipoBando FROM t_TipoBando ORDER BY TipoBando ";
PerseoNET/frmBandi.cs:				string origineDati = "SELECT AnnoBando FROM t_Bandi GROUP BY AnnoBando ORDER BY AnnoBando DESC";
PerseoNET/frmEsportaStorico.cs:				string origineDati = "SELECT Tipo FROM t_StoricoEventi GROUP BY t_StoricoEventi.Tipo ORDER BY t_StoricoEventi.Tipo";
PerseoNET/frmEsportaStorico.cs:				origineDati = "SELECT IDaccesso, Data, Tipo, Azione, Persona, (CASE WHEN Persona=-1 THEN 'Admin' ELSE (Cognome + ' ' + Nome) END) AS StrUtente FROM t_Personale RIGHT JOIN t_StoricoEventi ON t_Personale.IDpers = t_StoricoEventi.Persona ORDER BY Persona, Data ";
PerseoNET/frmEsportaStorico.cs:				string origineDati = ((!opAttivi.Checked) ? "SELECT t_Personale.IDpers, (Cognome + ' ' + Nome) AS Utente FROM t_Personale WHERE Attivo=0 ORDER BY (Cognome + ' ' + Nome) " : "SELECT t_Personale.IDpers, (Cognome + ' ' + Nome) AS Utente FROM t_Personale WHERE Attivo=1 ORDER BY (Cognome + ' ' + Nome) ");
PerseoNET/frmEsportaStorico.cs:				string origineDati = "SELECT Data, Tipo, Azione, (CASE WHEN Persona=-1 THEN '@Admin' ELSE (Cognome + ' ' + Nome) END) AS NomeUtente FROM t_Personale RIGHT JOIN t_StoricoEventi ON t_Personale.IDpers = t_StoricoEventi.Persona " + text3 + " ORDER BY (CASE WHEN Persona=-1 THEN '@Admin' ELSE (Cognome + ' ' + Nome) END), Data";
PerseoNET/frmEsportaStorico.cs:				origineDati = "SELECT Cognome, (NULL) AS DataReg, (NULL) AS Proc, (NULL) AS T_Min, (NULL) AS T_Max, (NULL) AS T_Avg, (NULL) AS NCamp FROM t_Personale ";
PerseoNET/frmEsportaStorico.cs:				string origineDati = "SELECT IDaccesso, Data, Tipo, Azione, Persona, (CASE WHEN Persona=-1 THEN 'Admin' ELSE (Cognome + ' ' + Nome) END) AS StrUtente FROM t_Personale RIGHT JOIN t_StoricoEventi ON t_Personale.IDpers = t_StoricoEventi.Persona " + str + " ORDER BY (CASE WHEN Persona=-1 THEN 'Admin' ELSE (Cognome + ' ' + Nome) END), Persona, Data ";
PerseoNET/frmEsportaStorico.cs:				string origineDati = "SELECT (IDaccesso) AS PKRec, Data, Tipo, Azione, (Persona) AS PKUtente, (CASE WHEN Persona=-1 THEN 'admin-1' ELSE (Cognome + ' ' + Nome) END) AS NomeUtente FROM t_Personale RIGHT JOIN t_StoricoEventi ON t_Personale.IDpers = t_StoricoEventi.Persona " + str + " ORDER BY (CASE WHEN Persona=-1 THEN '@admin' ELSE (Cognome + ' ' + Nome) END), Persona, Data ";
PerseoNET/clsDocente.cs:						string vSQL = "SELECT COUNT(IDincarico) AS NumeroRecord FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE (FK_Docente= " + Conversions.ToString(num2) + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " AND DataAvvio>='01/09/" + Strings.Left(vstrAnnoAmm, 4) + "' AND DataAvvio<='31/08/" + Strings.Right(vstrAnnoAmm, 4) + "') OR (FK_Docente= " + Conversions.ToString(num2) + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " AND DataFine>='01/09/" + Strings.Left(vstrAnnoAmm, 4) + "' AND DataFine<='31/08/" + Strings.Right(vstrAnnoAmm, 4) + "') OR (FK_Docente= " + Conversions.ToString(num2) + " AND FK_SedeEdizione " + Variabili.FiltroSedi + " AND DataAvvio<'01/09/" + Strings.Left(vstrAnnoAmm, 4) + "' AND DataFine>='01/09/" + Strings.Left(vstrAnnoAmm, 4) + "') ";
PerseoNET/clsDocente.cs:					string vSQL = "SELECT IDdocente FROM t_Docenti WHERE CodFiscale='" + value + "' ";
PerseoNET/clsDocente.cs:					string origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, FK_ParFiscaleAttuale, FK_TipoLavoroAttuale, FK_SedePrimaria, DescrProfessione, FK_TipoFascia, Cognome, Nome, Sesso, CodFiscale, PIVA, DataNascita, LuogoNascita, NazNascita, ProvNascita, FK_Nazionalita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, NazResidenza, ComAbitazione, IndirAbitazione, CAPabitazione, ProvAbitazione, Tel_1, Tel_2, Tel_3, Fax, Email, Sovrapponibile, DescrTitoloStudio, FK_TipoStudio, DataAssunzione, DataDimissione, EsclusioneIVA, RegimeFiscAgevolato, DataScadeFiscAgevolato, RivalsaGestSeparata, IscrittoRegImprese, FK_ContributoCassaPrev, FK_AltraAssINPS, FK_AliquotaPrevSepa, DescrDatoreLavoro, IndirDatoreLavoro, ComDatoreLavoro, DataVariazionePF, Attivo, DocenteTest, ContribuenteMinimo, DataUltimoCV, TelTutorStage, EmailTutorStage, CognomeIBAN, NomeIBAN, CodiceIBAN, Assegno, DataUploadCV, DataDownloadCV, (NULL) AS DataUltimoCV, (NULL) AS DataDocIdentita, (NULL) AS AnnoAttestazionePIVA, DescrIscrizioneAlbo, NumeroIscrizioneAlbo, FK_TipoIscrAlbo, IndirizzoPEC, EsenzioneIVA_No, CodiceDipendente, DataRec, DataModifica, Bloccato FROM t_Docenti ";
PerseoNET/clsDocente.cs:						origineDati = "SELECT IDdocumento, DataPubblicazione, TipoDocumento, AttestazioneAnnuale, DocRiconoscimento, CV, AnnoSolare, DurataMesiMax FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE (CV=1 AND DescrDocumento IS NOT NULL AND FK_Docente=" + Conversions.ToString(mvIDdocente) + ") OR (AttestazioneAnnuale=1 AND TipoDocumento LIKE '%P.IVA%' AND FK_Docente=" + Conversions.ToString(mvIDdocente) + ") OR (DocRiconoscimento=1 AND FK_Docente=" + Conversions.ToString(mvIDdocente) + ") ORDER BY TipoDocumento, DataPubblicazione DESC";
PerseoNET/clsDocente.cs:						string vSQL = "SELECT IDdocente, Bloccato FROM t_Docenti WHERE IDdocente=" + Conversions.ToString(mvIDdocente) + " ";
PerseoNET/clsDocente.cs:					string origineDati = "SELECT IDedizione, DataAvvio, DataFine, TipoFormativoInterno FROM t_PianoServizi INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno=t_TipoFormativoInterno.IDTformaint WHERE TipoFormativoInterno='FORMAZIONE PERSONALE INTERNO' AND DataAvvio<" + FunzStringa.StrDataSQL("31/08/" + Strings.Mid(vStrAnnualita, 6, 4), FlagSqlServer: true) + " AND DataFine>" + FunzStringa.StrDataSQL("01/09/" + Strings.Mid(vStrAnnualita, 1, 4), FlagSqlServer: true) + " ";
PerseoNET/clsDocente.cs:					origineDati = "SELECT PersonaControllata, IDedizione, SiglaSede, CodiceEdizione, DataAttivita, OraInizio, OraFine, TipoAttivita, DescrArgomento, DescrAttivita, Docente FROM t_Sovrapposizioni ";
PerseoNET/clsDocente.cs:				string origineDati = "SELECT IDtattivita, TipoAttivita FROM t_TipoAttivitaEdizione WHERE AttivitaPIP=1 ";
PerseoNET/clsDocente.cs:				origineDati = "SELECT IDcalatt, IDincarico, (FK_Attivita) AS IDattedi, IDtattivita, IDiscrizione, DataAttivita, OraInizio, OraFine, (0) AS OreSvolte, t_TipoAttivitaEdizione.TipoAttivita, TipoCategoria, IIf(DescrAttivita IS NOT NULL,DescrAttivita,DescrArgomento) AS DescrAttivita, (NULL) AS Firma, Studente, (NULL) AS LuogoNascita, (NULL) AS NazNascita, (NULL) AS ProvNascita, (NULL) AS DataNascita, (NULL) AS CodFiscale, (NULL) AS ID_Dote, (NULL) AS CodiceBando, Docente, (1) AS Tipo FROM t_PianificazioneDocente INNER JOIN t_TipoAttivitaEdizione ON t_PianificazioneDocente.TipoAttivita = t_TipoAttivitaEdizione.TipoAttivita WHERE IDtattivita " + clsTblDatiDR2.StringaFiltroIN(0) + " AND SiglaSede='" + FunzStringa.StringaSQL(vSede) + "' ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsDocente.cs:						origineDati = "SELECT t_Iscrizioni.IDiscrizione, (Cognome + ' ' + Nome) AS Studente, LuogoNascita, NazNascita, ProvNascita, DataNascita, CodFiscale, ID_Dote, CodiceBando FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE IDiscrizione " + clsTblDatiDR.StringaFiltroIN("IDiscrizione");
PerseoNET/clsDocente.cs:						string vSQL = "SELECT SiglaSede FROM t_PianificazioneDocente GROUP BY SiglaSede ORDER BY SiglaSede ";
PerseoNET/clsDocente.cs:						vSQL = "SELECT DescrEdizione, CodiceEdizione FROM t_PianificazioneDocente GROUP BY DescrEdizione, CodiceEdizione ORDER BY DescrEdizione ";
PerseoNET/clsDocente.cs:						string vSQL = "SELECT TipoAttivita FROM t_PianificazioneDocente GROUP BY TipoAttivita ORDER BY TipoAttivita ";
PerseoNET/clsDocente.cs:							VariabiliClassi.CmdSQL.CreaDataTbl("SELECT TipoAttivita FROM t_TipoAttivitaEdizione WHERE IDtattivita=" + Conversions.ToString(mvIDtipoatt), Variabili.pathLog, "nd");
PerseoNET/clsDocente.cs:						vSQL = "SELECT DataAttivita, DescrAttivita, TipoAttivita, (SUM(T_Ore)/60) AS OreSvolte FROM t_PianificazioneDocente GROUP BY DataAttivita, TipoAttivita, DescrAttivita " + text + "ORDER BY DataAttivita ";
PerseoNET/clsDocente.cs:					string origineDati = "SELECT DataAttivita, DescrArgomento, OraInizio, OraFine, T_Ore, (NULL) AS ID_Attuativo, ID_Dote, (NULL) AS FirmaDest, (NULL) AS FirmaProf FROM t_PianificazioneDocente ";
PerseoNET/clsDocente.cs:						string origineDati = "SELECT IDcalatt, IDincarico, IDedizione, FK_Attivita, IDiscrizione, DataAttivita, OraInizio, OraFine, T_Ore, DescrEdizione, CodiceEdizione, CodiceEdizioneCR, SiglaSede, TipoAttivita, Aula, DescrModulo, DescrArgomento, TipoAreaFormativa, TipoArgomento, Docente, Studente, Locale, INAIL, LavoroPIP, PresenzaStudentePIP, MinutiStudente, AltriStudentiCoaching, IDdocente, TipoAnnualita, DocenzaFAD, ID_Dote FROM t_PianificazioneDocente ";
PerseoNET/clsDocente.cs:				string origineDati = "SELECT DataAttivita, DescrArgomento, OraInizio, OraFine, T_Ore, ID_Dote, Studente, (NULL) AS Firma FROM t_PianificazioneDocente ";
PerseoNET/clsDocente.cs:				string origineDati = "SELECT IDcalatt, IDincarico, (FK_Attivita) AS IDattedi, IDtattivita, IDiscrizione, DataAttivita, OraInizio, OraFine, (0) AS OreSvolte, t_TipoAttivitaEdizione.TipoAttivita, TipoCategoria, IIf(DescrAttivita IS NOT NULL,DescrAttivita,DescrArgomento) AS DescrAttivita, (NULL) AS Firma, Studente, (NULL) AS LuogoNascita, (NULL) AS NazNascita, (NULL) AS ProvNascita, (NULL) AS DataNascita, (NULL) AS CodFiscale, (NULL) AS ID_Dote, Docente, (1) AS Tipo FROM t_PianificazioneDocente INNER JOIN t_TipoAttivitaEdizione ON t_PianificazioneDocente.TipoAttivita = t_TipoAttivitaEdizione.TipoAttivita WHERE IDtattivita=" + Conversions.ToString(vIDtipoatt) + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsDocente.cs:				string origineDati = ((vIDsede != 0L) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_DocentiContratti.IDcontratto, FK_Docente, FK_Azienda, DescrParFiscale, DataInizioContratto, DataFineContratto, (CASE WHEN FK_Azienda IS NOT NULL THEN 1 ELSE 0 END) AS PagaAzienda, (SELECT COUNT(IDincacontra) FROM t_IncarichiEdizioniContratti WHERE FK_Contratto=IDcontratto) AS NumIncarichi, ContrattoApprovato, BloccoValutazione, Respinto, (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) AS StrAzienda FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE FK_Docente=", mvDocente.get_Campo((object)0)), " "), "AND DataInizioContratto>='"), right), "' AND DataInizioContratto<='"), right2), "' "), "AND (SELECT COUNT(IDincarico) FROM t_IncarichiEdizioniContratti INNER JOIN "), "t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN "), "t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Contratto=IDcontratto "), "AND FK_SedeEdizione="), vIDsede), ")>0 "), "ORDER BY IDcontratto ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_DocentiContratti.IDcontratto, FK_Docente, FK_Azienda, DescrParFiscale, DataInizioContratto, DataFineContratto, (CASE WHEN FK_Azienda IS NOT NULL THEN 1 ELSE 0 END) AS PagaAzienda, (SELECT COUNT(IDincacontra) FROM t_IncarichiEdizioniContratti WHERE FK_Contratto=IDcontratto) AS NumIncarichi, ContrattoApprovato, BloccoValutazione, Respinto, (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) AS StrAzienda FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE FK_Docente=", mvDocente.get_Campo((object)0)), " "), "AND (SELECT COUNT(IDincarico) FROM t_IncarichiEdizioniContratti INNER JOIN "), "t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN "), "t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Contratto=IDcontratto "), "AND FK_SedeEdizione "), Variabili.FiltroSedi), ")>0 "), "AND DataInizioContratto>='"), right), "' AND DataInizioContratto<='"), right2), "' "), "ORDER BY IDcontratto ")));
PerseoNET/clsDocente.cs:				string origineDati = "SELECT  IDcontratto, (FK_Docente) AS IDdocente, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiContratti WHERE FK_TipoFormaContratto<3 ORDER BY FK_Docente, DataFineContratto DESC ";
PerseoNET/clsDocente.cs:				origineDati = "SELECT IDdimessi, StrDipe, CodFiscale, DataLicenziamento, Livello, SiglaSede, IncentivoELGA FROM wt_t_Docenti_Dimessi WHERE DataLicenziamento IS NOT NULL ORDER BY StrDipe, DataLicenziamento DESC ";
PerseoNET/clsDocente.cs:				string origineDati = "SELECT t_Progetti.IDprogetto FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto WHERE IDdocente=" + Conversions.ToString(mvIDdocente) + " AND t_Progetti.Bloccato=1 GROUP BY t_Progetti.IDprogetto ";
PerseoNET/clsDocente.cs:							string vSQL = "SELECT IDazienda, DescrAzienda FROM t_Aziende WHERE IDazienda=" + Conversions.ToString(Variabili.Azienda.PKAzienda);
PerseoNET/clsDocente.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtestdipe, TipoDipendente, SenzaCF FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=", this.get_Campo((object)"FK_TipoLavoroAttuale")));
PerseoNET/clsDocente.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtestdipe, TipoDipendente, SenzaCF FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=", this.get_Campo((object)"FK_TipoLavoroAttuale")));
PerseoNET/clsDocente.cs:					string origineDati = "SELECT t_Documenti.IDdocumento, FK_Docente, DescrDocumento, DataPubblicazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE Personale=1 AND TipoDocumento='Richiesta collaborazione professionale' AND FK_Docente=" + Conversions.ToString(PKDocente) + " AND DataPubblicazione>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataPubblicazione<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " ORDER BY DataPubblicazione DESC ";
PerseoNET/clsDocente.cs:				string origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, (Cognome + ' ' + Nome) AS StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, (CASE WHEN FK_Tipo=2 THEN (SELECT MAX(CodiceLivelloDoc) FROM t_TipoLivelloDocenteInterno INNER JOIN t_DocentiContratti ON t_TipoLivelloDocenteInterno.IDtlivcontrdoc = t_DocentiContratti.FK_LivelloInterno WHERE FK_Docente=IDdocente) ELSE NULL END) AS CodiceLivelloDoc, (CASE WHEN FK_Tipo=2 THEN (SELECT MAX(DataInizioContratto) FROM t_TipoLivelloDocenteInterno INNER JOIN t_DocentiContratti ON t_TipoLivelloDocenteInterno.IDtlivcontrdoc = t_DocentiContratti.FK_LivelloInterno WHERE FK_Docente=IDdocente) ELSE NULL END) AS DataInizioContratto, (CASE WHEN FK_Tipo=2 THEN (SELECT MAX(DataFineContratto) FROM t_TipoLivelloDocenteInterno INNER JOIN t_DocentiContratti ON t_TipoLivelloDocenteInterno.IDtlivcontrdoc = t_DocentiContratti.FK_LivelloInterno WHERE FK_Docente=IDdocente) ELSE NULL END) AS DataFineContratto, (CASE WHEN FK_Tipo=2 THEN (SELECT MAX(DataDimissioneDipendente) FROM t_DocentiContratti WHERE DataDimissioneDipendente IS NOT NULL AND FK_Docente=IDdocente) ELSE NULL END) AS DataDimissioneDipendente, t_Docenti.DataModifica, Attivo, DocenteTest, t_TipoRuoloDocente.Parcelle FROM t_Docenti INNER JOIN t_TipoRuoloDocente ON t_Docenti.FK_Ruolo = t_TipoRuoloDocente.IDtruolodoc WHERE (LEN(CodFiscale)=16 " + text + " AND Attivo=1) OR (CodFiscale IS NULL " + text + " AND Attivo=1 AND FK_Tipo=3) ORDER BY FK_Tipo, (Cognome + ' ' + Nome) ";
PerseoNET/clsDocente.cs:				origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente, DataModifica, Attivo, DocenteTest, Parcelle FROM t_DocentiAttivi ";
PerseoNET/clsDocente.cs:				origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiAttivi WHERE Attivo=True AND Parcelle=False AND FK_Tipo=2 ";
PerseoNET/clsDocente.cs:				origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, t_TipoRuoloDocente.TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_TipoRuoloDocente INNER JOIN t_DocentiAttivi ON t_TipoRuoloDocente.IDtruolodoc = t_DocentiAttivi.FK_Ruolo WHERE Attivo=True AND t_TipoRuoloDocente.Parcelle=False AND FK_Tipo=2 AND t_TipoRuoloDocente.Aula=True ";
PerseoNET/clsDocente.cs:				origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiAttivi WHERE Attivo=True AND Parcelle=False AND FK_Tipo=3 ";
PerseoNET/clsDocente.cs:				origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, t_TipoRuoloDocente.TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_TipoRuoloDocente INNER JOIN t_DocentiAttivi ON t_TipoRuoloDocente.IDtruolodoc = t_DocentiAttivi.FK_Ruolo WHERE Attivo=True AND t_TipoRuoloDocente.Parcelle=False AND FK_Tipo=3 AND t_TipoRuoloDocente.Aula=True ";
PerseoNET/clsDocente.cs:				origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, StrDOC, TipoRuoloDocente, CodFiscale, LuogoNascita, ComResidenza, CodiceLivelloDoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiAttivi WHERE Attivo=True AND Parcelle=False AND FK_Tipo=1 ORDER BY StrDOC ";
PerseoNET/clsDocente.cs:					string str = "SELECT IDdocente, IDincarico, FK_Tipo, IDedizione, (NULL) AS IDazienda, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Tipo=1 THEN 'Generico' WHEN FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS StrTipo, CodFiscale, SiglaSede, CodiceEdizione, DescrEdizione, CodiceProgetto, DescrProgetto, TipoFormativoInterno, DataAvvio, DataFine, DataInizioFA, DataFineFA, Durata, TipoAttivita, Aula, ContrattoAula, DescrArgomento, OreAssegnate, (CASE WHEN FK_Tipo<=2 THEN OreAssegnate ELSE (SELECT SUM(OreSvolgere) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico AND ApprovaIncarico=1) END) AS OreApprovate, (0) AS OreAssegnateAnno, (0) AS OreFatte, (0) AS OreFatte_" + text4 + ", (0) AS OreResidue, PagamentoIndividuale, IncaricoBloccato, IncaricoGenericoGratuito, DescrGratuito, DescrIncarico, PreDimissione, (NULL) AS DescrParFiscale, (NULL) AS UltimaData, (0) OreApprovate, (0) AS QuotaOraIncarico, (0) AS TotaleCostoAssegnate, (0) AS TotaleCostoPagato, (0) AS TotaleOrePagate, (NULL) UltimaDataCompetenze FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE (DataAvvio<='" + text3 + "' AND DataFine>='" + text2 + "' " + text + ") OR (DataInizioFA<='" + text3 + "' AND DataFineFA>='" + text2 + "' " + text + ") ";
PerseoNET/clsDocente.cs:					str = "SELECT FK_IncaricoEdizione, FK_CodicePF, FK_Azienda, QuotaOraIncarico, SUM(DISTINCT OreSvolgere) AS OreApprovate FROM t_IncarichiEdizioniContratti INNER JOIN t_DocentiContrattiEsterni ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE DataInizioIncarico>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND ApprovaIncarico=1 GROUP BY FK_IncaricoEdizione, FK_CodicePF, FK_Azienda, QuotaOraIncarico ORDER BY FK_IncaricoEdizione";
PerseoNET/clsDocente.cs:					str = "SELECT IDincarico, SUM(sngTotale) AS TotaleCostoPagato, SUM(TotOrefatte) AS TotaleOrePagate, MAX(DataPagatoFine) AS UltimaDataCompetenze FROM t_ProgettiPagamentiCompensiOneri WHERE Reso=0 AND DataPagatoInizio>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataPagatoInizio<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico " + clsTblDatiDR.StringaFiltroIN("IDincarico") + " ";
PerseoNET/clsDocente.cs:					str = "SELECT IDincarico, (SUM(Minuti)/60) AS OreFatte, MAX(DataSvolgimento) AS UltimaData FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE DataSvolgimento>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico " + clsTblDatiDR.StringaFiltroIN("IDincarico") + " ";
PerseoNET/clsDocente.cs:					str = "SELECT IDincarico, (SUM(Minuti)/60) AS OreFatte FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE DataSvolgimento<" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico " + clsTblDatiDR.StringaFiltroIN("IDincarico") + " ";
PerseoNET/clsDocente.cs:				string origineDati = "SELECT IDdocente, FK_Tipo, (Cognome + ' ' + Nome) AS StrDOC FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE (DataAvvio<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataFine>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND FK_SedeEdizione " + strFiltroSedi + ") OR (DataAvvio<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataFine>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND FK_SedePrimaria " + strFiltroSedi + ") GROUP BY IDdocente, FK_Tipo, (Cognome + ' ' + Nome) HAVING FK_Tipo=2 ";
PerseoNET/clsDocente.cs:				origineDati = "SELECT IDiscrizione, IDutente, IDedizione, FK_Docente, SiglaSede, CodiceEdizione, DataAvvio, DataFine, OreAttivitaIndividuali FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE FK_Docente " + mvDocentiStudenti.StringaFiltroIN("IDdocente") + " AND DataAvvio<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND DataFine>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " ORDER BY FK_Docente";
PerseoNET/clsDocente.cs:					string origineDati = "SELECT IDcalatt, IDedizione, DataAttivita, OraInizio, OraFine, DescrEdizione, CodiceEdizione, SiglaSede, ('DOCENZA') AS TipoAttivita, DescrArgomento, (Cognome + ' ' + Nome) AS Docente FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDedizione " + text2 + " AND DataAttivita<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsDocente.cs:					origineDati = "SELECT IDassenza, IDcalatt, t_AssenzeAttivita.FK_Iscrizione FROM t_AssenzeAttivita INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt WHERE t_AssenzeAttivita.FK_Iscrizione " + text + " ORDER BY t_AssenzeAttivita.FK_Iscrizione, DataAttivita, IDcalatt ";
PerseoNET/clsDocente.cs:						origineDati = (clsTblDatiDR.OrigineDatiUnione = "SELECT IDregstage, IDedizione, (DataStage) AS DataAttivita, (OraIngresso) AS OraInizio, (OraUscita) AS OraFine, CodiceEdizione, DescrEdizione, SiglaSede, (TipoAttivitaStage) AS TipoAttivita, (DescrAttivitaStage) AS DescrArgomento, (NULL) AS Docente FROM t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE IDiscrizione " + text + " ORDER BY IDiscrizione, DataStage, OraIngresso ");
PerseoNET/clsDocente.cs:					origineDati = "SELECT IDedizione, IDiscrizione, SiglaSede, DescrEdizione, CodiceEdizione, DataAttivita, OraInizio, OraFine, TipoAttivita, DescrArgomento, Docente FROM t_PianificazioneDocente ";
PerseoNET/clsDocente.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiPagamentiCompensiOneri.IDdocente, SUM(sngCostoInc) AS TotaleCosto, SUM(sngRiva) AS TotaleRiva, (0) AS TotaleCostiVitto, (0) AS TotaleCostiViaggio FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc WHERE YEAR(DataPagamento)=" + Conversions.ToString(vAnno) + " AND Reso=0 AND chbContribuenteMinimo=1 GROUP BY IDdocente HAVING t_ProgettiPagamentiCompensiOneri.IDdocente=", Variabili.Docente.get_Campo((object)0)), " "), "UNION "), "SELECT t_Docenti.IDdocente, SUM(sngCostoInc) AS TotaleCosto, "), "SUM(sngRiva) AS TotaleRiva, SUM(CostiVitto) AS TotaleCostiVitto, SUM(CostiViaggio) AS TotaleCostiViaggio "), "FROM t_DocentiParcelle INNER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente INNER JOIN "), "t_DecodificatoreParametroFiscale ON t_DocentiParcelle.FK_PF = t_DecodificatoreParametroFiscale.IDparfisc "), "WHERE YEAR(DataPagamento)="), vAnno), " AND chbContribuenteMinimo=1 "), "GROUP BY IDdocente HAVING t_Docenti.IDdocente="), Variabili.Docente.get_Campo((object)0)), " "), "ORDER BY IDdocente "));
PerseoNET/clsDocente.cs:						string vSQL = "SELECT SiglaSede FROM t_PianificazioneDocente GROUP BY SiglaSede ORDER BY SiglaSede ";
PerseoNET/clsDocente.cs:						vSQL = "SELECT DescrEdizione, CodiceEdizione FROM t_PianificazioneDocente GROUP BY DescrEdizione, CodiceEdizione ORDER BY DescrEdizione ";
PerseoNET/clsDocente.cs:						string vSQL = "SELECT TipoAttivita FROM t_PianificazioneDocente GROUP BY TipoAttivita ORDER BY TipoAttivita ";
PerseoNET/clsDocente.cs:							VariabiliClassi.CmdSQL.CreaDataTbl("SELECT TipoAttivita FROM t_TipoAttivitaEdizione WHERE IDtattivita=" + Conversions.ToString(mvIDtipoatt), Variabili.pathLog, "nd");
PerseoNET/clsDocente.cs:						vSQL = "SELECT DataAttivita, DescrAttivita, TipoAttivita, (SUM(T_Ore)/60) AS OreSvolte FROM t_PianificazioneDocente GROUP BY DataAttivita, TipoAttivita, DescrAttivita " + text + "ORDER BY DataAttivita ";
PerseoNET/clsDocente.cs:				string origineDati = "SELECT IDtestdipe, TipoDipendente, IndTDIP, Obsoleto FROM t_TipoDipendenteDocEsterno";
PerseoNET/clsTblDatiDR.cs:						if (Operators.CompareString(Strings.Mid(text, 1, 7), "SELECT ", TextCompare: false) != 0)
PerseoNET/clsTblDatiDR.cs:							Information.Err().Raise(-2147220991, null, "Classe clsTblDatiAdoDR. proprietÃ  OrigineDati. Manca parola chiave SELECT.");
PerseoNET/clsTblDatiDR.cs:						if (Operators.CompareString(Strings.Mid(text, 1, 13), "SELECT * FROM", TextCompare: false) == 0)
PerseoNET/clsTblDatiDR.cs:						if (Strings.InStr(text, "SELECT TOP ") == 1)
PerseoNET/clsTblDatiDR.cs:							else if (Operators.CompareString(Strings.Mid(text, 1, 7), "SELECT ", TextCompare: false) != 0)
PerseoNET/clsTblDatiDR.cs:								Information.Err().Raise(-2147220991, null, "Classe clsTblDatiAdoDR. proprietÃ  OrigineDatiUnione. Manca parola chiave SELECT.");
PerseoNET/clsTblDatiDR.cs:							else if (Operators.CompareString(Strings.Mid(value, 1, 7), "SELECT ", TextCompare: false) != 0)
PerseoNET/clsTblDatiDR.cs:								Information.Err().Raise(-2147220991, null, "Classe clsTblDatiDR. proprietÃ  DestinazioneDati. Manca parola chiave SELECT.");
PerseoNET/clsTblDatiDR.cs:								if (Operators.CompareString(Strings.Mid(mvOrigineDati, 1, 13), "SELECT * FROM", TextCompare: false) == 0)
PerseoNET/clsTblDatiDR.cs:									string str = "SELECT ";
PerseoNET/clsTblDatiDR.cs:								expression = Strings.Replace(expression, "SELECT ", "", 1, -1, CompareMethod.Text);
PerseoNET/frmPersonaleInterno.cs:				string origineDati = "SELECT IDtlivcontrdoc, (TipoLivelloDocInterno + ' (' + CodiceLivelloDoc + ')') AS StrLiv FROM t_TipoLivelloDocenteInterno ORDER BY CodiceLivelloDoc ";
PerseoNET/frmPersonaleInterno.cs:				origineDati = "SELECT IDsede, (CASE WHEN Attiva=1 THEN SiglaSede ELSE (SiglaSede + ' *') END) AS SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " AND FK_TipoSede=3 ORDER BY Attiva DESC, SiglaSede ";
PerseoNET/frmPersonaleInterno.cs:					origineDati = "SELECT IDdocente, IDcontratto, FK_Ruolo, FK_SedePrimaria, DataInizioContratto, DataFineContratto, (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, CodiceLivelloDoc, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedePrimaria) AS StrSede, (SELECT PROVsede FROM t_Sedi WHERE IDsede=FK_SedePrimaria) AS StrProvSede, (NULL) DataLetteraAnno, (NULL) AS DataLetteraVar, OreContratto, AutorizzaPendolo, CompensoPendolo, (NULL) AS OreDocenza, (NULL) AS OreDocenzaAss, (NULL) AS OreFunzArticolate, (NULL) AS OreFunzArticolateAss, (0) AS OreFAPendolo, (NULL) AS OrePreparazione, (NULL) AS OreAggiornamento, (NULL) AS OreAltroAgg, (NULL) AS OrePendolo, (NULL) AS UsoPendolo, (NULL) AS VariazioneOre, (NULL) AS DeltaContratto, (0) AS TotDOC, (0) AS TotFA, (0) AS PreviDOC, (0) AS PreviAltro FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente LEFT OUTER JOIN t_Sedi ON t_Docenti.FK_SedePrimaria = t_Sedi.IDsede LEFT OUTER JOIN t_TipoLivelloDocenteInterno ON t_DocentiContratti.FK_LivelloInterno = t_TipoLivelloDocenteInterno.IDtlivcontrdoc ";
PerseoNET/frmPersonaleInterno.cs:						string origineDati = "SELECT IDdocente, IDcontratto, FK_Ruolo, FK_SedePrimaria, DataInizioContratto, DataFineContratto, (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, CodiceLivelloDoc, SiglaSede, PROVsede, (SELECT MIN(DataLettera) FROM t_DocentiContrattiInterniStorico WHERE Variazione=0 AND FK_Contratto=IDcontratto) AS DataLetteraAnno, (SELECT MAX(DataLettera) FROM t_DocentiContrattiInterniStorico WHERE Variazione=1 AND FK_Contratto=IDcontratto) AS DataLetteraVar, OreContratto, AutorizzaPendolo, CompensoPendolo, (0) AS OreDocenza, (0) AS OreDocenzaAss, (0) AS OreFunzArticolate, (0) AS OreFunzArticolateAss, (0) AS OreFAPendolo, (0) AS OrePreparazione, (0) AS OreAggiornamento, (0) AS OreAltroAgg, (0) AS OrePendolo, (0) AS UsoPendolo, (0) AS VariazioneOre, (0) AS DeltaContratto, (0) AS TotDOC, (0) AS TotFA, (0) AS PreviDOC, (0) AS PreviAltro FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente LEFT OUTER JOIN t_Sedi ON t_Docenti.FK_SedePrimaria = t_Sedi.IDsede LEFT OUTER JOIN t_TipoLivelloDocenteInterno ON t_DocentiContratti.FK_LivelloInterno = t_TipoLivelloDocenteInterno.IDtlivcontrdoc " + text2 + "ORDER BY (Cognome + ' ' + Nome) ";
PerseoNET/frmPersonaleInterno.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtlivcontrdoc, LetteraIncarico FROM t_TipoLivelloDocenteInterno WHERE LetteraIncarico=True AND CodiceLivelloDoc='", tblDoc.get_Campo((object)"CodiceLivelloDoc", vFlagUpdateDB: false)), "' "));
PerseoNET/frmPersonaleInterno.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtlivcontrdoc, TipoLivelloDocInterno FROM t_TipoLivelloDocenteInterno WHERE CodiceLivelloDoc='", tblDoc.get_Campo((object)"CodiceLivelloDoc", vFlagUpdateDB: false)), "' "));
PerseoNET/frmPersonaleInterno.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtlivcontrdoc, LetteraIncarico FROM t_TipoLivelloDocenteInterno WHERE CodiceLivelloDoc='", tblDoc.get_Campo((object)"CodiceLivelloDoc", vFlagUpdateDB: false)), "' "));
PerseoNET/frmPersonaleInterno.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtlivcontrdoc, TipoLivelloDocInterno FROM t_TipoLivelloDocenteInterno WHERE CodiceLivelloDoc='", tblDoc.get_Campo((object)"CodiceLivelloDoc", vFlagUpdateDB: false)), "' "));
PerseoNET/frmPersonaleInterno.cs:								vSQL = "SELECT Testo_1, Testo_20, SUM(Numerico_3) AS OreDocenza, SUM(Numerico_4) AS OreAltro, SUM(Numerico_5) AS Bonus22, SUM(Numerico_6) AS Bonus27, SUM(Numerico_7) AS Bonus37 FROM t_StampaTbl_2 GROUP BY Testo_1, Testo_20 ORDER BY Testo_1 ";
PerseoNET/frmPersonaleInterno.cs:								vSQL = (clsTblDatiDR.DestinazioneDati = "SELECT Docente, Sede, OreDocenza, OreAltro, Bonus23_27, BonusOltre27, Bonus37 FROM t_BonusDipendenti ");
PerseoNET/frmPersonaleInterno.cs:							vSQL = "SELECT Docente, Sede, OreDocenza, Bonus23_27, BonusOltre27, Bonus37, (False) AS SogliaOre, (0) AS Totale FROM t_BonusDipendenti ";
PerseoNET/frmPersonaleInterno.cs:							string vSQL = "SELECT InizioSettimana, FineSettimana, T_Ore, OreAula, OreDocenza, OreCopresenza, OreSostegno, OreAltreFunzioni, OreMinutiBonus22, OreMinutiBonus27 FROM t_PianificazioneAula ORDER BY InizioSettimana, FineSettimana ";
PerseoNET/frmPersonaleInterno.cs:				string origineDati = "SELECT IDimpiegoprev, (Cognome + ' ' + Nome) AS Dipendente, SiglaSede, TipoAttivita, DescrImpiego, DataInizioPeriodo, DataFinePeriodo, OrePreviste FROM t_DocentiPrevisioneImpiego INNER JOIN t_Sedi ON t_DocentiPrevisioneImpiego.FK_Sede = t_Sedi.IDsede INNER JOIN t_TipoAttivitaEdizione ON t_DocentiPrevisioneImpiego.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_DocentiPrevisioneImpiego.FK_Docente = t_Docenti.IDdocente WHERE DataInizioPeriodo>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioPeriodo<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " ORDER BY (Cognome + ' ' +  Nome), SiglaSede, DataInizioPeriodo ";
PerseoNET/frmPersonaleInterno.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtlivcontrdoc, LetteraIncarico FROM t_TipoLivelloDocenteInterno WHERE CodiceLivelloDoc='", tblDoc.get_Campo((object)"CodiceLivelloDoc", vFlagUpdateDB: false)), "' "));
PerseoNET/frmPersonaleInterno.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtlivcontrdoc, TipoLivelloDocInterno FROM t_TipoLivelloDocenteInterno WHERE CodiceLivelloDoc='", tblDoc.get_Campo((object)"CodiceLivelloDoc", vFlagUpdateDB: false)), "' "));
PerseoNET/frmPersonaleInterno.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtlivcontrdoc, LetteraIncarico FROM t_TipoLivelloDocenteInterno WHERE CodiceLivelloDoc='", tblDoc.get_Campo((object)"CodiceLivelloDoc", vFlagUpdateDB: false)), "' "));
PerseoNET/frmPersonaleInterno.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtlivcontrdoc, TipoLivelloDocInterno FROM t_TipoLivelloDocenteInterno WHERE CodiceLivelloDoc='", tblDoc.get_Campo((object)"CodiceLivelloDoc", vFlagUpdateDB: false)), "' "));
PerseoNET/frmPersonaleInterno.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtlivcontrdoc, LetteraIncarico FROM t_TipoLivelloDocenteInterno WHERE CodiceLivelloDoc='", tblDoc.get_Campo((object)"CodiceLivelloDoc", vFlagUpdateDB: false)), "' "));
PerseoNET/frmPersonaleInterno.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtlivcontrdoc, TipoLivelloDocInterno FROM t_TipoLivelloDocenteInterno WHERE CodiceLivelloDoc='", tblDoc.get_Campo((object)"CodiceLivelloDoc", vFlagUpdateDB: false)), "' "));
PerseoNET/frmPersonaleInterno.cs:					vSQL = "SELECT IDdocente, IDedizione, IDattivita, Docente, DescrSede, CodiceEdizione, DescrEdizione, DataAvvio, DataFine, TipoAttivita, OreAssegnate, DataLettera, Protocollo, Variazione FROM t_IncarichiEdizione ";
PerseoNET/frmPersonaleInterno.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocente, IDedizione, IIf(ClassiRiunite=False,DescrEdizione,(DescrEdizione & ' (cr)')) AS DescrEdizione, CodiceEdizione, DescrSede, Protocollo, DataLettera, SUM(OreAssegnate) AS TotaleOreAssegnate FROM t_IncarichiEdizione GROUP BY IDdocente, IDedizione, DescrEdizione, CodiceEdizione, DescrSede, Protocollo, DataLettera, ClassiRiunite HAVING IDdocente=", tblDoc.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " ORDER BY IDedizione"));
PerseoNET/frmPersonaleInterno.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocente, IDedizione, DescrEdizione, CodiceEdizione, TipoAttivita, IndTA, ClassiRiunite, SUM(OreAssegnate) AS TotaleOreAssegnate FROM t_IncarichiEdizione GROUP BY IDdocente, IDedizione, DescrEdizione, CodiceEdizione, TipoAttivita, IndTA, ClassiRiunite HAVING IDdocente=", tblDoc.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " AND IDedizione="), clsTblDatiDR3.get_Campo((object)"IDedizione")), " ORDER BY IndTA "));
PerseoNET/frmPersonaleInterno.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtlivcontrdoc, LetteraIncarico FROM t_TipoLivelloDocenteInterno WHERE CodiceLivelloDoc='", tblDoc.get_Campo((object)"CodiceLivelloDoc", vFlagUpdateDB: false)), "' "));
PerseoNET/frmPersonaleInterno.cs:									vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtlivcontrdoc, TipoLivelloDocInterno FROM t_TipoLivelloDocenteInterno WHERE CodiceLivelloDoc='", tblDoc.get_Campo((object)"CodiceLivelloDoc", vFlagUpdateDB: false)), "' "));
PerseoNET/frmPersonaleInterno.cs:									vSQL = "SELECT IDdocente, IDedizione, IDattivita, Docente, DescrSede, CodiceEdizione, DescrEdizione, DataAvvio, DataFine, TipoAttivita, OreAssegnate, DataLettera, Protocollo, Variazione FROM t_IncarichiEdizione ";
PerseoNET/frmPersonaleInterno.cs:									vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocente, IDedizione, DescrEdizione, CodiceEdizione, DescrSede, Protocollo, DataLettera, SUM(OreAssegnate) AS TotaleOreAssegnate FROM t_IncarichiEdizione GROUP BY IDdocente, IDedizione, DescrEdizione, CodiceEdizione, DescrSede, Protocollo, DataLettera HAVING IDdocente=", tblDoc.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " ORDER BY IDedizione"));
PerseoNET/frmPersonaleInterno.cs:										vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocente, IDedizione, DescrEdizione, CodiceEdizione, TipoAttivita, IndTA, SUM(OreAssegnate) AS TotaleOreAssegnate FROM t_IncarichiEdizione GROUP BY IDdocente, IDedizione, DescrEdizione, CodiceEdizione, TipoAttivita, IndTA HAVING IDdocente=", tblDoc.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " AND IDedizione="), clsTblDatiDR3.get_Campo((object)"IDedizione")), " ORDER BY IndTA "));
PerseoNET/frmPersonaleInterno.cs:					string origineDati = "SELECT NumeroSett, PeriodoDAL, PeriodoAL, Settimana37 FROM wt_SettimaneBonus37 WHERE PeriodoDAL>=" + FunzStringa.StrDataSQL("01/09/" + Strings.Mid(cmbAnno.Text, 1, 4), FlagSqlServer: true) + " AND PeriodoAL<=" + FunzStringa.StrDataSQL("31/08/" + Strings.Mid(cmbAnno.Text, 6, 4), FlagSqlServer: true) + " ORDER BY PeriodoDAL ";
PerseoNET/frmPersonaleInterno.cs:							string vSQL = "SELECT NumeroSett, PeriodoDAL, PeriodoAL, Settimana37 FROM wt_SettimaneBonus37 WHERE PeriodoDAL>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND PeriodoAL<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " ";
PerseoNET/frmPersonaleInterno.cs:							vSQL = "SELECT NumeroSett, PeriodoDAL, PeriodoAL, Settimana37 FROM wt_SettimaneBonus37 ";
PerseoNET/frmPersonaleInterno.cs:								vSQL = "SELECT NumeroSett, PeriodoDAL, PeriodoAL, Settimana37 FROM wt_SettimaneBonus37 ";
PerseoNET/frmPersonaleInterno.cs:				string origineDati = "SELECT NumeroSett, PeriodoDAL, PeriodoAL, Settimana37, SogliaOreDoc FROM wt_SettimaneBonus37 ";
PerseoNET/frmPersonaleInterno.cs:				origineDati = "SELECT NumeroSett, PeriodoDAL, PeriodoAL, Settimana37, SogliaOreDoc FROM wt_SettimaneBonus37 ";
PerseoNET/clsProgetto.cs:						string origineDati = "SELECT IDpipprogetto, FK_Progetto, IDtattivita, IndPIP, DescrAttivita, MaxOrePreviste, CostoOra, TipoAttivita FROM t_ProgettiServiziPIP LEFT OUTER JOIN t_TipoAttivitaEdizione ON t_ProgettiServiziPIP.FK_TipoAttivitaPF = t_TipoAttivitaEdizione.IDtattivita WHERE FK_progetto=" + Conversions.ToString(mvIDprogetto) + " ORDER BY IndPIP, DescrAttivita";
PerseoNET/clsProgetto.cs:						string vSQL = "SELECT IDprogetto, Bloccato FROM t_Progetti WHERE IDprogetto=" + Conversions.ToString(mvIDprogetto) + " ";
PerseoNET/clsProgetto.cs:					string origineDati = "SELECT t_Progetti.IDprogetto, FK_Bando, FK_TipoProgetto, FK_SedeProgetto, FK_TipoLogoRegistroStage, ConsenteCreaEdizioni, GestioneProgettoPersonale, ProgettoAttivo, DescrProgetto, IDmwp, CodiceProgetto, DataAvvioProg, DataFineProg, NoteProgetto, SiglaSede, (t_Progetti.DelegaAzienda) AS DelegaAziendaProg, IscrizioneDote, BudgetProgetto, BudgetProgSostegnoFin, ProgettoStandard, (NumeroIscritti) AS IscrittiProgetto, (NumeroIscrittiDote) AS IscrittiDote, (TotaleVersatoDote) AS BudgetDoti, (TotaleVersato) AS BudgetPrivato, (TotaleVersatoStage) AS BudgetPrivatoStage, BudgetPrivatoTeorico, BloccoDescrEdizione, CodiceCIG, CodiceCUP, DescrBando, CodiceBando, AnnoBando, TipoBando, ObbligoCodiceMW, DescrDecreto, DataBando, (t_Bandi.DelegaAzienda) AS DelegaAziendaBando, ObbligatorioID, ObbligatorioEdizioneID, PossiedeRegole, LegendaAttivitaPIP, OreCostiAttivitaPIP, OreSostegnoPreviste, OreSostegnoPrevisteIndiv, FAGiorniPrima, FAGiorniDopo, PeriodoPagaLibero, OreModuliBasePreviste, DeltaOreModuliBase, OreModuliProfPreviste, DeltaOreModuliProf, OreStagePrevisteMIN, OreStagePrevisteMAX, TblDescrDiscipline, RilevanzaProgetto, OreIndividualiStudenteMax, t_Progetti.DataRec, t_Progetti.DataModifica, t_Progetti.Bloccato FROM t_Progetti INNER JOIN t_Sedi ON t_Progetti.FK_SedeProgetto = t_Sedi.IDsede INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando INNER JOIN t_TipoBando ON t_Bandi.FK_TipoBando = t_TipoBando.IDtbando LEFT OUTER JOIN v_TotaleVersatoIscrittiProgetto ON t_Progetti.IDprogetto = v_TotaleVersatoIscrittiProgetto.FK_Progetto LEFT OUTER JOIN v_TotaleQuoteDoteProgetto ON t_Progetti.IDprogetto = v_TotaleQuoteDoteProgetto.FK_Progetto ";
PerseoNET/clsProgetto.cs:						string origineDati = "SELECT t_PianoServizi.IDedizione, AllieviMIN, COUNT(IDiscrizione) AS NumIscr, QuotaIscr, QuotaInteg FROM t_PianoServizi INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE FK_Progetto=" + Conversions.ToString(mvIDprogetto) + " AND DataIscr IS NOT NULL GROUP BY t_PianoServizi.IDedizione, AllieviMIN, QuotaIscr, QuotaInteg ";
PerseoNET/clsProgetto.cs:				string text = "SELECT IDtlogoregstage, NomeFileLogo, NomeFileLogoCertificato, NomeFileLogoEnte, NomeFileLogoEntePiccolo FROM t_TipoLogoRegistroStage ";
PerseoNET/clsProgetto.cs:				string origineDati = "SELECT t_Progetti.IDprogetto, FK_Bando, FK_TipoProgetto, FK_SedeProgetto, ConsenteCreaEdizioni, GestioneProgettoPersonale, ProgettoAttivo, DescrProgetto, IDmwp, CodiceProgetto, DataAvvioProg, DataFineProg, NoteProgetto, SiglaSede, (t_Progetti.DelegaAzienda) AS DelegaAziendaProg, IscrizioneDote, BudgetProgetto, BudgetProgSostegnoFin, ProgettoStandard, (NumeroIscritti) AS IscrittiProgetto, (NumeroIscrittiDote) AS IscrittiDote, (TotaleVersatoDote) AS BudgetDoti, (TotaleVersato) AS BudgetPrivato, (TotaleVersatoStage) AS BudgetPrivatoStage, BudgetPrivatoTeorico, BloccoDescrEdizione, CodiceCIG, CodiceCUP, DescrBando, CodiceBando, AnnoBando, TipoBando, ObbligoCodiceMW, DescrDecreto, DataBando, (t_Bandi.DelegaAzienda) AS DelegaAziendaBando, ObbligatorioID, ObbligatorioEdizioneID, PossiedeRegole, LegendaAttivitaPIP, OreCostiAttivitaPIP, OreSostegnoPreviste, OreSostegnoPrevisteIndiv, FAGiorniPrima, FAGiorniDopo, PeriodoPagaLibero, OreModuliBasePreviste, DeltaOreModuliBase, OreModuliProfPreviste, DeltaOreModuliProf, OreStagePrevisteMIN, OreStagePrevisteMAX, TblDescrDiscipline, FK_TipoLogoRegistroStage, RilevanzaProgetto, OreIndividualiStudenteMax, t_Progetti.DataRec, t_Progetti.DataModifica, t_Progetti.Bloccato FROM t_Progetti INNER JOIN t_Sedi ON t_Progetti.FK_SedeProgetto = t_Sedi.IDsede INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando INNER JOIN t_TipoBando ON t_Bandi.FK_TipoBando = t_TipoBando.IDtbando LEFT OUTER JOIN v_TotaleVersatoIscrittiProgetto ON t_Progetti.IDprogetto = v_TotaleVersatoIscrittiProgetto.FK_Progetto LEFT OUTER JOIN v_TotaleQuoteDoteProgetto ON t_Progetti.IDprogetto = v_TotaleQuoteDoteProgetto.FK_Progetto ";
PerseoNET/clsProgetto.cs:				string origineDati = "SELECT t_ProgettiTipologieFormative.IDprogtf, FK_Progetto, FK_TipoFomativo, TipoFormativoInterno FROM t_ProgettiTipologieFormative INNER JOIN t_TipoFormativoInterno ON t_ProgettiTipologieFormative.FK_TipoFomativo = t_TipoFormativoInterno.IDtformaint WHERE FK_Progetto=" + Conversions.ToString(mvIDprogetto);
PerseoNET/clsProgetto.cs:				origineDati = "SELECT IDprogtf, IDprogetto, IDtformaint, TipoFormativoInterno FROM t_TipoFormativoProgetto";
PerseoNET/clsProgetto.cs:					string str = Conversions.ToString(Operators.ConcatenateObject("SELECT t_Utenti.IDutente, IDedizione, (SELECT OreAttivita FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE (t_TipoAttivitaEdizione.TipoAttivita = 'LARSA') AND FK_edizione=IDedizione) AS OreSdoppiamento, IDiscrizione, Gruppo, (Cognome + ' ' + Nome) AS Studente, Cognome, Nome, CodFiscale, LuogoNascita, NazNascita, ProvNascita, DataNascita, ID_Dote, DataAvvioDote, DataFineDote, ImportoTotaleDote, PIPEsterno, DoteDeroga, DescrEnteProvenienza, DoteChiusa, CodiceProgetto, SiglaSede, CodiceEdizione, DescrEdizione, DataAvvio, DataFine, Durata, DataIscr, DataRitiro, OreUtente, OreAttivitaIndividuali, (SELECT SUM(QuotaDoteIscrizione) FROM t_IscrizioniDoti WHERE FK_Iscrizione=IDiscrizione) AS QuotaIscrDote, (SELECT SUM(Quota) FROM t_IscrizioniVersamenti WHERE FK_Iscrizione=IDiscrizione) AS QuotaIscrizione FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN t_StudentiDoti ON t_Utenti.IDutente = t_StudentiDoti.FK_Studente AND t_Progetti.IDprogetto = t_StudentiDoti.FK_ProgettoRendiconta AND t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE IDprogetto=", this.get_Campo((object)"IDprogetto")));
PerseoNET/clsProgetto.cs:				string origineDati = "SELECT IDregola, FK_Progetto, FK_TipoAttivitaEdizione, CostoOraAttivita, OreBonusGratuito, MaxOreAttivita, PercentualeBonus, RegolaDote, RegolaBonus, RegolaOreIscritto, RegolaOreAttivita, RegolaMaxOreStage, TipoGruppo, TipoCategoria, TipoAttivita, Aula, Primaria, Secondaria FROM t_ProgettiEdizioniRegole INNER JOIN t_TipoAttivitaEdizione ON t_ProgettiEdizioniRegole.FK_TipoAttivitaEdizione = t_TipoAttivitaEdizione.IDtattivita WHERE FK_Progetto=" + Conversions.ToString(mvIDprogetto) + " ";
PerseoNET/clsProgetto.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Utenti.IDutente, IDedizione, IDiscrizione, (Cognome + ' ' + Nome) AS Studente, Cognome, Nome, CodFiscale, LuogoNascita, NazNascita, ProvNascita, DataNascita, ID_Dote, DataAvvioDote, DataFineDote, ImportoTotaleDote, PIPEsterno, DoteDeroga, DescrEnteProvenienza, DoteChiusa, DescrProgetto, CodiceProgetto, SiglaSede, DescrEdizione, CodiceEdizione, Gruppo, DataAvvio, DataFine, Durata, DataIscr, DataRitiro, OreUtente, OreAttivitaIndividuali, (0) AS QuotaIscrDote, (0) AS QuotaIscrizione, (0) AS OreAula, (0) AS OreAssenza, (0) AS OrePIP, (0) AS OreIndividuali, (0) AS TotaleOre, (SELECT OreAttivita FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE (t_TipoAttivitaEdizione.TipoAttivita = 'LARSA') AND FK_Edizione=IDedizione) AS OreSdoppiamento FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN t_StudentiDoti ON t_Utenti.IDutente = t_StudentiDoti.FK_Studente AND t_Progetti.IDprogetto = t_StudentiDoti.FK_ProgettoRendiconta AND t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE IDprogetto=", this.get_Campo((object)"IDprogetto")), " AND FK_SedeEdizione="), vIDsede), " "), "ORDER BY (Cognome + ' ' + Nome), CodiceProgetto, ID_Dote, IDiscrizione "));
PerseoNET/clsProgetto.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, SUM(QuotaDoteIscrizione) AS QuotaIscrDote FROM t_IscrizioniDoti INNER JOIN t_Iscrizioni ON t_IscrizioniDoti.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE FK_Progetto=", this.get_Campo((object)"IDprogetto")), " AND FK_SedeEdizione="), vIDsede), " "), "GROUP BY IDiscrizione "));
PerseoNET/clsProgetto.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, SUM(Quota) AS QuotaIscrizione FROM t_IscrizioniVersamenti INNER JOIN t_Iscrizioni ON t_IscrizioniVersamenti.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE FK_Progetto=", this.get_Campo((object)"IDprogetto")), " AND FK_SedeEdizione="), vIDsede), " "), "GROUP BY IDiscrizione "));
PerseoNET/clsProgetto.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, (SUM(DATEDIFF(mi,OraInizio,OraFine))) AS TotaleOreAula FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Argomento IS NOT NULL AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND FK_Progetto=", this.get_Campo((object)"IDprogetto")), " AND FK_SedeEdizione="), vIDsede), " "), "GROUP BY IDedizione ORDER BY IDedizione "));
PerseoNET/clsProgetto.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Iscrizione, (SUM(DATEDIFF(mi,OraInizio,OraFine))) AS TotaleOre FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Argomento IS NULL AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND FK_Progetto=", this.get_Campo((object)"IDprogetto")), " AND FK_SedeEdizione="), vIDsede), " "), "GROUP BY FK_Iscrizione "), "HAVING FK_Iscrizione IS NOT NULL ORDER BY FK_Iscrizione "));
PerseoNET/clsProgetto.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, (SUM(DATEDIFF(mi,OraIngresso,OraUscita))) AS TotaleOre FROM t_Iscrizioni INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE DataStage<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND OFA=1 AND FK_Progetto=", this.get_Campo((object)"IDprogetto")), " AND FK_SedeEdizione="), vIDsede), " "), "GROUP BY IDiscrizione ORDER BY IDiscrizione "));
PerseoNET/clsProgetto.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, (SUM(Minuti)) AS TotaleOre FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_AssenzeAttivita ON t_Iscrizioni.IDiscrizione = t_AssenzeAttivita.FK_Iscrizione WHERE DataAssenza<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataRecupero IS NULL AND FK_Progetto=", this.get_Campo((object)"IDprogetto")), " AND FK_SedeEdizione="), vIDsede), " "), "GROUP BY IDiscrizione ORDER BY IDiscrizione "));
PerseoNET/clsProgetto.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (FK_Edizione) AS IDedizione, (SUM(DATEDIFF(mi,OraInizio,OraFine))) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Argomento IS NOT NULL AND DataAttivita>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(mvXLSProgetto.get_Campo((object)"DataRitiro")), "dd/MM/yyyy"), FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " GROUP BY FK_Edizione HAVING FK_Edizione=", mvXLSProgetto.get_Campo((object)"IDedizione")), " ORDER BY FK_Edizione "));
PerseoNET/clsProgetto.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (FK_Edizione) AS IDedizione, (SUM(DATEDIFF(mi,OraInizio,OraFine))) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Argomento IS NOT NULL AND DataAttivita<" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(mvXLSProgetto.get_Campo((object)"DataIscr")), "dd/MM/yyyy"), FlagSqlServer: true) + " GROUP BY FK_Edizione HAVING FK_Edizione=", mvXLSProgetto.get_Campo((object)"IDedizione")), " ORDER BY FK_Edizione "));
PerseoNET/clsProgetto.cs:				string origineDati = "SELECT t_Progetti.IDprogetto, IDdocente, t_DocentiContrattiEsterni.FK_Azienda, IDcontratto, IDedizione, IDincarico, CodiceProgetto, IDmwp, DescrProgetto, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Azienda IS NOT NULL THEN (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) ELSE NULL END) AS DescrAzienda, DescrParFiscale, SiglaSede, CodiceEdizione, DescrEdizione, TipoAttivita, OreAssegnate, OreSvolgere, QuotaOraIncarico, (SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) FROM t_CalendarioAttivita WHERE FK_Incarico=t_IncarichiEdizioni.IDincarico) AS TotOreFatte, (0) AS Selezione FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente AND t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi AND t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE " + text + " IDprogetto " + vFiltroProgetti + " AND QuotaOraIncarico>0 ORDER BY IDprogetto, IDdocente, FK_Azienda, IDedizione, TipoAttivita ";
PerseoNET/clsProgetto.cs:					vSQL = "SELECT IDprogetto, COUNT(IDprogpagamento) AS NPag, MAX(DataRichiestaFine) AS PagatoAl, MAX(DataPagamento) AS GiornoPagamento FROM t_Progetti LEFT OUTER JOIN t_ProgettiPagamenti ON t_Progetti.IDprogetto = t_ProgettiPagamenti.FK_Progetto GROUP BY IDprogetto HAVING IDprogetto=" + Conversions.ToString(mvIDprogetto) + " ";
PerseoNET/clsProgetto.cs:					vSQL = "SELECT IDprogetto, COUNT(IDprogpagamento) AS NPag, MAX(DataRichiestaFine) AS PagatoAl, MAX(DataPagamento) AS GiornoPagamento FROM t_Progetti LEFT OUTER JOIN t_ProgettiPagamenti ON t_Progetti.IDprogetto = t_ProgettiPagamenti.FK_Progetto ";
PerseoNET/clsProgetto.cs:					string origineDati = "SELECT t_PianoServizi.IDedizione, FK_Progetto, CodiceEdizione, SiglaSede, DataAvvio, DataFine, DataInizioFA, DataFineFA FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE FK_Progetto=" + Conversions.ToString(PKProgetto) + " ORDER BY SiglaSede, DataAvvio, CodiceEdizione ";
PerseoNET/clsProgetto.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.FK_Edizione, MIN(DataAttivita) AS PrimaData, MAX(DataAttivita) AS UltimaData FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE RegistrazioneEstesa=1 GROUP BY t_IncarichiEdizioni.FK_Edizione HAVING t_IncarichiEdizioni.FK_Edizione=", clsTblDatiDR.get_Campo((object)"IDedizione")));
PerseoNET/clsProgetto.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT t_Progetti.IDprogetto, SUM(Quota) AS TotaleIncassiProgetto FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione INNER JOIN t_IscrizioniVersamenti ON t_Iscrizioni.IDiscrizione = t_IscrizioniVersamenti.FK_Iscrizione WHERE Reso=0 GROUP BY t_Progetti.IDprogetto HAVING IDprogetto=", this.get_Campo((object)0)));
PerseoNET/clsProgetto.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT t_Progetti.IDprogetto, SUM(QuotaDoteIscrizione) AS TotaleDotiProgetto FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione INNER JOIN t_IscrizioniDoti ON t_Iscrizioni.IDiscrizione = t_IscrizioniDoti.FK_Iscrizione GROUP BY t_Progetti.IDprogetto HAVING IDprogetto=", this.get_Campo((object)0)));
PerseoNET/clsProgetto.cs:						string text = "(SELECT SUM(Minuti) AS OreFatteInc FROM v_DettaglioCalendarioAttivita WHERE DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " GROUP BY FK_Incarico HAVING FK_Incarico=t_IncarichiEdizioni.IDincarico) ";
PerseoNET/clsProgetto.cs:						text = "SELECT t_IncarichiEdizioni.IDincarico, IDincacontra, t_Docenti.IDdocente, FK_Tipo, IDargomento, FK_TipoArgomento, t_IncarichiEdizioniContratti.FK_Contratto, t_IncarichiEdizioni.FK_Edizione, (NULL) AS FK_SedeEdizione, IDtattivita, IDattedi, (Cognome + ' ' + Nome) AS StrDOC, IndTA, t_TipoAttivitaEdizione.TipoAttivita, IndArgomento, DescrBreveArgomento, t_ArgomentiModuli.DescrArgomento, OreArgomento, OreAssegnate, OreSvolgere, t_IncarichiEdizioniContratti.QuotaOraIncarico, DataInizioIncarico, DataFineIncarico, " + text2 + " AS OreFatteInc, (NULL) AS UltimaData, DataApprovaIncarico, ApprovaIncarico, DataProlungamento, ApprovaProlungamento, PreDimissione, PagamentoIndividuale, MAX(DataPagatoFine) AS DataUltimoPagamento, OreAttivita, DescrIncarico, Aula, Primaria, Secondaria, MonteOreEdizione, VincoloOrario, AttivitaPIP, MaxStudenti, SbloccoTemporaneo, DeltaOreAttivita, DescrAttivita, CostoOraServizio, FK_IncaricoClassiRiunite, IncaricoGenericoGratuito FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_ProgettiPagamentiCompensiOneri ON t_IncarichiEdizioni.IDincarico = t_ProgettiPagamentiCompensiOneri.IDincarico LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione GROUP BY t_IncarichiEdizioni.IDincarico, IDincacontra, t_Docenti.IDdocente, FK_Tipo, IDargomento, FK_TipoArgomento, t_IncarichiEdizioniContratti.FK_Contratto, t_IncarichiEdizioni.FK_Edizione, IDtattivita, IDattedi, IncaricoGenericoGratuito, Cognome, Nome, IndTA, t_TipoAttivitaEdizione.TipoAttivita, IndArgomento, DescrBreveArgomento, t_ArgomentiModuli.DescrArgomento, OreArgomento, OreAssegnate, OreSvolgere, t_IncarichiEdizioniContratti.QuotaOraIncarico, DataInizioIncarico, DataFineIncarico, DataApprovaIncarico, ApprovaIncarico, DataProlungamento, ApprovaProlungamento, PreDimissione, PagamentoIndividuale, OreAttivita, DescrIncarico, Aula, Primaria, Secondaria, MonteOreEdizione, VincoloOrario, MaxStudenti, SbloccoTemporaneo, AttivitaPIP, DeltaOreAttivita, DescrAttivita, CostoOraServizio, FK_IncaricoClassiRiunite HAVING t_IncarichiEdizioni.FK_Edizione " + mvEdizioni.StringaFiltroIN("IDedizione") + " ORDER BY (Cognome + ' ' + Nome), IndTA, DescrBreveArgomento ";
PerseoNET/clsProgetto.cs:						text = "SELECT IDincarico, IDincacontra, IDdocente, FK_Tipo, IDargomento, FK_TipoArgomento, IDcontratto, IDedizione, IDsede, FK_TipoAttivita, IDattedi, StrDOC, IndTA, TipoAttivita, IndArgomento, DescrBreveArgomento, DescrArgomento, OreArgomento, OreAssegnate, OreSvolgere, QuotaOraIncarico, DataInizioIncarico, DataFineIncarico, OreFatteInc, UltimaData, DataApprovaIncarico, ApprovaIncarico, DataProlungamento, ApprovaProlungamento, PreDimissione, PagamentoIndividuale, DataUltimoPagamento, OreAttivita, DescrIncarico, Aula, Primaria, Secondaria, MonteOreEdizione, VincoloOrario, AttivitaPIP, MaxStudenti, SbloccoTemporaneo, DeltaOreAttivita, DescrAttivita, CostoOraServizio, FK_IncaricoClassiRiunite, IncaricoGenericoGratuito FROM t_IncarichiContrattiEdizioni ";
PerseoNET/clsProgetto.cs:						text = "SELECT IDincarico, IDdocente, IDedizione, IIf(TipoAttivita='DOCENZA',1,2) AS Ordinale, (NULL) AS DescrProgetto, (NULL) AS CodiceProgetto, (0) AS TotaleIncassiProgetto, (0) AS TotaleDotiProgetto, (NULL) AS SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, (NULL) AS Annualita, (NULL) AS Tipo, StrDOC, CodFiscale, (NULL) AS DescrAzienda, (NULL) AS PIVA_CF, TipoAttivita, DescrArgomento, OreAssegnate, QuotaOraIncarico, (0) AS CostoInterno, (OreFatteInc) AS TotaleOreSvolte, (0) AS TotaleOrePagate, (0) AS TotalePagato,(0) AS  TotalePrevisto, (0) AS TotaleImponibilePrevisto, MIN(DataInizioIncarico) AS DataInizioContratto, MAX(DataFineIncarico) AS DataFineContratto, MAX(DataProlungamento) AS DataProlungamento, DataUltimoPagamento, (NULL) AS DescrParFiscale, (NULL) AS TipoFiscale FROM t_IncarichiContrattiEdizioni GROUP BY IDincarico, IDdocente, IDedizione, DescrEdizione, CodiceEdizione, TipoFormativoInterno, TipoAttivita, StrDOC, CodFiscale, DescrArgomento, OreAssegnate, QuotaOraIncarico, DataUltimoPagamento, OreFatteInc ORDER BY StrDOC, CodFiscale, IIf(TipoAttivita='DOCENZA',1,2) ";
PerseoNET/clsProgetto.cs:						text = "SELECT (FK_Docente) AS IDdocente, AVG(CostoDocenza) AS CostoDocenza, AVG(CostoCoordTutor) AS CostoCoordTutor, AVG(CostoAltreFunzioni) AS CostoAltreFunzioni FROM t_DocentiContratti WHERE FK_LivelloInterno IS NOT NULL AND DataFineContratto>=" + FunzStringa.StrDataSQL(Variabili.Annualita.GeneraStringaAvvioAnnoAmministrativo(Conversions.ToDate(this.get_Campo((object)"DataAvvioProg"))), FlagSqlServer: true) + " AND DataFineContratto<=" + FunzStringa.StrDataSQL(Variabili.Annualita.GeneraStringaFineAnnoAmministrativo(Conversions.ToDate(this.get_Campo((object)"DataFineProg"))), FlagSqlServer: true) + " GROUP BY FK_Docente HAVING FK_Docente " + clsTblDatiDR.StringaFiltroIN("IDdocente");
PerseoNET/clsProgetto.cs:						text = "SELECT IDincarico, t_Aziende.DescrAzienda, SUM(TotOreFatte) AS TotaleOrePagate, SUM(sngTotale) As TotaleCosto, MAX(DataPagatoFine) AS DataPagatoAL FROM t_ProgettiPagamentiCompensiOneri LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda GROUP BY IDincarico, DescrAzienda HAVING IDincarico " + clsTblDatiDR.StringaFiltroIN("IDincarico") + " ";
PerseoNET/clsProgetto.cs:						text = "SELECT (FK_IncaricoEdizione) AS IDincarico, QuotaOraIncarico, FK_CodicePF, FK_AliquotaPrevSepa, DescrAzienda, (CASE WHEN PIVA IS NOT NULL THEN PIVA ELSE CodFiscale END) AS PIVA_CF FROM t_IncarichiEdizioniContratti INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE FK_IncaricoEdizione " + clsTblDatiDR.StringaFiltroIN("IDincarico") + " ORDER BY IDcontratto DESC";
PerseoNET/clsProgetto.cs:						text = "SELECT IDparcella, DescrProgetto, CodiceProgetto, TipoCausaleParcella, DescrParcella, (CASE WHEN Cognome IS NOT NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Fornitore, (CASE WHEN Cognome IS NOT NULL THEN t_Docenti.PIVA ELSE (CASE WHEN t_Aziende.PIVA IS NOT NULL THEN t_Aziende.PIVA ELSE t_Aziende.CodFiscale END) END) AS PIVA, DataParcella, DataPagamento, DataFattura, NumeroFattura, ImportoParcella, (CostiAnticipo+CostiVitto+CostiViaggio) AS CostiAggiuntivi, sngTotale, sngNettoInc, DescrCostiAggiuntivi FROM t_Progetti INNER JOIN t_DocentiParcelle ON t_Progetti.IDprogetto = t_DocentiParcelle.FK_Progetto INNER JOIN t_TipoCausaleParcella ON t_DocentiParcelle.FK_Causale = t_TipoCausaleParcella.IDtcausaparce LEFT OUTER JOIN t_Aziende ON t_DocentiParcelle.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_Docenti ON t_DocentiParcelle.FK_Docente = t_Docenti.IDdocente WHERE IDprogetto=" + Conversions.ToString(mvIDprogetto) + " ORDER BY (CASE WHEN Cognome IS NOT NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END), DataParcella ";
PerseoNET/clsProgetto.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, FK_Progetto, AttivitaPIP FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_AttivitaEdizioni ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione AND t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE FK_Progetto=", this.get_Campo((object)0)), " AND AttivitaPIP=1 "));
PerseoNET/clsProgetto.cs:					string origineDati = "SELECT IDedizione, IDsede, SiglaSede, TipoFormativoInterno, DataAvvio, DataFine, Gruppo, MezzaOra, TipoAnnualita, DescrEdizione, CodiceEdizione FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint WHERE FK_Progetto=" + Conversions.ToString(mvIDprogetto);
PerseoNET/frmPannelloStampeProgetti.cs:				string str = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " ";
PerseoNET/frmPannelloStampeProgetti.cs:				str = "SELECT IDtprogetto, TipoProgetto FROM t_TipoProgetto ORDER BY TipoProgetto ";
PerseoNET/frmPannelloStampeProgetti.cs:				str = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE IDsede " + Variabili.FiltroSedi + " ORDER BY OrdGruppo, SiglaSede ";
PerseoNET/frmPannelloStampeProgetti.cs:				str = "SELECT t_Progetti.IDprogetto, IDbando, IDsede, ProgettoAttivo, SedeTest, SiglaSede, DescrProgetto, TipoProgetto, IDmwp, CodiceProgetto, CodiceCIG, CodiceCUP, DataCIGCUP, DescrBando, CodiceBando, DataAvvioProg, DataFineProg, MIN(DataInizioFA) AS DataInizioFA, MAX(DataFineFA) AS DataFineFA, COUNT(IDedizione) AS NumED FROM t_Progetti INNER JOIN t_Sedi ON t_Progetti.FK_SedeProgetto = t_Sedi.IDsede INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando LEFT OUTER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto LEFT OUTER JOIN t_Azioni ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione GROUP BY t_Progetti.IDprogetto, IDbando, IDsede, ProgettoAttivo, SiglaSede, DescrProgetto, TipoProgetto, IDmwp, CodiceProgetto, CodiceCIG, CodiceCUP, DataCIGCUP, DescrBando, CodiceBando, DataAvvioProg, DataFineProg, FK_TipoProgetto, SedeTest ORDER BY SiglaSede, TipoProgetto, CodiceBando, CodiceProgetto ";
PerseoNET/frmPannelloStampeProgetti.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (t_Iscrizioni.IDiscrizione) AS MatrIscr, (Cognome + ' ' + Nome) AS Studente, ID_Dote, CodiceProgetto, DescrProgetto, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=t_StudentiDoti.FK_SedePrimaria) AS SiglaSede, DataAvvioDote, DataFineDote, TipoDote, ImportoTotaleDote, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, t_StudentiDotiPianiFormativi.DescrAttivita, (MaxOrePreviste) AS OrePreviste, CostoOra, MIN(DataAttivita) AS PrimaData, MAX(DataAttivita) AS UltimaData, (SUM(DATEDIFF(mi,OraInizio, OraFine))/60) AS OreSvolte FROM v_StudentiDettaglioSvolteAttivitaPIP RIGHT OUTER JOIN t_StudentiDotiPianiFormativi ON v_StudentiDettaglioSvolteAttivitaPIP.IDpfdote = t_StudentiDotiPianiFormativi.IDpfdote RIGHT OUTER JOIN t_Utenti INNER JOIN t_StudentiDoti ON t_Utenti.IDutente = t_StudentiDoti.FK_Studente INNER JOIN t_TipoDoteStudente ON t_StudentiDoti.FK_TipoDote = t_TipoDoteStudente.IDtdote INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente AND t_StudentiDoti.IDdotestud = t_Iscrizioni.FK_DoteStudente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto ON t_StudentiDotiPianiFormativi.FK_Dote = t_StudentiDoti.IDdotestud WHERE FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY t_Iscrizioni.IDiscrizione, Cognome, Nome, ID_Dote, CodiceProgetto, DescrProgetto, DataAvvioDote, DataFineDote, TipoDote, ImportoTotaleDote, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, IndPIP, t_StudentiDotiPianiFormativi.DescrAttivita, MaxOrePreviste, CostoOra, IDprogetto, t_StudentiDoti.FK_SedePrimaria HAVING IDprogetto=", tblProg.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " "), "ORDER BY (Cognome + ' ' + Nome), IndPIP "));
PerseoNET/frmPannelloStampeProgetti.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, FK_Progetto, AttivitaPIP FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_AttivitaEdizioni ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione AND t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " AND AttivitaPIP=1 AND FK_SedeEdizione "), Variabili.FiltroSedi), " "));
PerseoNET/clsNotificaEvento.cs:				string origineDati = "SELECT IDavviso, DescrAvviso, PKRecord, NomeTabella FROM t_AvvisiUtentiPerseo WHERE PKRecord IS NULL AND DescrAvviso LIKE '%CV%.pdf%' ";
PerseoNET/clsNotificaEvento.cs:							origineDati = "SELECT IDdocumento FROM t_Documenti WHERE FK_Docente=" + Conversions.ToString(Conversions.ToLong(Strings.Mid(text, 3, 5))) + " AND DescrDocumento='" + text + "' ";
PerseoNET/clsNotificaEvento.cs:					origineDati = "SELECT IDavviso, DescrAvviso, PKRecord, NomeTabella FROM t_AvvisiUtentiPerseo INNER JOIN t_TipoCausaleAvviso ON t_AvvisiUtentiPerseo.FK_Causale = t_TipoCausaleAvviso.IDtcausaleavv WHERE PKRecord IS NULL AND DescrAvviso LIKE '%tirocinio ID=%' AND Enumerazione=18 ";
PerseoNET/clsNotificaEvento.cs:							origineDati = "SELECT IDconvenzione FROM t_ConvenzioniStage WHERE IDconvenzione=" + Conversions.ToString(Conversions.ToLong(text)) + " ";
PerseoNET/clsNotificaEvento.cs:				string origineDati = "SELECT IDtcausaleavv, Enumerazione, TipoCausaleAvviso, Conservare, Obsoleto FROM t_TipoCausaleAvviso";
PerseoNET/StampePerseo.cs:					string text4 = "SELECT t_Docenti.IDdocente, IDincarico, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS StrTipo, CodFiscale, SiglaSede, CodiceEdizione, DescrEdizione, CodiceProgetto, DescrProgetto, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, DescrArgomento, OreAssegnate, (CASE WHEN FK_Tipo<=2 THEN OreAssegnate ELSE (SELECT SUM(OreSvolgere) FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico AND ApprovaIncarico=1) END) AS OreApprovate, (0) AS OreAssegnateAnno, (SELECT SUM(Minuti) FROM v_DettaglioCalendarioAttivita WHERE v_DettaglioCalendarioAttivita.FK_Incarico=IDincarico AND DataAttivita>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + ") AS OreFatte, (SELECT SUM(Minuti) FROM v_DettaglioCalendarioAttivita WHERE v_DettaglioCalendarioAttivita.FK_Incarico=IDincarico AND DataAttivita<" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + ") AS OreFattePrecedente, (0) AS OreResidue, Aula FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento ";
PerseoNET/StampePerseo.cs:					text4 = (clsTblDatiDR.DestinazioneDati = "SELECT IDdocente, IDincarico, Docente, TipoDocente, CodFiscale, SiglaSede, CodiceEdizione, DescrEdizione, CodiceProgetto, DescrProgetto, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, DescrArgomento, OreAssegnate, OreApprovate, OreAssegnateAnno, StrOreFatte, StrOreFattePrecedente, StrOreResidue, Aula FROM t_IncarichiEdizione ");
PerseoNET/StampePerseo.cs:					text4 = "SELECT ('Totale') AS Etichetta, t_TipoAttivitaEdizione.TipoAttivita, OreAttivita, SUM(OreAssegnate) AS TotaleOreAssegnate, SUM(StrOreFatte) AS TotaleOreFatte, SUM(StrOreResidue) AS TotaleOreResidue, (NULL) AS OreAppr FROM t_TipoAttivitaEdizione INNER JOIN t_IncarichiEdizione ON t_TipoAttivitaEdizione.TipoAttivita = t_IncarichiEdizione.TipoAttivita GROUP BY t_TipoAttivitaEdizione.TipoAttivita, OreAttivita, t_TipoAttivitaEdizione.IndTA ORDER BY t_TipoAttivitaEdizione.IndTA ";
PerseoNET/StampePerseo.cs:					text4 = "SELECT TipoAttivita, DescrArgomento, PrevisteAttivita, OreAssegnate, StrOreFatte, StrOreResidue, OreApprovate FROM t_IncarichiEdizione ";
PerseoNET/StampePerseo.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDutente, IDiscrizione, PosRegistro, (Cognome + ' ' + Nome) AS Utente, Sesso, CodFiscale, DataNascita, (CASE WHEN NazNascita='ITALIA' THEN LuogoNascita ELSE NazNascita END) AS StrNascita, NazNascita, TipoNazionalita, (ComResidenza + ' (' + ProvResidenza + ') ' + CAPresidenza + CHAR(10) + IndirResidenza) AS Residenza, IdoneoAmmesso, (NULL) AS StrEsito, PuntFinale, TipoScalaPunteggio FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz LEFT OUTER JOIN t_TipoScalaPunteggioFinale ON t_Iscrizioni.FK_TipoScalaPunt = t_TipoScalaPunteggioFinale.IDtscalapunt WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataIscr IS NOT NULL AND DataRitiro IS NULL "), "ORDER BY PosRegistro, (Cognome + ' ' + Nome) "));
PerseoNET/StampePerseo.cs:				origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT Ind, Memo_1, Numerico_1, Testo_1, Testo_2, Testo_3, Testo_4, Testo_5, Testo_6, Testo_7, Testo_8, Testo_10, Testo_11, Testo_12, Testo_13 FROM t_StampaTbl_1");
PerseoNET/StampePerseo.cs:					str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDassenza, t_IncarichiEdizioni.FK_Edizione, DataAttivita, t_AssenzeAttivita.FK_Iscrizione, Minuti, ('larsa') AS StrTipo FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_AssenzeAttivita ON t_CalendarioAttivita.IDcalatt = t_AssenzeAttivita.FK_Attivita WHERE TipoArgomento='LARSA' AND t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND t_AssenzeAttivita.FK_Iscrizione "), Variabili.Edizione.StrFiltroIN_PKIscritti));
PerseoNET/StampePerseo.cs:					str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(str + "SELECT IDassenza, t_IncarichiEdizioni.FK_Edizione, DataAttivita, t_AssenzeAttivita.FK_Iscrizione, Minuti, ('larsa extra') AS StrTipo FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_AssenzeAttivita ON t_CalendarioAttivita.IDcalatt = t_AssenzeAttivita.FK_Attivita WHERE TipoAttivita='LARSA' AND t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND t_AssenzeAttivita.FK_Iscrizione "), Variabili.Edizione.StrFiltroIN_PKIscritti));
PerseoNET/StampePerseo.cs:					str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(str + "SELECT IDassenza, t_IncarichiEdizioni.FK_Edizione, DataAttivita, t_AssenzeAttivita.FK_Iscrizione, Minuti, ('docenza') AS StrTipo FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_AssenzeAttivita ON t_CalendarioAttivita.IDcalatt = t_AssenzeAttivita.FK_Attivita WHERE TipoArgomento<>'LARSA' AND t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND t_AssenzeAttivita.FK_Iscrizione "), Variabili.Edizione.StrFiltroIN_PKIscritti), "ORDER BY DataAttivita, t_AssenzeAttivita.FK_Iscrizione "));
PerseoNET/StampePerseo.cs:					str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDassenza, t_IncarichiEdizioni.FK_Edizione, DataAttivita, t_AssenzeAttivita.FK_Iscrizione, Minuti, ('docenza') AS StrTipo FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_AssenzeAttivita ON t_CalendarioAttivita.IDcalatt = t_AssenzeAttivita.FK_Attivita WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND t_AssenzeAttivita.FK_Iscrizione "), Variabili.Edizione.StrFiltroIN_PKIscritti), "ORDER BY DataAttivita, t_AssenzeAttivita.FK_Iscrizione "));
PerseoNET/StampePerseo.cs:					str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.FK_Edizione, t_CalendarioAttivita.DataAttivita, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS OreGiorno, (0) AS OreProgressivo, (0) AS StudPresenti, (0) AS OFAgiorno, (0) AS OFAprogressivo, TipoAttivita FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE TipoArgomento<>'LARSA' GROUP BY t_IncarichiEdizioni.FK_Edizione, TipoAttivita, DataAttivita HAVING t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(Variabili.BufferComune.StrDataAL, FlagSqlServer: true)), " "));
PerseoNET/StampePerseo.cs:					str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(str + "UNION SELECT t_IncarichiEdizioni.FK_Edizione, t_CalendarioAttivita.DataAttivita, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS OreGiorno, (0) AS OreProgressivo, (0) AS StudPresenti, (0) AS OFAgiorno, (0) AS OFAprogressivo, ('DOCENZA LARSA') AS TipoAttivita FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg WHERE TipoArgomento='LARSA' GROUP BY t_IncarichiEdizioni.FK_Edizione, DataAttivita HAVING t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(Variabili.BufferComune.StrDataAL, FlagSqlServer: true)), " "));
PerseoNET/StampePerseo.cs:					str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(str + "UNION SELECT t_IncarichiEdizioni.FK_Edizione, t_CalendarioAttivita.DataAttivita, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS OreGiorno, (0) AS OreProgressivo, (0) AS StudPresenti, (0) AS OFAgiorno, (0) AS OFAprogressivo, TipoAttivita FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE TipoAttivita='LARSA' GROUP BY t_IncarichiEdizioni.FK_Edizione, TipoAttivita, DataAttivita HAVING t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(Variabili.BufferComune.StrDataAL, FlagSqlServer: true)), " "), "ORDER BY DataAttivita, TipoAttivita "));
PerseoNET/StampePerseo.cs:					str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.FK_Edizione, t_CalendarioAttivita.DataAttivita, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS OreGiorno, (0) AS OreProgressivo, (0) AS StudPresenti, (0) AS OFAgiorno, (0) AS OFAprogressivo, TipoAttivita FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita GROUP BY t_IncarichiEdizioni.FK_Edizione, TipoAttivita, DataAttivita HAVING t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(Variabili.BufferComune.StrDataAL, FlagSqlServer: true)), " "), "ORDER BY DataAttivita, TipoAttivita "));
PerseoNET/StampePerseo.cs:					str = "SELECT IDedizione, Giorno, OreGiorno, OreProgressivo, Presenti, OfaGiorno, OfaProgressivo, TipoAttivita FROM zt_ProgressivoOFA ";
PerseoNET/StampePerseo.cs:						str = "SELECT Giorno, OreGiorno, OreProgressivo, Presenti, OfaGiorno, OfaProgressivo, TipoAttivita FROM zt_ProgressivoOFA ";
PerseoNET/StampePerseo.cs:						str = "SELECT Giorno, OreGiorno, OreProgressivo, Presenti, OfaGiorno, OfaProgressivo, TipoAttivita FROM zt_ProgressivoOFA ";
PerseoNET/StampePerseo.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Docenti.IDdocente, IDtattivita, (Cognome + ' ' + Nome) AS StrDocente, IndTA, TipoAttivita, SUM(OreAssegnate) AS TotOreAssegnate, (0) AS TotOreFatte, (NULL) AS M1, (NULL) AS M2, (NULL) AS M3, (NULL) AS M4, (NULL) AS M5, (NULL) AS M6, (NULL) AS M7, (NULL) AS M8, (NULL) AS M9, (NULL) AS M10, (NULL) AS M11, (NULL) AS M12, (NULL) AS M13, (NULL) AS M14, (NULL) AS M15, (NULL) AS M16 FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY t_Docenti.IDdocente, IDtattivita, (Cognome + ' ' + Nome), IndTA, TipoAttivita, Secondaria "), "ORDER BY (Cognome + ' ' + Nome), IndTA"));
PerseoNET/StampePerseo.cs:				origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Docente, IDtattivita, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, SUM(DateDiff(mi, OraInizio, OraFine)) As tore FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataAttivita>='"), Variabili.BufferComune.StrDataDAL), "' "), "AND DataAttivita<='"), Variabili.BufferComune.StrDataAL), "' "), "GROUP BY FK_Docente, IDtattivita, MONTH(DataAttivita), YEAR(DataAttivita) "));
PerseoNET/StampePerseo.cs:				origineDati = (clsTblDatiDR2.OrigineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(origineDati + "UNION SELECT FK_Docente, IDtattivita, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, SUM(DATEDIFF(mi, OraInizio, OraFine)) As tore FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataAttivita>='"), Variabili.BufferComune.StrDataDAL), "' "), "AND DataAttivita<='"), Variabili.BufferComune.StrDataAL), "' "), "GROUP BY FK_Docente, IDtattivita, MONTH(DataAttivita), YEAR(DataAttivita) "), "ORDER BY FK_Docente, IDtattivita, MONTH(DataAttivita) ")));
PerseoNET/StampePerseo.cs:					origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT Ind, Numerico_1, Testo_1, Numerico_2, Testo_2, Testo_3, Testo_4, Testo_5, Testo_6, Testo_7, Testo_8, Testo_9, Testo_10, Testo_11, Testo_12, Testo_13, Testo_14, Testo_15, Testo_16, Testo_17, Testo_18, Testo_19, Testo_20 FROM t_StampaTbl_1");
PerseoNET/StampePerseo.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, SiglaSede, CodiceEdizione, DescrEdizione, PosRegistro, Studente, ID_Dote, IDmwiscr, DataIscr, DataRitiro, PrevisteAula, PrevisteStage, OreAttivitaIndividuali, OreCredito, StatoStud, SvolteAula, PresenzaAula, OreAssenza, OreGiustificateAula, PresenzaStage, OreGiustificateStage, PresenzaIndiv, PresenzaServ, PresenzaTotale, OFAperct, SuperaOreIndividuali FROM t_IscrittiEdizione WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " ORDER BY PosRegistro, Studente "));
PerseoNET/StampePerseo.cs:					origineDati = ((!Variabili.Edizione.EsisteAttivita("DOCENZA")) ? "SELECT DataAttivita, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS tore FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico " : ((!Operators.ConditionalCompareObjectEqual(Variabili.Edizione.get_Campo((object)"Gruppo"), true, TextCompare: false)) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Iscrizione, DataAttivita, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS tore FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND FK_Argomento IS NOT NULL "), "GROUP BY FK_Iscrizione, DataAttivita "), "HAVING DataAttivita>="), FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(strAL, FlagSqlServer: true)), " ORDER BY DataAttivita ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DataAttivita, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS tore FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND FK_Argomento IS NOT NULL "), "GROUP BY DataAttivita "), "HAVING DataAttivita>="), FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(strAL, FlagSqlServer: true)), " ORDER BY DataAttivita "))));
PerseoNET/StampePerseo.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DataAttivita, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS tore FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND TipoAttivita='LARSA' "), "AND DataAttivita>="), FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(strAL, FlagSqlServer: true)), " AND FK_Argomento IS NULL "), "GROUP BY DataAttivita ORDER BY DataAttivita "));
PerseoNET/StampePerseo.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (t_AssenzeAttivita.FK_Iscrizione) AS IDiscrizione, SUM(Minuti) AS MinutiAssenza FROM t_AssenzeAttivita INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataRecupero IS NULL "), "AND DataAssenza>="), FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true)), " "), "AND DataAssenza<="), FunzStringa.StrDataSQL(strAL, FlagSqlServer: true)), " AND FK_Argomento IS NOT NULL "), "GROUP BY t_AssenzeAttivita.FK_Iscrizione "));
PerseoNET/StampePerseo.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (t_AssenzeAttivita.FK_Iscrizione) AS IDiscrizione, SUM(Minuti) AS MinutiAssenza FROM t_AssenzeAttivita INNER JOIN t_CalendarioAttivita ON t_AssenzeAttivita.FK_Attivita = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataRecupero IS NULL "), "AND DataAssenza>="), FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true)), " AND Giustificata=1 "), "AND DataAssenza<="), FunzStringa.StrDataSQL(strAL, FlagSqlServer: true)), " AND FK_Argomento IS NOT NULL "), "GROUP BY t_AssenzeAttivita.FK_Iscrizione "));
PerseoNET/StampePerseo.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (t_AssenzeAttivita.FK_Iscrizione) AS IDiscrizione, SUM(Minuti) AS MinutiAssenza FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_AssenzeAttivita ON t_CalendarioAttivita.IDcalatt = t_AssenzeAttivita.FK_Attivita WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataRecupero IS NULL AND TipoAttivita='LARSA' "), "AND DataAssenza>="), FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true)), " "), "AND DataAssenza<="), FunzStringa.StrDataSQL(strAL, FlagSqlServer: true)), " AND FK_Argomento IS NULL "), "GROUP BY t_AssenzeAttivita.FK_Iscrizione "));
PerseoNET/StampePerseo.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (t_AssenzeAttivita.FK_Iscrizione) AS IDiscrizione, SUM(Minuti) AS MinutiAssenza FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_AssenzeAttivita ON t_CalendarioAttivita.IDcalatt = t_AssenzeAttivita.FK_Attivita WHERE t_IncarichiEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataRecupero IS NULL AND TipoAttivita='LARSA' "), "AND DataAssenza>="), FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true)), " "), "AND DataAssenza<="), FunzStringa.StrDataSQL(strAL, FlagSqlServer: true)), " AND FK_Argomento IS NULL "), "GROUP BY t_AssenzeAttivita.FK_Iscrizione "));
PerseoNET/StampePerseo.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, Stage, PIP, SUM(DATEDIFF(mi, OraIngresso, OraUscita)) AS TotaleMinuti FROM t_Iscrizioni INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataStage>="), FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true)), " "), "AND DataStage<="), FunzStringa.StrDataSQL(strAL, FlagSqlServer: true)), " AND OFA=1 "), "GROUP BY IDiscrizione, Stage, PIP ORDER BY IDiscrizione "));
PerseoNET/StampePerseo.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, Stage, PIP, SUM(DATEDIFF(mi, OraIngresso, OraUscita)) AS TotaleMinuti FROM t_Iscrizioni INNER JOIN t_RegistroStage ON t_Iscrizioni.IDiscrizione = t_RegistroStage.FK_Iscrizione INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage = t_TipoAttivitaStage.IDtstage WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "AND DataStage>="), FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true)), " "), "AND DataStage<="), FunzStringa.StrDataSQL(strAL, FlagSqlServer: true)), " "), "AND OFA=0 AND TipoAttivitaStage='STAGE - ASSENZA GIUSTIFICATA' "), "GROUP BY IDiscrizione, Stage, PIP ORDER BY IDiscrizione "));
PerseoNET/StampePerseo.cs:						origineDati = ((!Conversions.ToBoolean(Operators.AndObject(Operators.CompareObjectEqual(Variabili.Edizione.get_Campo((object)"Gruppo"), false, TextCompare: false), Variabili.Edizione.EsisteAttivita("DOCENZA")))) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Edizione, (FK_Iscrizione) AS IDiscrizione, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleMinuti FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE DataAttivita>=" + FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(strAL, FlagSqlServer: true) + " AND LavoroPIP=1 AND PresenzaStudentePIP=1 GROUP BY FK_Edizione, FK_Iscrizione HAVING FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Edizione, (FK_Iscrizione) AS IDiscrizione, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleMinuti FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico WHERE FK_Argomento IS NULL AND DataAttivita>=" + FunzStringa.StrDataSQL(strDAL, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(strAL, FlagSqlServer: true) + " AND LavoroPIP=1 AND PresenzaStudentePIP=1 GROUP BY FK_Edizione, FK_Iscrizione HAVING FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " ")));
PerseoNET/clsContratto.cs:					string origineDati = "SELECT IDcontratto, IDcontrest, FK_Docente, DataInizioContratto, DataFineContratto, ContrattoApprovato, BloccoValutazione, Respinto, RespintoCausale, NoteContratto, LeggereNoteContratto, TipoDipendente, IDparfisc, CodiceParFiscale, DescrParFiscale, IDazienda, DescrAzienda, TipoFasciaDOC, DescrProfessione, TipoContributoCassaPrev, ProtAutorizzaPubblicaAmm, DataAutorizzaPubblicaAmm, NoteAutorizzaPubblicaAmm, DescrPubblicaAmm, IndirPubblicaAmm, ComPubblicaAmm, IndirizzoPECPubblAmm, DataUploadPAmm, FilePAmmPDF, DataLetturaPAmm FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_TipoFasciaDocenteEsterno ON t_DocentiContrattiEsterni.FK_TipoFasciaContr = t_TipoFasciaDocenteEsterno.IDtfasciadoc LEFT OUTER JOIN t_TipoContributoCassaPrev ON t_DocentiContrattiEsterni.FK_ContributoCassaPrev = t_TipoContributoCassaPrev.IDtcassaprev LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda  WHERE IDcontratto=" + Conversions.ToString(value);
PerseoNET/clsContratto.cs:						string text = "SELECT IDsegnalazione, IDcontratto, (Cognome + ' ' + Nome) AS Collaboratore, (NULL) AS SiglaSede, (NULL) AS DataInizioContratto, (NULL) AS DataFineContratto, (SELECT Login FROM t_Personale WHERE IDpers=FK_Crea) AS Crea, DescrSegnalazione, DataSegnalazione, (CASE WHEN FK_Risponde IS NOT NULL THEN (SELECT Login FROM t_Personale WHERE IDpers=FK_Risponde) ELSE NULL END) AS Risponde, DescrRisposta, DataRisposta, DataChiusura, (CASE WHEN DataRisposta IS NULL THEN 'attesa di risposta' WHEN (DataChiusura IS NULL AND DataRisposta IS NOT NULL) THEN 'risposta' ELSE 'chiusa' END) AS Tipo FROM wt_SegnalazioneContratti INNER JOIN t_DocentiContratti ON wt_SegnalazioneContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente ";
PerseoNET/clsContratto.cs:							text = "SELECT FK_Contratto, SiglaSede, (DataInizioIncarico) AS DataInizioContratto, (DataFineIncarico) AS DataFineContratto FROM t_IncarichiEdizioniContratti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede GROUP BY FK_Contratto, SiglaSede, DataInizioIncarico, DataFineIncarico HAVING FK_Contratto " + clsTblDatiDR.StringaFiltroIN("IDcontratto") + " ORDER BY FK_Contratto, SiglaSede ";
PerseoNET/clsContratto.cs:							string str = "SELECT IDdocente, IDincarico, (Cognome + ' ' + Nome) AS Collaboratore, CodFiscale, SiglaSede, CodiceEdizione, DescrEdizione, CodiceProgetto, DescrProgetto, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, (CASE WHEN TipoAttivita='DOCENZA' THEN DescrArgomento ELSE DescrIncarico END) AS DescrizioneAttivita, OreAssegnate, OreSvolgere, QuotaOraIncarico, (DataInizioIncarico) AS DataInizioContratto, (DataFineIncarico) AS DataFineContratto, DataProlungamento, DescrParFiscale, TipoDipendente, t_DocentiContrattiEsterni.DescrProfessione, TipoFasciaDOC, Aula, Primaria, Secondaria, ContrattoApprovato FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_TipoFasciaDocenteEsterno ON t_DocentiContrattiEsterni.FK_TipoFasciaContr = t_TipoFasciaDocenteEsterno.IDtfasciadoc RIGHT OUTER JOIN t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE DataInizioIncarico>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataFineIncarico<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND BloccoValutazione=1 AND ContrattoApprovato=1 AND Respinto=0 AND FK_Azienda IS NULL AND DocenteTest=0 ";
PerseoNET/clsContratto.cs:							str = "SELECT IDdocente, Collaboratore, CodFiscale, Sedi, TotaleAula, TotaleAltro, Totale, StatoAula, StatoAltro, StatoTotale, RichiestoAula, RichiestoAltro, RichiestoTotale, StatoAulaAR, StatoAltroAR, StatoTotaleAR, CriticoAula, CriticoAltro, Critico FROM t_IncarichiEdizioniContratti ";
PerseoNET/clsContratto.cs:							str = "SELECT IDdocente, IDincarico, (Cognome + ' ' + Nome) AS Collaboratore, CodFiscale, SiglaSede, CodiceEdizione, DescrEdizione, CodiceProgetto, DescrProgetto, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, (CASE WHEN TipoAttivita='DOCENZA' THEN DescrArgomento ELSE DescrIncarico END) AS DescrizioneAttivita, OreAssegnate, OreSvolgere, QuotaOraIncarico, (DataInizioIncarico) AS DataInizioContratto, (DataFineIncarico) AS DataFineContratto, DataProlungamento, DescrParFiscale, TipoDipendente, t_DocentiContrattiEsterni.DescrProfessione, TipoFasciaDOC, Aula, Primaria, Secondaria, ContrattoApprovato FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_TipoDipendenteDocEsterno ON t_DocentiContrattiEsterni.FK_TipoDipendente = t_TipoDipendenteDocEsterno.IDtestdipe INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_TipoFasciaDocenteEsterno ON t_DocentiContrattiEsterni.FK_TipoFasciaContr = t_TipoFasciaDocenteEsterno.IDtfasciadoc RIGHT OUTER JOIN t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE DataInizioIncarico>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " AND ContrattoApprovato=0 AND Respinto=0 AND FK_Azienda IS NULL AND DocenteTest=0 ORDER BY (Cognome + ' ' + Nome), CodFiscale, SiglaSede, IndTA, DescrArgomento ";
PerseoNET/clsContratto.cs:						string origineDati = "SELECT IDcontratto, SiglaSede FROM t_DettaglioContratti GROUP BY IDcontratto, SiglaSede ORDER BY IDcontratto, SiglaSede ";
PerseoNET/clsContratto.cs:				string text = "SELECT t_IncarichiEdizioniContratti.IDincacontra, IDcontratto, IDincarico, IDprogetto, IDedizione, t_DocentiContratti.FK_Docente, FK_Azienda, IDsede, FK_CodicePF, CodiceParFiscale, DescrParFiscale, DataInizioContratto, DataFineContratto, BloccoValutazione,  DescrProgetto, CodiceProgetto, t_Progetti.DelegaAzienda, t_Progetti.PercBudgetDelegaAzienda, IDmwp, IDmwa, DescrEdizione, MassimaleDDIF, TipoFormativoInterno, CodiceEdizione, IDmwe, SiglaSede, DataAvvio, DataFine, IndTA, TipoAttivita, DescrArgomento, DataInizioIncarico, DataFineIncarico, OreAssegnate, OreSvolgere, QuotaOraIncarico, ApprovaIncarico, DataApprovaIncarico, (0) AS Precedente FROM t_DocentiContratti INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE FK_Contratto=" + Conversions.ToString(idContratto) + " ";
PerseoNET/clsContratto.cs:				text = ((idAzienda != 0L) ? (text + "UNION SELECT t_IncarichiEdizioniContratti.IDincacontra, IDcontratto, IDincarico, IDprogetto, IDedizione, t_DocentiContratti.FK_Docente, FK_Azienda, IDsede, FK_CodicePF, CodiceParFiscale, DescrParFiscale, DataInizioContratto, DataFineContratto, BloccoValutazione,  DescrProgetto, CodiceProgetto, t_Progetti.DelegaAzienda, t_Progetti.PercBudgetDelegaAzienda, IDmwp, IDmwa, DescrEdizione, MassimaleDDIF, TipoFormativoInterno, CodiceEdizione, IDmwe, SiglaSede, DataAvvio, DataFine, IndTA, TipoAttivita, DescrArgomento, DataInizioIncarico, DataFineIncarico, OreAssegnate, OreSvolgere, QuotaOraIncarico, ApprovaIncarico, DataApprovaIncarico, (1) AS Precedente FROM t_DocentiContratti INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDcontratto<>" + Conversions.ToString(idContratto) + " AND FK_Azienda=" + Conversions.ToString(idAzienda) + " AND ApprovaIncarico=1 AND DataInizioContratto>='01/09/" + Strings.Left(strAnnoAmm, 4) + "' AND DataFineContratto<='31/08/" + Strings.Right(strAnnoAmm, 4) + "' ORDER BY DataInizioContratto DESC") : (text + "UNION SELECT t_IncarichiEdizioniContratti.IDincacontra, IDcontratto, IDincarico, IDprogetto, IDedizione, t_DocentiContratti.FK_Docente, FK_Azienda, IDsede, FK_CodicePF, CodiceParFiscale, DescrParFiscale, DataInizioContratto, DataFineContratto, BloccoValutazione,  DescrProgetto, CodiceProgetto, t_Progetti.DelegaAzienda, t_Progetti.PercBudgetDelegaAzienda, IDmwp, IDmwa, DescrEdizione, MassimaleDDIF, TipoFormativoInterno, CodiceEdizione, IDmwe, SiglaSede, DataAvvio, DataFine, IndTA, TipoAttivita, DescrArgomento, DataInizioIncarico, DataFineIncarico, OreAssegnate, OreSvolgere, QuotaOraIncarico, ApprovaIncarico, DataApprovaIncarico, (1) AS Precedente FROM t_DocentiContratti INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDcontratto<>" + Conversions.ToString(idContratto) + " AND DataInizioContratto>='01/09/" + Strings.Left(strAnnoAmm, 4) + "' AND DataFineContratto<='31/08/" + Strings.Right(strAnnoAmm, 4) + "' AND t_DocentiContratti.FK_Docente=" + Conversions.ToString(idDocente) + " AND FK_Azienda IS NULL AND ApprovaIncarico=1 ORDER BY DataInizioContratto DESC"));
PerseoNET/clsContratto.cs:				text = "SELECT IDincacontra, IDcontratto, IDincarico, IDprogetto, IDedizione, FK_Docente, FK_Azienda, IDsede, FK_CodicePF, CodiceParFiscale, DescrParFiscale, DataInizioContratto, DataFineContratto, BloccoValutazione, DescrProgetto, CodiceProgetto, DelegaAzienda, PercBudgetDelegaAzienda, IDmwp, IDmwa, DescrEdizione, MassimaleDDIF, TipoFormativoInterno, CodiceEdizione, IDmwe, SiglaSede, DataAvvio, DataFine, IndTA, TipoAttivita, DescrArgomento, DataInizioIncarico, DataFineIncarico , OreAssegnate, OreSvolgere, QuotaOraIncarico, ApprovaIncarico, DataApprovaIncarico, Precedente FROM t_DettaglioContratti ";
PerseoNET/clsContratto.cs:				string text2 = (clsTblDatiDR.OrigineDati = "SELECT t_IncarichiEdizioni.IDincarico, IDcontratto, t_IncarichiEdizioni.FK_Docente, FK_Azienda, FK_CodicePF, DataInizioIncarico, DataFineIncarico, DataProlungamento, QuotaOraIncarico FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE IDincarico " + strFiltroInc + " ORDER BY IDincarico, IDcontratto ");
PerseoNET/clsContratto.cs:				string text = "SELECT IDcontratto, FK_Docente, t_DocentiContratti.Bloccato, FK_TipoFormaContratto FROM t_DocentiContratti LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE IDincacontra IS NULL AND FK_TipoFormaContratto=3 ";
PerseoNET/clsContratto.cs:				string origineDati = "SELECT t_IncarichiEdizioni.IDincarico, QuotaOraIncarico, OreAssegnate, SUM(OreSvolgere) AS TotaleApprovate, (0) AS TotaleLetteraInc, (CASE WHEN (Aula = 1 AND Primaria = 1) THEN MaxCostoDocenza WHEN (Aula = 1 AND Primaria = 0) THEN MaxCostoCodocenza WHEN (Aula = 0) THEN MaxCostoAltro ELSE 0 END) AS MaxCostoFascia FROM t_AttivitaEdizioni INNER JOIN t_IncarichiEdizioni ON t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_TipoFasciaDocenteEsterno ON t_DocentiContrattiEsterni.FK_TipoFasciaContr = t_TipoFasciaDocenteEsterno.IDtfasciadoc ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione " + text + "AND DataInizioIncarico>='" + mvDataDAL + "' AND DataInizioIncarico<='" + mvDataAL + "' AND ContrattoApprovato=1 GROUP BY t_IncarichiEdizioni.IDincarico, QuotaOraIncarico, OreAssegnate, Aula, Primaria, MaxCostoAltro, MaxCostoDocenza, MaxCostoCodocenza ";
PerseoNET/clsContratto.cs:				origineDati = "SELECT (FK_Incarico) AS IDincarico, SUM(Minuti) AS TotaleMinuti FROM v_DettaglioCalendarioAttivita WHERE DataAttivita<'" + mvDataDAL + "' GROUP BY FK_Incarico HAVING FK_Incarico " + clsTblDatiDR.StringaFiltroIN("IDincarico");
PerseoNET/clsContratto.cs:						vSQL = "SELECT IDprogetto, DataAvvioProg, FAGiorniPrima FROM t_Progetti WHERE IDprogetto=" + Conversions.ToString(vIDprogetto);
PerseoNET/clsContratto.cs:				vSQL = "SELECT IDsede, IDlettinc, IDcontratto, IDdocente, IDazienda, IDtattivita, IDprogetto, IDparfisc, SiglaSede, (CASE WHEN IDazienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Collaboratore, DescrProgetto, CodiceProgetto, TipoAttivita, QuotaOraIncarico, OreApprovate, DataInizioContratto, DataFineContratto, MaxDataProlungamento, DataApprovaIncarico, DataGenerazione, DataProlungamento, DataDownload, DataUpload FROM t_DocentiLettereIncarichi RIGHT OUTER JOIN v_DocentiLettereIncaricoPreviste ON t_DocentiLettereIncarichi.FK_Contratto = v_DocentiLettereIncaricoPreviste.IDcontratto AND t_DocentiLettereIncarichi.FK_Sede = v_DocentiLettereIncaricoPreviste.IDsede AND t_DocentiLettereIncarichi.FK_Docente = v_DocentiLettereIncaricoPreviste.IDdocente AND t_DocentiLettereIncarichi.FK_Progetto = v_DocentiLettereIncaricoPreviste.IDprogetto AND t_DocentiLettereIncarichi.FK_Attivita = v_DocentiLettereIncaricoPreviste.IDtattivita ";
PerseoNET/clsContratto.cs:				string origineDati = "SELECT IDincarico, (FK_Docente) AS IDdocente, (FK_Contratto) AS IDcontratto, (0) AS Controllare FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE IDincarico " + vStrFiltro + " ORDER BY FK_Contratto, IDincarico ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiPagamentiFatture.IDprogfatt, FK_Docente, FK_Fattura, IDprogetto, (Cognome + ' ' + Nome) AS StrDOC, SiglaSede, DescrProgetto, CodiceProgetto, (CASE WHEN FK_Fattura IS NULL THEN 'No' ELSE 'SÃ¬' END) AS Fattura, DataRichiestaInizio, DataRichiestaFine, DataPagamento, Sospeso, Autorizzazione FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_Docenti ON t_ProgettiPagamentiFatture.FK_Docente = t_Docenti.IDdocente INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto WHERE IDprogfatt=", tblPag.get_Campo((object)"IDprogfatt", vFlagUpdateDB: false)), " "));
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente, FK_Progetto, FK_SedeEdizione, FK_CodicePF, FK_Azienda, QuotaOraIncarico, (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)) FROM t_CalendarioAttivita WHERE FK_Incarico=IDincarico AND DataAttivita>='", tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' "), "AND DataAttivita<='"), tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "') AS TotOreFatte, "), "(SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)) FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt "), "WHERE t_CalendarioCodocenza.FK_Incarico=IDincarico AND DataAttivita>='"), tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' "), "AND DataAttivita<='"), tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "') AS TotOreFatteAltro, "), "(SELECT OreSvolte FROM t_IncarichiEdizioniOrePerMese WHERE FK_Incarico=IDincarico AND DataSvolteDAL='"), tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' "), "AND DataSvolteAL<='"), tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "') AS TotOreConsuntivo,  (0) AS Verificare "), "FROM t_IncarichiEdizioni INNER JOIN "), "t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN "), "t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN "), "t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN "), "t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN "), "t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto "), "WHERE (DataFineContratto>='"), tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' AND PagamentoIndividuale=0) "), "OR (DataProlungamento>'"), tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' AND PagamentoIndividuale=0) "), "GROUP BY t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente, FK_Progetto, FK_SedeEdizione, "), "FK_CodicePF, FK_Azienda, QuotaOraIncarico "), "HAVING FK_Progetto="), tblPag.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " AND FK_SedeEdizione="), tblPag.get_Campo((object)"IDsede", vFlagUpdateDB: false)), " "), "AND t_IncarichiEdizioni.FK_Docente "), clsTblDatiDR.StringaFiltroIN("FK_Docente")), " "), "ORDER BY t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Docente "));
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					origineDati = "SELECT t_ProgettiPagamenti.IDprogpagamento, FK_Progetto, t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, Autorizzazione, Sospeso, DataStampaAutorizzazione, (Cognome + ' ' + Nome) AS StrDOC, DescrAzienda FROM t_Aziende RIGHT OUTER JOIN t_DocentiFatture ON t_Aziende.IDazienda = t_DocentiFatture.FK_Azienda RIGHT OUTER JOIN t_ProgettiPagamenti INNER JOIN t_ProgettiPagamentiFatture ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiFatture.FK_ProgPagamento INNER JOIN t_Docenti ON t_ProgettiPagamentiFatture.FK_Docente = t_Docenti.IDdocente ON t_DocentiFatture.IDfattura = t_ProgettiPagamentiFatture.FK_Fattura WHERE IDprogfatt " + clsTblDatiDR.StringaFiltroIN("IDprogfatt") + " AND Autorizzazione=1 AND Sospeso=1 ORDER BY t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:						string origineDati = "SELECT t_PianoServizi.IDedizione, FK_Progetto, CodiceEdizione, DataAvvio, DataFine, DataBloccoSCO, MezzaOra, t_PianoServizi.Bloccato FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE FK_Progetto " + text + " AND FK_SedeEdizione " + text4 + " AND MezzaOra=1 ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:						origineDati = "SELECT t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, (FK_CodicePF) AS FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE t_Aziende.PIVA END) AS StrFiscale, DescrParFiscale, TipoAliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, (0) AS TotOreFatte, QuotaOraIncarico, " + vStrMesi + "(0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (0) AS Autorizzazione, (NULL) AS DataAutorizzazione, (NULL) AS DataPagatoInizio, (NULL) AS DataPagatoFine, (NULL) AS DataPagamento, (0) AS Assegni, (NULL) AS MatricolaTracciatoAssegni, (NULL) AS StrFattura, CodiceTributo FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_DocentiContrattiEsterni INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto LEFT OUTER JOIN  t_TipoAliquotaPrevidenzaSeparata ON t_DocentiContrattiEsterni.FK_AliquotaPrevSepa = t_TipoAliquotaPrevidenzaSeparata.IDtaliquosepa LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE ContrattoApprovato=1 AND PagamentoIndividuale=0 AND IncaricoBloccato=0 AND IncaricoGenericoGratuito=0 AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(text3, FlagSqlServer: true) + " AND (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE DataProlungamento END)>=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " GROUP BY t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, FK_CodicePF, IDtattivita, CodiceTributo, FK_Azienda, Aula, Secondaria, DescrAzienda, Cognome, Nome, t_Docenti.CodFiscale, t_Aziende.PIVA, DescrParFiscale, TipoAliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, QuotaOraIncarico,IndTA HAVING IDincarico " + Variabili.AutorizzaPagamenti.StrIncarichiFiltroIN + " AND QuotaOraIncarico>0 AND IDdocente " + tblPag.StringaFiltroIN("IDdocente") + "  ORDER BY (Cognome + ' ' + Nome), IDdocente, IndTA, IDincarico ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:							origineDati = "SELECT NumeroIncarico, Collaboratore, DescrParFiscale, DataPagatoInizio, DataPagatoFine FROM t_DocentiContratti ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:							origineDati = "SELECT t_IncarichiEdizioni.IDincarico, IDcontratto, IDparfisc, CodiceParFiscale, DescrParFiscale, DataInizioIncarico, DataFineIncarico, DataProlungamento, (SELECT MAX(DataPagatoFine) FROM t_ProgettiPagamentiCompensiOneri WHERE t_ProgettiPagamentiCompensiOneri.IDincarico = t_IncarichiEdizioni.IDincarico) AS MaxDataPagatoFine FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:							origineDati = "SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE t_IncarichiEdizioni.IDincarico " + rsPaga.StringaFiltroIN("IDincarico") + " AND DataAttivita>='" + text2 + "' AND DataAttivita<='" + text3 + "' GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) UNION SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE t_IncarichiEdizioni.IDincarico " + rsPaga.StringaFiltroIN("IDincarico") + " AND DataAttivita>='" + text2 + "' AND DataAttivita<='" + text3 + "' GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) ORDER BY IDdocente, IDincarico ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:							origineDati = "SELECT IDincarico, TotOreFatte, DataPagatoInizio, DataPagatoFine, Anticipo FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE Anticipo=1 ORDER BY IDincarico, DataRichiestaFine ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDoremese, IDprogpagamento, FK_Incarico, DataSvolteDAL, DataSvolteAL, (OreSvolte) AS TotOreFatte FROM t_ProgettiPagamenti INNER JOIN t_ProgettiPagamentiFatture ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiFatture.FK_ProgPagamento INNER JOIN t_IncarichiEdizioniOrePerMese ON t_ProgettiPagamenti.DataRichiestaInizio = t_IncarichiEdizioniOrePerMese.DataSvolteDAL AND t_ProgettiPagamenti.DataRichiestaFine = t_IncarichiEdizioniOrePerMese.DataSvolteAL INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniOrePerMese.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Docenti ON t_ProgettiPagamentiFatture.FK_Docente = t_Docenti.IDdocente AND t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE FK_Incarico=", rsPaga.get_Campo((object)"IDincarico")), " "), "AND Sospeso=1 AND Autorizzazione=1 AND OreSvolte>0 AND DataSvolteDAL="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " "), "AND DataSvolteAL="), FunzStringa.StrDataSQL(text3, FlagSqlServer: true)));
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:								origineDati = "SELECT t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, (FK_CodicePF) AS FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE t_Aziende.PIVA END) AS StrFiscale, DescrParFiscale, MAX(TipoAliquotaPrevSepa) AS TipoAliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, (0) AS TotOreFatte, QuotaOraIncarico, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (0) AS Autorizzazione, (NULL) AS DataAutorizzazione, (NULL) AS DataPagatoInizio, (NULL) AS DataPagatoFine, (NULL) AS DataPagamento, (0) AS Assegni, (NULL) AS MatricolaTracciatoAssegni, (NULL) AS StrFattura, CodiceTributo FROM t_Pagamenti ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:								origineDati = (clsTblDatiDR3.DestinazioneDati = "SELECT IDdocente, IDincarico, FK_Progetto, IDedizione, FK_SedeEdizione, FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, AltriEnaip, Autorizzazione, DataAutorizzazione, DataPagatoInizio, DataPagatoFine, DataPagamento, Assegni, MatricolaTracciatoAssegni, StrFattura, CodiceTributo FROM t_Pagamenti ");
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:								origineDati = "SELECT IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriRedditi, MAX(AltriEnaip) AS AltriEnaip, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NULL GROUP BY IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, DescrAzienda, CodiceTributo ORDER BY StrDOC ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:								origineDati = "SELECT FK_Azienda, FK_ParFiscaleAttuale, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriRedditi, MAX(AltriEnaip) AS AltriEnaip, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NOT NULL GROUP BY FK_Azienda, FK_ParFiscaleAttuale, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, CodiceTributo ORDER BY DescrAzienda ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:						string origineDati = "SELECT t_PianoServizi.IDedizione, FK_Progetto, CodiceEdizione, DataAvvio, DataFine, DataBloccoSCO, MezzaOra, t_PianoServizi.Bloccato FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE IDedizione " + tblPag.StringaFiltroIN("IDedizione") + " AND MezzaOra=1 ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:							string text4 = "(SELECT FK_Azienda FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE (FK_IncaricoEdizione=IDincarico AND DataFineIncarico>='" + text + "') OR (FK_IncaricoEdizione=IDincarico AND DataProlungamento>='" + text + "') GROUP BY FK_Azienda) AS FK_Azienda ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:							string text5 = "(SELECT DescrAzienda FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE (FK_IncaricoEdizione=IDincarico AND DataFineIncarico>='" + text + "') OR (FK_IncaricoEdizione=IDincarico AND DataProlungamento>='" + text + "') GROUP BY DescrAzienda) AS DescrAzienda ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:							origineDati = "SELECT t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, (FK_CodicePF) AS FK_ParFiscaleAttuale, IDtattivita, " + text4 + ", Aula, Secondaria, " + text5 + ", (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE t_Aziende.PIVA END) AS StrFiscale, DescrParFiscale, TipoAliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, (0) AS TotOreFatte, QuotaOraIncarico, " + vStrMesi + "(0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (1) AS Autorizzazione, (NULL) AS DataAutorizzazione, (NULL) AS DataPagatoInizio, (NULL) AS DataPagatoFine, (NULL) AS DataPagamento, (0) AS Assegni, (NULL) AS MatricolaTracciatoAssegni, (NULL) AS StrFattura, CodiceTributo FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_DocentiContrattiEsterni INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto LEFT OUTER JOIN  t_TipoAliquotaPrevidenzaSeparata ON t_DocentiContrattiEsterni.FK_AliquotaPrevSepa = t_TipoAliquotaPrevidenzaSeparata.IDtaliquosepa LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE (ContrattoApprovato=1 AND PagamentoIndividuale=1 AND IncaricoBloccato=0 AND IncaricoGenericoGratuito=0 AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE DataProlungamento END)>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + ") OR (ContrattoApprovato=1 AND PagamentoIndividuale=1 AND IncaricoBloccato=1 AND FK_Tipo=2 AND IncaricoGenericoGratuito=0 AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE DataProlungamento END)>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + ") GROUP BY t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, FK_CodicePF, IDtattivita, CodiceTributo, FK_Azienda, Aula, Secondaria, DescrAzienda, Cognome, Nome, t_Docenti.CodFiscale, t_Aziende.PIVA, DescrParFiscale, TipoAliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, QuotaOraIncarico,IndTA HAVING IDincarico " + tblPag.StringaFiltroIN("IDincarico") + "  AND QuotaOraIncarico>0 ORDER BY (Cognome + ' ' + Nome), IndTA, TipoAttivita ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:										origineDati = "SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) HAVING IDincarico " + tblPag.StringaFiltroIN("IDincarico") + " ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:										origineDati = origineDati + "UNION SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) HAVING IDincarico " + tblPag.StringaFiltroIN("IDincarico") + " ORDER BY IDdocente, IDincarico, MONTH(DataAttivita) ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:											origineDati = "SELECT IDdocente, IDincarico, FK_Progetto, IDedizione, FK_SedeEdizione, FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, TotOreFatte, QuotaOraIncarico, " + origineDati + "sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, AltriEnaip, Autorizzazione, DataAutorizzazione, DataPagatoInizio, DataPagatoFine, DataPagamento, Assegni, MatricolaTracciatoAssegni, StrFattura, CodiceTributo FROM t_Pagamenti ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:											origineDati = "SELECT IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, MAX(FK_AliquotaPrevSepa) AS FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriCompensi, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NULL GROUP BY IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, DescrAzienda, CodiceTributo ORDER BY StrDOC, IDdocente ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:											origineDati = "SELECT FK_Azienda, FK_ParFiscaleAttuale, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriCompensi, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NOT NULL GROUP BY FK_Azienda, FK_ParFiscaleAttuale, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, CodiceTributo ORDER BY DescrAzienda ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:												origineDati = "SELECT IDdocente, IDincarico, FK_Progetto, IDedizione, FK_SedeEdizione, FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, TotOreFatte, QuotaOraIncarico, " + origineDati + "sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, AltriEnaip, Autorizzazione, DataAutorizzazione, DataPagatoInizio, DataPagatoFine, DataPagamento, Assegni, MatricolaTracciatoAssegni, StrFattura, CodiceTributo FROM t_Pagamenti ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:							string origineDati = "SELECT t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, (FK_CodicePF) AS FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE t_Aziende.PIVA END) AS StrFiscale, DescrParFiscale, MAX(TipoAliquotaPrevSepa) AS TipoAliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, (0) AS TotOreFatte, QuotaOraIncarico, " + text3 + "(0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (0) AS Autorizzazione, (NULL) AS DataAutorizzazione, (NULL) AS DataPagatoInizio, (NULL) AS DataPagatoFine, (NULL) AS DataPagamento, (0) AS Assegni, (NULL) AS MatricolaTracciatoAssegni, (NULL) AS StrFattura, CodiceTributo FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_DocentiContrattiEsterni INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto LEFT OUTER JOIN  t_TipoAliquotaPrevidenzaSeparata ON t_DocentiContrattiEsterni.FK_AliquotaPrevSepa = t_TipoAliquotaPrevidenzaSeparata.IDtaliquosepa LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE (ContrattoApprovato=1 AND PagamentoIndividuale=0 AND IncaricoBloccato=0 AND IncaricoGenericoGratuito=0 AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE DataProlungamento END)>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + ") OR (ContrattoApprovato=1 AND PagamentoIndividuale=0 AND IncaricoBloccato=0 AND IncaricoGenericoGratuito=0 AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE DataProlungamento END)>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + ") GROUP BY t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, FK_CodicePF, IDtattivita, CodiceTributo, FK_Azienda, Aula, Secondaria, DescrAzienda, Cognome, Nome, t_Docenti.CodFiscale, t_Aziende.PIVA, DescrParFiscale, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, QuotaOraIncarico,IndTA HAVING IDincarico " + tblPagati.StringaFiltroIN("IDincarico") + " AND QuotaOraIncarico>0 ORDER BY (Cognome + ' ' + Nome), IndTA, TipoAttivita ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:									origineDati = "SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE t_IncarichiEdizioni.IDincarico " + tblPagati.StringaFiltroIN("IDincarico") + " AND DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:									origineDati = origineDati + "UNION SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE t_IncarichiEdizioni.IDincarico " + tblPagati.StringaFiltroIN("IDincarico") + " AND DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) ORDER BY IDdocente, IDincarico ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:									origineDati = "SELECT IDdocente, IDincarico, FK_Progetto, IDedizione, FK_SedeEdizione, FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, TotOreFatte, QuotaOraIncarico, " + origineDati + "sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, AltriEnaip, Autorizzazione, DataAutorizzazione, DataPagatoInizio, DataPagatoFine, DataPagamento, Assegni, MatricolaTracciatoAssegni, StrFattura, CodiceTributo FROM t_Pagamenti ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:									origineDati = "SELECT IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriRedditi, MAX(AltriEnaip) AS AltriEnaip, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NULL GROUP BY IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, DescrAzienda, CodiceTributo ORDER BY StrDOC ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:									origineDati = "SELECT FK_Azienda, FK_ParFiscaleAttuale, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriRedditi, MAX(AltriEnaip) AS AltriEnaip, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NOT NULL GROUP BY FK_Azienda, FK_ParFiscaleAttuale, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, CodiceTributo ORDER BY DescrAzienda ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:										origineDati = "SELECT IDdocente, IDincarico, FK_Progetto, IDedizione, FK_SedeEdizione, FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, TotOreFatte, QuotaOraIncarico, " + origineDati + "sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, AltriEnaip, Autorizzazione, DataAutorizzazione, DataPagatoInizio, DataPagatoFine, DataPagamento, Assegni, MatricolaTracciatoAssegni, StrFattura, CodiceTributo FROM t_Pagamenti ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					string origineDati = "SELECT t_PianoServizi.IDedizione, FK_Progetto, CodiceEdizione, DataAvvio, DataFine, DataBloccoSCO, MezzaOra, t_PianoServizi.Bloccato FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE IDedizione " + tblPagati.StringaFiltroIN("IDedizione") + " AND MezzaOra=1 ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					string text4 = "(SELECT FK_Azienda FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE (FK_IncaricoEdizione=IDincarico AND DataFineIncarico>='" + text + "') OR (FK_IncaricoEdizione=IDincarico AND DataProlungamento>='" + text + "') GROUP BY FK_Azienda) AS FK_Azienda ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					string text5 = "(SELECT DescrAzienda FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE (FK_IncaricoEdizione=IDincarico AND DataFineIncarico>='" + text + "') OR (FK_IncaricoEdizione=IDincarico AND DataProlungamento>='" + text + "') GROUP BY DescrAzienda) AS DescrAzienda ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					origineDati = "SELECT t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, (FK_CodicePF) AS FK_ParFiscaleAttuale, IDtattivita, " + text4 + ", Aula, Secondaria, " + text5 + ", (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Azienda IS NULL THEN t_Docenti.CodFiscale ELSE t_Aziende.PIVA END) AS StrFiscale, DescrParFiscale, TipoAliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, (0) AS TotOreFatte, QuotaOraIncarico, " + vStrMesi + "(0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (1) AS Autorizzazione, (NULL) AS DataAutorizzazione, (NULL) AS DataPagatoInizio, (NULL) AS DataPagatoFine, (NULL) AS DataPagamento, (0) AS Assegni, (NULL) AS MatricolaTracciatoAssegni, (NULL) AS StrFattura, CodiceTributo FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_DocentiContrattiEsterni INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto LEFT OUTER JOIN  t_TipoAliquotaPrevidenzaSeparata ON t_DocentiContrattiEsterni.FK_AliquotaPrevSepa = t_TipoAliquotaPrevidenzaSeparata.IDtaliquosepa LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE ContrattoApprovato=1 AND PagamentoIndividuale=1 AND IncaricoBloccato=0 AND IncaricoGenericoGratuito=0 AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " AND (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE DataProlungamento END)>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " GROUP BY t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, FK_CodicePF, IDtattivita, CodiceTributo, FK_Azienda, Aula, Secondaria, DescrAzienda, Cognome, Nome, t_Docenti.CodFiscale, t_Aziende.PIVA, DescrParFiscale, TipoAliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, QuotaOraIncarico,IndTA HAVING IDincarico " + tblPagati.StringaFiltroIN("IDincarico") + "  AND QuotaOraIncarico>0 ORDER BY (Cognome + ' ' + Nome), IndTA, TipoAttivita ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					origineDati = "SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) HAVING IDincarico " + tblPagati.StringaFiltroIN("IDincarico") + " ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					origineDati = origineDati + "UNION SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) HAVING IDincarico " + tblPagati.StringaFiltroIN("IDincarico") + " ORDER BY IDdocente, IDincarico, MONTH(DataAttivita) ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					origineDati = "SELECT IDdocente, IDincarico, FK_Progetto, IDedizione, FK_SedeEdizione, FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, TotOreFatte, QuotaOraIncarico, " + origineDati + "sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, AltriEnaip, Autorizzazione, DataAutorizzazione, DataPagatoInizio, DataPagatoFine, DataPagamento, Assegni, MatricolaTracciatoAssegni, StrFattura, CodiceTributo FROM t_Pagamenti ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					origineDati = "SELECT IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, MAX(FK_AliquotaPrevSepa) AS FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriCompensi, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NULL GROUP BY IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, DescrAzienda, CodiceTributo ORDER BY StrDOC, IDdocente ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					origineDati = "SELECT FK_Azienda, FK_ParFiscaleAttuale, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriCompensi, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NOT NULL GROUP BY FK_Azienda, FK_ParFiscaleAttuale, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, CodiceTributo ORDER BY DescrAzienda ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					origineDati = "SELECT IDdocente, IDincarico, FK_Progetto, IDedizione, FK_SedeEdizione, FK_ParFiscaleAttuale, IDtattivita, FK_Azienda, Aula, Secondaria, DescrAzienda, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, TotOreFatte, QuotaOraIncarico, " + origineDati + "sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, AltriEnaip, Autorizzazione, DataAutorizzazione, DataPagatoInizio, DataPagatoFine, DataPagamento, Assegni, MatricolaTracciatoAssegni, StrFattura, CodiceTributo FROM t_Pagamenti ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:						string text2 = (clsTblDatiDR2.OrigineDati = (opPagaIndividuale.Checked ? "SELECT FK_PagamentoIndividuale, IDdocente, FK_Azienda, FK_ParFiscaleAttuale, FK_AliquotaPrevSepa, IDincarico, (FK_SedeEdizione) AS IDsede, IDedizione, (FK_Progetto) AS IDprogetto, DescrParFiscale, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagatoInizio, DataPagatoFine, DataPagamento, Autorizzazione, DataAutorizzazione, FK_TipoAttivita, MatricolaTracciatoAssegni, GenerareAssegno FROM t_ProgettiPagamentiCompensiOneri " : ((!opControlloOreNonPagate.Checked) ? "SELECT FK_ProgettoPagamento, IDdocente, FK_Azienda, FK_ParFiscaleAttuale, FK_AliquotaPrevSepa, IDincarico, (FK_SedeEdizione) AS IDsede, IDedizione, (FK_Progetto) AS IDprogetto, DescrParFiscale, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagatoInizio, DataPagatoFine, DataPagamento, Autorizzazione, DataAutorizzazione, FK_TipoAttivita, MatricolaTracciatoAssegni, GenerareAssegno FROM t_ProgettiPagamentiCompensiOneri " : "SELECT FK_ProgettoPagamento, IDdocente, FK_Azienda, FK_ParFiscaleAttuale, FK_AliquotaPrevSepa, IDincarico, (FK_SedeEdizione) AS IDsede, IDedizione, (FK_Progetto) AS IDprogetto, DescrParFiscale, DescrEdizione, CodiceEdizione, TipoAttivita, DescrArgomento, TotOreFatte, QuotaOraIncarico, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, DataPagatoInizio, DataPagatoFine, DataPagamento, Autorizzazione, DataAutorizzazione, FK_TipoAttivita, CorrezionePagamento, CausaleCorrezione, MatricolaTracciatoAssegni, GenerareAssegno FROM t_ProgettiPagamentiCompensiOneri ")));
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:						string origineDati = "SELECT IDprogpagamento, IDprogfatt, IDprogetto, IDsede, IDdocente, FK_Azienda, DescrProgetto, CodiceProgetto, SiglaSede, StrDOC, DataFattura, DataRichiestaInizio, DataRichiestaFine, Anticipo, (1) AS Pagare, (1) AS Selezione FROM t_Pagamenti ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcompensi, IDdocente, FK_Azienda, FK_SedeEdizione, FK_Progetto, DataPagatoInizio, DataPagatoFine FROM t_ProgettiPagamentiCompensiOneri WHERE IDdocente=", tblPag.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "), "AND FK_SedeEdizione="), tblPag.get_Campo((object)"IDsede", vFlagUpdateDB: false)), " "), "AND FK_Progetto="), tblPag.get_Campo((object)"IDprogetto", vFlagUpdateDB: false)), " "), "AND DataPagatoInizio="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataPagatoFine="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND FK_PagamentoIndividuale IS NULL AND Reso=0 "));
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:						string text = "(SELECT FK_Azienda FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE FK_IncaricoEdizione=t_IncarichiEdizioni.IDincarico AND ApprovaIncarico=1 GROUP BY FK_Azienda) AS FK_Azienda, ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:						string text2 = "(SELECT DescrAzienda FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE FK_IncaricoEdizione=t_IncarichiEdizioni.IDincarico AND ApprovaIncarico=1 GROUP BY DescrAzienda) AS DescrAzienda, ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:						string origineDati = "SELECT t_PagamentiIndividuali.IDpagaindiv, IDincarico, IDdocente, " + text + "IDedizione, " + text3 + "FK_Fattura, (Cognome + ' ' + Nome) AS StrDOC, " + text2 + "(NULL) AS DescrParFiscale, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, DescrArgomento, DataRichiestaInizio, DataRichiestaFine, t_PagamentiIndividuali.FK_AltraAssINPS, sngAliquotaPrevSepa, t_PagamentiIndividuali.AltriRedditiOccasionale, (0) AS TotOreFatte, (0) AS sngTotaleImponibile, (CASE WHEN FK_Fattura IS NOT NULL THEN 1 ELSE 0 END) AS Fattura, Autorizzazione, Sospeso, DataStampaAutorizzazione, (CASE WHEN FK_Fattura IS NOT NULL THEN (SELECT NumeroFattura FROM t_DocentiFatture WHERE IDfattura=FK_Fattura) ELSE NULL END) AS NumeroFattura, (CASE WHEN FK_Fattura IS NOT NULL THEN (SELECT DataFattura FROM t_DocentiFatture WHERE IDfattura=FK_Fattura) ELSE NULL END) AS DataFattura  FROM t_PagamentiIndividuali LEFT OUTER JOIN t_PagamentiIndividualiIncarichi LEFT OUTER JOIN t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente ON t_PagamentiIndividualiIncarichi.FK_Incarico = t_IncarichiEdizioni.IDincarico ON t_PagamentiIndividuali.IDpagaindiv = t_PagamentiIndividualiIncarichi.FK_Pagamento LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE DataPagamento IS NULL AND Autorizzazione=1 AND Sospeso=0 ORDER BY (Cognome + ' ' + Nome), IndTA ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:						string origineDati = ((!Conversions.ToBoolean(Operators.AndObject(Operators.CompareObjectEqual(Variabili.TblRiferimenti.get_CampoTipoAttivitaEdizione((object)"Aula"), true, TextCompare: false), Operators.CompareObjectEqual(Variabili.TblRiferimenti.get_CampoTipoAttivitaEdizione((object)"Primaria"), false, TextCompare: false)))) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotOreFatte FROM t_CalendarioAttivita WHERE FK_Incarico=", tblPagati.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND DataAttivita>='"), tblPagati.get_Campo((object)"DataPagatoInizio", vFlagUpdateDB: false)), "' AND DataAttivita<='"), tblPagati.get_Campo((object)"DataPagatoFine", vFlagUpdateDB: false)), "' ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotOreFatte FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE t_CalendarioCodocenza.FK_Incarico=", tblPagati.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "AND DataAttivita>='"), tblPagati.get_Campo((object)"DataPagatoInizio", vFlagUpdateDB: false)), "' AND DataAttivita<='"), tblPagati.get_Campo((object)"DataPagatoFine", vFlagUpdateDB: false)), "' ")));
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:						vSQL = "SELECT IDincarico FROM t_IncarichiEdizioni WHERE IDincarico " + tblPagati.StringaFiltroIN("IDincarico") + " AND PagamentoIndividuale=1 ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					vSQL = (clsTblDatiDR.OrigineDati = "SELECT IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, SUM(TotOreFatte) AS TotOrePag, SUM(sngCostoInc) AS CostoInc, SUM(sngRiva) AS Riva, SUM(sngCassaPrev) AS CassaPrev, SUM(sngIVA) AS IVA, SUM(sngINPS) AS INPS, SUM(sngINPS23) AS INPS23, SUM(sngTotale) AS Totale, SUM(sngINPS13) AS INPS13, SUM(sngRiteAcc) AS RiteAcc, SUM(sngNettoInc) AS NettoInc, MAX(AltriRedditi) AS AltriRedditi, MAX(AltriEnaip) AS AltriEnaip, CodiceTributo FROM t_Pagamenti WHERE FK_Azienda IS NULL GROUP BY IDdocente, FK_ParFiscaleAttuale, StrDOC, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, CodiceTributo ORDER BY StrDOC ");
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:				string origineDati = "SELECT t_ProgettiPagamenti.IDprogpagamento, IDprogfatt, IDprogetto, IDsede, (t_ProgettiPagamentiFatture.FK_Docente) AS IDdocente, FK_Azienda, DescrProgetto, CodiceProgetto, SiglaSede, (CASE WHEN FK_Azienda IS NOT NULL THEN (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) ELSE (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE IDdocente=t_ProgettiPagamentiFatture.FK_Docente) END) AS StrDOC, DataFattura, DataRichiestaInizio, DataRichiestaFine, Anticipo, (1) AS Pagare, (1) AS Selezione FROM t_ProgettiPagamenti INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_ProgettiPagamentiFatture ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiFatture.FK_ProgPagamento LEFT OUTER JOIN t_DocentiFatture ON t_ProgettiPagamentiFatture.FK_Fattura = t_DocentiFatture.IDfattura WHERE (CASE WHEN FK_Azienda IS NOT NULL THEN (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) ELSE (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE IDdocente=t_ProgettiPagamentiFatture.FK_Docente) END) LIKE '%" + FunzStringa.StringaSQL(txtCercaSospeso.Text) + "%' ORDER BY SiglaSede, DescrProgetto, (CASE WHEN FK_Azienda IS NOT NULL THEN (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) ELSE (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE IDdocente=t_ProgettiPagamentiFatture.FK_Docente) END) ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:				vSQL = "SELECT t_ProgettiPagamentiCompensiOneri.DataPagamento FROM t_ProgettiPagamentiCompensiOneri WHERE DataPagamento>='" + text + "' AND FK_SedeEdizione " + Variabili.FiltroSedi + " GROUP BY DataPagamento ORDER BY DataPagamento DESC ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:				vSQL = "SELECT t_ProgettiPagamenti.IDprogpagamento, IDprogfatt, IDprogetto, IDsede, (t_ProgettiPagamentiFatture.FK_Docente) AS IDdocente, FK_Azienda, DescrProgetto, CodiceProgetto, SiglaSede, (CASE WHEN FK_Azienda IS NOT NULL THEN (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) ELSE (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE IDdocente=t_ProgettiPagamentiFatture.FK_Docente) END) AS StrDOC, DataFattura, DataRichiestaInizio, DataRichiestaFine, Anticipo, (1) AS Pagare, (1) AS Selezione FROM t_ProgettiPagamenti INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_ProgettiPagamentiFatture ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiFatture.FK_ProgPagamento LEFT OUTER JOIN t_DocentiFatture ON t_ProgettiPagamentiFatture.FK_Fattura = t_DocentiFatture.IDfattura WHERE IDsede " + Variabili.FiltroSedi + " AND Autorizzazione=1 AND Sospeso=1 AND DataRichiestaFine<='" + txtDataPag.Text + "' AND DataPagamento IS NOT NULL AND t_ProgettiPagamenti.Bloccato=0 ORDER BY SiglaSede, DescrProgetto, (CASE WHEN FK_Azienda IS NOT NULL THEN (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Azienda) ELSE (SELECT (Cognome + ' ' + Nome) FROM t_Docenti WHERE IDdocente=t_ProgettiPagamentiFatture.FK_Docente) END) ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					string origineDati = "SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, FK_ProgettoPagamento, FK_PagamentoIndividuale, IDdocente, FK_Azienda, IDincarico, IDedizione, FK_SedeEdizione, FK_Progetto, FK_TipoAttivita, FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Destinatario, CodiceEdizione, (SELECT MezzaOra FROM t_PianoServizi WHERE IDedizione=t_ProgettiPagamentiCompensiOneri.IDedizione) AS MezzaOra, (CASE WHEN TipoAttivita='DOCENZA' THEN DescrArgomento ELSE TipoAttivita END) AS TipoAttivita, DescrArgomento, QuotaOraIncarico, TotOreFatte, sngNettoInc, DataPagatoInizio, DataPagatoFine, DataPagamento, AltriRedditiOccasionale, (0) AS OrePagare, (0) AS Controllare FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:				string vSQL = "SELECT IDdocente, (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, (ComResidenza + ' (' + ProvResidenza + ')') AS Residenza FROM t_Docenti WHERE FK_Tipo>2 AND (Cognome + ' ' + Nome)='" + FunzStringa.StringaSQL(txtCercaNonPagato.Text) + "' ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:					vSQL = "SELECT IDazienda, DescrAzienda FROM t_Aziende WHERE DescrAzienda='" + FunzStringa.StringaSQL(txtCercaNonPagato.Text) + "' ";
PerseoNET/frmRegistrazionePagamentiSedeManutenzione.cs:				vSQL = "SELECT t_ProgettiPagamentiCompensiOneri.IDcompensi, FK_ProgettoPagamento, FK_PagamentoIndividuale, t_Docenti.IDdocente, FK_Azienda, IDincarico, IDedizione, FK_SedeEdizione, FK_Progetto, FK_TipoAttivita, t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale, (CASE WHEN FK_Azienda IS NULL THEN (Cognome + ' ' + Nome) ELSE DescrAzienda END) AS Destinatario, CodiceEdizione, (SELECT MezzaOra FROM t_PianoServizi WHERE IDedizione=t_ProgettiPagamentiCompensiOneri.IDedizione) AS MezzaOra, TipoAttivita, DescrArgomento, QuotaOraIncarico, TotOreFatte, sngNettoInc, DataPagatoInizio, DataPagatoFine, DataPagamento, AltriRedditiOccasionale, (0) AS OrePagare, (1) AS Controllare FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_Docenti ON t_ProgettiPagamentiCompensiOneri.IDdocente = t_Docenti.IDdocente INNER JOIN t_DecodificatoreParametroFiscale ON t_ProgettiPagamentiCompensiOneri.FK_ParFiscaleAttuale = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Aziende ON t_ProgettiPagamentiCompensiOneri.FK_Azienda = t_Aziende.IDazienda ";
PerseoNET/clsSentinella.cs:					string origineDati = "SELECT zt_RecordBloccati.IDutente, IDrecord, Tabella, zt_RecordBloccati.DataRec, (Cognome + ' ' + Nome) AS Utente FROM zt_RecordBloccati LEFT OUTER JOIN t_Personale ON zt_RecordBloccati.IDutente = t_Personale.IDpers WHERE Tabella='" + vTBL + "' AND IDrecord=" + Conversions.ToString(vIDrecord) + " ";
PerseoNET/clsSentinella.cs:					vSQL = "SELECT DataLogin FROM t_Log ORDER BY IDlog ";
PerseoNET/clsSentinella.cs:							vSQL = "SELECT IDpers, DataLogin, Disconnettere, OraRipristino, (GETDATE()) AS OraServer FROM t_Personale WHERE IDpers=" + Conversions.ToString(VariabiliClassi.IDaccesso) + " ";
PerseoNET/clsSentinella.cs:							vSQL = "SELECT IDpers, DataLogin, Disconnettere, OraRipristino, (NOW()) AS OraServer FROM t_Personale WHERE IDpers=" + Conversions.ToString(VariabiliClassi.IDaccesso) + " ";
PerseoNET/clsSentinella.cs:					vSQL = "SELECT IDstoreproc, ComandoSQL, IDaccesso_1, IDaccesso_2, IDaccesso_3, IDaccesso_4, Attiva FROM zt_StoreProc WHERE Attiva=1 ";
PerseoNET/clsSentinella.cs:					vSQL = "SELECT IDstoreproc, ComandoSQL, IDaccesso_1, IDaccesso_2, IDaccesso_3, IDaccesso_4, Attiva FROM zt_StoreProc WHERE (Attiva=1 AND IDaccesso_1=" + Conversions.ToString(VariabiliClassi.IDaccesso) + ") OR (Attiva=1 AND IDaccesso_2=" + Conversions.ToString(VariabiliClassi.IDaccesso) + ") OR (Attiva=1 AND IDaccesso_3=" + Conversions.ToString(VariabiliClassi.IDaccesso) + ") OR (Attiva=1 AND IDaccesso_4=" + Conversions.ToString(VariabiliClassi.IDaccesso) + ") OR (Attiva=1 AND IDaccesso_5=" + Conversions.ToString(VariabiliClassi.IDaccesso) + ") OR (Attiva=1 AND IDaccesso_1=-1 ) ";
PerseoNET/clsSentinella.cs:				string origineDati = ((!mvFlagOleDB) ? "SELECT IDvers, OrarioBloccoNotturno, (GETDATE()) AS OraServer FROM zt_Versione" : "SELECT IDvers, OrarioBloccoNotturno, (Now()) AS OraServer FROM zt_Versione");
PerseoNET/clsSentinella.cs:					string origineDati = "SELECT IDutente, IDrecord, Tabella, NomeCampoPK, DataRec, (SELECT (Cognome + ' ' + Nome) FROM t_Personale WHERE IDpers=IDutente) AS Utente FROM zt_RecordBloccati WHERE IDrecord=" + Conversions.ToString(mvIDrecord) + " AND Tabella='" + mvNomeTabella + "' ORDER BY IDutente, DataRec ";
PerseoNET/clsSentinella.cs:						origineDati = "SELECT " + mvNomeCampoPK + ", Bloccato FROM " + mvNomeTabella + " WHERE " + mvNomeCampoPK + "=" + Conversions.ToString(mvIDrecord);
PerseoNET/clsSentinella.cs:						origineDati = "SELECT " + mvNomeCampoPK + ", Bloccato FROM " + mvNomeTabella + " WHERE " + mvNomeCampoPK + "=" + Conversions.ToString(mvIDrecord);
PerseoNET/clsSentinella.cs:				string origineDati = "SELECT zt_Intrusi.IDintruso, FK_Persona, ButtaFuori, ButtaFuoriManuale, DataModifica FROM zt_Intrusi WHERE FK_Persona=" + Conversions.ToString(VariabiliClassi.IDaccesso) + " AND ButtaFuori=1 ORDER BY DataRec ";
PerseoNET/clsSentinella.cs:				string vSQL = ((!mvFlagOleDB) ? "SELECT IDvers, (GETDATE()) AS OraServer FROM zt_Versione" : "SELECT IDvers, (Now()) AS OraServer FROM zt_Versione");
PerseoNET/clsSentinella.cs:					string origineDati = ((!mvFlagOleDB) ? "SELECT IDvers, BloccareAccessoNotturno, OrarioBloccoNotturno, (GETDATE()) AS OraServer FROM zt_Versione" : "SELECT IDvers, BloccareAccessoNotturno, OrarioBloccoNotturno, (Now()) AS OraServer FROM zt_Versione");
PerseoNET/clsSentinella.cs:						string origineDati = "SELECT IDutente, IDrecord, ('" + VariabiliClassi.UtenteLog + "') AS NomeUtente, Tabella, NomeCampoPK, NoteBlocco, zt_RecordBloccati.DataRec FROM zt_RecordBloccati WHERE IDutente=" + Conversions.ToString(VariabiliClassi.IDaccesso) + " ORDER BY zt_RecordBloccati.DataRec DESC ";
PerseoNET/clsSentinella.cs:							origineDati = "SELECT IDutente, IDrecord, Tabella, NomeCampoPK, NoteBlocco, zt_RecordBloccati.DataRec FROM zt_RecordBloccati WHERE zt_RecordBloccati.DataRec<" + FunzStringa.StrDataSQL(stringa) + " ORDER BY zt_RecordBloccati.DataRec DESC ";
PerseoNET/clsSentinella.cs:							origineDati = "SELECT IDutente, IDrecord, Tabella, NomeCampoPK, NoteBlocco, zt_RecordBloccati.DataRec FROM zt_RecordBloccati WHERE zt_RecordBloccati.DataRec<" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " ORDER BY zt_RecordBloccati.DataRec DESC ";
PerseoNET/clsSentinella.cs:				string origineDati = "SELECT IDvers, Login, OraRipristino FROM zt_Versione ";
PerseoNET/clsSentinella.cs:				string vSQL = ((!mvFlagOleDB) ? ((!Funzioni.UtenteGN()) ? ("SELECT IDpers, DataLogin, (GETDATE()) AS OraServer FROM t_Personale WHERE IDpers=" + Conversions.ToString(VariabiliClassi.IDaccesso) + " ") : ("SELECT IDvers, ('" + Strings.Format(VariabiliClassi.DataOraLogin, "dd/MM/yyyy HH:mm:ss") + "') AS DataLogin, (GETDATE()) AS OraServer FROM zt_Versione ")) : ((!Funzioni.UtenteGN()) ? ("SELECT IDpers, DataLogin, (NOW()) AS OraServer FROM t_Personale WHERE IDpers=" + Conversions.ToString(VariabiliClassi.IDaccesso) + " ") : ("SELECT IDvers, ('" + Strings.Format(VariabiliClassi.DataOraLogin, "dd/MM/yyyy HH:mm:ss") + "') AS DataLogin, (NOW()) AS OraServer FROM zt_Versione ")));
PerseoNET/frmRichiestaPagamentiSede.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Sedi.IDsede, SiglaSede FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " AND IDsede "), Variabili.FiltroSedi), " "), "GROUP BY IDsede, SiglaSede ORDER BY SiglaSede "));
PerseoNET/frmRichiestaPagamentiSede.cs:				origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiPagamenti.IDprogpagamento, FK_Progetto, FK_Sede, SiglaSede, DataRichiestaInizio, DataRichiestaFine, DataPagamento, DescrProgetto, IDmwp, CodiceProgetto, Anticipo FROM t_ProgettiPagamenti INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " AND IDsede "), Variabili.FiltroSedi), " AND DataPagamento IS NULL "), "ORDER BY SiglaSede, DataRichiestaFine "));
PerseoNET/frmRichiestaPagamentiSede.cs:				origineDati = "SELECT t_PianoServizi.IDedizione, CodiceEdizione, DataAvvio, DataFine, DataBloccoSCO, ObbligoIscritti, MezzaOra, PagaConsuntivoMese, (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE DataIscr IS NOT NULL AND FK_Edizione=IDedizione) AS Niscr, Gruppo, t_PianoServizi.Bloccato FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione ORDER BY CodiceEdizione ";
PerseoNET/frmRichiestaPagamentiSede.cs:				origineDati = "SELECT IDdocente, IDprogfatt, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS StrDocAz, (NULL) AS CodFiscale, (NULL) AS FK_ParFiscaleAttuale, (NULL) AS DescrParFiscale, (0) AS TotOreFatte, (0) AS Autorizzato, (0) AS Sospeso, (NULL) AS Anomalia, (NULL) AS FK_AliquotaPrevSepa, (NULL) AS FK_Azienda, (0) AS sngTotaleImponibile, (0) AS sngNettoInc FROM t_Docenti ";
PerseoNET/frmRichiestaPagamentiSede.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiPagamenti.IDprogpagamento, FK_Progetto, FK_Sede, SiglaSede, DataRichiestaInizio, DataRichiestaFine, DataPagamento, DescrProgetto, IDmwp, CodiceProgetto, Anticipo FROM t_ProgettiPagamenti INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " AND IDsede "), Variabili.FiltroSedi), " "), "AND DataPagamento IS NOT NULL "), "ORDER BY SiglaSede, DataRichiestaFine "));
PerseoNET/frmRichiestaPagamentiSede.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Progetto, FK_Sede, MAX(DataRichiestaFine) AS Ultima FROM t_ProgettiPagamenti WHERE Anticipo=0 GROUP BY FK_Progetto, FK_Sede HAVING FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " "), "AND FK_Sede="), ComboSedi.PKSelezionatoCombo), " "));
PerseoNET/frmRichiestaPagamentiSede.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Progetti.IDprogetto, FK_SedeEdizione, MIN(DataAvvio) AS MinAvvioEdizione, MIN(DataInizioFA) AS MinFunzAgg FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione GROUP BY t_Progetti.IDprogetto, FK_SedeEdizione HAVING IDprogetto=", Variabili.Progetto.get_Campo((object)0)), " "), "AND FK_SedeEdizione="), ComboSedi.PKSelezionatoCombo), " "));
PerseoNET/frmRichiestaPagamentiSede.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_Progetto, FK_Sede, MAX(DataRichiestaFine) AS Ultima FROM t_ProgettiPagamenti WHERE Anticipo=1 GROUP BY FK_Progetto, FK_Sede HAVING FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " "), "AND FK_Sede="), ComboSedi.PKSelezionatoCombo), " "));
PerseoNET/frmRichiestaPagamentiSede.cs:								origineDati = "SELECT t_Docenti.IDdocente, FK_Azienda, IDprogetto, FK_ParFiscaleAttuale, StrDOC, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, IDmwp, CodiceProgetto, SiglaSede, (NULL) DataPagatoInizio, (NULL) DataPagatoFine, (0) AS TotOreFatte, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (0) AS AltriAutorizzati, (NULL) AS StrFattura, IDprogpagamento, IDprogfatt, Anomalia, DataRichiestaInizio, DataRichiestaFine, StrDocAz, Autorizzato, Sospeso FROM t_ProgettiPagamentiCompensiOneri ";
PerseoNET/frmRichiestaPagamentiSede.cs:												origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogfatt FROM t_ProgettiPagamentiFatture WHERE FK_Docente=", rsCompensi.get_Campo((object)"IDdocente")), " "), "AND FK_ProgPagamento="), tblPag.get_Campo((object)"IDprogpagamento", vFlagUpdateDB: false)), " "));
PerseoNET/frmRichiestaPagamentiSede.cs:												origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogfatt FROM t_ProgettiPagamentiFatture WHERE FK_Docente=" + Conversions.ToString(num5) + " AND FK_ProgPagamento=", tblPag.get_Campo((object)"IDprogpagamento", vFlagUpdateDB: false)), " "));
PerseoNET/frmRichiestaPagamentiSede.cs:											origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogfatt FROM t_ProgettiPagamentiFatture WHERE FK_Docente=" + Conversions.ToString(num4) + " AND FK_ProgPagamento=", tblPag.get_Campo((object)"IDprogpagamento", vFlagUpdateDB: false)), " "), "AND DataRec>="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " "));
PerseoNET/frmRichiestaPagamentiSede.cs:										origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogfatt, FK_ProgPagamento, t_ProgettiPagamentiFatture.FK_Docente FROM t_ProgettiPagamentiFatture INNER JOIN t_DocentiFatture ON t_ProgettiPagamentiFatture.FK_Fattura = t_DocentiFatture.IDfattura WHERE FK_ProgPagamento=", tblPag.get_Campo((object)"IDprogpagamento", vFlagUpdateDB: false)), " "), "AND t_ProgettiPagamentiFatture.FK_Docente="), tblDoc.get_Campo((object)0, vFlagUpdateDB: false)), " "), "AND FK_ProgPagamento="), tblPag.get_Campo((object)"IDprogpagamento", vFlagUpdateDB: false)), " "));
PerseoNET/frmRichiestaPagamentiSede.cs:										origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, IDdocente, FK_Azienda, t_ProgettiPagamenti.FK_Progetto, FK_SedeEdizione, (SELECT (Cognome + ' ' + Nome) AS Nominativo FROM t_Docenti WHERE t_Docenti.IDdocente=t_ProgettiPagamentiCompensiOneri.IDdocente) AS StrDOC FROM t_ProgettiPagamenti INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento GROUP BY IDincarico, IDdocente, FK_Azienda, t_ProgettiPagamenti.FK_Progetto, FK_SedeEdizione, DataRichiestaFine HAVING t_ProgettiPagamenti.FK_Progetto=", tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " "), "AND FK_SedeEdizione="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "AND DataRichiestaFine='"), tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "' "), "ORDER BY IDdocente, FK_Azienda, IDincarico "));
PerseoNET/frmRichiestaPagamentiSede.cs:				string origineDati = "SELECT MAX(DataRichiestaFine) AS MaxDataRichiesta FROM t_ProgettiPagamenti WHERE FK_Sede=" + Conversions.ToString(intSede) + " AND DataPagamento IS NULL AND Anticipo=0 ";
PerseoNET/frmRichiestaPagamentiSede.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogfatt, IDprogpagamento, IDfattura, IDdocente, IDazienda, Cognome, Nome, DescrAzienda, CodiceProgetto, SiglaSede, DataRichiestaInizio, DataRichiestaFine, DataPagamento, Autorizzazione, Sospeso, DataFattura, NumeroFattura, (0) AS Eliminato FROM t_Aziende RIGHT OUTER JOIN t_DocentiFatture ON t_Aziende.IDazienda = t_DocentiFatture.FK_Azienda RIGHT OUTER JOIN t_ProgettiPagamenti INNER JOIN t_Sedi ON t_ProgettiPagamenti.FK_Sede = t_Sedi.IDsede INNER JOIN t_ProgettiPagamentiFatture ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiFatture.FK_ProgPagamento INNER JOIN t_Docenti ON t_ProgettiPagamentiFatture.FK_Docente = t_Docenti.IDdocente INNER JOIN t_Progetti ON t_ProgettiPagamenti.FK_Progetto = t_Progetti.IDprogetto ON t_DocentiFatture.IDfattura = t_ProgettiPagamentiFatture.FK_Fattura WHERE IDprogpagamento=", tblPag.get_Campo((object)"IDprogpagamento", vFlagUpdateDB: false)), " "), "ORDER BY IDprogpagamento, IDdocente, IDazienda, Sospeso DESC, Autorizzazione, IDprogfatt DESC "));
PerseoNET/frmRichiestaPagamentiSede.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento, IDcompensi, IDdocente, t_DocentiFatture.FK_Azienda, t_ProgettiPagamentiCompensiOneri.FK_Azienda, t_ProgettiPagamentiCompensiOneri.DataPagamento FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento And t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento And t_ProgettiPagamentiFatture.FK_Docente = t_ProgettiPagamentiCompensiOneri.IDdocente LEFT OUTER JOIN t_DocentiFatture ON t_ProgettiPagamentiFatture.FK_Fattura = t_DocentiFatture.IDfattura WHERE IDprogpagamento=", clsTblDatiDR.get_Campo((object)"IDprogpagamento")), " And IDdocente="), clsTblDatiDR.get_Campo((object)"IDdocente")), " "), "And t_ProgettiPagamenti.DataPagamento="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagamento")), "dd/MM/yyyy"), FlagSqlServer: true)), " "));
PerseoNET/frmRichiestaPagamentiSede.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiPagamentiFatture.IDprogfatt, t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, Autorizzazione, Sospeso, CostiAnticipo, CostiViaggio, CostiVitto, (t_ProgettiPagamentiFatture.DataModifica) AS DataAutorizzazione, DataFattura, NumeroFattura, FK_PFAutorizzazione, DescrAzienda FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento LEFT OUTER JOIN t_DocentiFatture ON t_ProgettiPagamentiFatture.FK_Fattura = t_DocentiFatture.IDfattura LEFT OUTER JOIN t_Aziende ON t_DocentiFatture.FK_Azienda = t_Aziende.IDazienda WHERE FK_Progetto=", tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " "), "And t_ProgettiPagamenti.FK_Sede="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "And DataRichiestaFine='"), tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "' "), "AND (CASE WHEN Autorizzazione=1 THEN 1 WHEN Sospeso=1 THEN 1 ELSE 0 END)=1 "), "ORDER BY t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda "));
PerseoNET/frmRichiestaPagamentiSede.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico FROM t_DocentiContrattiEsterni INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE TipoCococo=1 AND DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' AND FK_Progetto=", tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " AND FK_SedeEdizione="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "GROUP BY IDincarico "));
PerseoNET/frmRichiestaPagamentiSede.cs:						origineDati = (clsTblDatiDR.OrigineDatiUnione = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico FROM t_DocentiContrattiEsterni INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioniContratti.FK_IncaricoEdizione = t_IncarichiEdizioni.IDincarico INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioAttivita.IDcalatt= t_CalendarioCodocenza.FK_Calendario INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE TipoCococo=1 AND DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' AND FK_Progetto=", tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " AND FK_SedeEdizione="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "GROUP BY IDincarico ")));
PerseoNET/frmRichiestaPagamentiSede.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE FK_Tipo>2 AND FK_Progetto=", tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " AND FK_SedeEdizione="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "AND DataAttivita>='"), text), "' AND DataAttivita<='"), text2), "' AND GestionePersonale=1 "), "GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) "), "UNION "), "SELECT t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita) AS Mese, YEAR(DataAttivita) AS Anno, "), "(SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotOreFatte "), "FROM t_Azioni INNER JOIN "), "t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN "), "t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN "), "t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN "), "t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN "), "t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente "), "WHERE FK_Tipo>2 AND FK_Progetto="), tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " AND FK_SedeEdizione="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "AND DataAttivita>='"), text), "' AND DataAttivita<='"), text2), "' AND GestionePersonale=1 "), "GROUP BY t_IncarichiEdizioni.IDincarico, IDdocente, IDedizione, MONTH(DataAttivita), YEAR(DataAttivita) "), "ORDER BY IDdocente, IDincarico, MONTH(DataAttivita) "));
PerseoNET/frmRichiestaPagamentiSede.cs:					string text5 = "(SELECT FK_CodicePF FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE (FK_IncaricoEdizione=IDincarico AND DataInizioIncarico<='" + text2 + "' AND DataFineIncarico>='" + text + "' AND DataProlungamento IS NULL) OR (FK_IncaricoEdizione=IDincarico AND DataInizioIncarico<='" + text2 + "' AND DataProlungamento>='" + text + "' AND DataProlungamento IS NOT NULL) GROUP BY FK_CodicePF) AS FK_ParFiscaleAttuale, ";
PerseoNET/frmRichiestaPagamentiSede.cs:					string text6 = ((chbPagato.CheckState != 0) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("(SELECT MAX(sngAliquotaPrevSepa) FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE DataPagamento='", tblPag.get_Campo((object)"DataPagamento", vFlagUpdateDB: false)), "' AND FK_Fattura IS NULL "), "AND t_ProgettiPagamentiFatture.FK_Docente=IDdocente) AS FK_AliquotaPrevSepa, ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("(SELECT MAX(sngAliquotaPrevSepa) FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE FK_Progetto=", tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " AND FK_Sede="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "AND DataRichiestaInizio='"), tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' AND t_ProgettiPagamentiFatture.FK_Docente=IDdocente AND FK_Fattura IS NULL) AS FK_AliquotaPrevSepa, ")));
PerseoNET/frmRichiestaPagamentiSede.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, " + text5 + "IDtattivita, " + text7 + "Aula, Secondaria, (NULL) AS DescrAzienda, (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, (NULL) AS DescrParFiscale, " + text6 + "DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, (0) AS TotOreFatte, " + vStrMesi + "(SELECT QuotaOraIncarico FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico GROUP BY QuotaOraIncarico) AS QuotaOraIncarico, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS Autorizzazione, (NULL) AS DataAutorizzazione, (NULL) DataPagatoInizio, (NULL) DataPagatoFine, (NULL) AS DataPagamento, (NULL) AS StrFattura FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDprogetto=", tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " AND FK_SedeEdizione="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "AND GestionePersonale=1 AND FK_Tipo>2 AND PagamentoIndividuale=0 AND IncaricoGenericoGratuito=0 "), right), "ORDER BY (Cognome + ' ' + Nome), IDdocente, IndTA, TipoAttivita, IDincarico "));
PerseoNET/frmRichiestaPagamentiSede.cs:					origineDati = "SELECT (FK_IncaricoEdizione) AS IDincarico, IDazienda, DescrAzienda FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE (DataFineIncarico>='" + text + "' AND DataProlungamento IS NULL) OR (DataProlungamento IS NOT NULL and DataProlungamento>='" + text + "') GROUP BY FK_IncaricoEdizione, IDazienda, DescrAzienda ORDER BY FK_IncaricoEdizione ";
PerseoNET/frmRichiestaPagamentiSede.cs:						origineDati = "SELECT IDincarico FROM t_IncarichiEdizioni WHERE IDincarico " + rsPaga.StringaFiltroIN("IDincarico") + " AND IncaricoBloccato=1 ";
PerseoNET/frmRichiestaPagamentiSede.cs:					origineDati = "SELECT IDincarico, TotOreFatte, DataPagatoInizio, DataPagatoFine, Anticipo FROM t_ProgettiPagamentiCompensiOneri INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiCompensiOneri.FK_ProgettoPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE Anticipo=1 ORDER BY IDincarico, DataRichiestaFine ";
PerseoNET/frmRichiestaPagamentiSede.cs:					origineDati = "SELECT t_Docenti.IDdocente, FK_Azienda, IDprogetto, FK_ParFiscaleAttuale, StrDOC, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, IDmwp, CodiceProgetto, SiglaSede, DataPagatoInizio, DataPagatoFine, TotOreFatte, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, AltriEnaip, AltriAutorizzati, StrFattura FROM t_ProgettiPagamentiCompensiOneri ";
PerseoNET/frmRichiestaPagamentiSede.cs:					origineDati = "SELECT t_Docenti.IDdocente, FK_Azienda, IDprogetto, FK_ParFiscaleAttuale, StrDOC, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, IDmwp, CodiceProgetto, SiglaSede, DataPagatoInizio, DataPagatoFine, TotOreFatte, sngCostoInc, sngRiva, sngCassaPrev, sngCostiAnticipo, sngCostiViaggio, sngCostiVitto, sngIVA, sngINPS, sngINPS23, sngTotale, sngINPS13, sngRiteAcc, sngNettoInc, AltriRedditi, AltriEnaip, AltriAutorizzati, StrFattura FROM t_ProgettiPagamentiCompensiOneri ";
PerseoNET/frmRichiestaPagamentiSede.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogfatt, FK_Docente, ImponibileOccasionale, Autorizzazione FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE FK_Docente=", rsCompensi.get_Campo((object)"IDdocente")), " AND FK_Fattura IS NULL AND Autorizzazione=1 "), "AND DataPagamento IS NULL AND IDprogpagamento<"), tblPag.get_Campo((object)"IDprogpagamento", vFlagUpdateDB: false)), " ORDER BY IDprogfatt "));
PerseoNET/frmRichiestaPagamentiSede.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Docenti.IDdocente, IDcontratto, IDincarico, (Cognome + ' ' + Nome) AS StrDOC, DescrAzienda, CodiceparFiscale, DescrParFiscale, QuotaOraIncarico, DataInizioIncarico, DataFineIncarico, DataProlungamento, (t_DocentiContrattiEsterni.FK_AliquotaPrevSepa) AS AliquotaPrevSeparata FROM t_DocentiContratti INNER JOIN t_Docenti ON t_DocentiContratti.FK_Docente = t_Docenti.IDdocente INNER JOIN t_PianoServizi INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc LEFT OUTER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE (FK_Progetto=", tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " AND FK_SedeEdizione="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " AND GestionePersonale=1 AND FK_Tipo>2 "), "AND PagamentoIndividuale=0 AND DataFineIncarico>='"), strd), "') "), "OR (FK_Progetto="), tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " AND FK_SedeEdizione="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " AND GestionePersonale=1 AND FK_Tipo>2 "), "AND PagamentoIndividuale=0 AND DataProlungamento>='"), strd), "') "), "ORDER BY IDdocente, IDincarico, IDcontratto "));
PerseoNET/frmRichiestaPagamentiSede.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiPagamentiFatture.IDprogfatt, t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda, Autorizzazione, Sospeso, CostiAnticipo, CostiViaggio, CostiVitto, (t_ProgettiPagamentiFatture.DataModifica) AS DataAutorizzazione, DataFattura, NumeroFattura, FK_PFAutorizzazione FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento LEFT OUTER JOIN t_DocentiFatture ON t_ProgettiPagamentiFatture.FK_Fattura = t_DocentiFatture.IDfattura WHERE FK_Progetto=", tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " "), "AND t_ProgettiPagamenti.FK_Sede="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "AND DataRichiestaFine='"), tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "' "), "AND (CASE WHEN Autorizzazione=1 THEN 1 WHEN Sospeso=1 THEN 1 ELSE 0 END)=1 "), "ORDER BY t_ProgettiPagamentiFatture.FK_Docente, FK_Azienda "));
PerseoNET/frmRichiestaPagamentiSede.cs:					string text3 = "(SELECT FK_CodicePF FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE (FK_IncaricoEdizione=IDincarico AND DataInizioIncarico<='" + text2 + "' AND DataFineIncarico>='" + text + "' AND DataProlungamento IS NULL) OR (FK_IncaricoEdizione=IDincarico AND DataInizioIncarico<='" + text2 + "' AND DataProlungamento>='" + text + "' AND DataProlungamento IS NOT NULL) GROUP BY FK_CodicePF) AS FK_ParFiscaleAttuale, ";
PerseoNET/frmRichiestaPagamentiSede.cs:					string text4 = ((chbPagato.CheckState != 0) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("(SELECT MAX(sngAliquotaPrevSepa) FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE DataPagamento='", tblPag.get_Campo((object)"DataPagamento", vFlagUpdateDB: false)), "' AND FK_Fattura IS NULL "), "AND FK_Docente=IDdocente) AS FK_AliquotaPrevSepa, ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("(SELECT MAX(sngAliquotaPrevSepa) FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE FK_Progetto=", tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " AND FK_Sede="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "AND DataRichiestaInizio='"), tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "' AND FK_Docente=IDdocente) AS FK_AliquotaPrevSepa, ")));
PerseoNET/frmRichiestaPagamentiSede.cs:					string text5 = "(SELECT FK_Azienda FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE (FK_IncaricoEdizione=IDincarico AND DataFineIncarico>='" + text + "') OR (FK_IncaricoEdizione=IDincarico AND DataProlungamento>='" + text + "') GROUP BY FK_Azienda) AS FK_Azienda, ";
PerseoNET/frmRichiestaPagamentiSede.cs:					string text6 = "(SELECT DescrAzienda FROM t_DocentiContrattiEsterni INNER JOIN t_DocentiContratti ON t_DocentiContrattiEsterni.FK_DocenteContratto = t_DocentiContratti.IDcontratto INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto INNER JOIN t_Aziende ON t_DocentiContrattiEsterni.FK_Azienda = t_Aziende.IDazienda WHERE (FK_IncaricoEdizione=IDincarico AND DataFineIncarico>='" + text + "') OR (FK_IncaricoEdizione=IDincarico AND DataProlungamento>='" + text + "') GROUP BY DescrAzienda) AS DescrAzienda, ";
PerseoNET/frmRichiestaPagamentiSede.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Docenti.IDdocente, IDincarico, IDprogetto, IDedizione, IDsede, " + text3 + "IDtattivita, " + text5 + "Aula, Secondaria, " + text6 + " (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, (NULL) AS DescrParFiscale, " + text4 + "DescrEdizione, CodiceEdizione, IDmwa, IDmwp, CodiceProgetto, SiglaSede, TipoAttivita, DescrArgomento, OreAssegnate, (SELECT SUM(OreSvolte) FROM t_IncarichiEdizioniOrePerMese WHERE FK_Incarico=IDincarico AND DataSvolteDAL>='" + text + "' AND DataSvolteAL<='" + text2 + "') AS TotOreFatte, (SELECT QuotaOraIncarico FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=IDincarico AND ApprovaIncarico=1 AND (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE DataProlungamento END)>='" + text + "' GROUP BY QuotaOraIncarico) AS QuotaOraIncarico, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS Autorizzazione, (NULL) AS DataAutorizzazione, (NULL) DataPagatoInizio, (NULL) DataPagatoFine, (NULL) AS DataPagamento, (NULL) AS StrFattura FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDprogetto=", tblPag.get_Campo((object)"FK_Progetto", vFlagUpdateDB: false)), " AND FK_SedeEdizione="), tblPag.get_Campo((object)"FK_Sede", vFlagUpdateDB: false)), " "), "AND FK_Tipo>2 AND PagamentoIndividuale=0 "), "ORDER BY (Cognome + ' ' + Nome), IndTA, TipoAttivita "));
PerseoNET/frmRichiestaPagamentiSede.cs:						vSQL = "SELECT IDincarico FROM t_IncarichiEdizioni WHERE IDincarico " + rsPaga.StringaFiltroIN("IDincarico") + " AND IncaricoBloccato=1 ";
PerseoNET/frmRichiestaPagamentiSede.cs:					vSQL = "SELECT t_Docenti.IDdocente, FK_Azienda, IDprogetto, FK_ParFiscaleAttuale, StrDOC, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, IDmwp, CodiceProgetto, SiglaSede, (NULL) DataPagatoInizio, (NULL) DataPagatoFine, (0) AS TotOreFatte, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (0) AS AltriAutorizzati, (NULL) AS StrFattura FROM t_ProgettiPagamentiCompensiOneri ";
PerseoNET/frmRichiestaPagamentiSede.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogfatt, FK_Docente, ImponibileOccasionale, Autorizzazione FROM t_ProgettiPagamentiFatture INNER JOIN t_ProgettiPagamenti ON t_ProgettiPagamentiFatture.FK_ProgPagamento = t_ProgettiPagamenti.IDprogpagamento WHERE FK_Docente=", rsCompensi.get_Campo((object)"IDdocente")), " AND FK_Fattura IS NULL AND Autorizzazione=1 "), "AND DataPagamento IS NULL AND IDprogpagamento<"), tblPag.get_Campo((object)"IDprogpagamento", vFlagUpdateDB: false)), " ORDER BY IDprogfatt "));
PerseoNET/frmRichiestaPagamentiSede.cs:						string text5 = (clsTblDatiDR.OrigineDati = "SELECT t_Docenti.IDdocente, FK_Azienda, IDprogetto, FK_ParFiscaleAttuale, StrDOC, DescrAzienda, CodFiscale, DescrParFiscale, FK_AliquotaPrevSepa, IDmwp, CodiceProgetto, SiglaSede, (NULL) DataPagatoInizio, (NULL) DataPagatoFine, (0) AS TotOreFatte, (0) AS sngCostoInc, (0) AS sngRiva, (0) AS sngCassaPrev, (0) AS sngCostiAnticipo, (0) AS sngCostiViaggio, (0) AS sngCostiVitto, (0) AS sngIVA, (0) AS sngINPS, (0) AS sngINPS23, (0) AS sngTotale, (0) AS sngINPS13, (0) AS sngRiteAcc, (0) AS sngNettoInc, (0) AS AltriRedditi, (0) AS AltriEnaip, (0) AS AltriAutorizzati, (NULL) AS StrFattura FROM t_ProgettiPagamentiCompensiOneri ");
PerseoNET/frmRichiestaPagamentiSede.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DescrLetteraIncarico FROM t_DocentiContratti INNER JOIN t_IncarichiEdizioniContratti ON t_DocentiContratti.IDcontratto = t_IncarichiEdizioniContratti.FK_Contratto WHERE FK_IncaricoEdizione=", rsPaga.get_Campo((object)"IDincarico")), " AND DescrLetteraIncarico IS NOT NULL "));
PerseoNET/frmRichiestaPagamentiSede.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogfatt FROM t_ProgettiPagamentiFatture WHERE FK_ProgPagamento=", tblPag.get_Campo((object)"IDprogpagamento", vFlagUpdateDB: false)), " AND Sospeso=0 "));
PerseoNET/frmRichiestaPagamentiSede.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT t_Azioni.FK_Progetto, MIN(DataAttivita) AS MinData, MAX(DataAttivita) AS MaxData FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE FK_Tipo>2 GROUP BY t_Azioni.FK_Progetto HAVING FK_Progetto=", Variabili.Progetto.get_Campo((object)0)));
PerseoNET/frmRichiestaPagamentiSede.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento, FK_Progetto, FK_Sede, DataRichiestaInizio, DataRichiestaFine, DataPagamento FROM t_ProgettiPagamenti WHERE FK_Sede=" + Conversions.ToString(ComboSedi.PKSelezionatoCombo) + " AND Anticipo=0 AND FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " "), "AND DataRichiestaFine>="), FunzStringa.StrDataSQL(Strings.Format(value2, "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataRichiestaInizio<="), FunzStringa.StrDataSQL(Conversions.ToString(txtDataRichiestaFine.Value), FlagSqlServer: true)));
PerseoNET/frmRichiestaPagamentiSede.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento, FK_Progetto, FK_Sede, DataRichiestaInizio, DataRichiestaFine, DataPagamento FROM t_ProgettiPagamenti WHERE FK_Sede=" + Conversions.ToString(ComboSedi.PKSelezionatoCombo) + " AND Anticipo=1 AND FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " "), "AND DataRichiestaFine>="), FunzStringa.StrDataSQL(Strings.Format(value2, "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataRichiestaInizio<="), FunzStringa.StrDataSQL(Conversions.ToString(txtDataRichiestaFine.Value), FlagSqlServer: true)));
PerseoNET/frmRichiestaPagamentiSede.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento, FK_Progetto, FK_Sede, DataRichiestaInizio, DataRichiestaFine, DataPagamento FROM t_ProgettiPagamenti WHERE FK_Sede=" + Conversions.ToString(ComboSedi.PKSelezionatoCombo) + " AND Anticipo=1 AND FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " "), "AND DataRichiestaFine>"), FunzStringa.StrDataSQL(Conversions.ToString(txtDataRichiestaFine.Value), FlagSqlServer: true)));
PerseoNET/frmRichiestaPagamentiSede.cs:						vSQL = "SELECT IDprogpagamento, IDprogfatt, DataRichiestaInizio, DataRichiestaFine, Sospeso, Anticipo FROM t_ProgettiPagamenti INNER JOIN t_ProgettiPagamentiFatture ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiFatture.FK_ProgPagamento WHERE Anticipo=1 AND Sospeso=1 AND DataRichiestaInizio<" + FunzStringa.StrDataSQL(Conversions.ToString(txtDataRichiestaFine.Value), FlagSqlServer: true) + " AND FK_Docente " + tblDoc.StringaFiltroIN("IDdocente");
PerseoNET/frmRichiestaPagamentiSede.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogfatt, Autorizzazione, FK_Fattura FROM t_ProgettiPagamentiFatture WHERE (FK_ProgPagamento=", tblPag.get_Campo((object)0, vFlagUpdateDB: false)), " AND FK_Fattura IS NOT NULL) "), "OR (FK_ProgPagamento="), tblPag.get_Campo((object)0, vFlagUpdateDB: false)), " AND Autorizzazione=1) "));
PerseoNET/frmRichiestaPagamentiSede.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDincarico, FK_Docente FROM t_IncarichiEdizioni WHERE IDincarico " + rsPaga.StringaFiltroIN("IDincarico") + " AND IncaricoBloccato=1 AND FK_Docente=", tblDoc.get_Campo((object)"IDdocente", vFlagUpdateDB: false)));
PerseoNET/frmRichiestaPagamentiSede.cs:							string text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcompensi, DataPagatoInizio, DataPagatoFine FROM t_ProgettiPagamentiCompensiOneri WHERE FK_ProgettoPagamento=", tblPag.get_Campo((object)"IDprogpagamento", vFlagUpdateDB: false)), " "), "AND IDdocente="), tblDoc.get_Campo((object)"IDdocente", vFlagUpdateDB: false)), " "), "AND DataPagatoInizio="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblPag.get_Campo((object)"DataRichiestaInizio", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true)), " "), "AND DataPagatoFine="), FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblPag.get_Campo((object)"DataRichiestaFine", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true)), " AND Reso=0 "));
PerseoNET/frmRichiestaPagamentiSede.cs:									string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcompensi FROM t_ProgettiPagamentiCompensiOneri WHERE IDincarico=", rsPaga.get_Campo((object)"IDincarico")), " "), "AND DataPagatoInizio="), FunzStringa.StrDataSQL(stringa, FlagSqlServer: true)), " "), "AND DataPagatoFine="), FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true)), " "));
PerseoNET/frmRichiestaPagamentiSede.cs:				string origineDati = "SELECT (IDincarico) AS N_Incarico, (Cognome + ' ' + Nome) AS Collaboratore, SiglaSede, CodiceEdizione, TipoAttivita, DescrArgomento, OreAssegnate, DataPagatoInizio, DataPagatoFine, TotaleOrePagate FROM v_IncarichiPagamentoIndividuale WHERE IDsede " + Variabili.FiltroSedi + " AND IDprogetto=" + Conversions.ToString(Variabili.Progetto.PKProgetto) + " ORDER BY SiglaSede, Cognome, Nome, CodiceEdizione ";
PerseoNET/frmPannelloOrdini.cs:				string str = "SELECT t_RichiesteOrdini.IDordine, IDtordine, SiglaSede, NumeroRichiesta, DataRichiesta, DescrRichiedente, DescrOrdine, TipoOrdine, IndSpesa, TipoSpesa, RichiestaPronta, DataAutorizzazioneSCO, AutorizzatoSCO, RespintoSCO, NoteRespintoSCO, DataAutorizzazione, Autorizzato, Respinto, NoteRespinto, (CASE WHEN Respinto=1 THEN 'non approvato' WHEN RespintoSCO=1 THEN 'non autorizzato' WHEN Provvisorio=1 THEN 'inserire (giÃ  fatturato)' WHEN (AutorizzatoSCO=1 AND Autorizzato=1) THEN 'approvato' WHEN (AutorizzatoSCO=1 AND Autorizzato=0) THEN 'autorizzato' WHEN (RichiestaPronta=1 AND AutorizzatoSCO=0 AND Autorizzato=0) THEN 'richiesta' WHEN (RichiestaPronta=0 AND AutorizzatoSCO=0 AND Autorizzato=0 AND SospesoRevisionare=0) THEN 'preparazione' WHEN (RichiestaPronta=0 AND AutorizzatoSCO=0 AND Autorizzato=0 AND SospesoRevisionare=1) THEN 'sospeso' ELSE '???' END) As Stato, (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Fornitore) AS DescrAzienda, (SELECT COUNT(IDrigaord) FROM t_RichiesteOrdiniRighe WHERE FK_RichiestaOrdine=IDordine) AS NumVoci, (SELECT SUM(CostoUnitario*QuantRiga*(1.0+IVAunitario/100.0)) FROM t_RichiesteOrdiniRighe WHERE FK_RichiestaOrdine=IDordine) AS TotaleImponibile, (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti WHERE FK_RichiestaOrdine=IDordine) AS NumProgetti, (CASE WHEN DataOrdineEvaso IS NOT NULL THEN 1 ELSE 0 END) AS Evaso FROM t_RichiesteOrdini INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_TipoOrdine ON t_TipoSpesa.FK_TipoOrdine = t_TipoOrdine.IDtordine ";
PerseoNET/frmPannelloOrdini.cs:				str = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE FK_TipoSede IN(1,3) AND IDsede " + Variabili.FiltroSedi + " ORDER BY IIf(FK_TipoSede=3 AND Attiva=True,1,IIf(FK_TipoSede=1,2,3)), SiglaSede ";
PerseoNET/frmPannelloOrdini.cs:				str = "SELECT IDtipospesa, TipoSpesa FROM t_TipoOrdineSpesa WHERE SedeCentrale=False  ORDER BY IndTO, IDtordine, IndSpesa ";
PerseoNET/frmPannelloOrdini.cs:								text = "WHERE (SELECT COUNT(IDfattord) FROM t_RichiesteOrdiniFatture WHERE FK_Ordine=IDordine)>0 AND Autorizzato=0 ";
PerseoNET/frmPannelloOrdini.cs:							text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + " AND (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Fornitore) LIKE '%" + FunzStringa.StringaSQL(txtAzienda.Text) + "%' ") : ("WHERE (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Fornitore) LIKE '%" + FunzStringa.StringaSQL(txtAzienda.Text) + "%' "));
PerseoNET/frmPannelloOrdini.cs:							text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine AND CodiceProgetto LIKE '%" + FunzStringa.StringaSQL(txtProgetto.Text) + "%')>0 ") : ("WHERE (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine AND CodiceProgetto LIKE '%" + FunzStringa.StrDataSQL(txtProgetto.Text) + "%')>0 "));
PerseoNET/frmPannelloOrdini.cs:								text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine AND CodiceCIG LIKE '%" + FunzStringa.StringaSQL(txtCIG.Text) + "%')>0 ") : ("WHERE (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine AND CodiceCIG LIKE '%" + FunzStringa.StringaSQL(txtCIG.Text) + "%')>0 "));
PerseoNET/frmPannelloOrdini.cs:								text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine AND CodiceCUP LIKE '%" + FunzStringa.StringaSQL(txtCUP.Text) + "%')>0 ") : ("WHERE (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine AND CodiceCUP LIKE '%" + FunzStringa.StringaSQL(txtCUP.Text) + "%')>0 "));
PerseoNET/frmPannelloOrdini.cs:							text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine AND CodiceCUP IS NULL AND CodiceCIG IS NOT NULL)>0 ") : "WHERE (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine AND CodiceCUP IS NULL AND CodiceCIG IS NOT NULL)>0 ");
PerseoNET/frmPannelloOrdini.cs:							text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine AND CodiceCUP IS NOT NULL AND CodiceCIG IS NULL)>0 ") : "WHERE (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine AND CodiceCUP IS NOT NULL AND CodiceCIG IS NULL)>0 ");
PerseoNET/frmPannelloOrdini.cs:							text = ((Operators.CompareString(text, "", TextCompare: false) != 0) ? (text + "AND (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine AND (CodiceCUP IS NOT NULL OR CodiceCIG IS NOT NULL))>0 ") : "WHERE (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine AND (CodiceCUP IS NOT NULL OR CodiceCIG IS NOT NULL))>0 ");
PerseoNET/frmPannelloOrdini.cs:				string str = "SELECT (t_RichiesteOrdini.IDordine) AS PKord, (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti WHERE FK_RichiestaOrdine=IDordine) AS NProg, SiglaSede, (CASE WHEN MONTH(DataRichiesta)>=9 THEN (CAST(YEAR(DataRichiesta) AS VARCHAR) + '/' + CAST(YEAR(DataRichiesta) + 1 AS VARCHAR)) ELSE (CAST(YEAR(DataRichiesta) - 1 AS VARCHAR) + '/' + CAST(YEAR(DataRichiesta) AS VARCHAR)) END) AS AnnoAmm, (CASE WHEN NumeroOrdLab=0 THEN CAST(NumeroRichiesta AS VARCHAR) ELSE (CAST(NumeroRichiesta AS VARCHAR) + '/Lab.' + CAST(NumeroOrdLab AS VARCHAR)) END) AS NOrd, DataRichiesta, DescrRichiedente, DescrOrdine, DescrCausale, DescrConsegna, NoteScadenzaPagamenti, NoteSconto, Sconto, TipoOrdine, TipoSpesa, DataAutorizzazioneSCO, NoteRespintoSCO, DataAutorizzazione, NoteRespinto, TipoModoPagaOrdine, TipoTempiPagamento, (CASE WHEN (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti WHERE FK_RichiestaOrdine=IDordine)=1 THEN (SELECT CodiceCIG FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine) ELSE NULL END) AS ProgettoCIG, (CASE WHEN (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti WHERE FK_RichiestaOrdine=IDordine)=1 THEN (SELECT CodiceCUP FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine) ELSE NULL END) AS ProgettoCUP, (CASE WHEN Respinto=1 THEN 'non approvato' WHEN RespintoSCO=1 THEN 'non autorizzato' WHEN (AutorizzatoSCO=1 AND Autorizzato=1) THEN 'approvato' WHEN (AutorizzatoSCO=1 AND Autorizzato=0) THEN 'autorizzato' WHEN (RichiestaPronta=1 AND AutorizzatoSCO=0 AND Autorizzato=0) THEN 'richiesta' WHEN (RichiestaPronta=0 AND AutorizzatoSCO=0 AND Autorizzato=0 AND SospesoRevisionare=0) THEN 'preparazione' WHEN (RichiestaPronta=0 AND AutorizzatoSCO=0 AND Autorizzato=0 AND SospesoRevisionare=1) THEN 'sospeso' ELSE '???' END) AS Stato, (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Fornitore) AS DescrAzienda, (SELECT COUNT(IDrigaord) FROM t_RichiesteOrdiniRighe WHERE FK_RichiestaOrdine=IDordine) AS NumVoci, (SELECT SUM(CostoUnitario*QuantRiga) FROM t_RichiesteOrdiniRighe WHERE FK_RichiestaOrdine=IDordine) AS TotaleImponibile, (SELECT SUM(TotaleIMponibile) FROM t_RichiesteOrdiniFatture WHERE FK_ordine=IDordine) AS TotaleImponibileFatture, DataOrdineEvaso, (NULL) AS ProtocolloEvaso FROM t_RichiesteOrdini INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_TipoOrdine ON t_TipoSpesa.FK_TipoOrdine = t_TipoOrdine.IDtordine LEFT OUTER JOIN t_TipoModoPagamentoOrdine ON t_RichiesteOrdini.FK_ModoPagamento = t_TipoModoPagamentoOrdine.IDtmodopag LEFT OUTER JOIN t_TipoTempiPagamentoOrdine ON t_RichiesteOrdini.FK_TempoPagamento = t_TipoTempiPagamentoOrdine.IDttempipag ";
PerseoNET/frmPannelloOrdini.cs:					str = "SELECT IDordine, ProtocolloRegistrazione FROM t_RichiesteOrdiniFatture INNER JOIN t_RichiesteOrdini ON t_RichiesteOrdiniFatture.FK_Ordine = t_RichiesteOrdini.IDordine INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede " + GeneraFiltroGriglia() + " ORDER BY IDordine, DataRegistrazione DESC ";
PerseoNET/frmPannelloOrdini.cs:				string origineDati = "SELECT t_RichiesteOrdini.IDordine, SiglaSede, DataRichiesta, NumeroRichiesta, (CASE WHEN NumeroOrdLab>0 THEN NumeroOrdLab ELSE NULL END) AS NOrd, DescrRichiedente, DescrOrdine, TipoOrdine, IndSpesa, TipoSpesa, Autorizzato, Respinto, NoteRespinto, DataAutorizzazione, DataAutorizzazioneSCO, DataOrdineEvaso, (NULL) AS ProtocolloEvaso, (DescrAzienda + ' (' + ComSedeAz + ')') AS DescrAzienda, DescrRigaOrdine, t_TipoUnitaMisura.TipoUnitaMisura, QuantRiga, CostoUnitario, IVAunitario, (QuantRiga*CostoUnitario) AS TotaleImponibile, (QuantRiga*CostoUnitario*((100.0+IVAunitario)/100.0)) AS TotaleLordo, CodiceFornitore FROM t_RichiesteOrdini INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_TipoOrdine ON t_TipoSpesa.FK_TipoOrdine = t_TipoOrdine.IDtordine INNER JOIN t_Aziende ON t_RichiesteOrdini.FK_Fornitore = t_Aziende.IDazienda INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda LEFT OUTER JOIN t_RichiesteOrdiniRighe ON t_RichiesteOrdini.IDordine = t_RichiesteOrdiniRighe.FK_RichiestaOrdine LEFT OUTER JOIN t_TipoUnitaMisura ON t_RichiesteOrdiniRighe.FK_UnitaMisura = t_TipoUnitaMisura.IDtunitamis " + GeneraFiltroGriglia() + " AND t_SediAziende.FK_TipoSede=1 AND t_SediAziende.Attiva=1 " + tblOrd.OrigineDatiOrdinamentoAttuale + ", IndRiga, IDrigaord ";
PerseoNET/frmPannelloOrdini.cs:						origineDati = "SELECT IDordine, ProtocolloRegistrazione FROM t_RichiesteOrdiniFatture INNER JOIN t_RichiesteOrdini ON t_RichiesteOrdiniFatture.FK_Ordine = t_RichiesteOrdini.IDordine INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede " + GeneraFiltroGriglia() + " ORDER BY IDordine, DataRegistrazione DESC ";
PerseoNET/frmPannelloOrdini.cs:					origineDati = "SELECT (t_RichiesteOrdini.IDordine) AS PKord, (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti WHERE FK_RichiestaOrdine=IDordine) AS NProg, SiglaSede, (CASE WHEN MONTH(DataRichiesta)>=9 THEN (CAST(YEAR(DataRichiesta) AS VARCHAR) + '/' + CAST(YEAR(DataRichiesta) + 1 AS VARCHAR)) ELSE (CAST(YEAR(DataRichiesta) - 1 AS VARCHAR) + '/' + CAST(YEAR(DataRichiesta) AS VARCHAR)) END) AS AnnoAmm, (CASE WHEN NumeroOrdLab=0 THEN CAST(NumeroRichiesta AS VARCHAR) ELSE (CAST(NumeroRichiesta AS VARCHAR) + '/Lab.' + CAST(NumeroOrdLab AS VARCHAR)) END) AS NOrd, DataRichiesta, DescrRichiedente, DescrOrdine, DescrCausale, DescrConsegna, NoteScadenzaPagamenti, NoteSconto, Sconto, TipoOrdine, TipoSpesa, DataAutorizzazioneSCO, NoteRespintoSCO, DataAutorizzazione, NoteRespinto, TipoModoPagaOrdine, TipoTempiPagamento, (CASE WHEN (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti WHERE FK_RichiestaOrdine=IDordine)=1 THEN (SELECT CodiceCIG FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine) ELSE NULL END) AS ProgettoCIG, (CASE WHEN (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti WHERE FK_RichiestaOrdine=IDordine)=1 THEN (SELECT CodiceCUP FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine) ELSE NULL END) AS ProgettoCUP, (CASE WHEN Respinto=1 THEN 'non approvato' WHEN RespintoSCO=1 THEN 'non autorizzato' WHEN (AutorizzatoSCO=1 AND Autorizzato=1) THEN 'approvato' WHEN (AutorizzatoSCO=1 AND Autorizzato=0) THEN 'autorizzato' WHEN (RichiestaPronta=1 AND AutorizzatoSCO=0 AND Autorizzato=0 AND SospesoRevisionare=0) THEN 'richiesta' WHEN (RichiestaPronta=1 AND AutorizzatoSCO=0 AND Autorizzato=0 AND SospesoRevisionare=1) THEN 'sospeso' WHEN (RichiestaPronta=0 AND AutorizzatoSCO=0 AND Autorizzato=0) THEN 'creazione' ELSE '???' END) AS Stato, (SELECT DescrAzienda FROM t_Aziende WHERE IDazienda=FK_Fornitore) AS DescrAzienda, (SELECT COUNT(IDrigaord) FROM t_RichiesteOrdiniRighe WHERE FK_RichiestaOrdine=IDordine) AS NumVoci, (SELECT SUM(CostoUnitario*QuantRiga) FROM t_RichiesteOrdiniRighe WHERE FK_RichiestaOrdine=IDordine) AS TotaleImponibile, (SELECT SUM(TotaleImponibile) FROM t_RichiesteOrdiniFatture WHERE FK_ordine=IDordine) AS TotaleImponibileFatture, DataOrdineEvaso FROM t_RichiesteOrdini INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_TipoOrdine ON t_TipoSpesa.FK_TipoOrdine = t_TipoOrdine.IDtordine LEFT OUTER JOIN t_TipoModoPagamentoOrdine ON t_RichiesteOrdini.FK_ModoPagamento = t_TipoModoPagamentoOrdine.IDtmodopag LEFT OUTER JOIN t_TipoTempiPagamentoOrdine ON t_RichiesteOrdini.FK_TempoPagamento = t_TipoTempiPagamentoOrdine.IDttempipag ";
PerseoNET/frmPannelloOrdini.cs:					string str = "SELECT (t_RichiesteOrdini.IDordine) AS PKord, SiglaSede, (CASE WHEN MONTH(DataRichiesta)>=9 THEN (CAST(YEAR(DataRichiesta) AS VARCHAR) + '/' + CAST(YEAR(DataRichiesta) + 1 AS VARCHAR)) ELSE (CAST(YEAR(DataRichiesta) - 1 AS VARCHAR) + '/' + CAST(YEAR(DataRichiesta) AS VARCHAR)) END) AS AnnoAmm, (CASE WHEN NumeroOrdLab=0 THEN CAST(NumeroRichiesta AS VARCHAR) ELSE (CAST(NumeroRichiesta AS VARCHAR) + '/Lab.' + CAST(NumeroOrdLab AS VARCHAR)) END) AS NOrd, TipoOrdine, TipoSpesa, DataRichiesta, DescrRichiedente, DescrOrdine, NoteSconto, Sconto, DataAutorizzazione, (CASE WHEN (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti WHERE FK_RichiestaOrdine=IDordine)=1 THEN (SELECT CodiceCIG FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine) ELSE NULL END) AS ProgettoCIG, (CASE WHEN (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti WHERE FK_RichiestaOrdine=IDordine)=1 THEN (SELECT CodiceCUP FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine) ELSE NULL END) AS ProgettoCUP, DescrAzienda, (CASE WHEN PIVA IS NOT NULL THEN PIVA ELSE CodFiscale END) AS PIVA_CF, (SELECT SUM(CostoUnitario*QuantRiga) FROM t_RichiesteOrdiniRighe WHERE FK_RichiestaOrdine=IDordine) AS TotaleImponibile, DataOrdineEvaso, DataRegistrazione, ProtocolloRegistrazione, TotaleImponibile, NoteRegistrazione, (Registra) AS RegistratoDa FROM t_RichiesteOrdini INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_TipoOrdine ON t_TipoSpesa.FK_TipoOrdine = t_TipoOrdine.IDtordine INNER JOIN t_Aziende ON t_RichiesteOrdini.FK_Fornitore = t_Aziende.IDazienda LEFT OUTER JOIN t_RichiesteOrdiniFatture ON t_RichiesteOrdini.IDordine = t_RichiesteOrdiniFatture.FK_Ordine ";
PerseoNET/frmPannelloOrdini.cs:					string str = "SELECT (t_RichiesteOrdini.IDordine) AS PKord, SiglaSede, (CASE WHEN MONTH(DataRichiesta)>=9 THEN (CAST(YEAR(DataRichiesta) AS VARCHAR) + '/' + CAST(YEAR(DataRichiesta) + 1 AS VARCHAR)) ELSE (CAST(YEAR(DataRichiesta) - 1 AS VARCHAR) + '/' + CAST(YEAR(DataRichiesta) AS VARCHAR)) END) AS AnnoAmm, (CASE WHEN NumeroOrdLab=0 THEN CAST(NumeroRichiesta AS VARCHAR) ELSE (CAST(NumeroRichiesta AS VARCHAR) + '/Lab.' + CAST(NumeroOrdLab AS VARCHAR)) END) AS NOrd, TipoOrdine, TipoSpesa, DataRichiesta, DescrRichiedente, DescrOrdine, NoteSconto, Sconto, DataAutorizzazione, (CASE WHEN (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti WHERE FK_RichiestaOrdine=IDordine)=1 THEN (SELECT CodiceCIG FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine) ELSE NULL END) AS ProgettoCIG, (CASE WHEN (SELECT COUNT(IDordprog) FROM t_RichiesteOrdiniProgetti WHERE FK_RichiestaOrdine=IDordine)=1 THEN (SELECT CodiceCUP FROM t_RichiesteOrdiniProgetti INNER JOIN t_Progetti ON t_RichiesteOrdiniProgetti.FK_Progetto = t_Progetti.IDprogetto WHERE FK_RichiestaOrdine=IDordine) ELSE NULL END) AS ProgettoCUP, DescrAzienda, (CASE WHEN PIVA IS NOT NULL THEN PIVA ELSE CodFiscale END) AS PIVA_CF, (SELECT SUM(CostoUnitario*QuantRiga) FROM t_RichiesteOrdiniRighe WHERE FK_RichiestaOrdine=IDordine) AS TotaleImponibile, DataOrdineEvaso, (NULL) AS ProtocolloEvaso, (SELECT MAX(DataRegistrazione) FROM t_RichiesteOrdiniFatture WHERE FK_ordine=IDordine) AS DataUltimaFattura, (SELECT SUM(TotaleImponibile) FROM t_RichiesteOrdiniFatture WHERE FK_ordine=IDordine) AS TotaleImponibileFatture FROM t_RichiesteOrdini INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_TipoOrdine ON t_TipoSpesa.FK_TipoOrdine = t_TipoOrdine.IDtordine INNER JOIN t_Aziende ON t_RichiesteOrdini.FK_Fornitore = t_Aziende.IDazienda ";
PerseoNET/frmPannelloOrdini.cs:						str = "SELECT IDordine, ProtocolloRegistrazione FROM t_RichiesteOrdiniFatture INNER JOIN t_RichiesteOrdini ON t_RichiesteOrdiniFatture.FK_Ordine = t_RichiesteOrdini.IDordine INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede " + GeneraFiltroGriglia() + " ORDER BY IDordine, DataRegistrazione DESC ";
PerseoNET/frmPannelloOrdini.cs:					string origineDati = "SELECT IDordine, SiglaSede, DescrProgetto, CodiceProgetto, CodiceCIG, CodiceCUP, DataFineProg, DataAvvioProg, NumeroRichiesta, DescrOrdine, DescrCausale, DataRichiesta, DataAutorizzazione, DataOrdineEvaso, (NULL) AS ProtocolloEvaso, TipoSpesa, DataInizioContratto, DataFineContratto, CostoTotale, DescrAzienda, PIVA, CodFiscale, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz FROM t_Progetti INNER JOIN t_RichiesteOrdiniProgetti ON t_Progetti.IDprogetto = t_RichiesteOrdiniProgetti.FK_Progetto INNER JOIN v_TotaleCostoPerOrdine ON t_RichiesteOrdiniProgetti.FK_RichiestaOrdine = v_TotaleCostoPerOrdine.IDordine WHERE IDsede " + Variabili.FiltroSedi + " AND DataRichiesta>=" + FunzStringa.StrDataSQL("01/09/" + Strings.Left(cmbAnnoAmm.Text, 4), FlagSqlServer: true) + " AND DataRichiesta<=" + FunzStringa.StrDataSQL("31/08/" + Strings.Right(cmbAnnoAmm.Text, 4), FlagSqlServer: true) + " AND Autorizzato=1 ORDER BY SiglaSede, NumeroRichiesta ";
PerseoNET/frmPannelloOrdini.cs:						origineDati = "SELECT IDordine, ProtocolloRegistrazione FROM t_RichiesteOrdiniFatture INNER JOIN t_RichiesteOrdini ON t_RichiesteOrdiniFatture.FK_Ordine = t_RichiesteOrdini.IDordine INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede WHERE IDsede " + Variabili.FiltroSedi + " AND DataRichiesta>=" + FunzStringa.StrDataSQL("01/09/" + Strings.Left(cmbAnnoAmm.Text, 4), FlagSqlServer: true) + " AND DataRichiesta<=" + FunzStringa.StrDataSQL("31/08/" + Strings.Right(cmbAnnoAmm.Text, 4), FlagSqlServer: true) + " AND Autorizzato=1 AND ProtocolloRegistrazione<>'0' ORDER BY IDordine, DataRegistrazione DESC ";
PerseoNET/frmPannelloOrdini.cs:					string origineDati = "SELECT t_RichiesteOrdini.IDordine, SiglaSede, (CASE WHEN NumeroOrdLab=0 THEN CAST(NumeroRichiesta AS VARCHAR) ELSE (CAST(NumeroRichiesta AS VARCHAR) + '/Lab.' + CAST(NumeroOrdLab AS VARCHAR)) END) AS NOrd, DescrRichiedente, DescrOrdine, TipoSpesa, DataAutorizzazione, DescrAzienda, IndRiga, DescrRigaOrdine, CodiceFornitore, QuantRiga, SiglaUnitaMisura, CostoUnitario, IVAunitario, Omaggio, DescrRicevente, DataConsegna, QuantConsegnata, RinnovoContratto, ServizioFornito, DataOrdineEvaso, (NULL) AS ProtocolloEvaso FROM t_RichiesteOrdiniRighe INNER JOIN t_RichiesteOrdini ON t_RichiesteOrdiniRighe.FK_RichiestaOrdine = t_RichiesteOrdini.IDordine INNER JOIN t_Aziende ON t_RichiesteOrdini.FK_Fornitore = t_Aziende.IDazienda INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_TipoOrdine ON t_TipoSpesa.FK_TipoOrdine = t_TipoOrdine.IDtordine LEFT OUTER JOIN t_TipoUnitaMisura ON t_RichiesteOrdiniRighe.FK_UnitaMisura = t_TipoUnitaMisura.IDtunitamis LEFT OUTER JOIN t_RichiesteOrdiniConsegne ON t_RichiesteOrdiniRighe.IDrigaord = t_RichiesteOrdiniConsegne.FK_RigaOrdine " + tblOrd.OrigineDatiFiltroCorrente + " AND DataAutorizzazione IS NOT NULL AND Autorizzato=1 " + tblOrd.OrigineDatiOrdinamentoAttuale + ", IndRiga, DataConsegna ";
PerseoNET/frmPannelloOrdini.cs:						origineDati = "SELECT IDordine, ProtocolloRegistrazione FROM t_RichiesteOrdiniFatture INNER JOIN t_RichiesteOrdini ON t_RichiesteOrdiniFatture.FK_Ordine = t_RichiesteOrdini.IDordine INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede " + GeneraFiltroGriglia() + " ORDER BY IDordine, DataRegistrazione DESC ";
PerseoNET/frmPannelloOrdini.cs:						string origineDati = "SELECT t_RichiesteOrdini.IDordine, SiglaSede, (CASE WHEN NumeroOrdLab=0 THEN CAST(NumeroRichiesta AS VARCHAR) ELSE (CAST(NumeroRichiesta AS VARCHAR) + '/Lab.' + CAST(NumeroOrdLab AS VARCHAR)) END) AS NOrd, DescrRichiedente, DescrOrdine, TipoSpesa, DataAutorizzazione, DescrAzienda, IndRiga, DescrRigaOrdine, CodiceFornitore, QuantRiga, SiglaUnitaMisura, CostoUnitario, IVAunitario, Omaggio, MAX(DataConsegna) AS UltimaDataConsegna, SUM(QuantConsegnata) AS TotaleConsegnato, RinnovoContratto, ServizioFornito, DataOrdineEvaso, (NULL) AS ProtocolloEvaso FROM t_RichiesteOrdiniRighe INNER JOIN t_RichiesteOrdini ON t_RichiesteOrdiniRighe.FK_RichiestaOrdine = t_RichiesteOrdini.IDordine INNER JOIN t_Aziende ON t_RichiesteOrdini.FK_Fornitore = t_Aziende.IDazienda INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_TipoOrdine ON t_TipoSpesa.FK_TipoOrdine = t_TipoOrdine.IDtordine LEFT OUTER JOIN t_TipoUnitaMisura ON t_RichiesteOrdiniRighe.FK_UnitaMisura = t_TipoUnitaMisura.IDtunitamis LEFT OUTER JOIN t_RichiesteOrdiniConsegne ON t_RichiesteOrdiniRighe.IDrigaord = t_RichiesteOrdiniConsegne.FK_RigaOrdine GROUP BY t_RichiesteOrdini.IDordine, SiglaSede, DescrRichiedente, DescrOrdine, TipoSpesa, NumeroOrdLab, NumeroRichiesta, DescrRichiedente, DescrOrdine, TipoSpesa, RinnovoContratto, ServizioFornito, DescrAzienda, IndRiga, DescrRigaOrdine, CodiceFornitore, QuantRiga, SiglaUnitaMisura, CostoUnitario, IVAunitario, Omaggio, DataOrdineEvaso, DataAutorizzazione, DataRichiesta, Autorizzato, RichiestaPronta, AutorizzatoSCO, RespintoSCO, Respinto, IDsede, IDtordine, FK_Fornitore HAVING " + Strings.Right(tblOrd.OrigineDatiFiltroCorrente, Strings.Len(tblOrd.OrigineDatiFiltroCorrente) - 6) + " AND DataAutorizzazione IS NOT NULL AND Autorizzato=1 " + tblOrd.OrigineDatiOrdinamentoAttuale + ", IndRiga ";
PerseoNET/frmPannelloOrdini.cs:							origineDati = "SELECT IDordine, ProtocolloRegistrazione FROM t_RichiesteOrdiniFatture INNER JOIN t_RichiesteOrdini ON t_RichiesteOrdiniFatture.FK_Ordine = t_RichiesteOrdini.IDordine INNER JOIN t_TipoSpesa ON t_RichiesteOrdini.FK_TipoOrdineSpesa = t_TipoSpesa.IDtipospesa INNER JOIN t_Sedi ON t_RichiesteOrdini.FK_Sede = t_Sedi.IDsede " + GeneraFiltroGriglia() + " ORDER BY IDordine, DataRegistrazione DESC ";
PerseoNET/frmPannelloOrdini.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDordine, IDordprog FROM t_RichiesteOrdini INNER JOIN t_RichiesteOrdiniProgetti ON t_RichiesteOrdini.IDordine = t_RichiesteOrdiniProgetti.FK_RichiestaOrdine WHERE IDordine=", tblOrd.get_Campo((object)"IDordine", vFlagUpdateDB: false)));
PerseoNET/frmPannelloOrdini.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDordine, IDpreventivo FROM t_RichiesteOrdini INNER JOIN t_RichiesteOrdiniPreventivi ON t_RichiesteOrdini.IDordine = t_RichiesteOrdiniPreventivi.FK_RichiestaOrdine WHERE IDordine=", tblOrd.get_Campo((object)"IDordine", vFlagUpdateDB: false)));
PerseoNET/frmPannelloOrdini.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDordine, IDrigaord FROM t_RichiesteOrdini INNER JOIN t_RichiesteOrdiniRighe ON t_RichiesteOrdini.IDordine = t_RichiesteOrdiniRighe.FK_RichiestaOrdine WHERE IDordine=", tblOrd.get_Campo((object)"IDordine", vFlagUpdateDB: false)));
PerseoNET/frmPannelloOrdini.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDconsegna FROM t_RichiesteOrdini INNER JOIN t_RichiesteOrdiniRighe ON t_RichiesteOrdini.IDordine = t_RichiesteOrdiniRighe.FK_RichiestaOrdine INNER JOIN  t_RichiesteOrdiniConsegne ON t_RichiesteOrdiniConsegne.FK_RigaOrdine=t_RichiesteOrdiniRighe.IDrigaord WHERE IDordine=", tblOrd.get_Campo((object)"IDordine", vFlagUpdateDB: false)));
PerseoNET/frmDettProgetto.cs:						VariabiliClassi.Vedetta.ControlloMancanzaProtezioneRecord("SELECT IDprogetto, Bloccato FROM t_Progetti WHERE IDprogetto=" + Conversions.ToString(FormProg.ChiavePrimaria));
PerseoNET/frmDettProgetto.cs:					string origineDati = "SELECT IDprogetto, FK_Bando, FK_TipoProgetto, FK_SedeProgetto, GestioneProgettoPersonale, ConsenteCreaEdizioni, ProgettoAttivo, DescrProgetto, IDmwp, CodiceProgetto, DataAvvioProg, DataFineProg, DelegaAzienda, PercBudgetDelegaAzienda, ProgettoStandard, IscrizioneDote, CodiceCIG, CodiceCUP, DataCIGCUP, LegendaAttivitaPIP, OreCostiAttivitaPIP, BloccoDescrEdizione, FAGiorniPrima, FAGiorniDopo, OreSostegnoPreviste, OreSostegnoPrevisteIndiv, OreModuliBasePreviste, DeltaOreModuliBase, OreModuliProfPreviste, DeltaOreModuliProf, OreStagePrevisteMIN, OreStagePrevisteMAX, TblDescrDiscipline, BudgetProgetto, BudgetProgSostegnoFin, FK_TipoLogoRegistroStage, RilevanzaProgetto, BloccoLettereIncarico, OreIndividualiStudenteMax, DataRec, DataModifica, Bloccato FROM t_Progetti WHERE IDprogetto=" + Conversions.ToString(Variabili.Progetto.PKProgetto);
PerseoNET/frmDettProgetto.cs:					origineDati = ((!Funzioni.UtenteGN()) ? "SELECT IDsede, SiglaSede FROM t_Sedi WHERE Attiva=True AND SedeTest=False AND FK_TipoSede IN(1,3) ORDER BY SiglaSede " : "SELECT IDsede, SiglaSede FROM t_Sedi WHERE Attiva=True AND FK_TipoSede IN(1,3) ORDER BY OrdGruppo, SiglaSede ");
PerseoNET/frmDettProgetto.cs:					origineDati = "SELECT IDtprogetto, TipoProgetto FROM t_TipoProgetto WHERE Obsoleto=False ORDER BY TipoProgetto ";
PerseoNET/frmDettProgetto.cs:						origineDati = "SELECT IDtlogoregstage, TipoLogoRegistroStage FROM t_TipoLogoRegistroStage WHERE Obsoleto=0 ORDER BY IndLogo, TipoLogoRegistroStage ";
PerseoNET/frmDettProgetto.cs:						origineDati = "SELECT IDtlogoregstage, TipoLogoRegistroStage FROM t_TipoLogoRegistroStage WHERE Obsoleto=0 ORDER BY IndLogo, TipoLogoRegistroStage ";
PerseoNET/frmDettProgetto.cs:						origineDati = "SELECT IDtdoc FROM t_TipoDocumento WHERE TipoDocumento LIKE '%modulistica%' AND Tipodocumento LIKE '%progetto%' ";
PerseoNET/frmDettProgetto.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiTipologieFormative.IDprogtf, FK_Progetto, IDtformaint, TipoFormativoInterno, IndicareDurataOre, RecuperoOFA, SoloFunzioniAggiuntive, SpecificoIndividuale, Obsoleto FROM t_ProgettiTipologieFormative INNER JOIN t_TipoFormativoInterno ON t_ProgettiTipologieFormative.FK_TipoFomativo = t_TipoFormativoInterno.IDtformaint WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " ORDER BY TipoFormativoInterno "));
PerseoNET/frmDettProgetto.cs:					origineDati = "SELECT IDtformaint, TipoFormativoInterno FROM t_TipoFormativoInterno WHERE Obsoleto=False ORDER BY TipoFormativoInterno";
PerseoNET/frmDettProgetto.cs:				string origineDati = "SELECT IDdocumento, FK_TipoDoc, FK_Progetto, DescrDocumento, CodiceInterno, DataPubblicazione, DataRevisione, Redattore, Attivo FROM t_Documenti WHERE IDdocumento=" + Conversions.ToString(vID);
PerseoNET/frmDettProgetto.cs:				string origineDati = "SELECT IDpipprogetto, FK_Progetto, FK_TipoAttivitaPF, IndPIP, DescrAttivita, MaxOrePreviste, CostoOra, SovrapponibileStage, DataRec, DataModifica FROM t_ProgettiServiziPIP WHERE IDpipprogetto=" + Conversions.ToString(vID);
PerseoNET/frmDettProgetto.cs:				origineDati = "SELECT IDtattivita, TipoAttivita FROM t_TipoAttivitaEdizione WHERE AttivitaPIP=1 AND Obsoleto=0 ORDER by IndTA ";
PerseoNET/frmDettProgetto.cs:				string origineDati = "SELECT IDregola, FK_Progetto, FK_TipoAttivitaEdizione, CostoOraAttivita, OreBonusGratuito, MaxOreAttivita, RegolaDote, PercentualeBonus, RegolaBonus, RegolaOreIscritto, RegolaOreAttivita, RegolaMaxOreStage, DataRec, DataModifica FROM t_ProgettiEdizioniRegole WHERE IDregola=" + Conversions.ToString(vID);
PerseoNET/frmDettProgetto.cs:				origineDati = "SELECT IDtattivita, TipoAttivita FROM t_TipoAttivitaEdizione WHERE (Obsoleto=False AND Aula=False) OR (TipoAttivita='STAGE' AND MonteOreEdizione=True) ORDER BY TipoAttivita ";
PerseoNET/frmDettProgetto.cs:									string str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiEdizioniRegole.IDregola, FK_Progetto, FK_TipoAttivitaEdizione, RegolaDote, RegolaBonus, RegolaOreIscritto, RegolaOreAttivita, RegolaMaxOreStage, TipoAttivita, (CASE WHEN RegolaDote=1 THEN 'ore previste per costo-ora servizio' WHEN RegolaOreIscritto=1 THEN 'ore previste per iscritto' WHEN RegolaBonus=1 THEN 'bonus per ore servizi erogati' WHEN RegolaOreAttivita=1 THEN '% ore su durata edizione' WHEN RegolaMaxOreStage=1 THEN 'max ore stage' ELSE '??? ??? ???' END) AS Regola, CostoOraAttivita, OreBonusGratuito, MaxOreAttivita, PercentualeBonus FROM t_ProgettiEdizioniRegole INNER JOIN t_TipoAttivitaEdizione ON t_ProgettiEdizioniRegole.FK_TipoAttivitaEdizione = t_TipoAttivitaEdizione.IDtattivita WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " ORDER BY IndTA "));
PerseoNET/frmDettProgetto.cs:									string str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiServiziPIP.IDpipprogetto, FK_Progetto, IndPIP, DescrAttivita, TipoAttivita, MaxOrePreviste, CostoOra, SovrapponibileStage FROM t_ProgettiServiziPIP LEFT OUTER JOIN t_TipoAttivitaEdizione ON t_ProgettiServiziPIP.FK_TipoAttivitaPF = t_TipoAttivitaEdizione.IDtattivita WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " "), "ORDER BY IndPIP "));
PerseoNET/frmDettProgetto.cs:									string str = (VariabiliClassi.Diritti.get_InserimentoRecord("AMMINISTRAZIONE DB", "PROGETTO STANDARD", "", "", "") ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Azioni.IDazione, FK_Progetto, IDsede, SiglaSede, DescrAzione, CodiceAzione, IDmwa, DataAvvioAzione, DataFineAzione, (SELECT COUNT(IDedizione) FROM t_PianoServizi WHERE FK_Azione=IDazione) AS NumeroEdizioni, ModelloAzione FROM t_Azioni INNER JOIN t_Sedi ON t_Azioni.FK_SedeAzione = t_Sedi.IDsede WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " "), right), "ORDER BY SiglaSede")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Azioni.IDazione, FK_Progetto, IDsede, SiglaSede, DescrAzione, CodiceAzione, IDmwa, DataAvvioAzione, DataFineAzione, (SELECT COUNT(IDedizione) FROM t_PianoServizi WHERE FK_Azione=IDazione AND ModelloEdizione=0) AS NumeroEdizioni, ModelloAzione FROM t_Azioni INNER JOIN t_Sedi ON t_Azioni.FK_SedeAzione = t_Sedi.IDsede WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " AND ModelloAzione=0 "), right), "ORDER BY SiglaSede")));
PerseoNET/frmDettProgetto.cs:									string str = "SELECT IDdocente, IDsede, SiglaSede, (Cognome + ' ' + Nome) AS StrDOC, TipoAttivita, SUM(OreAssegnate) AS TotaleOreAttivita, COUNT(IDincarico) AS NumeroIncarichi, (SELECT MAX(DataLettera) FROM t_ProgettiStoricoLettereIncaricoInterni WHERE Variazione=0 AND FK_Docente=t_Docenti.IDdocente AND FK_Progetto=" + Conversions.ToString(Variabili.Progetto.PKProgetto) + ") AS DataLettera, (SELECT MAX(DataLettera) FROM t_ProgettiStoricoLettereIncaricoInterni WHERE Variazione=1 AND FK_Docente=t_Docenti.IDdocente AND FK_Progetto=" + Conversions.ToString(Variabili.Progetto.PKProgetto) + ") AS DataVariazione FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_Docenti.FK_SedePrimaria = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi AND t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE IDincacontra IS NULL AND FK_Tipo=2 GROUP BY IDdocente, FK_Progetto, Cognome, Nome, SiglaSede, IndTA, TipoAttivita, DocenteTest, IDsede HAVING FK_Progetto=" + Conversions.ToString(Variabili.Progetto.PKProgetto) + " AND IDsede " + Variabili.FiltroSedi + " ";
PerseoNET/frmDettProgetto.cs:									str = "SELECT FK_Docente, FK_Progetto, DataLettera, Variazione, DataFineProg FROM t_ProgettiStoricoLettereIncaricoInterni GROUP BY FK_Docente, FK_Progetto, DataLettera, Variazione, DataFineProg ";
PerseoNET/frmDettProgetto.cs:										string str = "SELECT IDdocumento, DescrDocumento, CodiceInterno, DataPubblicazione, DataRevisione, Redattore, Attivo FROM t_Documenti WHERE FK_Progetto=" + Conversions.ToString(Variabili.Progetto.PKProgetto) + " ";
PerseoNET/frmDettProgetto.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_AttivitaEdizioni.IDattedi, Durata, PercentualeBonus, OreAttivita FROM t_Progetti INNER JOIN t_ProgettiEdizioniRegole ON t_Progetti.IDprogetto = t_ProgettiEdizioniRegole.FK_Progetto INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_AttivitaEdizioni ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione AND t_ProgettiEdizioniRegole.FK_TipoAttivitaEdizione = t_AttivitaEdizioni.FK_TipoAttivita WHERE RegolaOreAttivita=1 AND IDprogetto=", Variabili.Progetto.get_Campo((object)0)), " AND Durata>0 "));
PerseoNET/frmDettProgetto.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_AttivitaEdizioni.IDattedi, t_AttivitaEdizioni.FK_TipoAttivita, OreAttivita FROM  t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_AttivitaEdizioni ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " AND FK_TipoAttivita="), FormRegola.get_ValoreSelezioneCombo(cmbFK_TipoAttivitaEdizione)), " AND ModelloEdizione=1 "));
PerseoNET/frmDettProgetto.cs:						origineDati = ((tblAttProg.get_Riga(vMantieniPrimaRigaVisualizzata: false) != 0) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiEdizioniRegole.IDregola, FK_Progetto, FK_TipoAttivitaEdizione FROM t_ProgettiEdizioniRegole WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " AND FK_TipoAttivitaEdizione="), FormRegola.get_ValoreSelezioneCombo(cmbFK_TipoAttivitaEdizione)), " "), "AND IDregola<>"), tblAttProg.get_Campo((object)"IDregola", vFlagUpdateDB: false))) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProgettiEdizioniRegole.IDregola, FK_Progetto, FK_TipoAttivitaEdizione FROM t_ProgettiEdizioniRegole WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " AND FK_TipoAttivitaEdizione="), FormRegola.get_ValoreSelezioneCombo(cmbFK_TipoAttivitaEdizione)), " ")));
PerseoNET/frmDettProgetto.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_PianoServizi.IDedizione, FK_Progetto, ModelloEdizione, Durata, QuotaIscr, QuotaInteg, AllieviMIN, (SELECT OreAttivita FROM t_AttivitaEdizioni WHERE FK_Edizione=IDedizione AND FK_TipoAttivita=1) AS OreAula, (SELECT OreAttivita FROM t_AttivitaEdizioni WHERE FK_Edizione=IDedizione AND FK_TipoAttivita=2) AS OreStage  FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)"IDprogetto")), " AND ModelloEdizione=1 "));
PerseoNET/frmDettProgetto.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_PianoServizi.IDedizione, FK_Progetto, ModelloEdizione, Durata, QuotaIscr, QuotaInteg, AllieviMIN, t_PianoServizi.DataModifica, (0) Fatto, CodiceEdizione, (SELECT OreAttivita FROM t_AttivitaEdizioni WHERE FK_Edizione=IDedizione AND FK_TipoAttivita=1) AS OreAula, (SELECT OreAttivita FROM t_AttivitaEdizioni WHERE FK_Edizione=IDedizione AND FK_TipoAttivita=2) AS OreStage  FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)"IDprogetto")), " AND ModelloEdizione=0 "));
PerseoNET/frmDettProgetto.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT COUNT(IDcalatt) AS NumeroRecord FROM t_CalendarioAttivita WHERE FK_ProgPIP=", tblPIP.get_Campo((object)0, vFlagUpdateDB: false)));
PerseoNET/frmDettProgetto.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_AttivitaEdizioni.IDattedi, t_AttivitaEdizioni.FK_TipoAttivita, OreAttivita FROM t_AttivitaEdizioni INNER JOIN t_PianoServizi ON t_AttivitaEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " AND FK_TipoAttivita="), tblAttProg.get_Campo((object)"FK_TipoAttivitaEdizione", vFlagUpdateDB: false)), " "));
PerseoNET/frmDettProgetto.cs:							string origineDati = "SELECT IDcontratto, DataInizioContratto, DataFineContratto, DataDimissioneDipendente, OreContratto FROM t_DocentiContratti WHERE DataInizioContratto<='" + txtDataFineProg.Text + "' AND DataFineContratto>='" + txtDataAvvioProg.Text + "' AND FK_Docente=" + Conversions.ToString(Variabili.Docente.PKDocente) + " AND FK_LivelloInterno IS NOT NULL ORDER BY DataInizioContratto ";
PerseoNET/frmDettProgetto.cs:												origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocente, IDincarico, (SELECT MIN(DataSvolgimento) FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE v_DettaglioOreSvoltePerIncaricoRidotta.IDincarico=t_IncarichiEdizioni.IDincarico) AS PrimaData FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_Docenti.FK_SedePrimaria = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi AND t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE IDincacontra IS NULL AND FK_Tipo=2 AND FK_Progetto=" + Conversions.ToString(Variabili.Progetto.PKProgetto) + " AND SiglaSede='", tblDipe.get_Campo((object)"SiglaSede", vFlagUpdateDB: false)), "' "), "AND IDdocente="), tblDipe.get_Campo((object)"IDdocente", vFlagUpdateDB: false)));
PerseoNET/frmDettProgetto.cs:					string origineDati = "SELECT IDcontratto, DataInizioContratto, DataFineContratto, DataDimissioneDipendente, OreContratto FROM t_DocentiContratti WHERE DataInizioContratto<='" + txtDataFineProg.Text + "' AND DataFineContratto>='" + txtDataAvvioProg.Text + "' AND FK_Docente=" + Conversions.ToString(Variabili.Docente.PKDocente) + " AND FK_LivelloInterno IS NOT NULL ORDER BY DataInizioContratto ";
PerseoNET/frmDettProgetto.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT COUNT(IDedizione) FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " AND FK_TipoFormativoInterno="), tblTipoForm.get_Campo((object)"IDtformaint", vFlagUpdateDB: false)));
PerseoNET/frmDettProgetto.cs:						string vSQL = ((FormProg.ChiavePrimaria != 0L) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogetto, FK_TipoProgetto, FK_SedeProgetto, DescrProgetto, YEAR(DataAvvioProg) AS AnnoProg FROM t_Progetti WHERE FK_SedeProgetto=", FormProg.get_ValoreSelezioneCombo(cmbFK_SedeProgetto)), " "), "AND CodiceProgetto='"), FunzStringa.StringaSQL(txtCodiceProgetto.Text)), "' "), "AND IDprogetto<>"), FormProg.ChiavePrimaria)) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogetto, FK_TipoProgetto, FK_SedeProgetto, DescrProgetto, YEAR(DataAvvioProg) AS AnnoProg FROM t_Progetti WHERE FK_SedeProgetto=", FormProg.get_ValoreSelezioneCombo(cmbFK_SedeProgetto)), " "), "AND CodiceProgetto='"), FunzStringa.StringaSQL(txtCodiceProgetto.Text)), "' ")));
PerseoNET/frmDettProgetto.cs:							vSQL = "SELECT IDprogetto, (IDmwp) AS CodiceMWP FROM t_Progetti WHERE IDmwp='" + FunzStringa.StringaSQL(txtIDmwp.Text) + "' ";
PerseoNET/frmDettProgetto.cs:							string vSQL = "SELECT IDconvenzione, t_ConvenzioniStage.DataAvvio, FK_Progetto FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione WHERE t_ConvenzioniStage.DataAvvio<" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " AND FK_Progetto=" + Conversions.ToString(Variabili.Progetto.PKProgetto);
PerseoNET/frmDettProgetto.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_ProgettiServiziPIP(FK_Progetto, FK_TipoAttivitaPF, DescrAttivita, MaxOrePreviste, Formazione, IndPIP, CostoOra) SELECT (", Variabili.Progetto.get_Campo((object)0)), ") AS FK_Progetto, FK_TipoAttivitaPF, DescrAttivita, MaxOrePreviste, Formazione, IndPIP, CostoOra "), "FROM t_ProgettiServiziPIP WHERE FK_Progetto="), Variabili.PKProgettoCopiaRegole));
PerseoNET/frmDettProgetto.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_ProgettiEdizioniRegole(FK_Progetto, FK_TipoAttivitaEdizione, CostoOraAttivita, OreBonusGratuito, RegolaDote, RegolaOreAttivita, RegolaBonus, RegolaOreIscritto, RegolaMaxOreStage , MaxOreAttivita, PercentualeBonus) SELECT (", Variabili.Progetto.get_Campo((object)0)), ") AS FK_Progetto, FK_TipoAttivitaEdizione, CostoOraAttivita, OreBonusGratuito, RegolaDote, "), "RegolaOreAttivita, RegolaBonus, RegolaOreIscritto, RegolaMaxOreStage , MaxOreAttivita, PercentualeBonus "), "FROM t_ProgettiEdizioniRegole WHERE FK_Progetto="), Variabili.PKProgettoCopiaRegole));
PerseoNET/frmDettProgetto.cs:								string origineDati = "SELECT DescrAttivita, TipoAttivita, MaxOrePreviste, CostoOra, Esito FROM t_ProgettiServiziPIP ";
PerseoNET/frmDettProgetto.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, DescrEdizione, CodiceEdizione, SiglaSede, DataBloccoStudenti FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE FK_Azione=", tblAzioni.get_Campo((object)"IDazione", vFlagUpdateDB: false)), " "), "ORDER BY SiglaSede, DescrEdizione "));
PerseoNET/frmDettProgetto.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDedizione, DescrEdizione, CodiceEdizione, SiglaSede, DataBloccoEdizione, DataBloccoStudenti FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE FK_Azione=", tblAzioni.get_Campo((object)"IDazione", vFlagUpdateDB: false)), " "), "ORDER BY SiglaSede, DescrEdizione "));
PerseoNET/frmDettProgetto.cs:						origineDati = "SELECT IDedizione, DescrEdizione, CodiceEdizione, SiglaSede, DataBloccoStudenti FROM t_PianoServizi ";
PerseoNET/clsVersione.cs:				vSQL = "SELECT IDvers, DataVersSW, ContrattoPregresso, DeltaAvvioContratto, ControlloIscrizioneDote, ControlloIncassoIscrizione, SogliaMinimaPagaStage, DeltaDownloadContratto, FirmaRespPersonale, RuoloFirmaRespPersonale, DataComuniNazioni, DataTblRiferimentiPF, DataTblRiferimenti, DataGuidaRapida, MaxFileDim_1, DownloadLettereIncarico, ObbligoUploadCV, CheckBloccantePIVA, FlagConsenteFileCertificato, FlagConsenteFileStage, PercMaxProlungaStage, FraseTipoSicurSpecifica, StageCertificaConoscenze, StageCertificaCompetenze, StageIndennitaAzienda, StageIndennitaCSF, StageCertificaSicurezza, SogliaReintegraAulaAppr, SogliaReintegraAltreAppr, SogliaOreValutaCollProf, DescrConvenzioneMolti, DescrConvenzioneSingolo, BloccareAccessoNotturno, ContrattoFrazionabile, ObbligoUploadAPAM, ObbligoUploadAttestaPIVA, ServizioDocFTP, DescrRimborsoIndennita, FlagConsenteFileCertificaSIC, FlagConsenteFileCertificaCompe, FlagConsenteFileOrdine, DataVariazioneModelliStage, ObbligoUploadCVDipendente, SmtpClient, (NULL) AS UserName, (NULL) AS UserNamePWD, PrivacyEmailSede, ProlungaMaxSuccessivoContr, MaxGiorniProlungamento, CertificaCompetenzeMiste, OccasionaleAnnoSolare, MaxGiorniAnnoOccasionale, PagaConAccettazione_LI, DescrCausaleBonifico, OreContrattoDipendente, OreAggiornamentoDipendente, ImportaAulaCodoc, ImportaAssenze, PercorsoLAN_SP, SogliaOreBonusDocente, ('30/06') AS DataMaxTirocinioEstivo, ('01/06') AS DataMinTirocinioEstivo, ControlloOFASicurezza, OrarioBloccoNotturno, FirmaRespPersonaleIMG, PDFAccordoEconomicoStage, PDFSchedaDatiAzienda, MaxTutorExtraCurr, DataAttivaAccordoEconomicoPDF, ParCollaboratoreCritico, MaxOreAnnoPP, DescrRagioneSociale, ObbligoRichiestaCollaborazione, SogliaVecchioCV, PKSegnalaContratto, ConsentePrevisioneImpegnoFA, AltreImpostazioni, BloccoContratti, BloccoRichiedePagamento, BloccoPagamento, BloccoTirocini FROM zt_Versione ";
PerseoNET/clsVersione.cs:					vSQL = "SELECT IDvers, DataComuniNazioni, DataTblRiferimentiPF, DataTblRiferimenti FROM zt_Versione ";
PerseoNET/clsVersione.cs:				string vSQL = "SELECT Server FROM t_Connessioni WHERE Server='ENFAPI-LAN' AND Attiva=True";
PerseoNET/clsVersione.cs:				string origineDati = "SELECT IDparv, IndOrd, NomeCampo, ValoreCampo, FormatoCampo, Descrizione, Obsoleto FROM zt_VersioneAltriParametri ";
PerseoNET/frmDettModelloGradimento.cs:				string origineDati = "SELECT IDmodgr, DescrModello, DescrEstesaModello, PuntMinimo, PuntMassimo, MinDurataEdizione, MaxDurataEdizione, Attivo, DataRec, DataModifica, Bloccato FROM t_ModelliGradimento WHERE IDmodgr=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettModelloGradimento.cs:				origineDati = "SELECT IDtformaint, TipoFormativoInterno FROM t_TipoFormativoInterno WHERE Obsoleto=0 ORDER BY TipoFormativoInterno ";
PerseoNET/frmDettModelloGradimento.cs:					origineDati = "SELECT IDgradimento, FK_Modello FROM t_GradimentoServizi WHERE FK_Modello=" + Conversions.ToString(FormModQ.ChiavePrimaria);
PerseoNET/frmDettModelloGradimento.cs:				origineDati = "SELECT t_ModelliGradimentoTipoForm.IDmodgtipof, IDtformaint, TipoFormativoInterno FROM t_ModelliGradimentoTipoForm INNER JOIN t_TipoFormativoInterno ON t_ModelliGradimentoTipoForm.FK_TipoFormativo = t_TipoFormativoInterno.IDtformaint WHERE FK_Modello=" + Conversions.ToString(FormModQ.ChiavePrimaria) + " ORDER BY TipoFormativoInterno";
PerseoNET/frmDettModelloGradimento.cs:				origineDati = "SELECT t_TipoFormativoInterno.IDtformaint, TipoFormativoInterno FROM t_TipoFormativoInterno WHERE Obsoleto=0 ORDER BY TipoFormativoInterno ";
PerseoNET/frmDettModelloGradimento.cs:				origineDati = "SELECT t_ModelloGradimentoSezioni.IDsezmodgr, FK_ModelloGR, CodiceSez, DescrSezione, COUNT(IDitemgrad) AS NumeroItem, SUM(PesoItem) AS TotalePesoItem, PesoSezione FROM t_ModelloGradimentoSezioni LEFT OUTER JOIN t_ModelloGradimentoItem ON t_ModelloGradimentoSezioni.IDsezmodgr = t_ModelloGradimentoItem.FK_Sezione GROUP BY IDsezmodgr, FK_ModelloGR, CodiceSez, DescrSezione, PesoSezione HAVING FK_ModelloGR=" + Conversions.ToString(FormModQ.ChiavePrimaria) + " ORDER BY CodiceSez, DescrSezione";
PerseoNET/frmDettModelloGradimento.cs:					string origineDati = "SELECT t_ModelliGradimentoTipoForm.IDmodgtipof, IDtformaint, TipoFormativoInterno FROM t_ModelliGradimentoTipoForm INNER JOIN t_TipoFormativoInterno ON t_ModelliGradimentoTipoForm.FK_TipoFormativo = t_TipoFormativoInterno.IDtformaint WHERE FK_Modello=" + Conversions.ToString(FormModQ.ChiavePrimaria) + " ORDER BY TipoFormativoInterno";
PerseoNET/frmDettModelloGradimento.cs:				string origineDati = "SELECT IDsezmodgr, FK_ModelloGR, DescrSezione, CodiceSez, PesoSezione, DataRec, DataModifica FROM t_ModelloGradimentoSezioni WHERE IDsezmodgr=" + Conversions.ToString(vID);
PerseoNET/frmDettModelloGradimento.cs:									string origineDati = "SELECT t_ModelloGradimentoItem.IDitemgrad, IDsezmodgr, CodiceSez, IndItem, DescrItem, PesoItem, CoeffRating FROM t_ModelloGradimentoSezioni LEFT OUTER JOIN t_ModelloGradimentoItem ON t_ModelloGradimentoSezioni.IDsezmodgr = t_ModelloGradimentoItem.FK_Sezione WHERE FK_ModelloGR=" + Conversions.ToString(FormModQ.ChiavePrimaria) + " ORDER BY CodiceSez, IndItem, DescrItem";
PerseoNET/frmDettModelloGradimento.cs:									origineDati = "SELECT t_ModelloGradimentoItemOpzioni.IDopzgrad, FK_Item, IndOpzione, DescrOpzione FROM t_ModelloGradimentoItemOpzioni ";
PerseoNET/frmDettModelloGradimento.cs:				string origineDati = "SELECT IDitemgrad, FK_Modello, FK_Sezione, IndItem, DescrItem, PesoItem, CoeffRating, DataRec, DataModifica FROM t_ModelloGradimentoItem WHERE IDitemgrad=" + Conversions.ToString(vID);
PerseoNET/frmDettModelloGradimento.cs:				origineDati = "SELECT IDsezmodgr, CodiceSez FROM t_ModelloGradimentoSezioni WHERE FK_ModelloGR=" + Conversions.ToString(FormModQ.ChiavePrimaria) + " ORDER BY CodiceSez, DescrSezione";
PerseoNET/frmDettModelloGradimento.cs:				string origineDati = "SELECT IDopzgrad, FK_Item, IndOpzione, DescrOpzione, OpzioneAttiva, DataRec, DataModifica FROM t_ModelloGradimentoItemOpzioni WHERE IDopzgrad=" + Conversions.ToString(vID);
PerseoNET/frmDettModelloGradimento.cs:						eliminaRecordCorrelati = "SELECT IDopzgrad, FK_Item, IndOpzione, DescrOpzione FROM t_ModelloGradimentoItemOpzioni WHERE FK_Item=0";
PerseoNET/frmDettModelloGradimento.cs:						string origineDati = "SELECT t_ModelloGradimentoItemOpzioni.IDopzgrad, FK_Item, IndOpzione, DescrOpzione FROM t_ModelloGradimentoItemOpzioni ORDER BY IndOpzione ";
PerseoNET/frmDettModelloGradimento.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ModelloGradimentoItemOpzioni.IDopzgrad, FK_Item, IndOpzione, DescrOpzione FROM t_ModelloGradimentoItemOpzioni WHERE FK_Item=", tblItem.get_Campo((object)0, vFlagUpdateDB: false)), " "), "ORDER BY IndOpzione "));
PerseoNET/frmDettModelloGradimento.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_ModelloGradimentoItemOpzioni(FK_Item, IndOpzione, DescrOpzione, OpzioneAttiva) SELECT (", tblItem.get_Campo((object)0, vFlagUpdateDB: false)), ") AS FKitem, IndOpzione, DescrOpzione, (1) AS Att FROM t_ModelloGradimentoItemOpzioni "), "WHERE FK_Item="), PKItem), " "));
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:				string origineDati = "SELECT IDcontratto, FK_Docente, FK_TipoFormaContratto, DataInizioContratto, DataFineContratto, DescrLetteraIncarico, DataRec, DataModifica, Bloccato FROM t_DocentiContratti WHERE IDcontratto=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:				origineDati = "SELECT IDcontrest, FK_DocenteContratto, FK_TipoDipendente, FK_Azienda, FK_CodicePF, DescrProfessione, EsclusioneIVA, IscrittoRegImprese, NumeroGiorniLavorativi, FK_ContributoCassaPrev, RivalsaGestSeparata, DataScadeFiscAgevolato, RegimeFiscAgevolato, Parasubordinato, FK_AltraAssINPS, FK_AliquotaPrevSepa, FK_TipoFasciaContr, DataAutorizzaPubblicaAmm, ProtAutorizzaPubblicaAmm, DataUploadPAmm, DataLetturaPAmm, FilePAmmPDF, DescrPubblicaAmm, IndirPubblicaAmm, ComPubblicaAmm, IndirizzoPECPubblAmm, DataRec, DataModifica FROM t_DocentiContrattiEsterni WHERE FK_DocenteContratto=" + Conversions.ToString(FormContr.ChiavePrimaria);
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:				origineDati = "SELECT IDtcassaprev, TipoContributoCassaPrev FROM t_TipoContributoCassaPrev WHERE Obsoleto=False ORDER BY TipoContributoCassaPrev";
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:				origineDati = "SELECT IDtaliquosepa, TipoAliquotaPrevSepa FROM t_TipoAliquotaPrevidenzaSeparata WHERE Obsoleto=False ORDER BY TipoAliquotaPrevSepa";
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:				origineDati = "SELECT IDtaltrainps, (TipoAltraAssINPS & ' [' & CodiceAssINPS & ']') AS StrAltraAss FROM t_TipoAltraAssicurazioneINPS WHERE Obsoleto=False ORDER BY CodiceAssINPS, TipoAltraAssINPS ";
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:				origineDati = "SELECT IDtestdipe, TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE Obsoleto=False ORDER BY IndTDIP, TipoDipendente";
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:				origineDati = "SELECT IDparfisc, IIf(Attivo=True,(DescrParFiscale & ' [' & CodiceParFiscale & ']'),(DescrParFiscale & ' [' & CodiceParFiscale & '***]')) AS StrCodice FROM t_DecodificatoreParametroFiscale ORDER BY Attivo, Gruppo, CodiceParFiscale";
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:				origineDati = "SELECT IDtfasciadoc, TipoFasciaDOC FROM t_TipoFasciaDocenteEsterno WHERE Obsoleto=False ORDER BY IndFDOC";
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:				origineDati = ((!Information.IsNothing(RuntimeHelpers.GetObjectValue(FormEst.get_Campo((object)"FK_Azienda")))) ? "SELECT IDparfisc, CodiceParFiscale, TipoContratto, DescrParFiscale FROM t_DecodificatoreParametroFiscale WHERE Attivo=True AND NOT(TipoContratto LIKE 'allievo%') AND PF_Azienda=True ORDER BY DescrParFiscale, CodiceParFiscale " : "SELECT IDparfisc, CodiceParFiscale, TipoContratto, DescrParFiscale FROM t_DecodificatoreParametroFiscale WHERE Attivo=True AND NOT(TipoContratto LIKE 'allievo%') AND PF_PersonaFisica=True ORDER BY TipoContratto, CodiceParFiscale ");
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:				origineDati = "SELECT t_IncarichiEdizioniContratti.IDincacontra, IDprogetto, t_IncarichiEdizioni.IDincarico, FK_Contratto, IDsede, IDtattivita, SiglaSede, DescrEdizione, CodiceEdizione, CodiceProgetto, DataAvvio, DataFine, TipoAttivita, DescrArgomento, DataInizioIncarico, DataFineIncarico, t_IncarichiEdizioni.OreAssegnate, t_IncarichiEdizioniContratti.OreSvolgere, QuotaOraIncarico, DataProlungamento, OreProlungamento, (SUM(Minuti)/60) AS OreFatte, (SELECT SUM(TotOreFatte) FROM t_ProgettiPagamentiCompensiOneri WHERE IDincarico=t_IncarichiEdizioni.IDincarico AND Reso=0) AS TotOrePagate, t_IncarichiEdizioni.IncaricoGenericoGratuito FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN v_DettaglioOreSvoltePerIncarico ON t_IncarichiEdizioni.IDincarico = v_DettaglioOreSvoltePerIncarico.IDincarico LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint GROUP BY t_IncarichiEdizioniContratti.IDincacontra, IDprogetto, t_IncarichiEdizioni.IDincarico, FK_Contratto, SiglaSede, IDsede, DescrEdizione, CodiceEdizione, CodiceProgetto, DataAvvio, DataFine, IndTA, TipoAttivita, DescrArgomento, DataInizioIncarico, DataFineIncarico, t_IncarichiEdizioni.OreAssegnate, t_IncarichiEdizioniContratti.OreSvolgere, QuotaOraIncarico, DataProlungamento, OreProlungamento, IDtattivita, t_IncarichiEdizioni.IncaricoGenericoGratuito HAVING FK_Contratto=" + Conversions.ToString(FormContr.ChiavePrimaria) + " AND t_Sedi.IDsede " + Variabili.FiltroSedi + " ORDER BY IndTA, DescrArgomento ";
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:					string vSQL = "SELECT IDprogetto, IDsede, IDtattivita FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE FK_Contratto=" + Conversions.ToString(FormContr.ChiavePrimaria) + " GROUP BY IDprogetto, IDsede, IDtattivita ";
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincacontra, FK_Contratto, QuotaOraIncarico FROM t_IncarichiEdizioniContratti WHERE FK_IncaricoEdizione=", tblContr.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "), "ORDER BY FK_Contratto "));
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, OreAssegnate, SUM(OreSvolgere) AS TotaleOreAutorizzate FROM t_IncarichiEdizioni INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE IDincacontra<>", tblContr.get_Campo((object)"IDincacontra", vFlagUpdateDB: false)), " "), "GROUP BY IDincarico, OreAssegnate HAVING IDincarico="), tblContr.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), " "));
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=", Variabili.Docente.get_Campo((object)"FK_TipoLavoroAttuale")));
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:						vSQL = "SELECT FK_Docente, SUM(NumeroGiorniLavorativi) AS TotaleGiorniLav FROM t_DocentiContratti INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto WHERE YEAR(DataInizioContratto)=" + Conversions.ToString(DateAndTime.Year(VariabiliClassi.Stringhe.get_TxtDataOra(txtDataInizioContratto))) + " ";
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:					vSQL = "SELECT IDincarico, OreAssegnate, SUM(Minuti) AS TotFatte, MIN(DataSvolgimento) AS Prima, MAX(DataSvolgimento) AS Ultima FROM v_DettaglioOreSvoltePerIncarico WHERE DataAttivita>='" + Strings.Format(RuntimeHelpers.GetObjectValue(FormContr.get_Campo((object)"DataInizioContratto")), VariabiliClassi.StrFormatoDataPC) + "' AND DataAttivita<='" + Strings.Format(RuntimeHelpers.GetObjectValue(FormContr.get_Campo((object)"DataFineContratto")), VariabiliClassi.StrFormatoDataPC) + "' GROUP BY IDincarico, OreAssegnate HAVING IDincarico " + tblContr.StringaFiltroIN("IDincarico") + " ORDER BY IDincarico ";
PerseoNET/frmDettContrattoDocenteEsternoManutenzione.cs:				string vSQL = ((FormContr.ChiavePrimaria != 0L) ? ("SELECT TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=" + Conversions.ToString(Conversions.ToLong(FormEst.get_Campo((object)"FK_TipoDipendente"))) + " AND TipoDipendente LIKE '%PUBBLIC%' ") : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT TipoDipendente FROM t_TipoDipendenteDocEsterno WHERE IDtestdipe=", Variabili.Docente.get_Campo((object)"FK_TipoLavoroAttuale")), " "), "AND TipoDipendente LIKE '%PUBBLIC%' ")));
PerseoNET/clsStampaPianificazione.cs:							string origineDati = "SELECT t_PianificazioneDocente.IDdocente, t_PianificazioneDocente.Docente, CodFiscale, t_DocentiAttivi.FK_Tipo, IIf(t_DocentiAttivi.FK_Tipo>1,1,2) AS Ordinale, (NULL) AS Sesso FROM t_PianificazioneDocente INNER JOIN t_DocentiAttivi ON t_PianificazioneDocente.IDdocente = t_DocentiAttivi.IDdocente GROUP BY t_PianificazioneDocente.IDdocente, t_PianificazioneDocente.Docente, CodFiscale, t_DocentiAttivi.FK_Tipo ORDER BY IIf(t_DocentiAttivi.FK_Tipo>1,1,2), t_PianificazioneDocente.Docente ";
PerseoNET/clsStampaPianificazione.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, TipoAttivita, IIf(TipoAttivita='DOCENZA',DescrArgomento,NULL) AS Disciplina, SUM(T_Ore) AS TotaleOre FROM t_PianificazioneDocente WHERE IDdocente=", clsTblDatiDR.get_Campo((object)"IDdocente")), " "), "GROUP BY IDincarico, TipoAttivita, IndTA, IIf(TipoAttivita='DOCENZA',DescrArgomento,NULL) "), "ORDER BY IndTA, TipoAttivita, IIf(TipoAttivita='DOCENZA',DescrArgomento,NULL) "));
PerseoNET/clsStampaPianificazione.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT TipoAttivita, SUM(T_Ore) AS TotaleOreAttivita FROM t_PianificazioneDocente WHERE IDdocente=", clsTblDatiDR.get_Campo((object)"IDdocente")), " "), "GROUP BY TipoAttivita, IndTA ORDER BY IndTA, TipoAttivita "));
PerseoNET/clsStampaPianificazione.cs:							origineDati = "SELECT TipoAttivita, SUM(T_Ore) AS TotaleOreAttivita FROM t_PianificazioneDocente GROUP BY TipoAttivita, IndTA ORDER BY IndTA ";
PerseoNET/clsStampaPianificazione.cs:					string origineDati = "SELECT SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, IIf(TipoAttivita='DOCENZA',DescrArgomento,NULL) AS Disciplina, SUM(T_Ore) AS TotaleOre FROM t_PianificazioneDocente GROUP BY SiglaSede, DescrEdizione, CodiceEdizione, TipoAttivita, IndTA, IIf(TipoAttivita='DOCENZA',DescrArgomento,NULL) ORDER BY SiglaSede, IndTA, IIf(TipoAttivita='DOCENZA',DescrArgomento,NULL) ";
PerseoNET/clsStampaPianificazione.cs:					origineDati = "SELECT TipoAttivita, SUM(T_Ore) AS TotaleOreAttivita FROM t_PianificazioneDocente GROUP BY TipoAttivita, IndTA ORDER BY IndTA ";
PerseoNET/clsStampaPianificazione.cs:				string vSQL = "SELECT IDedizione FROM t_PianificazioneDocente GROUP BY IDedizione ";
PerseoNET/clsStampaPianificazione.cs:				vSQL = "SELECT IDprogetto, DescrProgetto, CodiceProgetto, IDedizione FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione WHERE IDedizione " + str + " ORDER BY IDprogetto, IDedizione ";
PerseoNET/clsStampaPianificazione.cs:					vSQL = "SELECT IDedizione, IDcalatt, IDincarico, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, CodiceEdizioneCR, SiglaSede, Docente, Studente, ID_Dote, TipoAttivita, DescrModulo, DescrArgomento, TipoArgomento, DataAttivita, OraInizio, OraFine, T_Ore, Locale, AltriStudentiCoaching, (NULL) AS NumeroSettimana FROM t_PianificazioneDocente ORDER BY DataAttivita, OraInizio, Docente ";
PerseoNET/clsStampaPianificazione.cs:				string vSQL = "SELECT IDedizione FROM t_PianificazioneDocente GROUP BY IDedizione ";
PerseoNET/clsStampaPianificazione.cs:				vSQL = "SELECT IDedizione, IDcalatt, IDincarico, DescrEdizione, CodiceEdizione, CodiceEdizioneCR, SiglaSede, Docente, Studente, ID_Dote, TipoAttivita, DescrModulo, DescrArgomento, TipoArgomento, DataAttivita, OraInizio, OraFine, DocenzaFAD, T_Ore, Locale, AltriStudentiCoaching, (NULL) AS NumeroSettimana FROM t_PianificazioneDocente ORDER BY DataAttivita, OraInizio, Docente ";
PerseoNET/clsStampaPianificazione.cs:					vSQL = "SELECT SiglaSede, DescrEdizione, CodiceEdizione, (IDincarico) AS ID_Incarico, Docente, Studente, TipoAttivita, DescrArgomento, DataAttivita, OraInizio, OraFine, DocenzaFAD,T_Ore, (NULL) AS NumeroSettimana FROM t_PianificazioneDocente ORDER BY DataAttivita, OraInizio, Docente ";
PerseoNET/clsStampaPianificazione.cs:					string origineDati = "SELECT DataAttivita, OraInizio, OraFine, Docente, DescrArgomento, Locale FROM t_PianificazioneDocente ORDER BY DataAttivita, OraInizio, Docente ";
PerseoNET/clsStampaPianificazione.cs:					string origineDati = "SELECT DataAttivita, OraInizio, OraFine, Docente, DescrArgomento, T_Ore FROM t_PianificazioneDocente ORDER BY DataAttivita, OraInizio, Docente ";
PerseoNET/clsStampaPianificazione.cs:					string origineDati = "SELECT DataAttivita, OraInizio, OraFine, Docente, (TipoAttivita & '-' & DescrArgomento) AS Attivita, Locale FROM t_PianificazioneDocente ORDER BY DataAttivita, OraInizio, Docente ";
PerseoNET/clsStampaPianificazione.cs:					string origineDati = "SELECT DataAttivita, OraInizio, OraFine, Docente, TipoAttivita, IIf(Studente IS NOT NULL,(DescrArgomento & '-' & Studente),DescrArgomento) AS Attivita FROM t_PianificazioneDocente ORDER BY DataAttivita, OraInizio, Docente ";
PerseoNET/clsStampaPianificazione.cs:					string origineDati = "SELECT DataAttivita, OraInizio, OraFine, DescrEdizione, CodiceEdizione, TipoAnnualita, SiglaSede, IIf(TipoAttivita='DOCENZA',DescrArgomento,(DescrArgomento & '-' & TipoAttivita)) AS Attivita FROM t_PianificazioneDocente ORDER BY DataAttivita, OraInizio, Docente ";
PerseoNET/clsStampaPianificazione.cs:					string origineDati = "SELECT DataAttivita, OraInizio, OraFine, Docente, TipoAttivita, DescrArgomento FROM t_PianificazioneDocente ORDER BY DataAttivita, OraInizio, Docente ";
PerseoNET/clsStampaPianificazione.cs:				string origineDati = "SELECT Docente, CodiceEdizione,IIf(DescrArgomento IS NOT NULL,DescrArgomento,TipoAttivita) AS DescrArgomento, DataAttivita, OraInizio, OraFine, Locale FROM t_PianificazioneDocente ORDER BY Docente, DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:				string origineDati = "SELECT CodiceLocale, Docente, CodiceEdizione,IIf(DescrArgomento IS NOT NULL,DescrArgomento,TipoAttivita) AS DescrArgomento, (DataAttivita) AS Giorno, DataAttivita, OraInizio, OraFine FROM t_PianificazioneDocente ORDER BY CodiceLocale, DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:						origineDati = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (CASE WHEN t_CalendarioAttivita.FK_Iscrizione IS NOT NULL THEN t_CalendarioAttivita.FK_Iscrizione ELSE 0 END) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, (0) AS Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN (TipoAttivita + ' - ' + DescrIncarico) ELSE TipoAttivita END) AS  DescrModulo, (CASE WHEN FK_Argomento IS NULL THEN t_CalendarioAttivita.DescrAttivita ELSE DescrArgomento END) AS Descr_Attivita, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS StrDOC, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, (NULL) AS CodiceLocale, (PresenzaINAIL) AS INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (CASE WHEN AttivitaPIP=0 THEN (NULL) ELSE (SELECT COUNT(IDregstage) FROM t_RegistroStage WHERE FK_Attivita=IDcalatt) END) AS NumeroCoaching, DescrProgetto, CodiceProgetto, (SELECT ID_Dote FROM t_StudentiDoti WHERE IDdotestud=FK_DoteStudente) AS ID_Dote FROM t_ArgomentiModuli RIGHT OUTER JOIN t_Progetti INNER JOIN t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione AND t_AttivitaEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede ON t_ArgomentiModuli.IDargomento = t_IncarichiEdizioni.FK_Argomento LEFT OUTER JOIN t_Utenti RIGHT OUTER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione " + text;
PerseoNET/clsStampaPianificazione.cs:						origineDati = origineDati + "UNION SELECT t_RegistroStage.IDregstage, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, IDiscrizione, DataStage, OraIngresso, OraUscita, DATEDIFF(mi, OraIngresso, OraUscita) AS Minuti, DescrEdizione, CodiceEdizione, SiglaSede, ('studente in coaching') AS TipoAttivita, (0) AS Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN ('studente in coaching - ' + DescrIncarico) ELSE 'studente in coaching' END) AS DescrModulo, t_RegistroStage.DescrAttivitaStage, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS StrDOC, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, (NULL) AS CodiceLocale, (1) AS INAIL, (0) AS LavoroPIP, (0) AS PresenzaStudentePIP, (NULL) AS MinutiStudente, (0) AS NumeroCoaching, DescrProgetto, CodiceProgetto, (SELECT ID_Dote FROM t_StudentiDoti WHERE IDdotestud=FK_DoteStudente) AS ID_Dote FROM t_IncarichiEdizioni INNER JOIN t_Sedi INNER JOIN t_PianoServizi ON t_Sedi.IDsede = t_PianoServizi.FK_SedeEdizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_CalendarioAttivita INNER JOIN t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente ON t_CalendarioAttivita.IDcalatt = t_RegistroStage.FK_Attivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente " + expression;
PerseoNET/clsStampaPianificazione.cs:						origineDati = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, SiglaSede, TipoAttivita, (0) AS Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN (TipoAttivita + ' - ' + DescrIncarico) ELSE TipoAttivita END) AS DescrModulo, (t_CalendarioAttivita.DescrAttivita) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS StrDOC, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, (NULL) AS CodiceLocale, (PresenzaINAIL) AS INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, DescrProgetto, CodiceProgetto, ID_Dote FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud ";
PerseoNET/clsStampaPianificazione.cs:						origineDati = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (CASE WHEN t_CalendarioAttivita.FK_Iscrizione IS NOT NULL THEN t_CalendarioAttivita.FK_Iscrizione ELSE 0 END) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, (0) AS Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE TipoAttivita END) AS DescrModulo, t_CalendarioAttivita.DescrAttivita, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS StrDOC, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, (NULL) AS CodiceLocale, (PresenzaINAIL) AS INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (CASE WHEN AttivitaPIP=0 THEN (NULL) ELSE (SELECT COUNT(IDregstage) FROM t_RegistroStage WHERE FK_Attivita=IDcalatt) END) AS NumeroCoaching, DescrProgetto, CodiceProgetto, (SELECT ID_Dote FROM t_StudentiDoti WHERE IDdotestud=FK_DoteStudente) AS ID_Dote FROM t_Utenti RIGHT OUTER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente RIGHT OUTER JOIN t_Progetti INNER JOIN t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione AND t_AttivitaEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede ON t_Iscrizioni.IDiscrizione = t_CalendarioAttivita.FK_Iscrizione " + text;
PerseoNET/clsStampaPianificazione.cs:						origineDati = origineDati + "UNION SELECT t_RegistroStage.IDregstage, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, IDiscrizione, DataStage, OraIngresso, OraUscita, DATEDIFF(mi, OraIngresso, OraUscita) AS Minuti, DescrEdizione, CodiceEdizione, SiglaSede, ('studente in coaching') AS TipoAttivita, (0) AS Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN ('studente in coaching - ' + DescrIncarico) ELSE 'studente in coaching' END) AS DescrModulo, t_RegistroStage.DescrAttivitaStage, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS StrDOC, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, (NULL) AS CodiceLocale, (1) AS INAIL, (0) AS LavoroPIP, (0) AS PresenzaStudentePIP, (NULL) AS MinutiStudente, (0) AS NumeroCoaching, DescrProgetto, CodiceProgetto, (SELECT ID_Dote FROM t_StudentiDoti WHERE IDdotestud=FK_DoteStudente) AS ID_Dote FROM t_IncarichiEdizioni INNER JOIN t_Sedi INNER JOIN t_PianoServizi ON t_Sedi.IDsede = t_PianoServizi.FK_SedeEdizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_CalendarioAttivita INNER JOIN t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente ON t_CalendarioAttivita.IDcalatt = t_RegistroStage.FK_Attivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente " + expression;
PerseoNET/clsStampaPianificazione.cs:							origineDati = "SELECT IDcalatt, IDincarico, IDedizione, FK_Attivita, IDiscrizione, DataAttivita, OraInizio, OraFine, T_Ore, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, Aula, DescrModulo, DescrAttivita, TipoAreaFormativa, TipoArgomento, Docente, Studente, Locale, INAIL, LavoroPIP, PresenzaStudentePIP, MinutiStudente, AltriStudentiCoaching, DescrProgetto, CodiceProgetto, ID_Dote FROM t_PianificazioneDocente ";
PerseoNET/clsStampaPianificazione.cs:							origineDati = "SELECT IDcalatt, IDincarico, IDedizione, FK_Attivita, IDiscrizione, DataAttivita, OraInizio, OraFine, (T_Ore) AS Minuti, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, Aula, DescrModulo, DescrAttivita, TipoAreaFormativa, TipoArgomento, Docente, Studente, Locale, INAIL, LavoroPIP, PresenzaStudentePIP, MinutiStudente, AltriStudentiCoaching, DescrProgetto, CodiceProgetto, ID_Dote FROM t_PianificazioneDocente ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:						origineDati = "SELECT IDcalatt, IDincarico, IDedizione, FK_Attivita, IDiscrizione, DataAttivita, OraInizio, OraFine, T_Ore, DescrEdizione, CodiceEdizione, SiglaSede, TipoAttivita, Aula, DescrModulo, DescrAttivita, TipoAreaFormativa, TipoArgomento, Docente, Studente, Locale, INAIL, LavoroPIP, PresenzaStudentePIP, MinutiStudente, AltriStudentiCoaching, DescrProgetto, CodiceProgetto, ID_Dote FROM t_PianificazioneDocente ";
PerseoNET/clsStampaPianificazione.cs:								text2 = "SELECT IDregstage, FK_Attivita FROM t_RegistroStage WHERE FK_Iscrizione=" + Conversions.ToString(mvIDiscrizione) + " AND FK_Attivita IS NOT NULL ";
PerseoNET/clsStampaPianificazione.cs:									text2 = "SELECT IDutente, (Cognome + ' ' + Nome) AS Studente FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente WHERE IDiscrizione=" + Conversions.ToString(mvIDiscrizione);
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, SiglaSede, ('DOCENZA') AS TipoAttivita, (1) AS Aula, DescrModulo, DescrArgomento, (DescrModulo) AS TipoAreaFormativa, TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede " + text4;
PerseoNET/clsStampaPianificazione.cs:						text2 = text2 + "UNION SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, SiglaSede, TipoAttivita, Aula, ('AREA FLESSIBILITÃ') AS DescrModulo, (TipoAttivita) AS DescrArgomento, ('PERSONALIZZAZIONE') AS TipoAreaFormativa, (TipoAttivita) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita " + text4 + "ORDER BY DataAttivita, OraInizio";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, SiglaSede, ('DOCENZA') AS TipoAttivita, (1) AS Aula, DescrModulo, DescrBreveArgomento, (DescrModulo) AS TipoAreaFormativa, TipoArgomento, t_Docenti.Cognome, t_Docenti.Nome, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede " + text4 + "ORDER BY IDedizione, OraInizio, DataAttivita ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, SiglaSede, ('DOCENZA') AS TipoAttivita, (1) AS Aula, DescrModulo, DescrArgomento, (DescrModulo) AS TipoAreaFormativa, TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede " + text4 + "ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (FK_Iscrizione) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, SiglaSede, ('DOCENZA') AS TipoAttivita, (1) AS Aula, DescrModulo, DescrArgomento, (DescrModulo) AS TipoAreaFormativa, TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede " + text4 + "ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (NULL) AS DescrModulo, (SELECT DescrArgomento FROM t_IncarichiEdizioni INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE t_IncarichiEdizioni.IDincarico=t_CalendarioAttivita.FK_Incarico) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale " + text4 + "ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (NULL) AS DescrModulo, (SELECT DescrArgomento FROM t_IncarichiEdizioni INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE t_IncarichiEdizioni.IDincarico=t_CalendarioAttivita.FK_Incarico) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (IDcalcod) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale " + text4 + " AND IscrittiSostegno=1 ";
PerseoNET/clsStampaPianificazione.cs:						text2 = text2 + "UNION SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (t_CalendarioAttivita.DescrAttivita) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS StrDOC, (CASE WHEN IDiscrizione IS NOT NULL THEN (t_Utenti.Cognome + ' ' + t_Utenti.Nome) ELSE NULL END) AS Studente, (NULL) AS CodiceLocale, (NULL) AS INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_Utenti RIGHT OUTER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente RIGHT OUTER JOIN t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico ON t_Iscrizioni.IDiscrizione = t_CalendarioAttivita.FK_Iscrizione " + text4 + "ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (CASE WHEN FK_Iscrizione IS NOT NULL THEN FK_Iscrizione ELSE 0 END) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (CASE WHEN FK_Argomento IS NOT NULL THEN DescrArgomento ELSE t_CalendarioAttivita.DescrAttivita END) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Iscrizione IS NOT NULL THEN (SELECT (Cognome + ' ' + Nome) FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente WHERE IDiscrizione=FK_Iscrizione) ELSE NULL END) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento " + text4 + " AND Aula=0 ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (CASE WHEN FK_Iscrizione IS NOT NULL THEN FK_Iscrizione ELSE 0 END) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (CASE WHEN FK_Argomento IS NOT NULL THEN DescrArgomento ELSE t_CalendarioAttivita.DescrAttivita END) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Iscrizione IS NOT NULL THEN (SELECT (Cognome + ' ' + Nome) FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente WHERE IDiscrizione=FK_Iscrizione) ELSE NULL END) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento " + text4 + " AND Aula=1 ";
PerseoNET/clsStampaPianificazione.cs:						text2 = text2 + "UNION SELECT t_CalendarioCodocenza.IDcalcod, t_IncarichiEdizioni.IDincarico, IDedizione, (NULL) AS FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (SELECT DescrArgomento FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDcalatt=FK_Calendario) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, (NULL) AS CodiceLocale, (0) AS INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione AND t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt " + text4;
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (CASE WHEN FK_Iscrizione IS NOT NULL THEN FK_Iscrizione ELSE 0 END) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (CASE WHEN FK_Argomento IS NOT NULL THEN DescrArgomento ELSE t_CalendarioAttivita.DescrAttivita END) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Iscrizione IS NOT NULL THEN (SELECT (Cognome + ' ' + Nome) FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente WHERE IDiscrizione=FK_Iscrizione) ELSE NULL END) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento " + text4 + " AND TipoCategoriaRisorsa<>'STUDENTE' ";
PerseoNET/clsStampaPianificazione.cs:						text2 = text2 + "UNION SELECT t_CalendarioCodocenza.IDcalcod, t_IncarichiEdizioni.IDincarico, IDedizione, (NULL) AS FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (SELECT DescrArgomento FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDcalatt=FK_Calendario) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, (NULL) AS CodiceLocale, (0) AS INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione AND t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt " + text4;
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (CASE WHEN FK_Iscrizione IS NOT NULL THEN FK_Iscrizione ELSE 0 END) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (CASE WHEN FK_Argomento IS NOT NULL THEN DescrArgomento ELSE t_CalendarioAttivita.DescrAttivita END) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Iscrizione IS NOT NULL THEN (SELECT (Cognome + ' ' + Nome) FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente WHERE IDiscrizione=FK_Iscrizione) ELSE NULL END) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento " + text4 + " ";
PerseoNET/clsStampaPianificazione.cs:						text2 = text2 + "UNION SELECT t_CalendarioCodocenza.IDcalcod, t_IncarichiEdizioni.IDincarico, IDedizione, (NULL) AS FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (SELECT DescrArgomento FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDcalatt=FK_Calendario) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, (NULL) AS CodiceLocale, (0) AS INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione AND t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt " + text4;
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (CASE WHEN FK_Iscrizione IS NOT NULL THEN FK_Iscrizione ELSE 0 END) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (CASE WHEN FK_Argomento IS NOT NULL THEN DescrArgomento ELSE t_CalendarioAttivita.DescrAttivita END) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN FK_Iscrizione IS NOT NULL THEN (SELECT (Cognome + ' ' + Nome) FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente WHERE IDiscrizione=FK_Iscrizione) ELSE NULL END) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento " + text4 + " AND t_Docenti.FK_Tipo=2 AND BonusDipendente=1 ";
PerseoNET/clsStampaPianificazione.cs:						text2 = text2 + "UNION SELECT t_CalendarioCodocenza.IDcalcod, t_IncarichiEdizioni.IDincarico, IDedizione, (NULL) AS FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (SELECT DescrArgomento FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDcalatt=FK_Calendario) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, (NULL) AS CodiceLocale, (0) AS INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione AND t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt " + text4 + " AND t_Docenti.FK_Tipo=2 AND BonusDipendente=1 ORDER BY DataAttivita, OraInizio";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (CASE WHEN t_CalendarioAttivita.DescrAttivita IS NOT NULL THEN t_CalendarioAttivita.DescrAttivita ELSE TipoAttivita END) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale " + text4 + "ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (t_CalendarioAttivita.FK_Iscrizione) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, SiglaSede, ('DOCENZA') AS TipoAttivita, (1) AS Aula, DescrModulo, DescrArgomento, (DescrModulo) AS TipoAreaFormativa, TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (SELECT (Cognome + ' ' + Nome) FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente WHERE IDiscrizione=FK_Iscrizione) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede " + text4 + " AND LavoroPIP=0 ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, SiglaSede, TipoAttivita, (0) AS Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN (TipoAttivita + ' - ' + DescrIncarico) ELSE TipoAttivita END) AS DescrModulo, (t_CalendarioAttivita.DescrAttivita) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS StrDOC, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, (NULL) AS CodiceLocale, (PresenzaINAIL) AS INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, ID_Dote FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, SiglaSede, TipoAttivita, (0) AS Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN (TipoAttivita + ' - ' + DescrIncarico) ELSE TipoAttivita END) AS DescrModulo, (t_CalendarioAttivita.DescrAttivita) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS StrDOC, (NULL) AS Studente, (NULL) AS CodiceLocale, (PresenzaINAIL) AS INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (0) AS NumeroStudenti, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita " + text4 + " AND MaxStudenti>0 AND AttivitaPIP=0 ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, SiglaSede, ('DOCENZA') AS TipoAttivita, (1) AS Aula, DescrModulo, DescrArgomento, (DescrModulo) AS TipoAreaFormativa, TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg " + text4 + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (t_CalendarioAttivita.DescrAttivita) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS StrDOC, (CASE WHEN IDiscrizione IS NOT NULL THEN (t_Utenti.Cognome + ' ' + t_Utenti.Nome) ELSE NULL END) AS Studente, (NULL) AS CodiceLocale, (NULL) AS INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_Utenti RIGHT OUTER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente RIGHT OUTER JOIN t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico ON t_Iscrizioni.IDiscrizione = t_CalendarioAttivita.FK_Iscrizione " + text4 + "ORDER BY DataAttivita, OraInizio, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (CASE WHEN t_CalendarioAttivita.DescrAttivita IS NOT NULL THEN t_CalendarioAttivita.DescrAttivita ELSE TipoAttivita END) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale ";
PerseoNET/clsStampaPianificazione.cs:						text2 = text2 + "UNION SELECT IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (NULL) AS DescrModulo, (SELECT DescrArgomento FROM t_IncarichiEdizioni INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE t_IncarichiEdizioni.IDincarico=t_CalendarioAttivita.FK_Incarico) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale " + text4 + "ORDER BY DataAttivita, OraInizio, (Cognome + ' ' + Nome) ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, SiglaSede, ('DOCENZA') AS TipoAttivita, (1) AS Aula, DescrModulo, DescrArgomento, (DescrModulo) AS TipoAreaFormativa, TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede  " + text4 + " ";
PerseoNET/clsStampaPianificazione.cs:						text2 = text2 + "UNION SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (CASE WHEN t_CalendarioAttivita.DescrAttivita IS NOT NULL THEN t_CalendarioAttivita.DescrAttivita ELSE TipoAttivita END) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale " + text4 + "ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, SiglaSede, ('DOCENZA') AS TipoAttivita, (1) AS Aula, DescrModulo, DescrArgomento, (DescrModulo) AS TipoAreaFormativa, TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede " + text4 + " ";
PerseoNET/clsStampaPianificazione.cs:						text2 = text2 + "UNION SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE NULL END) AS DescrModulo, (CASE WHEN t_CalendarioAttivita.DescrAttivita IS NOT NULL THEN t_CalendarioAttivita.DescrAttivita ELSE TipoAttivita END) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale " + text4 + "ORDER BY DataAttivita, OraInizio, IDincarico ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, DATEDIFF(mi, OraInizio, OraFine) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, SiglaSede, ('DOCENZA') AS TipoAttivita, (1) AS Aula, DescrModulo, DescrArgomento, (DescrModulo) AS TipoAreaFormativa, TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale INNER JOIN t_ModuliEdizioni ON t_ArgomentiModuli.FK_Modulo = t_ModuliEdizioni.IDmodulo INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede " + text4 + " ";
PerseoNET/clsStampaPianificazione.cs:						text2 = text2 + "UNION SELECT t_CalendarioAttivita.IDcalatt, t_IncarichiEdizioni.IDincarico, IDedizione, FK_CalAttivita, (0) AS IDiscrizione, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, DescrEdizione, CodiceEdizione, (NULL) AS CodiceEdizione_CR, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, TipoAttivita, Aula, (NULL) AS DescrModulo, (CASE WHEN t_CalendarioAttivita.DescrAttivita IS NOT NULL THEN t_CalendarioAttivita.DescrAttivita ELSE TipoAttivita END) AS DescrArgomento, (NULL) AS TipoAreaFormativa, (NULL) AS TipoArgomento, (Cognome + ' ' + Nome) AS StrDOC, (NULL) AS Studente, CodiceLocale, INAIL, LavoroPIP, PresenzaStudentePIP, (NULL) AS MinutiStudente, (NULL) AS NumeroCoaching, IDdocente, FK_Anno, DocenzaFAD, (NULL) AS ID_Dote FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_LocaliEdizioni ON t_CalendarioAttivita.FK_Locale = t_LocaliEdizioni.IDloced INNER JOIN t_Locali ON t_LocaliEdizioni.FK_LocaleAssegnato = t_Locali.IDlocale " + text4 + "ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:						text2 = "SELECT (FK_Attivita) AS IDcalatt, COUNT(IDregstage) AS NumeroCoaching FROM t_RegistroStage GROUP BY FK_Attivita HAVING FK_Attivita IN(" + text2 + ") ORDER BY FK_Attivita ";
PerseoNET/clsStampaPianificazione.cs:							text2 = "SELECT IDiscrizione, (Cognome + ' ' + Nome) AS Studente FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente WHERE IDiscrizione " + mvCalendario.StringaFiltroIN("IDiscrizione");
PerseoNET/clsStampaPianificazione.cs:							text2 = "SELECT IDiscrizione, (Cognome + ' ' + Nome) AS Studente, ID_Dote FROM t_Utenti INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE IDiscrizione " + mvCalendario.StringaFiltroIN("IDiscrizione");
PerseoNET/clsStampaPianificazione.cs:							text2 = "SELECT t_CalendarioAttivita.IDcalatt, IDedizione, TipoAttivita, DescrBreveArgomento, DescrArgomento, (Cognome + ' ' + Nome) AS StrDOC, CodiceEdizione FROM t_AttivitaEdizioni INNER JOIN t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente ON t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE IDcalatt " + text7 + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStampaPianificazione.cs:							text2 = "SELECT IDsostegnoiscr, FK_SostegnoAula, FK_SostegnoAttivita, (FK_Calendario) AS IDcalatt, (Cognome + ' ' + Nome) AS Studente, FK_AulaAddizionale FROM t_IscrizioniSostegno INNER JOIN t_Iscrizioni ON t_IscrizioniSostegno.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_CalendarioCodocenza ON t_IscrizioniSostegno.FK_SostegnoAula = t_CalendarioCodocenza.IDcalcod WHERE FK_SostegnoAula" + text4 + " ORDER BY FK_SostegnoAula, Cognome ";
PerseoNET/clsStampaPianificazione.cs:								text2 = "SELECT IDsostegnoiscr, FK_SostegnoAula, FK_SostegnoAttivita, IDcalatt, (Cognome + ' ' + Nome) AS Studente FROM t_IscrizioniSostegno INNER JOIN t_Iscrizioni ON t_IscrizioniSostegno.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_CalendarioAttivita ON t_IscrizioniSostegno.FK_SostegnoAttivita = t_CalendarioAttivita.IDcalatt WHERE FK_SostegnoAttivita" + text4 + " ORDER BY FK_SostegnoAula, Cognome ";
PerseoNET/clsStampaPianificazione.cs:							text2 = "SELECT FK_Attivita, Studente, ID_Dote, DataStage, DATEDIFF(mi,OraIngresso,OraUscita) AS Minuti FROM v_RegistrazioniCoachingTutoring WHERE FK_Attivita " + mvCalendario.StringaFiltroIN("IDcalatt") + " ORDER BY DataStage, Studente ";
PerseoNET/clsStampaPianificazione.cs:							text2 = "SELECT IDcalatt, IDincarico, IDedizione, FK_Attivita, IDiscrizione, DataAttivita, OraInizio, OraFine, T_Ore, DescrEdizione, CodiceEdizione, CodiceEdizioneCR, SiglaSede, TipoAttivita, Aula, DescrModulo, DescrArgomento, TipoAreaFormativa, TipoArgomento, Docente, Studente, Locale, INAIL, LavoroPIP, PresenzaStudentePIP, MinutiStudente, AltriStudentiCoaching, IDdocente, TipoAnnualita, DocenzaFAD, ID_Dote FROM t_PianificazioneDocente ";
PerseoNET/clsAppFileUpdate.cs:				string origineDati = "SELECT IDfileapp, NomeFile, DataOraModifica, CartellaFTP FROM zt_AggiornaFileApplicazione ";
PerseoNET/frmImportaElencoIscritti.cs:				string origineDati = "SELECT Cognome, Nome, Sesso, DataNascita, LuogoNascita, ProvNascita, CodFiscale, DescrTitoloStudio, IndirResidenza, ComResidenza, CAPresidenza, ProvResidenza, Tel_1, Tel_2, IndirAbitazione, ComAbitazione, CAPabitazione, ProvAbitazione, Esito FROM t_Utenti ";
PerseoNET/frmImportaElencoIscritti.cs:				origineDati = "SELECT IDtrefute, TipoReferenteUte, IndTRU FROM t_TipoReferenteUtente WHERE Obsoleto=0 ORDER BY IndTRU ";
PerseoNET/frmImportaElencoIscritti.cs:									origineDati = "SELECT Cognome, Nome, CodFiscale, Sesso, DataNascita, LuogoNascita, ProvNascita, Cittadinanza, IndirResidenza, ComResidenza, CAPresidenza, ProvResidenza, NazResidenza, Tel_1, Tel_2, Email, DescrTitoloStudio, CognomeRef1, NomeRef1, CFRef1, RuoloRef1, TelRef1, EmailRef1, IndirRef1, ComuneRef1, CAPRef1, ProvRef1, AmmRef1, Esito FROM t_Utenti ";
PerseoNET/frmImportaElencoIscritti.cs:									origineDati = "SELECT Cognome, Nome, CodFiscale, Sesso, DataNascita, LuogoNascita, ProvNascita, Cittadinanza, IndirResidenza, ComResidenza, CAPresidenza, ProvResidenza, NazResidenza, IndirAbitazione, ComAbitazione, CAPabitazione, ProvAbitazione, Tel_1, Tel_2, Email, DescrTitoloStudio, CognomeRef1, NomeRef1, CFRef1, RuoloRef1, TelRef1, EmailRef1, IndirRef1, ComuneRef1, CAPRef1, ProvRef1, AmmRef1, Esito FROM t_Utenti ";
PerseoNET/frmImportaElencoIscritti.cs:									origineDati = "SELECT Cognome, Nome, CodFiscale, Sesso, DataNascita, LuogoNascita, ProvNascita, Cittadinanza, IndirResidenza, ComResidenza, CAPresidenza, ProvResidenza, NazResidenza, Tel_1, Tel_2, Email, DescrTitoloStudio, DescrAzienda, IndirizzoAzienda, ComuneAzienda, ProvAzienda, CAPAzienda, DescrMansione, CodiceATECO, DescrATECO, DataAssunzione, Esito FROM t_Utenti ";
PerseoNET/frmImportaElencoIscritti.cs:								origineDati = "SELECT Cognome, Nome, CodFiscale, Sesso, DataNascita, LuogoNascita, ProvNascita, NazNascita, Cittadinanza, IndirResidenza, ComResidenza, CAPresidenza, ProvResidenza, IndirAbitazione, ComAbitazione, CAPabitazione, ProvAbitazione, Tel_1, Tel_2, Email, DescrTitoloStudio, CodiceEdizione, SiglaSede, AnnoFormativo, DescrAzienda, IndirizzoAzienda, ComuneAzienda, ProvAzienda, CAPAzienda, DescrMansione, CodiceATECO, DescrATECO, DataAssunzione, CognomeRef1, NomeRef1, CFRef1, RuoloRef1, TelRef1, EmailRef1, IndirRef1, ComuneRef1, CAPRef1, ProvRef1, AmmRef1, Esito FROM t_Utenti ";
PerseoNET/frmImportaElencoIscritti.cs:											origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDutente, Cognome, Nome, CodFiscale, LuogoNascita, DataNascita, FK_Nazionalita FROM t_Utenti WHERE CodFiscale='", rs.get_Campo((object)"CodFiscale")), "' "));
PerseoNET/frmImportaElencoIscritti.cs:													origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDutente, Cognome, Nome, CodFiscale, LuogoNascita, DataNascita, FK_Nazionalita FROM t_Utenti WHERE CodFiscale='", rs.get_Campo((object)"CodFiscale")), "' "));
PerseoNET/frmImportaElencoIscritti.cs:													origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDesplav FROM t_EsperienzeLavoro WHERE FK_Utente=", clsTblDatiDR.get_Campo((object)0)), " "), "AND DescrAzienda='"), FunzStringa.StringaSQL(Conversions.ToString(rs.get_Campo((object)"DescrAzienda")))), "' "));
PerseoNET/frmImportaElencoIscritti.cs:				string vSQL = "SELECT IDrefute, Cognome, Nome FROM t_ReferentiUtente WHERE FK_TipoRef IN (1,2,7,9) AND FK_Utente=" + Conversions.ToString(IDstudenteCorrente) + " AND Cognome='" + FunzStringa.StringaSQL(Conversions.ToString(rs.get_Campo((object)"CognomeRef1"))) + "' AND Nome='" + FunzStringa.StringaSQL(Conversions.ToString(rs.get_Campo((object)"NomeRef1"))) + "' ";
PerseoNET/frmDettProfiloUtente.cs:				string vSQL = ((FormLog.ChiavePrimaria != 0L) ? ("SELECT IDpers, Login FROM t_Personale WHERE Login='" + FunzStringa.StringaSQL(txtLogin.Text) + "' AND IDpers<>" + Conversions.ToString(FormLog.ChiavePrimaria)) : ("SELECT IDpers, Login FROM t_Personale WHERE Login='" + FunzStringa.StringaSQL(txtLogin.Text) + "' "));
PerseoNET/frmDettProfiloUtente.cs:				vSQL = ((FormLog.ChiavePrimaria != 0L) ? ("SELECT Cognome, Nome FROM t_Personale WHERE Cognome='" + FunzStringa.StringaSQL(txtCognome.Text) + "' AND Nome='" + FunzStringa.StringaSQL(txtNome.Text) + "' AND Login='" + FunzStringa.StringaSQL(txtLogin.Text) + "' AND IDpers<>" + Conversions.ToString(FormLog.ChiavePrimaria)) : ("SELECT Cognome, Nome FROM t_Personale WHERE Cognome='" + FunzStringa.StringaSQL(txtCognome.Text) + "' AND Nome='" + FunzStringa.StringaSQL(txtNome.Text) + "' AND Login='" + FunzStringa.StringaSQL(txtLogin.Text) + "' "));
PerseoNET/frmDettProfiloUtente.cs:						vSQL = "SELECT t_SediVisibili.IDsedeper, IDsede, SiglaSede, DescrSede, Attiva FROM t_Sedi INNER JOIN t_SediVisibili ON t_Sedi.IDsede = t_SediVisibili.FK_Sede WHERE FK_Personale=" + Conversions.ToString(FormLog.ChiavePrimaria) + " ORDER BY DescrSede ";
PerseoNET/frmDettProfiloUtente.cs:				string origineDati = "SELECT IDpers, FK_Docente, Cognome, Nome, Pwd, DataPwd, Login, PwdNET, Attivo, DisattivareTimeout, Avviso, AggiornaPerseo, RipristinaInstallazione, Email, OraRipristino, Disconnettere, DataRec, DataModifica, Bloccato FROM t_Personale WHERE IDpers=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettProfiloUtente.cs:				origineDati = "SELECT t_SediVisibili.IDsedeper, IDsede, SiglaSede, DescrSede, RegistroDigitale, Attiva FROM t_Sedi INNER JOIN t_SediVisibili ON t_Sedi.IDsede = t_SediVisibili.FK_Sede WHERE FK_Personale=" + Conversions.ToString(FormLog.ChiavePrimaria) + " ORDER BY Attiva DESC, (CASE WHEN FK_TipoSede=1 THEN 1 WHEN FK_TipoSede=3 THEN 2 WHEN FK_TipoSede=4 THEN 3 ELSE 4 END), SiglaSede ";
PerseoNET/frmDettProfiloUtente.cs:				origineDati = "SELECT IDsede, (CASE WHEN Attiva=1 THEN SiglaSede ELSE (SiglaSede + ' (*)') END) AS SiglaSede FROM t_Sedi INNER JOIN t_TipoSede ON t_Sedi.FK_TipoSede = t_TipoSede.IDtsede ORDER BY Attiva DESC, (CASE WHEN FK_TipoSede=1 THEN 1 WHEN FK_TipoSede=3 THEN 2 WHEN FK_TipoSede=4 THEN 3 ELSE 4 END), SiglaSede ";
PerseoNET/frmDettProfiloUtente.cs:									string origineDati = "SELECT t_DirittiDB.IDdiritti, IDpers, IDproc, Gruppo, t_TipoDirittiDB.Procedura, Accesso, Inserimento, Modifica, Eliminazione, (0) AS RigaModificata FROM t_DirittiDB INNER JOIN t_Personale ON t_DirittiDB.Nominativo = t_Personale.IDpers INNER JOIN t_TipoDirittiDB ON t_DirittiDB.Procedura = t_TipoDirittiDB.IDproc WHERE IDpers=" + Conversions.ToString(FormLog.ChiavePrimaria) + " AND Obsoleto=0 ORDER BY Gruppo, Ind, t_TipoDirittiDB.Procedura ";
PerseoNET/frmDettProfiloUtente.cs:									string origineDati = ((iD_Cliente != FunzPerseo.PerseoClienti.ENFAPI) ? "SELECT IDproc, Gruppo, Procedura, Note FROM t_TipoDirittiDB WHERE Obsoleto=0 ORDER BY Gruppo, Ind, Procedura" : (Funzioni.UtenteGN() ? "SELECT IDproc, Gruppo, Procedura, Note FROM t_TipoDirittiDB WHERE Obsoleto=0 ORDER BY Gruppo, Ind, Procedura" : "SELECT IDproc, Gruppo, Procedura, Note FROM t_TipoDirittiDB WHERE Obsoleto=0 AND Procedura<>'AMMINISTRAZIONE DB' ORDER BY Gruppo, Ind, Procedura"));
PerseoNET/frmDettProfiloUtente.cs:								string origineDati = "SELECT IDsede, (CASE WHEN Attiva=1 THEN SiglaSede ELSE (SiglaSede + ' (*)') END) AS SiglaSede FROM t_Sedi INNER JOIN t_TipoSede ON t_Sedi.FK_TipoSede = t_TipoSede.IDtsede WHERE IDsede NOT " + tblSedi.StringaFiltroIN("IDsede") + " AND FK_TipoSede>=3 AND Attiva=1 AND Sedetest=0 ORDER BY Attiva DESC, (CASE WHEN FK_TipoSede=1 THEN 1 WHEN FK_TipoSede=3 THEN 2 WHEN FK_TipoSede=4 THEN 3 ELSE 4 END), SiglaSede ";
PerseoNET/frmDettProfiloUtente.cs:								origineDati = "SELECT t_PianoServizi.IDedizione, EdizioneAttiva, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, (LEFT(TipoAnnualita,1) + 'Â°') AS TipoAnnualita, DataAvvio, DataFine, Durata FROM t_TipoAnnualita RIGHT OUTER JOIN t_TipoFormativoInterno INNER JOIN t_Sedi INNER JOIN t_PianoServizi ON t_Sedi.IDsede = t_PianoServizi.FK_SedeEdizione ON t_TipoFormativoInterno.IDtformaint = t_PianoServizi.FK_TipoFormativoInterno ON  t_TipoAnnualita.IDtanno = t_PianoServizi.FK_Anno ORDER BY TipoFormativoInterno, DataAvvio, DescrEdizione ";
PerseoNET/frmDettProfiloUtente.cs:								origineDati = "SELECT t_PianoServizi.IDedizione, EdizioneAttiva, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, (LEFT(TipoAnnualita,1) + 'Â°') AS TipoAnnualita, DataAvvio, DataFine, Durata FROM t_PersonaleEdizioniVisibili INNER JOIN t_TipoFormativoInterno INNER JOIN t_Sedi INNER JOIN t_PianoServizi ON t_Sedi.IDsede = t_PianoServizi.FK_SedeEdizione ON t_TipoFormativoInterno.IDtformaint = t_PianoServizi.FK_TipoFormativoInterno ON  t_PersonaleEdizioniVisibili.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno WHERE FK_Persona=" + Conversions.ToString(FormLog.ChiavePrimaria) + " AND DataAvvio<=" + FunzStringa.StrDataSQL("31/08/" + Strings.Mid(cmbAnnoAmm.Text, 6, 4), FlagSqlServer: true) + " AND DataFine>=" + FunzStringa.StrDataSQL("01/09/" + Strings.Mid(cmbAnnoAmm.Text, 1, 4), FlagSqlServer: true) + " ORDER BY  SiglaSede, TipoFormativoInterno, DescrEdizione  ";
PerseoNET/frmDettProfiloUtente.cs:						vSQL = "SELECT t_SediVisibili.IDsedeper, IDsede, SiglaSede, DescrSede, RegistroDigitale, Attiva FROM t_Sedi INNER JOIN t_SediVisibili ON t_Sedi.IDsede = t_SediVisibili.FK_Sede WHERE FK_Personale=" + Conversions.ToString(FormLog.ChiavePrimaria) + " ORDER BY Attiva DESC, (CASE WHEN FK_TipoSede=1 THEN 1 WHEN FK_TipoSede=3 THEN 2 WHEN FK_TipoSede=4 THEN 3 ELSE 4 END), SiglaSede ";
PerseoNET/frmDettProfiloUtente.cs:					vSQL = "INSERT INTO t_SediVisibili(FK_Sede, FK_Personale) SELECT FK_Sede, (" + Conversions.ToString(FormLog.ChiavePrimaria) + ") AS FKU FROM t_SediVisibili WHERE FK_Personale=" + Conversions.ToString(MyProject.Forms.frmProfiliUtenti.PKProfilo);
PerseoNET/frmDettProfiloUtente.cs:				string origineDati = "SELECT (" + Conversions.ToString(FormLog.ChiavePrimaria) + ") As Nominativo, IDproc, Accesso, Modifica, Inserimento, Eliminazione FROM t_DirittiDB INNER JOIN t_TipoDirittiDB ON t_DirittiDB.Procedura=t_TipoDirittiDB.IDproc WHERE Nominativo=" + Conversions.ToString(MyProject.Forms.frmProfiliUtenti.PKProfilo) + " AND t_TipoDirittiDB.Procedura<>'AMMINISTRAZIONE DB' AND Obsoleto=0 ";
PerseoNET/frmDettProfiloUtente.cs:				string origineDati = "SELECT Nominativo, Procedura, Accesso, Modifica, Inserimento, Eliminazione FROM t_DirittiDB ";
PerseoNET/frmDettProfiloUtente.cs:					string origineDati = "SELECT t_PianoServizi.IDedizione, EdizioneAttiva, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, (LEFT(TipoAnnualita,1) + 'Â°') AS TipoAnnualita, DataAvvio, DataFine, Durata FROM t_TipoAnnualita RIGHT OUTER JOIN t_TipoFormativoInterno INNER JOIN t_Sedi INNER JOIN t_PianoServizi ON t_Sedi.IDsede = t_PianoServizi.FK_SedeEdizione ON t_TipoFormativoInterno.IDtformaint = t_PianoServizi.FK_TipoFormativoInterno ON  t_TipoAnnualita.IDtanno = t_PianoServizi.FK_Anno WHERE DataAvvio>=" + FunzStringa.StrDataSQL("01/09/" + Strings.Mid(cmbAnnoAmm.Text, 1, 4), FlagSqlServer: true) + " AND DataAvvio<=" + FunzStringa.StrDataSQL("31/08/" + Strings.Mid(cmbAnnoAmm.Text, 6, 4), FlagSqlServer: true) + "  AND FK_SedeEdizione " + tblSedi.StringaFiltroIN("IDsede") + " ORDER BY SiglaSede, DataAvvio, CodiceEdizione ";
PerseoNET/frmDettProfiloUtente.cs:					origineDati = "SELECT t_PianoServizi.IDedizione, EdizioneAttiva, SiglaSede, DescrEdizione, CodiceEdizione, TipoFormativoInterno, (LEFT(TipoAnnualita,1) + 'Â°') AS TipoAnnualita, DataAvvio, DataFine, Durata FROM t_PersonaleEdizioniVisibili INNER JOIN t_TipoFormativoInterno INNER JOIN t_Sedi INNER JOIN t_PianoServizi ON t_Sedi.IDsede = t_PianoServizi.FK_SedeEdizione ON t_TipoFormativoInterno.IDtformaint = t_PianoServizi.FK_TipoFormativoInterno ON  t_PersonaleEdizioniVisibili.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno WHERE FK_Persona=" + Conversions.ToString(FormLog.ChiavePrimaria) + " AND DataAvvio>=" + FunzStringa.StrDataSQL("01/09/" + Strings.Mid(cmbAnnoAmm.Text, 1, 4), FlagSqlServer: true) + " AND DataAvvio<=" + FunzStringa.StrDataSQL("31/08/" + Strings.Mid(cmbAnnoAmm.Text, 6, 4), FlagSqlServer: true) + " ORDER BY  SiglaSede, DataAvvio,CodiceEdizione ";
PerseoNET/clsTblRiferimenti.cs:				string origineDati = "SELECT IDstruttura, FK_Progetto, FK_TipoAreaModulo, IndAreaModulo, DescrAreaModulo, OreAreaModulo, TolleranzaOreModulo, IDstruttdisc, FK_TipoDisciplina, IndDisciplina, DescrDisciplina, StrTipoAttivita, OreDisciplina, TolleranzaOreDisciplina FROM wt_StruttureModuli LEFT OUTER JOIN wt_StruttureModuliDiscipline ON wt_StruttureModuli.IDstruttura = wt_StruttureModuliDiscipline.FK_ModuloStruttura ORDER BY FK_Progetto, IndAreaModulo, DescrAreaModulo, IndDisciplina, DescrDisciplina ";
PerseoNET/clsTblRiferimenti.cs:				origineDati = "SELECT IDstruttura, FK_Progetto, FK_TipoAreaModulo, IndAreaModulo, DescrAreaModulo, OreAreaModulo, TolleranzaOreModulo, IDstruttdisc, FK_TipoDisciplina, IndDisciplina, DescrDisciplina, StrTipoAttivita, OreDisciplina, TolleranzaOreDisciplina FROM wt_StruttureModuli ";
PerseoNET/clsTblRiferimenti.cs:					string origineDati = "SELECT IDtattivita, IndTG, IndTA, IndTCat, TipoGruppo, TipoAttivita, TipoCategoria, TipoCategoriaRisorsa, Aula, Primaria, Secondaria, VincoloOrario, MonteOreEdizione, PresenzaOFA, PresenzaINAIL, AttivitaPIP, ContrattoAula, RegistrazioneEstesa, FinanziamentoExtra, BonusDipendente, MaxStudenti, IscrittiSostegno, CompensoUnico, MaxCambioCompenso, AttivitaPendolo, EreditaApprovate, DettaglioEdizione_LI, FAD, Obsoleto FROM t_TipoAttivitaEdizione ORDER BY IndTG, IndTCat, TipoCategoria, IndTA, TipoAttivita ";
PerseoNET/clsTblRiferimenti.cs:					origineDati = "SELECT IDtattivita, IndTG, IndTA, IndTCat, TipoGruppo, TipoAttivita, TipoCategoria, TipoCategoriaRisorsa, Aula, Primaria, Secondaria, VincoloOrario, MonteOreEdizione, PresenzaOFA, PresenzaINAIL, AttivitaPIP, ContrattoAula, RegistrazioneEstesa, FinanziamentoExtra, BonusDipendente, MaxStudenti, IscrittiSostegno, CompensoUnico, MaxCambioCompenso, AttivitaPendolo, EreditaApprovate, DettaglioEdizione_LI, FAD, Obsoleto FROM t_TipoAttivitaEdizione ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtconvderoga, TipoAttivazioneDeroga, IntDeroga, NumTirociniAmmessi, Obsoleto FROM t_TipoConvenzioneAttivazioneDeroga";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtindennitacorrisposta, TipoIndennitaCorrisposta, IndTIC, Obsoleto FROM t_TipoStageIndennitaCorrisposta ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtdisciplina, TipoDescrizioneDisciplina, FK_TipoFormativo, FK_Progetto, Base, Trasversale, TecnicoProfessionale, Obsoleto FROM t_TipoDescrizioneDisciplina ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtconvenzione, IndTCS, TipoConvenzione, DescrTipoConvenzione, EtaMinima, DurataMesi, CurriculareDDIF, ResidenteEstero, ExtraCurriculare, Curriculare, IndennitaMIN, IndennitaPastoMIN, IndennitaParzialeMIN, IndennitaMAX, ObbligoIndennita, DescrRifDecreto, Comunicazioni, RegolaProroga, PagareGiorniINAIL, ObbligoSedeRegione, StagePagamento, DurataMesiTirocinio, TutorAziendaMaxTir, RetroDatabile, Obsoleto FROM t_TipoConvenzioneStage ORDER BY IndTCS ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtstirocinante, TipoStatoTirocinante, DescrTipoStatoTirocinante, IndTSTIR, IndennitaFacoltativa, Obsoleto FROM t_TipoStatoTirocinante ORDER BY IndTSTIR ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtdipedesestage, TipoDipendentiSedeStage, IntTDSS, MaxExtraCurrAttivi, Obsoleto FROM t_TipoDipendentiSedeStage ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDttutoraz, TipoPosizioneTutorAzienda, IndTPTA, Obsoleto FROM t_TipoPosizioneTutorAzienda ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtmodoversa, IndTMV, TipoModoVersamento, DescrQuietanza, Voucher, Obsoleto FROM t_TipoModoVersamento ORDER BY IndTMV ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtprogetto, TipoProgetto, DescrTipoProgetto, StrutturaPredefinita, Obsoleto FROM t_TipoProgetto ORDER BY TipoProgetto ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtarg, IndTipoArg, TipoArgomento, SicurezzaGenerale, SicurezzaSpecifica, Base, Professionale, Certificabile, Obsoleto FROM t_TipoArgomento ORDER BY IndTipoArg, TipoArgomento ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtmodulo, IndTipoMod, TipoModulo, CodiceTM, Base, Professionale, Obsoleto FROM t_TipoModulo ORDER BY IndTipoMod, TipoModulo ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtstage, TipoAttivitaStage, Individuale, Gruppo, IndTAS, PIP, Stage, PagaINAIL, SicurezzaGenerale, SicurezzaSpecifica, Obsoleto FROM t_TipoAttivitaStage ORDER BY IndTAS, IDtstage ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtritiro, IndMR, TipoMotivoRitiro, Obsoleto FROM t_TipoMotivoRitiro ORDER BY IndMR, TipoMotivoRitiro ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtslav, IndTSL, TipoStatoLav, TipoStatoLavEsteso, DescrCertificazione, ID_MW, Obsoleto FROM t_TipoStatoLav ORDER BY IndTSL, TipoStatoLav ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtformag, TipoFormaGiuridica, SiglaTFG, IndTFG, VerificaDelegaFormazione, SenzaPIVA, PIVAEstero, Obsoleto FROM t_TipoFormaGiuridica ORDER BY IndTFG, TipoFormaGiuridica ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtnaz, IndNaz, TipoNazionalita, IDtnazMW, Obsoleto FROM t_TipoNazionalita ORDER BY IndNaz ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtlivcontrdoc, TipoLivelloDocInterno, CodiceLivelloDoc, Docenza, LetteraIncarico, Obsoleto FROM t_TipoLivelloDocenteInterno ORDER BY CodiceLivelloDoc ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtsettin, TipoSettoreInt, IndTSI, StageModelloDedicato, Obsoleto FROM t_TipoSettoreInterno ORDER BY TipoSettoreInt ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtanno, TipoAnnualita, Obsoleto FROM t_TipoAnnualita ORDER BY TipoAnnualita ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtdurata, TipoDurataAnni, NumeroAnni, Obsoleto FROM t_TipoDurataAnni ORDER BY NumeroAnni ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtcommissione, TipoCommissione, PagamentoPresenza, PagamentoSessione, PagamentoAltriCosti, Obsoleto FROM t_TipoCommissioneEsame ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtruoloaz, IndTRA, TipoRuoloAz, Obsoleto FROM t_TipoRuoloAziendale ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtdoc, TipoDocumento, IndTipoDoc, DocRiconoscimento, DurataMesiMax, ObbligoDataScadenza, CV, AttestazioneAnnuale, CertificazioneStudente, Personale, Studente, Azienda, AttestatoPercorso, Obsoleto FROM t_TipoDocumento ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtaliquosepa, TipoAliquotaPrevSepa, Obsoleto FROM t_TipoAliquotaPrevidenzaSeparata ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtoresicurezza, TipoLivello, OrePreviste, Titolo, SottoTitolo, FileLoghi, NoteCertificato, DescrSettore, LivelloGenerale, LivelloSpecifico, LivelloSpecificoCombo, Aggiornamento, RiferimentoLegge, DataObsoleto, Obsoleto FROM t_TipoSicurezzaLivello ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtcertsicurezza, FK_Livello, DescrContenuto, DescrContenutoDettaglio, DescrRiferimento, OrePreviste, Ordinale, DataValidita, Obsoleto FROM t_TipoSicurezzaContenuti ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtnondispo, TipoCausaNonDispo, IndTCND, Obsoleto FROM t_TipoCausaNonDisponibile ";
PerseoNET/clsTblRiferimenti.cs:						origineDati = "SELECT IDtsetprod, OrdArea, OrdSett, TipoAreaProduttiva, TipoSettoreProd, Obsoleto FROM t_TipoSettoreProduttivo ";
PerseoNET/clsTblRiferimenti.cs:					origineDati = "SELECT IDtruolodoc, IndTRD, TipoRuoloDocente, Aula, Parcelle, Obsoleto FROM t_TipoRuoloDocente ";
PerseoNET/clsTblRiferimenti.cs:					origineDati = "SELECT IDtlivstudioMW, TipoLivelloMW, ID_MW, LivelloMW, DescrizioneObbligatoria, IndStage, DescrEquivalenteEQF, LivelloEQF, ClassificazioneEQF, Obsoleto FROM t_TipoLivelloTitoloMW ORDER BY LivelloMW DESC ";
PerseoNET/clsTblRiferimenti.cs:					origineDati = "SELECT IDtgettone, FK_TipoCommissione, TipoGettone, ValoreGettone, SiglaRuolo, DescrRuolo, TipoPresenza, Obsoleto FROM t_TipoGettonePresenzaEsami ";
PerseoNET/clsTblRiferimenti.cs:					origineDati = "SELECT IDtformaint, TipoFormativoInterno, IndicareDurataOre, RecuperoOFA, SoloFunzioniAggiuntive, SpecificoIndividuale, MaxCostoOraDocEstDDIF, MaxCostoOraDocEst, MaxCostoOraFAEstDDIF, MaxCostoOraFAEst, PagaGiorniINAIL, ClasseRischioINAIL, MantieniLetteraIncaricoCR, RilascioAttestatoPubblico, EdizioneAmpliamento, Obsoleto FROM t_TipoFormativoInterno ORDER BY TipoFormativoInterno ";
PerseoNET/clsTblRiferimenti.cs:					vSQL = "SELECT IDtcausaparce, IndTPA, TipoCausaleParcella, Obsoleto FROM t_TipoCausaleParcella ";
PerseoNET/clsTblRiferimenti.cs:					vSQL = "SELECT IDtfasciadoc, IndFDOC, TipoFasciaDOC, MaxCostoDocenza, MaxCostoCodocenza, MaxCostoAltro, Obsoleto FROM t_TipoFasciaDocenteEsterno ORDER BY IndFDOC";
PerseoNET/clsTblRiferimenti.cs:					vSQL = "SELECT IDtaltrainps, TipoAltraAssINPS, CodiceAssINPS, Obsoleto FROM t_TipoAltraAssicurazioneINPS ORDER BY CodiceAssINPS, TipoAltraAssINPS ";
PerseoNET/clsTblRiferimenti.cs:					vSQL = "SELECT IDtestdipe, IndTDIP, TipoDipendente, SenzaCF, Obsoleto FROM t_TipoDipendenteDocEsterno ";
PerseoNET/clsTblRiferimenti.cs:					string origineDati = "SELECT IDtstage, TipoAttivitaStage, Individuale, Gruppo, IndTAS, PIP, Stage, PagaINAIL, SicurezzaGenerale, SicurezzaSpecifica, FK_ModelloCertificazione, Obsoleto FROM t_TipoAttivitaStage ORDER BY IndTAS, IDtstage ";
PerseoNET/clsTblRiferimenti.cs:					stringa = "SELECT IDtfasciadoc, TipoFasciaDOC, MaxCostoDocenza, MaxCostoCodocenza, MaxCostoAltro FROM t_TipoFasciaDocenteEsterno WHERE " + vCampo + "='" + FunzStringa.StringaSQL(stringa) + "' ";
PerseoNET/clsTblRiferimenti.cs:					stringa = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtfasciadoc, TipoFasciaDOC, MaxCostoDocenza, MaxCostoCodocenza, MaxCostoAltro FROM t_TipoFasciaDocenteEsterno WHERE " + vCampo + "=", vValore));
PerseoNET/clsTblRiferimenti.cs:							text = ((!((Strings.Len(strCAP) == 4) & (Operators.CompareString(Strings.Left(strCAP, 1), "A", TextCompare: false) >= 0) & (Operators.CompareString(Strings.Left(strCAP, 1), "Z", TextCompare: false) < 0))) ? ("SELECT Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni WHERE Cap='" + strCAP + "' ") : ("SELECT Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni WHERE CodiceComune='" + strCAP + "' "));
PerseoNET/clsTblRiferimenti.cs:						text = "SELECT Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni WHERE Cap='" + FunzStringa.StringaSQL(strComune) + "' ";
PerseoNET/clsTblRiferimenti.cs:						text = "SELECT CodiceNazione, DescrNazione, (TipoNazionalita) AS ProvenienzaGeografica, FK_ProvenienzaGeo FROM t_TipoNazioniCF LEFT OUTER JOIN t_TipoNazionalita ON t_TipoNazioniCF.FK_ProvenienzaGeo = t_TipoNazionalita.IDtnaz WHERE DescrNazione='" + FunzStringa.StringaSQL(strNazione) + "' ";
PerseoNET/clsBando.cs:					string origineDati = "SELECT IDbando, FK_TipoBando, DescrBando, DescrEstesaBando, CodiceBando, AnnoBando, DataBando, DescrDecreto, DelegaAzienda, ObbligatorioEdizioneID, ObbligatorioID, BandoAttivo FROM t_Bandi WHERE IDbando=" + Conversions.ToString(value);
PerseoNET/clsConvenzioneStage.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento, FK_Studente, FK_Iscrizione, TipoDocumento, DataPubblicazione, DescrDocumento, Redattore, CodiceDoc FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Studente=", this.get_CampoConvAziendaStudente((object)"IDutente")), " "), "AND TipoDocumento='Certificazione SICUREZZA GENERALE' "), "ORDER BY DataPubblicazione DESC "));
PerseoNET/clsConvenzioneStage.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDedizione, DescrEdizione, CodiceEdizione, FK_Anno, DescrSede, ComuneSede, IndirizzoSede, CAPsede, PROVsede FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDiscrizione=", clsTblDatiDR.get_Campo((object)"FK_Iscrizione")));
PerseoNET/clsConvenzioneStage.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento, FK_Studente, FK_Iscrizione, TipoDocumento, DataPubblicazione, DescrDocumento, Redattore, CodiceDoc FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Studente=", this.get_CampoConvAziendaStudente((object)"IDutente")), " "), "AND TipoDocumento='Certificazione SICUREZZA SPECIFICA' "), "ORDER BY DataPubblicazione DESC "));
PerseoNET/clsConvenzioneStage.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDedizione, DescrEdizione, CodiceEdizione, FK_Anno, DescrSede, ComuneSede, IndirizzoSede, CAPsede, PROVsede FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDiscrizione=", clsTblDatiDR.get_Campo((object)"FK_Iscrizione")));
PerseoNET/clsConvenzioneStage.cs:								string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT DescrRegione FROM t_TipoComuni WHERE Comune='" + FunzStringa.StringaSQL(Conversions.ToString(mvConvAziendaStudente.get_Campo((object)"ComSedeAz"))) + "' AND Prov='", mvConvAziendaStudente.get_Campo((object)"ProvSedeAz")), "' "));
PerseoNET/clsConvenzioneStage.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvob, FK_Convenzione, IDconoabi, IDcompestd FROM t_ConvenzioniStageObiettivi INNER JOIN t_ProfessioniConoAbiRL ON t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita = t_ProfessioniConoAbiRL.IDconoabi INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniConoAbiRL.FK_Competenza = t_ProfessioniCompetenzeRL.IDcompestd WHERE FK_Convenzione=", this.get_CampoConvAziendaStudente((object)"IDconvenzione")), " "), "ORDER BY IDcompestd, Tipo DESC "));
PerseoNET/clsConvenzioneStage.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtconvenzione FROM t_TipoConvenzioneStage WHERE RegolaProroga=True AND IDtconvenzione=", this.get_CampoConvAziendaSede((object)"FK_TipoConvenzione")));
PerseoNET/clsConvenzioneStage.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, IDconvazienda, DataAvvio, DataFine, DataProlungamento, DataInterruzione, VariazioneDurataStage, DataSospeso, DataRipresa, DataRipresaProroga, (t_AziendeSediFormativeConvenzioni.FK_Azienda) AS IDazienda FROM t_AziendeSediFormativeConvenzioni INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione INNER JOIN t_ConvenzioniStage ON t_AziendeSediFormativeConvenzioni.IDconvazienda = t_ConvenzioniStage.FK_ConvenzioneAzienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE FK_Utente=" + Conversions.ToString(vIDstudente) + " AND RegolaProroga=1 AND t_AziendeSediFormativeConvenzioni.FK_Azienda=", this.get_CampoConvAziendaSede((object)"IDazienda")), " "), "ORDER BY DataFine DESC "));
PerseoNET/clsConvenzioneStage.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDvartir, FK_ConvenzioneProgetto, FK_Corrente, Tipo, DataVariazione FROM t_ConvenzioniStageVariazioni WHERE SedeTirocinio=1 AND DataVariazione=" + FunzStringa.StrDataSQL(vStrData, FlagSqlServer: true) + " AND FK_Corrente=" + Conversions.ToString(id_new) + " AND FK_Precedente=" + Conversions.ToString(id_old) + " AND Tipo='sede tir' AND FK_ConvenzioneProgetto=", this.get_CampoConvAziendaStudente((object)"IDconvenzione")));
PerseoNET/clsConvenzioneStage.cs:				vSQL = "SELECT IDsedeaz, IndirSedeAz, CAPSedeAZ, ComSedeAz, ProvSedeAz, DescrSedeAzienda, NazioneSedeAz, TelSedeAz_1, EmailSedeAz FROM t_SediAziende WHERE IDsedeaz=" + Conversions.ToString(id_new) + " And Attiva=1 ";
PerseoNET/clsConvenzioneStage.cs:				vSQL = "SELECT IDsedeaz, IndirSedeAz, CAPSedeAZ, ComSedeAz, ProvSedeAz, DescrSedeAzienda, NazioneSedeAz, TelSedeAz_1, EmailSedeAz FROM t_SediAziende WHERE IDsedeaz=" + Conversions.ToString(id_old) + " And Attiva=1 ";
PerseoNET/clsConvenzioneStage.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDvartir, FK_ConvenzioneProgetto, FK_Corrente, Tipo, DataVariazione FROM t_ConvenzioniStageVariazioni WHERE TutorAzienda=1 AND DataVariazione=" + FunzStringa.StrDataSQL(vStrData, FlagSqlServer: true) + " AND FK_Corrente=" + Conversions.ToString(id_new) + " AND FK_Precedente=" + Conversions.ToString(id_old) + " AND Tipo='tutor azienda' AND FK_ConvenzioneProgetto=", mvConvAziendaStudente.get_Campo((object)"IDconvenzione")));
PerseoNET/clsConvenzioneStage.cs:				vSQL = "SELECT t_ReferentiAziende.IDreferaz, ComSedeAz, ProvSedeAz, IndirSedeAz, (Cognome + ' ' + Nome) AS Referente, TelRef_1, TelRef_2, FaxRefAz, EmailRefAz FROM t_ReferentiAziende INNER JOIN t_SediAziende ON t_ReferentiAziende.FK_SedeAzienda = t_SediAziende.IDsedeaz LEFT OUTER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz WHERE IDreferaz=" + Conversions.ToString(id_new);
PerseoNET/clsConvenzioneStage.cs:				vSQL = "SELECT t_ReferentiAziende.IDreferaz, ComSedeAz, ProvSedeAz, IndirSedeAz, (Cognome + ' ' + Nome) AS Referente, TelRef_1, TelRef_2, FaxRefAz, EmailRefAz FROM t_ReferentiAziende INNER JOIN t_SediAziende ON t_ReferentiAziende.FK_SedeAzienda = t_SediAziende.IDsedeaz LEFT OUTER JOIN t_TipoRuoloAziendale ON t_ReferentiAziende.FK_RuoloAz = t_TipoRuoloAziendale.IDtruoloaz WHERE IDreferaz=" + Conversions.ToString(id_old);
PerseoNET/clsConvenzioneStage.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDvartir, FK_ConvenzioneProgetto, FK_Corrente, Tipo, DataVariazione FROM t_ConvenzioniStageVariazioni WHERE Tutor=1 AND DataVariazione=" + FunzStringa.StrDataSQL(vStrData, FlagSqlServer: true) + " AND FK_Corrente=" + Conversions.ToString(id_new) + " AND FK_Precedente=" + Conversions.ToString(id_old) + " AND Tipo='tutor didattico' AND FK_ConvenzioneProgetto=", mvConvAziendaStudente.get_Campo((object)"IDconvenzione")));
PerseoNET/clsConvenzioneStage.cs:				vSQL = "SELECT t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS Tutor, TelTutorStage, EmailTutorStage FROM t_Docenti WHERE IDdocente=" + Conversions.ToString(id_new);
PerseoNET/clsConvenzioneStage.cs:				vSQL = "SELECT t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS Tutor, TelTutorStage, EmailTutorStage FROM t_Docenti WHERE IDdocente=" + Conversions.ToString(id_old);
PerseoNET/clsConvenzioneStage.cs:						string origineDati = "SELECT IDconvenzione, DescrAzienda FROM t_ConvenzioniStage";
PerseoNET/clsConvenzioneStage.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Iscrizioni.IDiscrizione, IDconvenzione, FK_Edizione, DescrAzienda, DataAvvio, DataFine, DataInterruzione, DataProlungamento, DurataStage, VariazioneDurataStage, ExtraCurriculare FROM t_Iscrizioni INNER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda=t_Aziende.IDazienda WHERE FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY IDiscrizione, DataAvvio, DataFine "));
PerseoNET/clsConvenzioneStage.cs:						string origineDati = "SELECT IDconvenzione, FK_ConvenzioneAzienda, FK_Tutor, DescrQualificaUscita, DurataStage, GiorniStage, MaxOreGiorno, MaxOreSettimana, DescrAmbitoStage, FK_ClasseINAIL, DescrAttivitaPreviste, GiorniStage, DataAvvio, DataFine FROM t_ConvenzioniStage WHERE IDconvenzione=" + Conversions.ToString(mvPKConvenzioneCopiaObiettivi);
PerseoNET/clsConvenzioneStage.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDconvazienda, Curriculare, CurriculareDDIF FROM t_AziendeSediFormativeConvenzioni INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE (Curriculare=1 OR CurriculareDDIF=1) AND IDconvazienda=", clsTblDatiDR.get_Campo((object)"FK_ConvenzioneAzienda")));
PerseoNET/clsConvenzioneStage.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT Cognome, Nome FROM t_Docenti WHERE IDdocente=", clsTblDatiDR.get_Campo((object)"FK_Tutor")));
PerseoNET/clsConvenzioneStage.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_ConvenzioniStageObiettivi(FK_TipoObiettivo, FK_Convenzione, FK_ConoscenzaAbilita, IndObStage, DescrObiettivoStage, DescrCompetenza, DescrQuadroRiferimento, DescrUF, DescrAttivitaStage, Livello_EQF) SELECT FK_TipoObiettivo, (", this.get_CampoConvAziendaStudente((object)"IDconvenzione")), ") AS  FK_Convenzione, FK_ConoscenzaAbilita, IndObStage, DescrObiettivoStage, "), "DescrCompetenza, DescrQuadroRiferimento, DescrUF, DescrAttivitaStage, Livello_EQF "), "FROM t_ConvenzioniStageObiettivi WHERE FK_Convenzione="), mvPKConvenzioneCopiaObiettivi));
PerseoNET/clsConvenzioneStage.cs:				string origineDati = "SELECT IDconvazienda, FK_TipoForma, (FK_SedeFormativa) AS IDsede, t_Aziende.IDazienda, FK_TipoConvenzione, AnnoFormativo, ConvenzioneAzienda, DataConvenzione, DataScadenza, NumeroStudentiPrevisti, ResidenteEstero, NazioneStudenteEstero, ComunicaAvvioAzienda, ComunicaAvvioCSF, AltriMotiviRecesso, ModoComunicaRecesso, DecorrenzaRecesso, FirmatarioAzienda, AttestatoAttivitaStage, CertificazioneCompetenze, IndennitaStudenteAzienda, FormSicurGenAzienda, FormSicurGenCSF, FormSicurSpecAzienda, FormSicurSpecCSF, ConvenzioneAttiva, DescrAzienda, t_Aziende.PIVA, t_Aziende.CodFiscale, CodiceIscrCCIAA, ComuneCCIAA, DataIscrCCIAA, CodiceATECO, DescrCCNL, DocValutazioneRischi, RSPP, MedicoCompetente, AddettoIncendioSoccorso, PianoEvacuazione, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, TelSedeAz_2, FaxSedeAz, EmailSedeAz, PosizioneINAIL, Cognome, Nome, DataNascita, LuogoNascita, ProvNascita, NazNascita, CF_RapprLegale, ResidenzaRapprLegale, DomiciliatoRapprLegale, DocIdeRapprLegale, NumDocIdeRapprLegale, DataDocIdeRapprLegale, ComuneDocIdeRapprLegale, TelRef_1, TelRef_2, FaxRefAz, EmailRefAz, RapprLegale, DescrRuolo, TipoSettoreProd, PubblicaAmministrazione, SorveSanitariaAzienda, SorveSanitariaCSF, LinguaItaliana, IndennitaStudenteAltri, AltroSettore, RimborsoIndennita, FK_TipoLogo, CertificazioneSicGen, CertificazioneSicSpec, FileSchedaAziendaPDF, IndennitaStudentePromotore, TipoFormaGiuridica FROM t_AziendeSediFormativeConvenzioni INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_SediAziende ON t_Aziende.IDazienda = t_SediAziende.FK_Azienda INNER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod INNER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag LEFT OUTER JOIN v_RappresentanteLegaleAziende ON t_Aziende.IDazienda = v_RappresentanteLegaleAziende.IDazienda WHERE FK_TipoSede=1 AND t_SediAziende.Attiva=1 AND Attivo=1 AND IDconvazienda=" + Conversions.ToString(vIDconvenzione) + " ";
PerseoNET/clsConvenzioneStage.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtconvenzione, IndTCS, TipoConvenzione, DescrTipoConvenzione, EtaMinima, DurataMesi, CurriculareDDIF, ResidenteEstero, ExtraCurriculare, Curriculare, IndennitaMIN, IndennitaPastoMIN, IndennitaParzialeMIN, IndennitaMAX, ObbligoIndennita, DescrRifDecreto, Comunicazioni, RegolaProroga, PagareGiorniINAIL, ObbligoSedeRegione, StagePagamento, DurataMesiTirocinio, TutorAziendaMaxTir, Obsoleto FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", mvConvAziendaSede.get_Campo((object)"FK_TipoConvenzione")));
PerseoNET/clsConvenzioneStage.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, FK_Utente FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE FK_ConvenzioneAzienda=", mvConvAziendaSede.get_Campo((object)"IDconvazienda")), " "));
PerseoNET/clsConvenzioneStage.cs:					string origineDati = "SELECT IDconvenzione, (FK_Utente) AS IDutente, FK_Tutor, FK_TipoForma, IDazienda, (FK_SedeFormativa) AS IDsede, IDsedeaz, FK_TipoConvenzione, FK_LivelloSpecificoSicurezza, NumAltriTirocinanti, CreditiSicurezzaGen, CreditiSicurezzaSpec, ContenutiSicurSpec, ProtocolloConv, DataProtocollo, NumeroConv, AnnoFormativo, DataConvenzione, DataScadenza, DataAvvio, DataFine, DataInterruzione, MaxOreGiorno, MaxOreSettimana, DurataStage, GiorniStage, GiorniRientro, NoteStage, DescrFacilitazioni, NoteAltreSediStage, DataStampaConvenzione, (t_ReferentiAziende.Cognome + ' ' +  t_ReferentiAziende.Nome) AS TutorAzienda, TelRef_1, TelRef_2, FaxRefAz, EmailRefAz, DescrEsperienzaProf, AnniEsperienzaProf, (SELECT TipoRuoloAz FROM t_TipoRuoloAziendale WHERE IDtruoloaz=FK_RuoloAz) AS RuoloLivelloTutor, DescrSedeAzienda, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, TelSedeAz_2, FaxSedeAz, EmailSedeAz, PosizioneINAIL, DescrAzienda, t_Aziende.PIVA, t_Aziende.CodFiscale, TipoAreaProduttiva, TipoSettoreProd, (NULL) AS DescrQualifica, StagePagamento, (CASE WHEN CompensoStage IS NOT NULL THEN CompensoStage ELSE 0 END) AS CompensoStage, DataAccordoEconomico, ProtocolloAccordo, OrdineAzienda, GiorniPagare, NumeroStudentiPrevisti, (NULL) AS DescrContestoStraniero, (NULL) AS ProgrammaStraniero, (NULL) AS AreaAttivitaStraniero, ImportoIndennita, DescrValutaCompe, DescrCertCompe, DescrCertSicurezza, DescrAmbitoStage, CodiceIscrCCIAA, ComuneCCIAA, DataIscrCCIAA, DocValutazioneRischi, RSPP, MedicoCompetente, AddettoIncendioSoccorso, PianoEvacuazione, TipoSettoreProd, DescrCCNL, CodiceATECO, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS Tutor, TelTutorStage, EmailTutorStage, TipoPosizioneTutorAzienda, ComunicaAvvioAzienda, ComunicaAvvioCSF, AltriMotiviRecesso, ModoComunicaRecesso, FirmatarioAzienda, AttestatoAttivitaStage, CertificazioneCompetenze, FormSicurGenAzienda, FormSicurGenCSF, FormSicurSpecAzienda, FormSicurSpecCSF, IndennitaStudenteAzienda, (CASE WHEN FK_TipoStudio IS NOT NULL THEN DescrTitoloStudio ELSE NULL END) AS DescrTitoloStudio, FK_TipoStudio, DescrQualificaUscita, NumeroDipendenti, NoteInterruzione, DataSospesoDal, DataSospesoAl, AnnoPresenzaRegione, t_ConvenzioniStage.Indennita, DescrIndennita, NumStudentiTutorAzienda, CertificareCompetenze, CertificareConoscenze, DescrRuolo, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, AziendaPosizioneINAIL, AziendaDescrINAIL, DataProlungamento, DescrVariazioni, FileAccordoEconomicoPDF, FK_TutorAzienda, IDconvazienda, (SELECT TipoIndennitaCorrisposta FROM t_TipoStageIndennitaCorrisposta WHERE IDtindennitacorrisposta=FK_TipoIndennita) AS TipoIndennita, (SELECT TipoDipendentiSedeStage FROM t_TipoDipendentiSedeStage WHERE IDtdipedesestage=FK_NumeroDipendenti) AS NumeroDipendentiSedeStage, (SELECT TipoAttivazioneDeroga FROM t_TipoConvenzioneAttivazioneDeroga WHERE IDtconvderoga=FK_TipoAttivazioneDeroga) AS TipoAttivazioneDeroga, (SELECT TipoStatoTirocinante FROM t_TipoStatoTirocinante WHERE IDtstirocinante=FK_TipoStatoTirocinante) AS TipoStatoTirocinante, IndennitaPromotore, IndennitaAzienda, BuoniPasto, Mensa, DescrAttivitaPreviste, NumeroExtraCurrAttivi, OraIngressoM, OraUscitaM, OraIngressoP, OraUscitaP, NumeroAddettiSede, LivelloTitoloStudio, (CF_RapprLegale) AS CF_TutorAzienda, (t_Docenti.CodFiscale) AS CF_Tutor, FK_SedeStage, IDiscrizione, DataSospeso, DataRipresa, DataRipresaProroga, IndennitaRipresa, MaxOreSettimanaRipresa, t_ConvenzioniStage.DataModifica FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_SediAziende ON t_ConvenzioniStage.FK_SedeStage = t_SediAziende.IDsedeaz And t_Aziende.IDazienda = t_SediAziende.FK_Azienda INNER JOIN t_ReferentiAziende ON t_ConvenzioniStage.FK_TutorAzienda = t_ReferentiAziende.IDreferaz INNER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod INNER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag INNER JOIN t_Docenti ON t_ConvenzioniStage.FK_Tutor = t_Docenti.IDdocente LEFT OUTER JOIN t_TipoPosizioneTutorAzienda ON t_ReferentiAziende.FK_TipoPosizioneTutor = t_TipoPosizioneTutorAzienda.IDttutoraz WHERE IDconvenzione=" + Conversions.ToString(vIDconvenzione) + " ";
PerseoNET/clsConvenzioneStage.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtconvenzione, IndTCS, TipoConvenzione, EtaMinima, DurataMesi, DurataMesiTirocinio, AllegatoDDIF, Obsoleto FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", mvConvAziendaStudente.get_Campo((object)"FK_TipoConvenzione")), " "));
PerseoNET/clsConvenzioneStage.cs:						string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, FK_Iscrizione, DataAvvio FROM t_AziendeSediFormativeConvenzioni INNER JOIN t_ConvenzioniStage ON t_AziendeSediFormativeConvenzioni.IDconvazienda = t_ConvenzioniStage.FK_ConvenzioneAzienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE IDconvazienda=" + Conversions.ToString(num2) + " AND ExtraCurriculare=1 AND FK_Iscrizione=", Variabili.Edizione.get_CampoIscrizione((object)"IDiscrizione")), " "), "AND DataConvenzione<"), FunzStringa.StrDataSQL(Variabili.StrDataDecretoTirocini, FlagSqlServer: true)), " "), "ORDER BY DataAvvio DESC "));
PerseoNET/clsConvenzioneStage.cs:				string origineDati = "SELECT IDconvenzione, (FK_Utente) AS IDutente, FK_Tutor, FK_TipoForma, IDazienda, (FK_SedeFormativa) AS IDsede, FK_TipoConvenzione, FK_TipoDipendentiSede, SelezioneMultiplaTipo, ProtocolloConv, DataProtocollo, NumeroConv, AnnoFormativo, DataConvenzione, DataScadenza, DataAvvio, DataFine, DataInterruzione, OraIngressoM, OraUscitaM, OraIngressoP, OraUscitaP, Settimane, DurataStage, GiorniStage, GiorniRientro, NoteStage, DescrFacilitazioni, NoteAltreSediStage, DataStampaConvenzione, (t_ReferentiAziende.Cognome + ' ' +  t_ReferentiAziende.Nome) AS TutorAzienda, TelRef_1, TelRef_2, FaxRefAz, EmailRefAz, DescrSedeAzienda, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, TelSedeAz_2, FaxSedeAz, EmailSedeAz, PosizioneINAIL, DescrAzienda, t_Aziende.PIVA, t_Aziende.CodFiscale, TipoAreaProduttiva, TipoSettoreProd, DescrQualificaUscita, StagePagamento, (CASE WHEN CompensoStage IS NOT NULL THEN CompensoStage ELSE 0 END) AS CompensoStage, DataAccordoEconomico, ProtocolloAccordo, OrdineAzienda, GiorniPagare, NumeroStudentiPrevisti, DescrContestoStraniero, ProgrammaStraniero, AreaAttivitaStraniero, Mesi, OreSettimana, ImportoIndennita, DescrValutaCompe, DescrCertCompe, DescrCertSicurezza, DescrAmbitoStage, CodiceIscrCCIAA, ComuneCCIAA, DataIscrCCIAA, DocValutazioneRischi, RSPP, MedicoCompetente, AddettoIncendioSoccorso, PianoEvacuazione, TipoSettoreProd, DescrCCNL, CodiceATECO, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS Tutor, TelTutorStage, EmailTutorStage, TipoPosizioneTutorAzienda, AltriMotiviRecesso, ModoComunicaRecesso, FirmatarioAzienda, AttestatoAttivitaStage, CertificazioneCompetenze, FormSicurGenAzienda, FormSicurGenCSF, FormSicurSpecAzienda, FormSicurSpecCSF, IndennitaStudenteAzienda, IndennitaStudenteCSF, DescrTipoConvenzione, MaxOreGiorno, MaxOreSettimana FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_SediAziende ON t_ConvenzioniStage.FK_SedeStage = t_SediAziende.IDsedeaz AND t_Aziende.IDazienda = t_SediAziende.FK_Azienda INNER JOIN t_ReferentiAziende ON t_ConvenzioniStage.FK_TutorAzienda = t_ReferentiAziende.IDreferaz INNER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione INNER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag INNER JOIN t_Docenti ON t_ConvenzioniStage.FK_Tutor = t_Docenti.IDdocente LEFT OUTER JOIN t_TipoPosizioneTutorAzienda ON t_ReferentiAziende.FK_TipoPosizioneTutor = t_TipoPosizioneTutorAzienda.IDttutoraz WHERE IDconvenzione<>" + Conversions.ToString(vIDconvenzione) + " AND FK_utente=" + Conversions.ToString(vIDstudente) + " AND ExtraCurriculare=1 ";
PerseoNET/clsConvenzioneStage.cs:				string origineDati = ((Operators.CompareString(VariabiliClassi.FormAttivo.Name, "frmEdizioneStudentiConvenzioni", TextCompare: false) != 0) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDassconv, FK_Sede, (CASE WHEN FK_Sede IS NULL THEN 1 ELSE 2 END) AS Ind, TitolareAssicurazione, DescrAssicurazione, PolizzaAss, FK_TipoFormativo, PolizzaAttiva FROM t_ConvenzioniStagePolizze WHERE (PolizzaAttiva=1 AND FK_Sede IS NULL) OR (PolizzaAttiva=1 AND FK_Sede=", this.get_CampoConvAziendaSede((object)"IDsede")), ") "), "ORDER BY (CASE WHEN FK_Sede IS NULL THEN 1 ELSE 2 END), FK_TipoFormativo DESC, TitolareAssicurazione, DescrAssicurazione ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDassconv, FK_Sede, (CASE WHEN FK_Sede IS NULL THEN 1 ELSE 2 END) AS Ind, TitolareAssicurazione, DescrAssicurazione, PolizzaAss, FK_TipoFormativo, PolizzaAttiva FROM t_ConvenzioniStagePolizze WHERE (PolizzaAttiva=1 AND FK_Sede IS NULL) OR (PolizzaAttiva=1 AND FK_Sede=", Variabili.Edizione.get_Campo((object)"FK_SedeEdizione")), ") "), "ORDER BY (CASE WHEN FK_Sede IS NULL THEN 1 ELSE 2 END), FK_TipoFormativo DESC, TitolareAssicurazione, DescrAssicurazione ")));
PerseoNET/clsConvenzioneStage.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdestconv, FK_Sede, PosizioneDest, DescrDestinatario, IndirizzoDestConv, ComuneDestConv, CAPDestConv, ProvDestConv, DestinatarioAttivo FROM t_ConvenzioniElencoDestinatari WHERE (DestinatarioAttivo=1 AND FK_Sede IS NULL) OR (DestinatarioAttivo=1 AND FK_Sede=", Variabili.Edizione.get_Campo((object)"FK_SedeEdizione")), ") "), "ORDER BY (CASE WHEN FK_Sede IS NULL THEN 1 ELSE 2 END), PosizioneDest "));
PerseoNET/clsConvenzioneStage.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, DurataStage, VariazioneDurataStage, DataInterruzione FROM t_ConvenzioniStage WHERE FK_Iscrizione=", Variabili.Edizione.get_CampoIscrizione((object)"IDiscrizione")), " AND IDconvenzione<>"), vIDconv));
PerseoNET/clsConvenzioneStage.cs:				string vSQL = "SELECT IDtdoc, TipoDocumento FROM t_TipoDocumento WHERE Studente=True AND CertificazioneStudente=True ";
PerseoNET/clsConvenzioneStage.cs:				string vSQL = "SELECT IDtformag, SenzaPIVA, PIVAEstero FROM t_TipoFormaGiuridica WHERE IDtformag=" + Conversions.ToString(vTipoForma);
PerseoNET/frmDettStudente.cs:						string origineDati = "SELECT IDiscrizione, IDedizione, SiglaSede, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, TipoFormativoInterno, DataAvvio, DataFine, ID_Dote, DataIscr, DataRitiro, Sostegno, Durata, OreAttivitaIndividuali, (0) AS PrevisteAula, (0) AS PrevisteStage, (0) AS PresenzaAula, (0) AS PresenzaStage, (0) AS PresenzaTotale FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE FK_Utente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " ORDER BY DataAvvio ";
PerseoNET/frmDettStudente.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDiscrizione, TipoAttivita, Aula, (SUM(Minuti)/60) AS OreSvolte FROM t_PianificazioneDocente WHERE OFA=True AND Presenza<>'A' GROUP BY IDiscrizione, TipoAttivita, Aula HAVING IDiscrizione=", tblIscr.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " "));
PerseoNET/frmDettStudente.cs:						origineDati = (clsTblDatiDR.OrigineDati = "SELECT DescrProgetto, DescrEdizione, IDmwe, DataAvvio, DataFine, DescrModulo, OreModulo, (DescrArgomento) AS Disciplina, TipoArgomento, (DescrContenutiArg) AS DettaglioContenuti, OreArgomento FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_ModuliEdizioni ON t_PianoServizi.IDedizione = t_ModuliEdizioni.FK_Edizione INNER JOIN t_ArgomentiModuli ON t_ModuliEdizioni.IDmodulo = t_ArgomentiModuli.FK_Modulo INNER JOIN t_TipoArgomento ON t_ArgomentiModuli.FK_TipoArgomento = t_TipoArgomento.IDtarg WHERE IDedizione " + str + " ORDER BY DataAvvio, IndModulo, DescrModulo, IndArgomento, DescrArgomento ");
PerseoNET/frmDettStudente.cs:				string origineDati = "SELECT IDutente, Cognome, Nome, CodFiscale, PIVA, Sesso, DataNascita, LuogoNascita, CFProvvisorio, ProvNascita, NazNascita, FK_Nazionalita, FK_StatoLav, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, NazResidenza, ComAbitazione, IndirAbitazione, CAPabitazione, ProvAbitazione, Disabile, Tel_1, Tel_2, Tel_3, Fax, Email, Omocodia, UtenteTest, StatoCivile, NoteStudente, LuogoNascitaStraniero, DataResidenzaItalia, Svantaggio, StatoDisagioSociale, Cittadinanza, CittadinanzaNonAcquisita, DataRec, DataModifica, Bloccato FROM t_Utenti WHERE IDutente=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettStudente.cs:				origineDati = "SELECT IDtnaz, TipoNazionalita FROM t_TipoNazionalita WHERE Obsoleto=False ORDER BY IndNaz";
PerseoNET/frmDettStudente.cs:				origineDati = "SELECT IDtslav, TipoStatoLav FROM t_TipoStatoLav WHERE Obsoleto=False ORDER BY TipoStatoLav";
PerseoNET/frmDettStudente.cs:				origineDati = "SELECT IDcomune, Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni ORDER BY Attivo DESC, Comune ";
PerseoNET/frmDettStudente.cs:						VariabiliClassi.Vedetta.ControlloMancanzaProtezioneRecord("SELECT IDutente, Bloccato FROM t_Utenti WHERE IDutente=" + Conversions.ToString(chiavePrimaria));
PerseoNET/frmDettStudente.cs:				string vSQL = "SELECT IDiscrizione FROM t_Iscrizioni WHERE FK_Utente=" + Conversions.ToString(FormUt.ChiavePrimaria);
PerseoNET/frmDettStudente.cs:					vSQL = ((FormUt.ChiavePrimaria == 0) ? ("SELECT IDutente, CodFiscale FROM t_Utenti WHERE CodFiscale='" + txtCodFiscale.Text + "' ") : ("SELECT IDutente, CodFiscale FROM t_Utenti WHERE IDutente<>" + Conversions.ToString(FormUt.ChiavePrimaria) + " AND CodFiscale='" + txtCodFiscale.Text + "' "));
PerseoNET/frmDettStudente.cs:						vSQL = ((FormUt.ChiavePrimaria == 0) ? ("SELECT IDutente, CodFiscale, PIVA FROM t_Utenti WHERE PIVA='" + txtPIVA.Text + "'") : ("SELECT IDutente, CodFiscale, PIVA FROM t_Utenti WHERE IDutente<>" + Conversions.ToString(FormUt.ChiavePrimaria) + " AND PIVA='" + txtPIVA.Text + "'"));
PerseoNET/frmDettStudente.cs:				vSQL = "SELECT IDtnazione, DescrNazione, DescrCittadinanza FROM t_TipoNazioniCF WHERE DescrNazione='" + FunzStringa.StringaSQL(txtCittadinanza.Text) + "' OR DescrCittadinanza='" + FunzStringa.StringaSQL(txtCittadinanza.Text) + "' ";
PerseoNET/frmDettStudente.cs:				vSQL = "SELECT IDdocumento, FK_TipoDoc, FK_Studente, FK_Iscrizione, DescrDocumento FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE TipoDocumento='Rilascio CF Provvisorio' AND FK_Studente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " ";
PerseoNET/frmDettStudente.cs:					vSQL = "SELECT IDtdoc, TipoDocumento, DurataMesiMax FROM t_TipoDocumento WHERE TipoDocumento='Rilascio CF Provvisorio' AND IndTipoDoc>=200 ";
PerseoNET/frmDettStudente.cs:										origineDati = "SELECT IDcomune, CodiceComune, Prov FROM t_TipoComuni WHERE Comune='" + FunzStringa.StringaSQL(VariabiliClassi.ComuneNascitaUtente) + "' ";
PerseoNET/frmDettStudente.cs:											origineDati = "SELECT IDcomune, CodiceComune, Prov FROM t_TipoComuni WHERE Comune='" + FunzStringa.StringaSQL(VariabiliClassi.ComuneNascitaUtente) + "' ";
PerseoNET/frmDettStudente.cs:											origineDati = "SELECT IDtnazione, CodiceNazione, ('EE') AS prov FROM t_TipoNazioniCF WHERE DescrNazione='" + FunzStringa.StringaSQL(VariabiliClassi.ComuneNascitaUtente) + "' ";
PerseoNET/frmDettStudente.cs:								string origineDati = "SELECT t_ReferentiUtente.IDrefute, (CASE WHEN Attivo=1 THEN 1 ELSE 2 END) AS Ordinale, TipoReferenteUte, (Cognome + ' ' + Nome) AS Nominativo, DescrAmmRef, TelRef_1, TelRef_2, EmailRef, ComuneAmmRef, IndirAmmRef, CAPammref, PROVammref, FirmaStageMinore, Attivo FROM t_ReferentiUtente INNER JOIN t_TipoReferenteUtente ON t_ReferentiUtente.FK_TipoRef = t_TipoReferenteUtente.IDtrefute WHERE FK_Utente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " ORDER BY (CASE WHEN Attivo=1 THEN 1 ELSE 2 END), IndTRU, (Cognome + ' ' + Nome) ";
PerseoNET/frmDettStudente.cs:								string origineDati = "SELECT t_Documenti.IDdocumento, FK_Iscrizione, DescrDocumento, TipoDocumento, DataPubblicazione, DataScadenza, (CASE WHEN CodiceInterno IS NOT NULL THEN CodiceInterno ELSE CodiceDoc END) AS CodiceDoc, Redattore, (CASE WHEN (IndTipoDoc>=100 AND CertificazioneStudente=1) THEN 1 ELSE 0 END) AS RilascioCertificazione FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Studente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " ORDER BY DataPubblicazione DESC";
PerseoNET/frmDettStudente.cs:								string origineDati = "SELECT t_PercorsoStudi.IDstudio, DescrFormazione, TipoLivelloMW, DescrIstituto, Anno, Completato, ConTirocinio, Certificato, (CASE WHEN DurataOre>0 THEN DurataOre ELSE NULL END) AS DurataOre FROM t_PercorsoStudi LEFT OUTER JOIN t_TipoLivelloTitoloMW ON t_PercorsoStudi.FK_LivelloStudioMW = t_TipoLivelloTitoloMW.IDtlivstudioMW WHERE FK_Utente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " ORDER BY (CASE WHEN TipoLivelloMW IS NOT NULL THEN 1 ELSE 2 END), Anno DESC ";
PerseoNET/frmDettStudente.cs:								string origineDati = "SELECT t_EsperienzeLavoro.IDesplav, DescrAzienda, ComuneAzienda, DescrMansione, TipoSettoreProd, TipoContratto, DataInizioRapp, DataFineRapp, AttivaCertificazione FROM t_EsperienzeLavoro LEFT OUTER JOIN t_TipoContratto ON t_EsperienzeLavoro.FK_TipoContratto = t_TipoContratto.IDcontr LEFT OUTER JOIN t_TipoSettoreProduttivo ON t_EsperienzeLavoro.FK_SettoreProduttivo = t_TipoSettoreProduttivo.IDtsetprod WHERE FK_Utente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " ORDER BY DataInizioRapp DESC ";
PerseoNET/frmDettStudente.cs:								string origineDati = "SELECT t_InteressiFormativi.IDintform, DescrInteresse, TipoSettoreInt, TipoFormativoInterno, TipoCertificazione, LivelloFormazione, DataModifica FROM t_InteressiFormativi LEFT OUTER JOIN t_TipoCertificazione ON t_InteressiFormativi.FK_TipoCertificazione = t_TipoCertificazione.IDtcertificazione LEFT OUTER JOIN t_TipoFormativoInterno ON t_InteressiFormativi.FK_TipoFormativo = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_TipoSettoreInterno ON t_InteressiFormativi.FK_SettoreInterno = t_TipoSettoreInterno.IDtsettin WHERE FK_Studente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " ORDER BY DataModifica";
PerseoNET/frmDettStudente.cs:								string origineDati = "SELECT t_InteressiLavorativi.IDilav, DescrMansione, TipoSettoreProd, TipoContratto, DispStage, Formazione, t_InteressiLavorativi.DataModifica FROM t_InteressiLavorativi INNER JOIN t_TipoSettoreProduttivo ON t_InteressiLavorativi.FK_SettoreProduttivo = t_TipoSettoreProduttivo.IDtsetprod LEFT OUTER JOIN t_TipoDistanzaLav ON t_InteressiLavorativi.FK_Distanza = t_TipoDistanzaLav.IDtdist LEFT OUTER JOIN t_TipoContratto ON t_InteressiLavorativi.FK_TipoContratto = t_TipoContratto.IDcontr WHERE FK_Studente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " ORDER BY DataModifica ";
PerseoNET/frmDettStudente.cs:								string origineDati = "SELECT t_StudentiDoti.IDdotestud, (FK_Studente) AS IDutente, IDtdote, ID_Dote, CodiceProgetto, SiglaSede, TipoDote, ImportoTotaleDote, DataAvvioDote, DataFineDote, DataAssegnazioneDote, PIPEsterno, DoteDeroga, SUM(OreUtente + OreAttivitaIndividuali) AS OrePreviste, SUM(QuotaDoteIscrizione) AS QuotaImpegnata, (ImportoTotaleDote - SUM(QuotaDoteIscrizione)) AS QuotaDisponibile, DoteChiusa, DataDoteChiusa FROM t_IscrizioniDoti RIGHT OUTER JOIN t_Iscrizioni ON t_IscrizioniDoti.FK_Iscrizione = t_Iscrizioni.IDiscrizione RIGHT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud LEFT OUTER JOIN t_Sedi ON t_StudentiDoti.FK_SedePrimaria = t_Sedi.IDsede LEFT OUTER JOIN t_Progetti ON t_StudentiDoti.FK_ProgettoRendiconta = t_Progetti.IDprogetto LEFT OUTER JOIN t_TipoDoteStudente ON t_StudentiDoti.FK_TipoDote = t_TipoDoteStudente.IDtdote GROUP BY t_StudentiDoti.IDdotestud, FK_Studente, ID_Dote, CodiceProgetto, SiglaSede, TipoDote, ImportoTotaleDote, DataAvvioDote, DataFineDote, DataAssegnazioneDote, PIPEsterno, DoteDeroga, DoteChiusa, DataDoteChiusa HAVING FK_Studente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " ORDER BY DataAvvioDote ";
PerseoNET/frmDettStudente.cs:								origineDati = "SELECT IDiscrizione, IDedizione, SiglaSede, DescrEdizione, Gruppo, DataAvvio, DataFine, DataIscr, DataRitiro, OreUtente, OreAttivitaIndividuali, (SELECT SUM(QuotaDoteIscrizione*NumeroVoucher) FROM t_IscrizioniDoti WHERE FK_Iscrizione=IDiscrizione) AS QuotaDote FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud ORDER BY DataAvvio DESC ";
PerseoNET/frmDettStudente.cs:								string origineDati = "SELECT IDiscrizione, IDedizione, SiglaSede, DescrEdizione, CodiceEdizione, (CASE WHEN TipoAnnualita IS NOT NULL THEN (CAST(IDtanno AS VARCHAR) + 'Â°') ELSE NULL END) AS TipoAnnualita, CodiceProgetto, CodiceAzione, RecuperoOFA, TipoFormativoInterno, DataAvvio, DataFine, ID_Dote, DataIscr, DataRitiro, Sostegno, Durata, OreAttivitaIndividuali FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud LEFT OUTER JOIN t_TipoAnnualita ON t_PianoServizi.FK_Anno = t_TipoAnnualita.IDtanno WHERE FK_Utente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " ORDER BY DataAvvio DESC ";
PerseoNET/frmDettStudente.cs:								origineDati = "SELECT IDutente, IDconvenzione, IDiscrizione, Studente, SiglaSede, DescrEdizione, CodiceEdizione, TipoConvenzione, DataAvvioStage, DataFineStage, (CASE WHEN DataInterruzione IS NOT NULL THEN 'X' ELSE NULL END) AS Interrotto, DataInterruzione, (CASE WHEN DataProlungamento IS NOT NULL THEN 'X' ELSE NULL END) AS Prolungato, DataProlungamento, (CASE WHEN VariazioneDurataStage=0 THEN DurataStage ELSE VariazioneDurataStage END) AS DurataStage, DescrAzienda, IndirSedeAz, ComSedeAz, ProvSedeAz, CAPSedeAZ, NazioneSedeAz, TipoFormaGiuridica, (TipoSettoreProd) AS SettoreAzienda, AltroSettore FROM v_ElencoStageSediEdizioni WHERE IDutente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " ORDER BY DataAvvioStage ";
PerseoNET/frmDettStudente.cs:					string origineDati = ((Operators.CompareString(txtCercaCodiceCF.Text, "", TextCompare: false) == 0) ? ("SELECT IDcomune, Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni WHERE Comune LIKE '%" + FunzStringa.StringaSQL(txtLuogoNascita.Text) + "%' ORDER BY Attivo DESC, Comune ") : ("SELECT IDcomune, Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni WHERE CodiceComune='" + txtCercaCodiceCF.Text + "' ORDER BY Attivo DESC, Comune "));
PerseoNET/frmDettStudente.cs:					string origineDati = ((Operators.CompareString(txtCercaCodiceCF.Text, "", TextCompare: false) == 0) ? ("SELECT IDtnazione, CodiceNazione, DescrNazione, FK_ProvenienzaGeo, (TipoNazionalita) AS ProvenienzaGeografica, DataIstat, Attiva FROM t_TipoNazioniCF LEFT OUTER JOIN t_TipoNazionalita ON t_TipoNazioniCF.FK_ProvenienzaGeo = t_TipoNazionalita.IDtnaz WHERE CodiceNazione IS NOT NULL AND DescrNazione LIKE '%" + FunzStringa.StringaSQL(txtNazNascita.Text) + "%' ORDER BY DescrNazione") : ("SELECT IDtnazione, CodiceNazione, DescrNazione, FK_ProvenienzaGeo, (TipoNazionalita) AS ProvenienzaGeografica, DataIstat, Attiva FROM t_TipoNazioniCF LEFT OUTER JOIN t_TipoNazionalita ON t_TipoNazioniCF.FK_ProvenienzaGeo = t_TipoNazionalita.IDtnaz WHERE CodiceNazione IS NOT NULL AND CodiceNazione='" + txtCercaCodiceCF.Text + "' ORDER BY DescrNazione"));
PerseoNET/frmDettStudente.cs:				string origineDati = "SELECT IDcomune, Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni WHERE Comune LIKE '%" + FunzStringa.StringaSQL(txtComResidenza.Text) + "%' AND Attivo=1 ORDER BY Attivo DESC, Comune ";
PerseoNET/frmDettStudente.cs:				string origineDati = "SELECT IDcomune, Comune, Prov, Cap, CodiceComune, Attivo FROM t_TipoComuni WHERE Comune LIKE '%" + FunzStringa.StringaSQL(txtComAbitazione.Text) + "%' AND Attivo=1 ORDER BY Attivo DESC, Comune ";
PerseoNET/frmDettStudente.cs:								string vSQL = "SELECT IDtstage FROM t_TipoAttivitaStage WHERE Stage=True ";
PerseoNET/frmDettStudente.cs:								string vSQL = "SELECT IDconvenzione, DataAvvio FROM t_AziendeSediFormativeConvenzioni INNER JOIN t_ConvenzioniStage ON t_AziendeSediFormativeConvenzioni.IDconvazienda = t_ConvenzioniStage.FK_ConvenzioneAzienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione WHERE FK_Utente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " AND DataFine<=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblDoc.get_Campo((object)"DataPubblicazione", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true) + " ";
PerseoNET/frmDettStudente.cs:								string vSQL = "SELECT IDconvenzione, DataAvvio FROM t_AziendeSediFormativeConvenzioni INNER JOIN t_ConvenzioniStage On t_AziendeSediFormativeConvenzioni.IDconvazienda = t_ConvenzioniStage.FK_ConvenzioneAzienda INNER JOIN t_Iscrizioni On t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_TipoConvenzioneStage On t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE FK_Utente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " And DataFine<=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(tblDoc.get_Campo((object)"DataPubblicazione", vFlagUpdateDB: false)), "dd/MM/yyyy"), FlagSqlServer: true) + " ";
PerseoNET/frmDettStudente.cs:					origineDati = "SELECT IDtnazione, CodiceNazione, DescrNazione, DescrCittadinanza, FK_ProvenienzaGeo, (TipoNazionalita) AS ProvenienzaGeografica, DataIstat, Attiva FROM t_TipoNazioniCF LEFT OUTER JOIN t_TipoNazionalita ON t_TipoNazioniCF.FK_ProvenienzaGeo = t_TipoNazionalita.IDtnaz ORDER BY DescrNazione";
PerseoNET/frmDettStudente.cs:					string origineDati = "SELECT (IDiscrizione) AS MatrIscr, (IDedizione) AS PKEdizione, SiglaSede, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, TipoFormativoInterno, DataAvvio, DataFine, ID_Dote, DataIscr, DataRitiro, Sostegno, Durata, OreAttivitaIndividuali FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud WHERE FK_Utente=" + Conversions.ToString(FormUt.ChiavePrimaria) + " ORDER BY DataAvvio ";
PerseoNET/frmDettStudente.cs:					string origineDati = "SELECT IDiscrizione, CodiceEdizione, SiglaSede, TipoLivello, DescrSettore, OrePreviste FROM t_Iscrizioni INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede LEFT OUTER JOIN t_TipoSicurezzaLivello ON t_PianoServizi.FK_LivelloSpecificoSicurezza = t_TipoSicurezzaLivello.IDtoresicurezza WHERE IDiscrizione " + text;
PerseoNET/frmDettStudente.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, TipoLivello, OrePreviste, DescrSettore FROM t_ConvenzioniStage INNER JOIN t_TipoSicurezzaLivello ON t_ConvenzioniStage.FK_LivelloSpecificoSicurezza = t_TipoSicurezzaLivello.IDtoresicurezza WHERE FK_Iscrizione=", tblDoc.get_Campo((object)"FK_Iscrizione", vFlagUpdateDB: false)), " ORDER BY OrePreviste DESC"));
PerseoNET/clsStudente.cs:					string origineDati = "SELECT  t_Utenti.IDutente, Cognome, Nome, (Cognome + ' ' + Nome) AS Studente, CodFiscale, PIVA, Sesso, DataNascita, LuogoNascita, ProvNascita, NazNascita, TipoNazionalita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, NazResidenza, ComAbitazione, IndirAbitazione, CAPabitazione, ProvAbitazione, Tel_1, Tel_2, Tel_3, Fax, Email, StatoCivile, LuogoNascitaStraniero, (CodiceDoc) AS NumDocId, (TipoDocumento) AS TipoDocId, (Redattore) AS RilasciaDocId, (DataPubblicazione) AS DataRilasciaDocId, (DataScadenza) AS DataScadenzaDocId, CondizionePaeseOrigine, DataResidenzaItalia, TipoStatoLav, Disabile, Svantaggio, Dipendente, CittadinanzaNonAcquisita, StatoDisagioSociale, CFProvvisorio, Omocodia, UtenteTest FROM t_Utenti INNER JOIN t_TipoNazionalita ON t_Utenti.FK_Nazionalita = t_TipoNazionalita.IDtnaz LEFT OUTER JOIN v_DocumentiRiconoscimentoStudenti ON t_Utenti.IDutente = v_DocumentiRiconoscimentoStudenti.FK_Studente LEFT OUTER JOIN t_TipoStatoLav ON t_Utenti.FK_StatoLav = t_TipoStatoLav.IDtslav WHERE IDutente=" + Conversions.ToString(value) + " ";
PerseoNET/clsStudente.cs:					string origineDati = "SELECT IDdotestud, FK_Studente, IDprogetto, IDsede, ID_Dote, DataAvvioDote, DataFineDote, TipoDote, ImportoTotaleDote, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, PIPEsterno, CodiceProgetto, DescrProgetto, SiglaSede FROM t_StudentiDoti INNER JOIN t_TipoDoteStudente ON t_StudentiDoti.FK_TipoDote = t_TipoDoteStudente.IDtdote LEFT OUTER JOIN t_Sedi ON t_StudentiDoti.FK_SedePrimaria = t_Sedi.IDsede LEFT OUTER JOIN t_Progetti ON t_StudentiDoti.FK_ProgettoRendiconta = t_Progetti.IDprogetto WHERE IDdotestud=" + Conversions.ToString(value) + " ORDER BY DataAvvioDote ";
PerseoNET/clsStudente.cs:				string origineDati = "SELECT IDconvenzione, (FK_Utente) AS IDutente, FK_Tutor, FK_TipoForma, IDazienda, (FK_SedeFormativa) AS IDsede, IDsedeaz, FK_TipoConvenzione, FK_LivelloSpecificoSicurezza, NumAltriTirocinanti, CreditiSicurezzaGen, CreditiSicurezzaSpec, ContenutiSicurSpec, ProtocolloConv, DataProtocollo, NumeroConv, AnnoFormativo, DataConvenzione, DataScadenza, DataAvvio, DataFine, DataInterruzione, MaxOreGiorno, MaxOreSettimana, DurataStage, GiorniStage, GiorniRientro, NoteStage, DescrFacilitazioni, NoteAltreSediStage, DataStampaConvenzione, (t_ReferentiAziende.Cognome + ' ' +  t_ReferentiAziende.Nome) AS TutorAzienda, TelRef_1, TelRef_2, FaxRefAz, EmailRefAz, DescrEsperienzaProf, AnniEsperienzaProf, (SELECT TipoRuoloAz FROM t_TipoRuoloAziendale WHERE IDtruoloaz=FK_RuoloAz) AS RuoloLivelloTutor, DescrSedeAzienda, IndirSedeAz, ComSedeAz, CAPSedeAZ, ProvSedeAz, NazioneSedeAz, TelSedeAz_1, TelSedeAz_2, FaxSedeAz, EmailSedeAz, PosizioneINAIL, DescrAzienda, t_Aziende.PIVA, t_Aziende.CodFiscale, TipoAreaProduttiva, TipoSettoreProd, (NULL) AS DescrQualifica, StagePagamento, (CASE WHEN CompensoStage IS NOT NULL THEN CompensoStage ELSE 0 END) AS CompensoStage, DataAccordoEconomico, ProtocolloAccordo, OrdineAzienda, GiorniPagare, NumeroStudentiPrevisti, (NULL) AS DescrContestoStraniero, (NULL) AS ProgrammaStraniero, (NULL) AS AreaAttivitaStraniero, ImportoIndennita, DescrValutaCompe, DescrCertCompe, DescrCertSicurezza, DescrAmbitoStage, CodiceIscrCCIAA, ComuneCCIAA, DataIscrCCIAA, DocValutazioneRischi, RSPP, MedicoCompetente, AddettoIncendioSoccorso, PianoEvacuazione, TipoSettoreProd, DescrCCNL, CodiceATECO, (t_Docenti.Cognome + ' ' + t_Docenti.Nome) AS Tutor, TelTutorStage, EmailTutorStage, TipoPosizioneTutorAzienda, ComunicaAvvioAzienda, ComunicaAvvioCSF, AltriMotiviRecesso, ModoComunicaRecesso, FirmatarioAzienda, AttestatoAttivitaStage, CertificazioneCompetenze, FormSicurGenAzienda, FormSicurGenCSF, FormSicurSpecAzienda, FormSicurSpecCSF, IndennitaStudenteAzienda, (CASE WHEN FK_TipoStudio IS NOT NULL THEN DescrTitoloStudio ELSE NULL END) AS DescrTitoloStudio, FK_TipoStudio, DescrQualificaUscita, NumeroDipendenti, NoteInterruzione, DataSospesoDal, DataSospesoAl, AnnoPresenzaRegione, t_ConvenzioniStage.Indennita, DescrIndennita, NumStudentiTutorAzienda, CertificareCompetenze, CertificareConoscenze, DescrRuolo, (t_Utenti.Cognome + ' ' + t_Utenti.Nome) AS Studente, AziendaPosizioneINAIL, AziendaDescrINAIL, DataProlungamento, DescrVariazioni, FileAccordoEconomicoPDF, FK_TutorAzienda, IDconvazienda, (SELECT TipoIndennitaCorrisposta FROM t_TipoStageIndennitaCorrisposta WHERE IDtindennitacorrisposta=FK_TipoIndennita) AS TipoIndennita, (SELECT TipoDipendentiSedeStage FROM t_TipoDipendentiSedeStage WHERE IDtdipedesestage=FK_NumeroDipendenti) AS NumeroDipendentiSedeStage, (SELECT TipoAttivazioneDeroga FROM t_TipoConvenzioneAttivazioneDeroga WHERE IDtconvderoga=FK_TipoAttivazioneDeroga) AS TipoAttivazioneDeroga, (SELECT TipoStatoTirocinante FROM t_TipoStatoTirocinante WHERE IDtstirocinante=FK_TipoStatoTirocinante) AS TipoStatoTirocinante, IndennitaPromotore, IndennitaAzienda, BuoniPasto, Mensa, DescrAttivitaPreviste, NumeroExtraCurrAttivi, OraIngressoM, OraUscitaM, OraIngressoP, OraUscitaP, NumeroAddettiSede, LivelloTitoloStudio, (CF_RapprLegale) AS CF_TutorAzienda, (t_Docenti.CodFiscale) AS CF_Tutor, FK_SedeStage, IDiscrizione, AltroSettore FROM t_ConvenzioniStage INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_Aziende ON t_AziendeSediFormativeConvenzioni.FK_Azienda = t_Aziende.IDazienda INNER JOIN t_SediAziende ON t_ConvenzioniStage.FK_SedeStage = t_SediAziende.IDsedeaz AND t_Aziende.IDazienda = t_SediAziende.FK_Azienda INNER JOIN t_ReferentiAziende ON t_ConvenzioniStage.FK_TutorAzienda = t_ReferentiAziende.IDreferaz INNER JOIN t_TipoSettoreProduttivo ON t_Aziende.FK_SettoreProd = t_TipoSettoreProduttivo.IDtsetprod INNER JOIN t_TipoFormaGiuridica ON t_Aziende.FK_TipoForma = t_TipoFormaGiuridica.IDtformag INNER JOIN t_Docenti ON t_ConvenzioniStage.FK_Tutor = t_Docenti.IDdocente LEFT OUTER JOIN t_TipoPosizioneTutorAzienda ON t_ReferentiAziende.FK_TipoPosizioneTutor = t_TipoPosizioneTutorAzienda.IDttutoraz WHERE IDutente=" + Conversions.ToString(vIDstudente) + " ORDER BY DataAvvio ";
PerseoNET/clsStudente.cs:				string origineDati = "SELECT IDiscrizione, DataAttivita, OraInizio, OraFine, Minuti FROM t_AssenzeAttivita INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_CalendarioAttivita ON dbo.t_AssenzeAttivita.FK_Attivita = dbo.t_CalendarioAttivita.IDcalatt WHERE t_AssenzeAttivita.DataAssenza>=" + FunzStringa.StrDataSQL(vDataRitiro, FlagSqlServer: true) + " AND IDiscrizione=" + Conversions.ToString(vIDiscrizione) + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStudente.cs:				string origineDati = "SELECT IDiscrizione, DataAttivita, OraInizio, OraFine, Minuti FROM t_AssenzeAttivita INNER JOIN t_Iscrizioni ON t_AssenzeAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_CalendarioAttivita ON dbo.t_AssenzeAttivita.FK_Attivita = dbo.t_CalendarioAttivita.IDcalatt WHERE t_AssenzeAttivita.DataAssenza<=" + FunzStringa.StrDataSQL(vDataIscr, FlagSqlServer: true) + " AND IDiscrizione=" + Conversions.ToString(vIDiscrizione) + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/clsStudente.cs:				string origineDati = "SELECT FK_Studente, COUNT(IDdocumento) AS NumeroDoc FROM v_DocumentiRiconoscimentoStudenti WHERE DocRiconoscimento=1 AND Attivo=1 GROUP BY FK_Studente HAVING COUNT(IDdocumento)>1 ";
PerseoNET/clsStudente.cs:					origineDati = "SELECT IDdocumento, FK_Studente FROM v_DocumentiRiconoscimentoStudenti WHERE DocRiconoscimento=1 AND Attivo=1 AND FK_Studente " + str + " ORDER BY FK_Studente, DataScadenza ";
PerseoNET/clsStudente.cs:				string origineDati = "SELECT IDutente, CodFiscale, DataNascita, Sesso, LuogoNascita, NazNascita, ProvNascita, FK_Nazionalita, CFProvvisorio FROM t_Utenti WHERE IDutente=" + Conversions.ToString(vIDstudente);
PerseoNET/clsStudente.cs:									origineDati = "SELECT IDtnazione, CodiceNazione, DescrNazione, FK_ProvenienzaGeo, (TipoNazionalita) AS ProvenienzaGeografica, DataIstat, Attiva FROM t_TipoNazioniCF LEFT OUTER JOIN t_TipoNazionalita ON t_TipoNazioniCF.FK_ProvenienzaGeo = t_TipoNazionalita.IDtnaz WHERE CodiceNazione IS NOT NULL AND CodiceNazione='" + Strings.Mid(Conversions.ToString(clsTblDatiDR.get_Campo((object)"CodFiscale")), 12, 4) + "' ORDER BY DescrNazione";
PerseoNET/clsStudente.cs:									origineDati = "SELECT IDcomune, CodiceComune, Comune, Prov FROM t_TipoComuni WHERE CodiceComune IS NOT NULL AND CodiceComune='" + Strings.Mid(Conversions.ToString(clsTblDatiDR.get_Campo((object)"CodFiscale")), 12, 4) + "' AND Attivo=True ORDER BY CodiceComune ";
PerseoNET/clsStudente.cs:					text = "SELECT IDconoabi FROM t_ProfessioniCompetenzeRL INNER JOIN t_ProfessioniConoAbiRL ON t_ProfessioniCompetenzeRL.IDcompestd = t_ProfessioniConoAbiRL.FK_Competenza INNER JOIN t_IscrizioniCompetenzeCertificate ON t_ProfessioniConoAbiRL.IDconoabi = t_IscrizioniCompetenzeCertificate.FK_ConoscenzaAbilita WHERE FK_Iscrizione=" + Conversions.ToString(mvIDiscrizione);
PerseoNET/clsStudente.cs:				string vSQL = "INSERT INTO t_IscrizioniCompetenzeCertificate(FK_ConoscenzaAbilita, FK_Iscrizione) SELECT FK_ConoscenzaAbilita, (" + Conversions.ToString(vIDiscrizione) + ") AS IDiscr FROM t_IscrizioniCompetenzeCertificate WHERE FK_Iscrizione=" + Conversions.ToString(mvIDiscrcompe);
PerseoNET/clsStudente.cs:				string origineDati = "SELECT t_Iscrizioni.IDiscrizione, FK_Utente, IDedizione, FK_SedeEdizione, FK_TipoFormativoInterno, IDdotestud, PosRegistro, DataPreIscr, DataIscr, DataRitiro, OreUtente, OreCredito, OreAttivitaIndividuali, Sostegno, PresenzaEsame, EsameINAIL, IdoneoAmmesso, Uditore, ID_Dote, TipoDote, DataAvvioDote, DataFineDote, ImportoTotaleDote, PIPEsterno, QuotaDoteIscrizione FROM t_TipoDoteStudente RIGHT OUTER JOIN t_StudentiDoti ON t_TipoDoteStudente.IDtdote = t_StudentiDoti.FK_TipoDote RIGHT OUTER JOIN t_PianoServizi INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione LEFT OUTER JOIN t_IscrizioniDoti LEFT OUTER JOIN t_TipoAttivitaEdizione ON t_IscrizioniDoti.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_Iscrizioni.IDiscrizione = t_IscrizioniDoti.FK_Iscrizione ON t_StudentiDoti.IDdotestud = t_Iscrizioni.FK_DoteStudente WHERE FK_Utente=" + Conversions.ToString(mvIDstudente) + " ORDER BY FK_Edizione ";
PerseoNET/clsStudente.cs:				string origineDati = "SELECT t_Iscrizioni.IDiscrizione, FK_Utente, FK_Edizione, IDdotestud, PosRegistro, DataPreIscr, DataIscr, DataRitiro, OreUtente, OreCredito, OreAttivitaIndividuali, Sostegno, PresenzaEsame, EsameINAIL, IdoneoAmmesso, Uditore, ID_Dote, DataAvvioDote, DataFineDote, ImportoTotaleDote, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, PIPEsterno, SUM(QuotaDoteIscrizione) AS QuotaDoteIscrizione FROM t_IscrizioniDoti RIGHT OUTER JOIN t_Iscrizioni ON t_IscrizioniDoti.FK_Iscrizione = t_Iscrizioni.IDiscrizione LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud GROUP BY t_Iscrizioni.IDiscrizione, FK_Utente, FK_Edizione, IDdotestud, PosRegistro, DataPreIscr, DataIscr, DataRitiro, OreUtente, OreCredito, OreAttivitaIndividuali, Sostegno, PresenzaEsame, EsameINAIL, IdoneoAmmesso, Uditore, ID_Dote, DataAvvioDote, DataFineDote, ImportoTotaleDote, QuotaServiziLavoro, QuotaServiziAutoImpre, QuotaServiziIndividuali, PIPEsterno HAVING IDdotestud=" + Conversions.ToString(vIDdote) + " ORDER BY FK_Edizione ";
PerseoNET/clsStudente.cs:				string origineDati = "SELECT (FK_Utente) AS IDstudente, IDtlivstudioMW, TipoLivelloMW, LivelloMW, DescrTitoloStudio, Anno, ValutazioneFinale, DescrIstituto, ResidenzaIstituto, DescrFormazione, Completato, ConTirocinio, Certificato, DurataOre, DataConseguimento FROM t_PercorsoStudi LEFT OUTER JOIN t_TipoLivelloTitoloMW ON t_PercorsoStudi.FK_LivelloStudioMW = t_TipoLivelloTitoloMW.IDtlivstudioMW WHERE FK_Utente=" + Conversions.ToString(IDutente) + " ORDER BY (CASE WHEN TipoLivelloMW IS NOT NULL THEN 1 ELSE 2 END), Anno DESC ";
PerseoNET/clsStudente.cs:				string origineDati = "SELECT t_StudentiDoti.IDdotestud, (FK_Studente) AS IDutente, IDprogetto, IDsede, IDtdote, ID_Dote, CodiceProgetto, SiglaSede, TipoDote, ImportoTotaleDote, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, IgnoraRegoleProgetto, DataAvvioDote, DataFineDote, DataAssegnazioneDote, PIPEsterno, DoteDeroga, SUM(OreUtente + OreAttivitaIndividuali) AS OrePreviste, SUM(QuotaDoteIscrizione) AS QuotaImpegnata, (ImportoTotaleDote - SUM(QuotaDoteIscrizione)) AS QuotaDisponibile, COUNT(DISTINCT IDiscrizione) AS NumeroIscrizioni, MIN(DataIscr) AS PrimaIscrizione, MAX(DataIscr) AS UltimaIscrizione, DoteChiusa, DataDoteChiusa FROM t_IscrizioniDoti RIGHT OUTER JOIN t_Iscrizioni ON t_IscrizioniDoti.FK_Iscrizione = t_Iscrizioni.IDiscrizione RIGHT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud LEFT OUTER JOIN t_Sedi ON t_StudentiDoti.FK_SedePrimaria = t_Sedi.IDsede LEFT OUTER JOIN t_Progetti ON t_StudentiDoti.FK_ProgettoRendiconta = t_Progetti.IDprogetto LEFT OUTER JOIN t_TipoDoteStudente ON t_StudentiDoti.FK_TipoDote = t_TipoDoteStudente.IDtdote GROUP BY IDdotestud, FK_Studente, IDprogetto, IDsede, ID_Dote, CodiceProgetto, SiglaSede, TipoDote, ImportoTotaleDote, IDtdote, TipoDote, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, IgnoraRegoleProgetto, DataAvvioDote, DataFineDote, DataAssegnazioneDote, PIPEsterno, DoteDeroga, DoteChiusa, DataDoteChiusa HAVING FK_Studente=" + Conversions.ToString(mvIDstudente) + " ORDER BY DataAvvioDote ";
PerseoNET/clsStudente.cs:						string origineDati = "SELECT IDiscrizione, (NULL) AS StrEdizione, (NULL) AS StrSede, (NULL) AS DataAttivita, (NULL) AS OraInizio, (NULL) AS OraFine FROM t_Iscrizioni WHERE FK_Iscrizione=0";
PerseoNET/clsStudente.cs:						origineDati = "SELECT IDcalatt, IDiscrizione, CodiceEdizione, SiglaSede, DataAttivita, OraInizio, OraFine FROM t_CalendarioAttivita INNER JOIN t_Iscrizioni ON t_CalendarioAttivita.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDutente=" + Conversions.ToString(mvIDstudente) + " AND IDcalatt<>" + Conversions.ToString(mvIDattivita) + " AND DataAttivita='" + Conversions.ToString(mvDataAttivita) + "' AND t_CalendarioAttivita.FK_Iscrizione IS NOT NULL AND PresenzaStudentePIP=1 ";
PerseoNET/clsStudente.cs:						origineDati = origineDati + " UNION SELECT (IDregstage) AS IDcalatt, IDiscrizione, CodiceEdizione, SiglaSede, (DataStage) AS DataAttivita, (OraIngresso) AS OraInizio, (OraUscita) AS OraFine FROM t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDutente=" + Conversions.ToString(mvIDstudente) + " AND IDregstage<>" + Conversions.ToString(mvIDstage) + " AND DataStage='" + Conversions.ToString(mvDataAttivita) + "' ";
PerseoNET/clsStudente.cs:					string origineDati = "SELECT IDiscrizione, Studente, CodiceEdizione, DataAttivita, Aula, Stage, AulaStage FROM t_PianificazioneDocente ";
PerseoNET/clsCopiaEdizione.cs:				string origineDati = "SELECT IDedizione, FK_TipoFormativoInterno FROM t_PianoServizi WHERE IDedizione=" + Conversions.ToString(mvIDsorgente);
PerseoNET/clsCopiaEdizione.cs:					origineDati = "INSERT INTO t_PianoServizi(FK_Azione, FK_SedeEdizione, FK_SettoreEdizione, FK_TipoFormativoInterno, FK_Anno, FK_DurataAnni, EdizioneAttiva, DescrEdizione, CodiceEdizione, DataAvvio, DataFine, DataInizioFA, DataFineFA, AllieviMIN, AllieviMAX, Durata, Gruppo, PercMaxSubentro, PercMinOFA, QuotaIscr, QuotaInteg, ModelloEdizione) SELECT (" + Conversions.ToString(Variabili.Azione.PKAzione) + ") AS FK_Azione, (" + Conversions.ToString(vIDsede) + ") AS FK_SedeEdizione, FK_SettoreEdizione, FK_TipoFormativoInterno, FK_Anno, FK_DurataAnni, (1) AS Ediz_Attiva, DescrEdizione, ('" + mvStrCodiceDuplicazione + "') AS CodiceEdizione, (" + FunzStringa.StrDataSQL(StrDataAvvio, FlagSqlServer: true) + ") AS DataAvvio, (" + FunzStringa.StrDataSQL(StrDataFine, FlagSqlServer: true) + ") AS DataFine, (" + FunzStringa.StrDataSQL(StrDataAvvio, FlagSqlServer: true) + ") AS DataInizioFA, (" + FunzStringa.StrDataSQL(StrDataFine, FlagSqlServer: true) + ") AS DataFineFA, AllieviMIN, AllieviMAX, Durata, Gruppo, (0) AS PercMaxSubentro, PercMinOFA, (0) AS QuotaIscr, (0) AS QuotaInteg, " + Conversions.ToString(value) + " FROM t_PianoServizi WHERE IDedizione=" + Conversions.ToString(mvIDsorgente) + " ";
PerseoNET/clsCopiaEdizione.cs:					origineDati = "SELECT IDedizione FROM t_PianoServizi WHERE CodiceEdizione='" + mvStrCodiceDuplicazione + "' AND DataRec>=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " ";
PerseoNET/clsCopiaEdizione.cs:						origineDati = ((!Operators.ConditionalCompareObjectEqual(Variabili.Progetto.get_Campo((object)"ProgettoStandard"), false, TextCompare: false)) ? ("INSERT INTO t_AttivitaEdizioni(FK_Edizione, FK_TipoAttivita, OreAttivita) SELECT (" + Conversions.ToString(PKEdizioneDestinazione) + ") AS FK_Edizione, FK_TipoAttivita, OreAttivita FROM t_AttivitaEdizioni WHERE FK_Edizione=" + Conversions.ToString(PKEdizioneSorgente) + " ") : ("INSERT INTO t_AttivitaEdizioni(FK_Edizione, FK_TipoAttivita, OreAttivita) SELECT (" + Conversions.ToString(PKEdizioneDestinazione) + ") AS FK_Edizione, FK_TipoAttivita, OreAttivita FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE FK_Edizione=" + Conversions.ToString(PKEdizioneSorgente) + " AND Primaria=1 AND Aula=1 AND PresenzaOFA=1 "));
PerseoNET/clsCopiaEdizione.cs:					string vSQL = "INSERT INTO t_ObiettiviStageEdizioni(FK_Edizione, FK_TipoObiettivo, IndObStage, DescrObiettivoStage) SELECT (" + Conversions.ToString(mvIDdestinazione) + ") AS FK_Edizione, FK_TipoObiettivo, IndObStage, DescrObiettivoStage FROM t_ObiettiviStageEdizioni WHERE FK_Edizione=" + Conversions.ToString(mvIDsorgente);
PerseoNET/clsCopiaEdizione.cs:					string vSQL = "INSERT INTO t_VincoliOrariEdizioni(FK_Edizione, Dalle, Alle, FK_GiornoSettimana) SELECT (" + Conversions.ToString(mvIDdestinazione) + ") AS FKE, Dalle, Alle, FK_GiornoSettimana FROM t_VincoliOrariEdizioni WHERE FK_Edizione=" + Conversions.ToString(mvIDsorgente) + " ";
PerseoNET/clsCopiaEdizione.cs:					string vSQL = (Variabili.Edizione.EsisteAttivita("STAGE") ? ("INSERT INTO t_DateEscluse(FK_Edizione, DateEscluseDAL, DateEscluseAL, Aula, Stage) SELECT (" + Conversions.ToString(mvIDdestinazione) + ") AS PKed, DateEscluseDAL, DateEscluseAL, Aula, Stage FROM t_DateEscluse WHERE FK_Edizione=" + Conversions.ToString(mvIDsorgente) + " AND DateEscluseDAL<=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataFine")), "dd/MM/yyyy"), FlagSqlServer: true) + " AND DateEscluseAL>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataAvvio")), "dd/MM/yyyy"), FlagSqlServer: true) + " ") : ("INSERT INTO t_DateEscluse(FK_Edizione, DateEscluseDAL, DateEscluseAL, Aula, Stage) SELECT (" + Conversions.ToString(mvIDdestinazione) + ") AS PKed, DateEscluseDAL, DateEscluseAL, Aula, (0) AS EsclStage FROM t_DateEscluse WHERE FK_Edizione=" + Conversions.ToString(mvIDsorgente) + " AND DateEscluseDAL<=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataFine")), "dd/MM/yyyy"), FlagSqlServer: true) + " AND DateEscluseAL>=" + FunzStringa.StrDataSQL(Strings.Format(RuntimeHelpers.GetObjectValue(Variabili.Edizione.get_Campo((object)"DataAvvio")), "dd/MM/yyyy"), FlagSqlServer: true) + " "));
PerseoNET/clsCopiaEdizione.cs:					string vSQL = "INSERT INTO t_CalendarioAvvioFinale(FK_Edizione, DataDAL, DataAL, IngressoM, UscitaM, IngressoP, UscitaP, Lun, Mar, Mer, Gio, Ven, Sab, Dom, CalendarioStage) SELECT (" + Conversions.ToString(mvIDdestinazione) + ") AS FKE, DataDAL, DataAL, IngressoM, UscitaM, IngressoP, UscitaP, Lun, Mar, Mer, Gio, Ven, Sab, Dom, CalendarioStage FROM t_CalendarioAvvioFinale WHERE FK_Edizione=" + Conversions.ToString(mvIDsorgente) + " ";
PerseoNET/clsCopiaEdizione.cs:						string vSQL = "SELECT IDstruttura FROM wt_StruttureModuli WHERE FK_Progetto=" + Conversions.ToString(Variabili.Progetto.PKProgetto) + " ";
PerseoNET/clsCopiaEdizione.cs:							vSQL = "SELECT t_AttivitaEdizioni.IDattedi, FK_TipoAttivita, TipoAttivita, OreAttivita FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE t_AttivitaEdizioni.FK_Edizione=" + Conversions.ToString(mvIDsorgente) + " AND MonteOreEdizione=1 ORDER BY TipoAttivita ";
PerseoNET/clsCopiaEdizione.cs:								vSQL = "SELECT t_AttivitaEdizioni.IDattedi, FK_TipoAttivita, TipoAttivita, OreAttivita FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE t_AttivitaEdizioni.FK_Edizione=" + Conversions.ToString(mvIDdestinazione) + " AND MonteOreEdizione=1 ORDER BY TipoAttivita ";
PerseoNET/clsCopiaEdizione.cs:									vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_ModuliEdizioni(FK_Edizione, FK_Attivita, FK_TipoModulo, IndModulo, DescrModulo, OreModulo) SELECT (" + Conversions.ToString(mvIDdestinazione) + ") AS FK_Ed, (", clsTblDatiDR2.get_Campo((object)0)), ") AS FK_Att, FK_TipoModulo, IndModulo, DescrModulo, OreModulo "), "FROM t_ModuliEdizioni INNER JOIN "), "t_AttivitaEdizioni ON t_ModuliEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN "), "t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita "), "WHERE t_ModuliEdizioni.FK_Edizione="), mvIDsorgente), " AND IDtattivita="), clsTblDatiDR2.get_Campo((object)"FK_TipoAttivita")), " "));
PerseoNET/clsCopiaEdizione.cs:									vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_ModuliEdizioni(FK_Edizione, FK_Attivita, FK_TipoModulo, IndModulo, DescrModulo, OreModulo) SELECT (" + Conversions.ToString(mvIDdestinazione) + ") AS FK_Ed, (", clsTblDatiDR2.get_Campo((object)0)), ") AS FK_Att, FK_TipoModulo, IndModulo, DescrModulo, OreModulo "), "FROM t_ModuliEdizioni INNER JOIN "), "t_AttivitaEdizioni ON t_ModuliEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN "), "t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita "), "WHERE t_ModuliEdizioni.FK_Edizione="), mvIDsorgente), " AND IDtattivita="), clsTblDatiDR2.get_Campo((object)"FK_TipoAttivita")), " "));
PerseoNET/clsCopiaEdizione.cs:								vSQL = "SELECT IDmodulo, FK_Edizione, FK_Attivita, FK_TipoModulo, IndModulo, DescrModulo, OreModulo FROM t_ModuliEdizioni WHERE FK_Edizione=" + Conversions.ToString(mvIDdestinazione) + " ORDER BY IndModulo, DescrModulo ";
PerseoNET/clsCopiaEdizione.cs:									vSQL = "SELECT t_ModuliEdizioni.IDmodulo, FK_TipoModulo, IndModulo, DescrModulo, OreModulo, (0) AS FKMod, FK_TipoArgomento, IndArgomento, DescrArgomento, DescrBreveArgomento, OreArgomento FROM t_ModuliEdizioni INNER JOIN t_ArgomentiModuli ON t_ModuliEdizioni.IDmodulo = t_ArgomentiModuli.FK_Modulo WHERE FK_Edizione=" + Conversions.ToString(mvIDsorgente) + " ORDER BY IndModulo, DescrModulo ";
PerseoNET/clsCopiaEdizione.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT StrTipoAttivita, SUM(OreAreaModulo) AS OreAttivita FROM wt_StruttureModuli WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " "), "GROUP BY StrTipoAttivita "), "ORDER BY StrTipoAttivita "));
PerseoNET/clsCopiaEdizione.cs:						vSQL = "SELECT t_AttivitaEdizioni.IDattedi, TipoAttivita, OreAttivita FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE t_AttivitaEdizioni.FK_Edizione=" + Conversions.ToString(mvIDdestinazione) + " AND MonteOreEdizione=1 ORDER BY IndTA, TipoAttivita ";
PerseoNET/clsCopiaEdizione.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_ModuliEdizioni(FK_Edizione, FK_Attivita, FK_TipoModulo, IndModulo, DescrModulo, OreModulo) SELECT (" + Conversions.ToString(mvIDdestinazione) + ") AS FK_Ed, (", clsComandoSQL.get_CampoDataTbl((object)0)), ") AS FK_Att, "), "FK_TipoAreaModulo, IndAreaModulo, DescrAreaModulo, OreAreaModulo "), "FROM wt_StruttureModuli "), "WHERE FK_Progetto="), Variabili.Progetto.get_Campo((object)0)), " AND StrTipoAttivita='DOCENZA' "));
PerseoNET/clsCopiaEdizione.cs:									vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_ModuliEdizioni(FK_Edizione, FK_Attivita, FK_TipoModulo, IndModulo, DescrModulo, OreModulo) SELECT (" + Conversions.ToString(mvIDdestinazione) + ") AS FK_Ed, (", clsComandoSQL.get_CampoDataTbl((object)0)), ") AS FK_Att, "), "FK_TipoAreaModulo, IndAreaModulo, DescrAreaModulo, OreAreaModulo "), "FROM wt_StruttureModuli "), "WHERE FK_Progetto="), Variabili.Progetto.get_Campo((object)0)), " AND StrTipoAttivita='STAGE' "));
PerseoNET/clsCopiaEdizione.cs:								vSQL = "SELECT IDmodulo, FK_Edizione, FK_Attivita, FK_TipoModulo, IndModulo, DescrModulo, OreModulo FROM t_ModuliEdizioni WHERE FK_Edizione=" + Conversions.ToString(mvIDdestinazione) + " ORDER BY IndModulo, DescrModulo ";
PerseoNET/frmLogin.cs:				string vSQL = "SELECT IDvers, (GETDATE()) AS OraServer FROM zt_Versione ";
PerseoNET/frmLogin.cs:							vSQL = "SELECT IDpers, Cognome, Nome, Login, PwdNET, DataPwd, Pwd, AggiornaPerseo, Disconnettere, OraRipristino, Attivo, DataLetturaNotifiche, FK_Docente, DisattivareTimeout, Avviso, Outlaw, RipristinaInstallazione, Email FROM t_Personale WHERE IDpers=-1 ";
PerseoNET/frmLogin.cs:					vSQL = "SELECT IDpers, Cognome, Nome, Login, PwdNET, DataPwd, Pwd, AggiornaPerseo, Disconnettere, OraRipristino, Attivo, DataLetturaNotifiche, FK_Docente, DisattivareTimeout, Avviso, Outlaw, RipristinaInstallazione, Email FROM t_Personale WHERE Login='" + FunzStringa.StringaSQL(txtLogin.Text) + "' ";
PerseoNET/frmLogin.cs:					origineDati = "SELECT Server FROM t_Connessioni WHERE Ind>0 ORDER BY Ind ";
PerseoNET/frmLogin.cs:				origineDati = "SELECT Server FROM t_Connessioni WHERE Attiva=True ORDER BY Ind";
PerseoNET/frmLogin.cs:						string vSQL = "SELECT IDvers, DataVersSW FROM zt_Versione ";
PerseoNET/clsIncarico.cs:					string vSQL = "SELECT IDincarico, IDdocente, (StrDOC) AS Formatore, SbloccoTemporaneo FROM t_IncarichiContrattiEdizioni WHERE IDincarico=" + Conversions.ToString(IDincarico) + " AND FK_Tipo>1 AND OreSvolgere IS NOT NULL AND ApprovaIncarico=TRUE ";
PerseoNET/clsIncarico.cs:				string text3 = "SELECT IDincarico, IDdocente, SUM(Minuti) AS OreFatteInc FROM v_DettaglioOreSvoltePerIncarico WHERE DataSvolgimento>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " " + text + "GROUP BY IDincarico, IDdocente " + text2;
PerseoNET/clsIncarico.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, PagamentoIndividuale, SbloccoTemporaneo FROM t_IncarichiEdizioni WHERE PagamentoIndividuale=1 AND SbloccoTemporaneo=1 AND FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "));
PerseoNET/clsIncarico.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, PagamentoIndividuale, SbloccoTemporaneo FROM t_IncarichiEdizioni WHERE PagamentoIndividuale=1 AND SbloccoTemporaneo=1 AND FK_Edizione=", Variabili.Edizioni[num2].get_Campo((object)0)), " "));
PerseoNET/clsIncarico.cs:							string origineDati = "SELECT t_PianificazioneContrattiIncarichi.IDincarico, SUM(DATEDIFF('n', OraInizio, OraFine)) AS OreFatte FROM t_PianificazioneContrattiIncarichi WHERE IDincarico=" + Conversions.ToString(vIDincarico) + " AND DataAttivita>=" + FunzStringa.StrDataSQL(text) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(text2) + " GROUP BY IDincarico ";
PerseoNET/clsIncarico.cs:				string vSQL = "SELECT IDincarico, IncaricoBloccato FROM t_IncarichiEdizioni WHERE IDincarico=" + Conversions.ToString(vIDincarico);
PerseoNET/clsIncarico.cs:							string text = "SELECT (t_IncarichiEdizioni.IDincarico) AS NumeroIncarico, IDedizione, IDdocente, SiglaSede, DescrEdizione, CodiceEdizione, IDmwe, DescrProgetto, CodiceProgetto, DescrBando, DataAvvio, DataFine, Durata, TipoFormativoInterno, IndTA, TipoAttivita, (CASE WHEN DescrArgomento IS NOT NULL THEN DescrArgomento ELSE DescrAttivita END) AS DescrAttivita, Aula, Primaria, Secondaria, MonteOreEdizione, (CASE WHEN DescrArgomento IS NOT NULL THEN OreArgomento ELSE OreAttivita END) AS OreAttivita, (OreAttivita) AS PrevisteAttivita, (CASE WHEN t_Docenti.FK_Tipo=1 THEN 'Generico' WHEN t_Docenti.FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS TipoPersonale, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN IncaricoGenericoGratuito=1 THEN 'SÃ¬' ELSE NULL END) AS Gratuito, DescrGratuito, OreAssegnate, (CASE WHEN FK_Tipo<=2 THEN OreAssegnate ELSE 0 END) AS OreApprovate, (0) AS TotaleOreFatte, (0) AS OreResidue, (NULL) AS DocClassiRiunite, (NULL) AS DisciplClassiRiunite, FK_IncaricoClassiRiunite, (NULL) AS TipoCR, (NULL) AS CodiceEdizioneCR, DescrIncarico, OreStraordinario FROM t_PianoServizi INNER JOIN t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione AND t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento " + str + " ORDER BY SiglaSede, TipoFormativoInterno, IndTG, IndTA, (Cognome + ' ' + Nome), IndArgomento, DescrArgomento ";
PerseoNET/clsIncarico.cs:									text = "SELECT IDincarico, SUM(Minuti) AS TotaleOreFatte FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE DataSvolgimento<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico " + str + " ";
PerseoNET/clsIncarico.cs:									text = "SELECT FK_IncaricoEdizione, SUM(OreSvolgere) AS OreApprovate FROM t_IncarichiEdizioniContratti WHERE ApprovaIncarico=1 GROUP BY FK_IncaricoEdizione HAVING FK_IncaricoEdizione " + str + " ";
PerseoNET/clsIncarico.cs:								text = "SELECT IDincarico, (Cognome + ' ' + Nome) AS StrDOC, CodiceEdizione, DescrArgomento, DescrBreveArgomento, (CASE WHEN FK_Tipo=2 THEN 'Interno' WHEN FK_Tipo=3 THEN 'Esterno' ELSE '???' END) AS TipoCR FROM t_IncarichiEdizioni INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDincarico " + str + "ORDER BY IDincarico ";
PerseoNET/clsIncarico.cs:								text = "SELECT IDincarico, IDedizione, IDdocente, SiglaSede, DescrEdizione, CodiceEdizione, IDmwe, DescrProgetto, CodiceProgetto, DescrBando, DataAvvio, DataFine, Durata, TipoFormativoInterno, IndTA, TipoAttivita, DescrArgomento, Aula, Primaria, Secondaria, MonteOreEdizione, OreAttivita, PrevisteAttivita, TipoPersonale, Docente, Gratuito, DescrGratuito, OreAssegnate, OreApprovate, OreFatte, OreResidue, DocClassiRiunite, DisciplClassiRiunite, FK_IncaricoClassiRiunite, TipoCR, CodiceEdizioneCR, DescrIncarico, OreStraordinario FROM t_IncarichiEdizione ";
PerseoNET/clsIncarico.cs:						string text = "SELECT (t_IncarichiEdizioni.IDincarico) AS NumeroIncarico, IDedizione, IDdocente, SiglaSede, DescrEdizione, CodiceEdizione, IDmwe, DescrProgetto, CodiceProgetto, DescrBando, DataAvvio, DataFine, Durata, TipoFormativoInterno, IndTA, TipoAttivita, (CASE WHEN DescrArgomento IS NOT NULL THEN DescrArgomento ELSE DescrAttivita END) AS DescrAttivita, Aula, Primaria, Secondaria, MonteOreEdizione, (CASE WHEN DescrArgomento IS NOT NULL THEN OreArgomento ELSE NULL END) AS OreAttivita, (OreAttivita) AS PrevisteAttivita, (CASE WHEN t_Docenti.FK_Tipo=1 THEN 'Generico' WHEN t_Docenti.FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS TipoPersonale, (Cognome + ' ' + Nome) AS StrDOC, (CASE WHEN IncaricoGenericoGratuito=1 THEN 'SÃ¬' ELSE NULL END) AS Gratuito, DescrGratuito, OreAssegnate, (CASE WHEN FK_Tipo<=2 THEN OreAssegnate ELSE 0 END) AS OreApprovate, (0) AS TotaleOreFatte, (0) AS OreResidue, (NULL) AS DocClassiRiunite, (NULL) AS DisciplClassiRiunite, FK_IncaricoClassiRiunite, (NULL) AS TipoCR, (NULL) AS CodiceEdizioneCR, DescrIncarico, OreStraordinario FROM t_PianoServizi INNER JOIN t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione AND t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento " + str + " ORDER BY SiglaSede, TipoFormativoInterno, IndTG, IndTA, (Cognome + ' ' + Nome), IndArgomento, DescrArgomento ";
PerseoNET/clsIncarico.cs:								text = "SELECT IDincarico, SUM(Minuti) AS TotaleOreFatte FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE DataSvolgimento<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " GROUP BY IDincarico HAVING IDincarico " + str + " ";
PerseoNET/clsIncarico.cs:								text = "SELECT FK_IncaricoEdizione, SUM(OreSvolgere) AS OreApprovate FROM t_IncarichiEdizioniContratti WHERE ApprovaIncarico=1 GROUP BY FK_IncaricoEdizione HAVING FK_IncaricoEdizione " + str + " ";
PerseoNET/clsIncarico.cs:							text = "SELECT IDincarico, (Cognome + ' ' + Nome) AS StrDOC, CodiceEdizione, DescrArgomento, DescrBreveArgomento, (CASE WHEN FK_Tipo=2 THEN 'Interno' WHEN FK_Tipo=3 THEN 'Esterno' ELSE '???' END) AS TipoCR FROM t_IncarichiEdizioni INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE IDincarico " + str + "ORDER BY IDincarico ";
PerseoNET/clsIncarico.cs:							text = "SELECT IDincarico, IDedizione, IDdocente, SiglaSede, DescrEdizione, CodiceEdizione, IDmwe, DescrProgetto, CodiceProgetto, DescrBando, DataAvvio, DataFine, Durata, TipoFormativoInterno, IndTA, TipoAttivita, DescrArgomento, Aula, Primaria, Secondaria, MonteOreEdizione, OreAttivita, PrevisteAttivita, TipoPersonale, Docente, Gratuito, DescrGratuito, OreAssegnate, OreApprovate, OreFatte, OreResidue, DocClassiRiunite, DisciplClassiRiunite, FK_IncaricoClassiRiunite, TipoCR, CodiceEdizioneCR, DescrIncarico, OreStraordinario FROM t_IncarichiEdizione ";
PerseoNET/clsIncarico.cs:								text = "SELECT NumeroIncarico, IDedizione, IDdocente, SiglaSede, DescrEdizione, CodiceEdizione, IDmwe, CodiceProgetto, DescrProgetto, DescrBando, DataAvvio, DataFine, Durata, TipoFormativoInterno, IndTA, TipoAttivita, DescrAttivita, Aula, Primaria, Secondaria, MonteOreEdizione, OreAttivita, PrevisteAttivita, TipoPersonale, StrDOC, Gratuito, DescrGratuito, OreAssegnate, OreApprovate, TotaleOreFatte, OreResidue, OreStraordinario, OreStraordinarioFatte, DocClassiRiunite, DisciplClassiRiunite, FK_IncaricoClassiRiunite, TipoCR, CodiceEdizioneCR, DescrIncarico FROM t_IncarichiEdizioni ";
PerseoNET/clsIncarico.cs:									text = "SELECT IDincarico, SUM(Minuti) AS TotaleOreFatte FROM v_DettaglioOreSvoltePerIncaricoRidotta WHERE DataSvolgimento<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " AND Straordinario=1 GROUP BY IDincarico HAVING IDincarico " + str + " ";
PerseoNET/clsIncarico.cs:				string origineDati = "SELECT (IDincarico) AS NumeroIncarico, SiglaSede, DescrEdizione, CodiceEdizione, DescrProgetto, CodiceProgetto, DataAvvio, DataFine, Durata, TipoFormativoInterno, (CASE WHEN t_Docenti.FK_Tipo=1 THEN 'Generico' WHEN t_Docenti.FK_Tipo=2 THEN 'Interno' ELSE 'Esterno' END) AS TipoPersonale, Cognome, Nome, CodFiscale, TipoAttivita, DescrArgomento, (CASE WHEN DescrArgomento IS NOT NULL THEN (SELECT DescrModulo FROM t_ModuliEdizioni WHERE IDmodulo=t_ArgomentiModuli.FK_Modulo) ELSE NULL END) AS DescrModulo, OreAssegnate, (0) AS TotaleOreFatte, (0) AS OreResidue, IDedizione FROM t_PianoServizi INNER JOIN t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione AND t_AttivitaEdizioni.IDattedi = t_IncarichiEdizioni.FK_Attivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento " + str + " ORDER BY SiglaSede, TipoFormativoInterno, IndTG, IndTA, (Cognome + ' ' + Nome), IndArgomento, DescrArgomento ";
PerseoNET/clsIncarico.cs:				origineDati = "SELECT IDincarico, SUM(Minuti) AS TotaleOreFatte FROM v_DettaglioOreSvoltePerIncarico WHERE DataSvolgimento<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " AND IDedizione " + clsTblDatiDR.StringaFiltroIN("IDedizione") + " AND TipoAttivita IN('DOCENZA','CODOCENZA','SOSTEGNO') GROUP BY IDincarico ";
PerseoNET/clsIncarico.cs:					string origineDati = "SELECT IDincacontra, (FK_IncaricoEdizione) AS IDincarico, DataInizioIncarico, DataFineIncarico, DataProlungamento, OreSvolgere, ApprovaIncarico FROM t_IncarichiEdizioniContrattI WHERE FK_IncaricoEdizione=" + Conversions.ToString(vIDincarico) + " AND ApprovaIncarico=1 ORDER BY DataInizioIncarico ";
PerseoNET/clsIncarico.cs:					string origineDati = ((Operators.CompareString(VariabiliClassi.FormAttivo.Name, "frmCalendarioMulti", TextCompare: false) == 0) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento, t_ProgettiPagamentiFatture.FK_Docente, (FK_Societa) AS FK_Azienda, DataRichiestaInizio, DataRichiestaFine, (FK_Progetto) AS IDprogetto FROM t_ProgettiPagamenti INNER JOIN t_ProgettiPagamentiFatture ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiFatture.FK_ProgPagamento WHERE t_ProgettiPagamenti.FK_Progetto=", Variabili.Edizioni[num2].get_Campo((object)"IDprogetto")), " "), "AND t_ProgettiPagamenti.FK_Sede="), Variabili.Edizioni[num2].get_Campo((object)"FK_SedeEdizione")), " "), "AND Autorizzazione=1 AND DataPagamento IS NULL "), "ORDER BY t_ProgettiPagamentiFatture.FK_Docente, FK_Societa ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento, t_ProgettiPagamentiFatture.FK_Docente, (FK_Societa) AS FK_Azienda, DataRichiestaInizio, DataRichiestaFine, (FK_Progetto) AS IDprogetto FROM t_ProgettiPagamenti INNER JOIN t_ProgettiPagamentiFatture ON t_ProgettiPagamenti.IDprogpagamento = t_ProgettiPagamentiFatture.FK_ProgPagamento WHERE t_ProgettiPagamenti.FK_Progetto=", Variabili.Progetto.get_Campo((object)"IDprogetto")), " "), "AND t_ProgettiPagamenti.FK_Sede="), Variabili.Edizione.get_Campo((object)"FK_SedeEdizione")), " "), "AND Autorizzazione=1 AND DataPagamento IS NULL "), "ORDER BY t_ProgettiPagamentiFatture.FK_Docente, FK_Societa ")));
PerseoNET/clsIncarico.cs:					origineDati = ((Operators.CompareString(VariabiliClassi.FormAttivo.Name, "frmCalendarioMulti", TextCompare: false) == 0) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDpagaindiv, t_IncarichiEdizioni.IDincarico, t_PagamentiIndividuali.FK_Docente, t_PagamentiIndividuali.FK_Azienda, DataRichiestaInizio, DataRichiestaFine, (t_Azioni.FK_Progetto) AS IDprogetto FROM t_PagamentiIndividuali INNER JOIN t_PagamentiIndividualiIncarichi ON t_PagamentiIndividuali.IDpagaindiv = t_PagamentiIndividualiIncarichi.FK_Pagamento INNER JOIN t_IncarichiEdizioni ON t_PagamentiIndividualiIncarichi.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione=t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione=t_Azioni.IDazione LEFT OUTER JOIN t_ProgettiPagamentiCompensiOneri ON t_PagamentiIndividuali.IDpagaindiv = t_ProgettiPagamentiCompensiOneri.FK_PagamentoIndividuale WHERE t_PagamentiIndividuali.Autorizzazione=1 And IDcompensi Is NULL AND FK_Edizione=", Variabili.Edizioni[num2].get_Campo((object)"IDprogetto")), " ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDpagaindiv, t_IncarichiEdizioni.IDincarico, t_PagamentiIndividuali.FK_Docente, t_PagamentiIndividuali.FK_Azienda, DataRichiestaInizio, DataRichiestaFine, (t_Azioni.FK_Progetto) AS IDprogetto FROM t_PagamentiIndividuali INNER JOIN t_PagamentiIndividualiIncarichi ON t_PagamentiIndividuali.IDpagaindiv = t_PagamentiIndividualiIncarichi.FK_Pagamento INNER JOIN t_IncarichiEdizioni ON t_PagamentiIndividualiIncarichi.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione=t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione=t_Azioni.IDazione LEFT OUTER JOIN t_ProgettiPagamentiCompensiOneri ON t_PagamentiIndividuali.IDpagaindiv = t_ProgettiPagamentiCompensiOneri.FK_PagamentoIndividuale WHERE t_PagamentiIndividuali.Autorizzazione=1 And IDcompensi Is NULL AND FK_Edizione=", Variabili.Progetto.get_Campo((object)"IDprogetto")), " ")));
PerseoNET/clsIncarico.cs:					string origineDati = ((Operators.CompareString(VariabiliClassi.FormAttivo.Name, "frmCalendarioMulti", TextCompare: false) == 0) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento, DataRichiestaInizio, DataRichiestaFine, (FK_Progetto) AS IDprogetto  FROM t_ProgettiPagamenti WHERE t_ProgettiPagamenti.FK_Progetto=", Variabili.Edizioni[num2].get_Campo((object)"IDprogetto")), " "), "AND t_ProgettiPagamenti.FK_Sede="), Variabili.Edizioni[num2].get_Campo((object)"FK_SedeEdizione")), " "), "AND DataPagamento IS NOT NULL AND Anticipo=0 "), "ORDER BY DataRichiestaInizio ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDprogpagamento, DataRichiestaInizio, DataRichiestaFine, (FK_Progetto) AS IDprogetto  FROM t_ProgettiPagamenti WHERE t_ProgettiPagamenti.FK_Progetto=", Variabili.Edizione.get_Campo((object)"IDprogetto")), " "), "AND t_ProgettiPagamenti.FK_Sede="), Variabili.Edizione.get_Campo((object)"FK_SedeEdizione")), " "), "AND DataPagamento IS NOT NULL AND Anticipo=0 "), "ORDER BY DataRichiestaInizio ")));
PerseoNET/clsIncarico.cs:					string origineDati = "SELECT t_IncarichiEdizioni.IDincarico, (t_IncarichiEdizioni.FK_Edizione) AS IDedizione, IDdocente, PagamentoIndividuale, TotOreFatte, DataPagatoInizio, DataPagatoFine FROM t_IncarichiEdizioni INNER JOIN t_ProgettiPagamentiCompensiOneri ON t_IncarichiEdizioni.IDincarico = t_ProgettiPagamentiCompensiOneri.IDincarico WHERE t_IncarichiEdizioni.FK_Edizione=" + Conversions.ToString(value) + " AND Reso=0 ORDER BY IDdocente, t_IncarichiEdizioni.IDincarico, DataPagatoInizio ";
PerseoNET/clsIncarico.cs:				string origineDati = "SELECT IDdocente, FK_Azienda, IDincarico, SUM(TotOreFatte) AS OrePagate, DataPagatoInizio, DataPagatoFine FROM t_ProgettiPagamentiCompensiOneri WHERE Reso=0 GROUP BY IDdocente, FK_Azienda, IDincarico, DataPagatoInizio, DataPagatoFine HAVING IDincarico " + vStrFiltroIncarichi + " ORDER BY IDincarico, IDdocente ";
PerseoNET/clsIncarico.cs:						origineDati = "SELECT IDincarico, DescrEdizione, CodiceEdizione, PagaConsuntivoMese FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE t_PianoServizi.PagaConsuntivoMese=1 And IDincarico " + clsTblDatiDR.StringaFiltroIN("IDincarico");
PerseoNET/clsIncarico.cs:						origineDati = "SELECT IDincarico, IDdocente, OreSvolte, OrePagate FROM t_Incarichi ";
PerseoNET/clsIncarico.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE IDincarico=", clsTblDatiDR.get_Campo((object)"IDincarico")), " "), "And DataAttivita>='"), Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoInizio")), VariabiliClassi.StrFormatoDataPC)), "' "), "AND DataAttivita<='"), Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoFine")), VariabiliClassi.StrFormatoDataPC)), "' "));
PerseoNET/clsIncarico.cs:									origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE IDincarico=", clsTblDatiDR.get_Campo((object)"IDincarico")), " "), "AND DataAttivita>='"), Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoInizio")), VariabiliClassi.StrFormatoDataPC)), "' "), "AND DataAttivita<='"), Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoFine")), VariabiliClassi.StrFormatoDataPC)), "' "));
PerseoNET/clsIncarico.cs:								origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotaleOre FROM t_IncarichiEdizioni INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE IDincarico=", clsTblDatiDR.get_Campo((object)"IDincarico")), " "), "AND DataAttivita>='"), Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoInizio")), VariabiliClassi.StrFormatoDataPC)), "' "), "AND DataAttivita<='"), Strings.Format(RuntimeHelpers.GetObjectValue(clsTblDatiDR.get_Campo((object)"DataPagatoFine")), VariabiliClassi.StrFormatoDataPC)), "' "));
PerseoNET/clsIncarico.cs:					string origineDati = "SELECT IDpers, Cognome, Nome, Email FROM t_Personale WHERE Cognome IN('BIROLINI','POLLAZZON','PIGNI') AND Email IS NOT NULL ORDER BY Cognome ";
PerseoNET/clsIncarico.cs:						string origineDati = "SELECT IDdocente, IDedizione, IDincarico, IDparfisc, GiorniAnnoSolare, DataInizioIncarico, (CASE WHEN DataProlungamento IS NULL THEN DataFineIncarico ELSE DataProlungamento END) AS DataFineIncarico, NumeroGiorniLavorativi, (Cognome + ' ' + Nome ) AS StrDOC FROM t_Sedi INNER JOIN t_PianoServizi ON t_Sedi.IDsede = t_PianoServizi.FK_SedeEdizione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE RegolaAnnoSolare=1 AND ProtAutorizzaPubblicaAmm IS NULL AND IDdocente " + mvIncarichiContratti.StringaFiltroIN("FK_Docente") + " AND (CASE WHEN DataProlungamento IS NULL THEN DataFineContratto ELSE DataProlungamento END)>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " ORDER BY (Cognome + ' ' + Nome ), IDdocente, IDincarico ";
PerseoNET/clsIncarico.cs:							origineDati = "SELECT IDdocente, IDincarico, IDparfisc, RegolaAnnoSolare, (Cognome + ' ' + Nome ) AS StrDOC FROM t_Sedi INNER JOIN t_PianoServizi ON t_Sedi.IDsede = t_PianoServizi.FK_SedeEdizione INNER JOIN t_IncarichiEdizioni ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione INNER JOIN t_DocentiContratti ON t_IncarichiEdizioniContratti.FK_Contratto = t_DocentiContratti.IDcontratto INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_DocentiContrattiEsterni ON t_DocentiContratti.IDcontratto = t_DocentiContrattiEsterni.FK_DocenteContratto INNER JOIN t_DecodificatoreParametroFiscale ON t_DocentiContrattiEsterni.FK_CodicePF = t_DecodificatoreParametroFiscale.IDparfisc WHERE ProtAutorizzaPubblicaAmm IS NULL AND IDincarico " + mvIncarichiContratti.StringaFiltroIN("IDincarico") + " AND (CASE WHEN DataProlungamento IS NULL THEN DataFineContratto ELSE DataProlungamento END)>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataInizioIncarico<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " ORDER BY (Cognome + ' ' + Nome ), IDdocente, IDincarico ";
PerseoNET/clsIncarico.cs:								string vSQL = "SELECT DataSvolgimento, SUM(Minuti) AS TotaleMin FROM v_DettaglioOreSvoltePerIncarico WHERE IDincarico " + text + " AND IDdocente=" + Conversions.ToString(num3) + " GROUP BY DataSvolgimento HAVING YEAR(DataSvolgimento)=" + Conversions.ToString(DateAndTime.Year(vDataAttivita)) + " AND DataSvolgimento<>" + FunzStringa.StrDataSQL(Strings.Format(vDataAttivita, "dd/MM/yyyy"), FlagSqlServer: true) + " ORDER BY DataSvolgimento ";
PerseoNET/clsIncarico.cs:						string origineDati = "SELECT IDincarico, IDincacontra, (IDcontratto) AS FK_Contratto, (IDsede) AS FK_SedeEdizione, FK_TipoAttivita, (IDdocente) AS FK_Docente, FK_Azienda, FK_Tipo, OreAssegnate, QuotaOraIncarico, OreSvolgere, DataInizioIncarico, DataFineIncarico, OreFatteInc, OreFatteIncCOD, DataApprovaIncarico, ApprovaIncarico, DataProlungamento, ApprovaProlungamento, PreDimissione, PagamentoIndividuale, DataUltimoPagamento, IncaricoGenericoGratuito, SbloccoTemporaneo FROM t_IncarichiContrattiEdizioni WHERE IDedizione=" + Conversions.ToString(mvIDedizione) + " ORDER BY IDincarico, DataInizioIncarico, DataFineIncarico, IDincacontra ";
PerseoNET/clsIncarico.cs:						origineDati = "SELECT t_IncarichiEdizioni.IDincarico, DataAttivita, OraInizio, OraFine FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE IDincarico " + text + " ";
PerseoNET/clsIncarico.cs:						origineDati = origineDati + "UNION SELECT t_IncarichiEdizioni.IDincarico, DataAttivita, OraInizio, OraFine FROM t_IncarichiEdizioni INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE IDincarico " + text + " ";
PerseoNET/clsIncarico.cs:						origineDati = "SELECT IDincarico, DataAttivita, OraInizio, OraFine FROM t_PianificazioneContrattiIncarichi ";
PerseoNET/clsIncarico.cs:				string origineDati = "SELECT t_AttivitaEdizione.TipoAttivita, t_AttivitaEdizione.OreAttivita, SUM(OreAssegnate) AS TotaleAss, SUM(OreFatte) AS TotaleSvolte, SUM(OreResidue) AS TotaleResidue FROM t_IncarichiEdizione INNER JOIN t_AttivitaEdizione ON t_IncarichiEdizione.TipoAttivita = t_AttivitaEdizione.TipoAttivita WHERE t_AttivitaEdizione.TipoAttivita<>'STAGE' GROUP BY IDedizione, IndTG, t_AttivitaEdizione.TipoAttivita, t_AttivitaEdizione.IndTA, t_AttivitaEdizione.OreAttivita ORDER BY IndTG, t_AttivitaEdizione.IndTA ";
PerseoNET/frmModelliCustomer.cs:				string origineDati = "SELECT t_ModelliGradimento.IDmodgr, DescrModello, TipoFormativoInterno, CompilaMetaOre, MinDurataEdizione, MaxDurataEdizione, Attivo, (SELECT COUNT(IDitemgrad) FROM T_ModelloGradimentoItem WHERE FK_MOdello=IDmodgr) AS NItem FROM t_ModelliGradimento LEFT OUTER JOIN t_ModelliGradimentoTipoForm ON t_ModelliGradimento.IDmodgr = t_ModelliGradimentoTipoForm.FK_Modello LEFT OUTER JOIN t_TipoFormativoInterno ON t_ModelliGradimentoTipoForm.FK_TipoFormativo = t_TipoFormativoInterno.IDtformaint ORDER BY TipoFormativoInterno, Attivo DESC, DescrModello ";
PerseoNET/frmModelliCustomer.cs:				origineDati = "SELECT t_ModelliQuestionarioOccupazione.IDmodsbocc, DescrModelloQuest, Attivo FROM t_ModelliQuestionarioOccupazione ";
PerseoNET/frmModelliCustomer.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_ModelliGradimento(DescrModello, DescrEstesaModello, PuntMinimo, PuntMassimo, CompilaMetaOre, MinDurataEdizione, MaxDurataEdizione) SELECT ('z' + '" + FunzStringa.StringaSQL(text) + "') AS Descrizione, DescrEstesaModello, PuntMinimo, PuntMassimo, (0) AS MetaOre, MinDurataEdizione, MaxDurataEdizione FROM t_ModelliGradimento WHERE IDmodgr=", tblModQ.get_Campo((object)0, vFlagUpdateDB: false)), " "));
PerseoNET/frmModelliCustomer.cs:						vSQL = "INSERT INTO t_ModelloGradimentoSezioni(FK_ModelloGR, CodiceSez, DescrSezione, PesoSezione) SELECT (" + Conversions.ToString(num2) + ") AS FK_Mod, CodiceSez, DescrSezione, PesoSezione FROM t_ModelloGradimentoSezioni WHERE FK_ModelloGR=" + Conversions.ToString(value) + " ORDER BY IDsezmodgr ";
PerseoNET/frmModelliCustomer.cs:						vSQL = "SELECT FK_Modello, FK_Sezione, IndItem, DescrItem, PesoItem, DescrEstesaItem, CoeffRating, ItemAttivo FROM t_ModelloGradimentoItem WHERE FK_Modello=" + Conversions.ToString(value) + " ORDER BY FK_Sezione, IndItem ";
PerseoNET/frmModelliCustomer.cs:						vSQL = "SELECT IDsezmodgr, FK_ModelloGR FROM t_ModelloGradimentoSezioni WHERE FK_ModelloGR=" + Conversions.ToString(num2) + " ORDER BY IDsezmodgr ";
PerseoNET/frmModelliCustomer.cs:						vSQL = "SELECT t_ModelloGradimentoSezioni.IDsezmodgr, FK_ModelloGR, COUNT(IDitemgrad) AS NItem FROM t_ModelloGradimentoSezioni INNER JOIN t_ModelloGradimentoItem ON t_ModelloGradimentoSezioni.IDsezmodgr = t_ModelloGradimentoItem.FK_Sezione GROUP BY t_ModelloGradimentoSezioni.IDsezmodgr, FK_ModelloGR HAVING FK_ModelloGR=" + Conversions.ToString(value) + " ORDER BY IDsezmodgr ";
PerseoNET/frmModelliCustomer.cs:						vSQL = (clsTblDatiDR.DestinazioneDati = "SELECT FK_Modello, FK_Sezione, IndItem, DescrItem, PesoItem, DescrEstesaItem, CoeffRating, ItemAttivo FROM t_ModelloGradimentoItem ");
PerseoNET/frmModelliCustomer.cs:						vSQL = "SELECT IDitemgrad, FK_Modello, FK_Sezione, IndItem FROM t_ModelloGradimentoItem WHERE FK_Modello=" + Conversions.ToString(value) + " ORDER BY FK_Sezione, IndItem ";
PerseoNET/frmModelliCustomer.cs:						vSQL = "SELECT IDitemgrad, FK_Modello, FK_Sezione, IndItem FROM t_ModelloGradimentoItem WHERE FK_Modello=" + Conversions.ToString(num2) + " ORDER BY FK_Sezione, IndItem ";
PerseoNET/frmModelliCustomer.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("INSERT INTO t_ModelloGradimentoItemOpzioni(FK_Item, IndOpzione, DescrOpzione, OpzioneAttiva) SELECT (", clsTblDatiDR2.get_Campo((object)0)), ") AS FKI, IndOpzione, DescrOpzione, OpzioneAttiva "), "FROM t_ModelloGradimentoItemOpzioni WHERE FK_Item="), clsTblDatiDR.get_Campo((object)0)));
PerseoNET/frmEreditaOreApprovate.cs:				string text = "SELECT t_IncarichiEdizioni.IDincarico, IDincacontra, t_PianoServizi.FK_SedeEdizione, t_Azioni.FK_Progetto, IDtattivita, FK_Contratto, t_IncarichiEdizioni.FK_Docente, ApprovaIncarico, TipoAttivita, DescrBreveArgomento, DescrIncarico, OreAssegnate, DataInizioIncarico, DataFineIncarico, DataProlungamento, DataApprovaIncarico, QuotaOraIncarico, OreSvolgere, EreditaOre FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione AND t_AttivitaEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento ";
PerseoNET/frmEreditaOreApprovate.cs:					text = "SELECT t_IncarichiEdizioni.IDincarico, IDincacontra, t_PianoServizi.IDedizione, t_TipoAttivitaEdizione.TipoAttivita, (CASE WHEN DescrIncarico IS NOT NULL THEN DescrIncarico ELSE DescrBreveArgomento END) AS DescrIncarico, OreAssegnate, FK_Contratto, DataInizioIncarico, DataFineIncarico, DataProlungamento, t_IncarichiEdizioniContratti.QuotaOraIncarico, OreSvolgere, DataApprovaIncarico FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione AND t_AttivitaEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_ProgettiPagamentiCompensiOneri ON t_IncarichiEdizioni.IDincarico = t_ProgettiPagamentiCompensiOneri.IDincarico ";
PerseoNET/frmEreditaOreApprovate.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDincarico, OreAssegnate, SUM(OreSvolgere) AS TotaleOreApprovate, (SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) FROM t_CalendarioAttivita WHERE FK_Incarico=", tblIncApprovati.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), ") AS OreFatteDOC, "), "(SELECT (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) "), "FROM t_CalendarioCodocenza INNER JOIN "), "t_IncarichiEdizioni ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN "), "t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt "), "WHERE t_CalendarioCodocenza.FK_Incarico="), tblIncApprovati.get_Campo((object)"IDincarico", vFlagUpdateDB: false)), ") AS OreFatteCOD "), "FROM t_IncarichiEdizioni INNER JOIN "), "t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione "), "WHERE ApprovaIncarico=1 "), "GROUP BY IDincarico, OreAssegnate HAVING IDincarico="), tblIncApprovati.get_Campo((object)"IDincarico", vFlagUpdateDB: false)));
PerseoNET/frmCalendarioAltreFunzioni.cs:					vSQL = "SELECT IDincarico, TipoAttivita FROM t_IncarichiContrattiEdizioni WHERE TipoAttivita LIKE '%SOSTEGNO%'";
PerseoNET/frmCalendarioAltreFunzioni.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocente, StrDOC FROM t_IncarichiContrattiEdizioni WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY IDdocente, StrDOC "));
PerseoNET/frmCalendarioAltreFunzioni.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDattedi, (IDedizione) AS FK_Edizione, IDincarico, FK_Tipo, FK_TipoAttivita, IDdocente, IndTA, TipoAttivita, DescrIncarico, OreAttivita, OreAssegnate, (OreFatteInc) AS torep FROM t_IncarichiContrattiEdizioni WHERE FK_Argomento IS NULL AND Aula=False AND t_AttivitaEdizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " "), "GROUP BY IDincarico, IDdocente, FK_Tipo, FK_TipoAttivita, IDdocente, "), "IndTA, TipoAttivita, DescrIncarico, OreAttivita, OreAssegnate, OreFatteInc "), "ORDER BY IndTA, TipoAttivita "));
PerseoNET/frmCalendarioAltreFunzioni.cs:				vSQL = "SELECT t_CalendarioAttivita.IDcalatt, IDincarico, IDattedi, IDtattivita, (FK_Iscrizione) AS IDiscrizione, (FK_Locale) AS IDloced, FK_DotePIP, FK_ProgPIP, t_IncarichiEdizioni.FK_Edizione, (NULL) AS OrdDataAttivita, DataAttivita, OraInizio, OraFine, TipoAttivita, t_CalendarioAttivita.DescrAttivita, FK_Iscrizione, (NULL) AS Studente, LavoroPIP, PresenzaStudentePIP, (0) AS NumeroStudenti, DocenzaFAD FROM t_CalendarioAttivita INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ";
PerseoNET/frmCalendarioAltreFunzioni.cs:					string origineDati = "SELECT (0) AS IDdescr, DescrAttivita FROM t_DescrAttivita ";
PerseoNET/frmCalendarioAltreFunzioni.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDpipprogetto, (0) AS IDpfdote, DescrAttivita FROM t_ProgettiServiziPIP WHERE FK_Progetto=", Variabili.Progetto.get_Campo((object)0)), " ORDER BY IndPIP, DescrAttivita"));
PerseoNET/frmCalendarioAltreFunzioni.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_StudentiDotiPianiFormativi.IDpfdote, FK_TipoAttivitaPF, DescrAttivita, MaxOrePreviste, (0) AS TotaleOre FROM t_StudentiDotiPianiFormativi WHERE FK_Dote=", tblStud.get_Campo((object)"IDdotestud", vFlagUpdateDB: false)), " "), "ORDER BY IndPIP, DescrAttivita "));
PerseoNET/frmCalendarioAltreFunzioni.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDpfdote, IDdote, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotaleOre FROM v_StudentiDettaglioSvolteAttivitaPIP GROUP BY IDpfdote, IDdote HAVING IDdote=", tblStud.get_Campo((object)"IDdotestud", vFlagUpdateDB: false)), " "));
PerseoNET/frmCalendarioAltreFunzioni.cs:							string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT FK_Iscrizione, FK_Attivita FROM t_RegistroStage WHERE FK_Attivita=", tblCalAltro.get_Campo((object)"IDcalatt", vFlagUpdateDB: false)));
PerseoNET/frmCalendarioAltreFunzioni.cs:							vSQL = "SELECT COUNT(IDiscrizione) AS NumeroRecord FROM t_IscrittiEdizione WHERE IDiscrizione " + str + " AND DoteChiusa=True ";
PerseoNET/frmCalendarioAltreFunzioni.cs:				string origineDati = "SELECT IDattedi, (IDedizione) AS FK_Edizione, IDincarico, FK_Tipo, FK_TipoAttivita, IDdocente, IndTA, TipoAttivita, DescrIncarico, OreAttivita, OreAssegnate, (OreFatteInc) AS torep FROM t_IncarichiContrattiEdizioni " + str + "GROUP BY IDincarico, IDattedi, IDdocente, FK_Tipo, FK_TipoAttivita, IDdocente, IndTA, TipoAttivita, DescrIncarico, OreAttivita, OreAssegnate, OreFatteInc, IDedizione HAVING IDdocente=" + Conversions.ToString(ComboDOC.PKSelezionatoCombo) + " ORDER BY IndTA, TipoAttivita ";
PerseoNET/frmCalendarioAltreFunzioni.cs:						origineDatiInizialeNoFiltroOrd = "SELECT IDtstage FROM t_TipoAttivitaStage WHERE TipoAttivitaStage LIKE '%SOSTEGNO%' AND Gruppo=1 And Stage=0 And Individuale=1 And Obsoleto=0";
PerseoNET/frmCalendarioAltreFunzioni.cs:				string origineDati = "SELECT IDcalatt, FK_Incarico, DataAttivita, OraInizio, OraFine, DescrAttivita, FK_Locale, FK_Iscrizione, LavoroPIP, PresenzaStudentePIP, FK_DotePIP, FK_ProgPIP, SostegnoIndividuale, DocenzaFAD, DataRec, DataModifica FROM t_CalendarioAttivita WHERE IDcalatt=" + Conversions.ToString(vIDatt);
PerseoNET/frmCalendarioAltreFunzioni.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_RegistroStage.IDregstage, IDutente, IDiscrizione, (FK_DoteStudente) AS IDdotestud, (Cognome + ' ' + Nome) AS Studente FROM t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE FK_Attivita=", tblCalAltro.get_Campo((object)"IDcalatt", vFlagUpdateDB: false)), " ORDER BY (Cognome + ' ' + Nome) "));
PerseoNET/frmCalendarioAltreFunzioni.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtattivita, AttivitaPIP FROM t_TipoAttivitaEdizione WHERE IDtattivita=", tblIncAltro.get_Campo((object)"FK_TipoAttivita", vFlagUpdateDB: false)));
PerseoNET/frmCalendarioAltreFunzioni.cs:						string vSQL = "SELECT IDregstage, FK_Iscrizione, FK_Attivita, DataStage, OraIngresso, OraUscita FROM t_RegistroStage WHERE FK_Attivita=" + Conversions.ToString(FormAtt.ChiavePrimaria);
PerseoNET/frmCalendarioAltreFunzioni.cs:												string vSQL = "SELECT IDtstage, TipoAttivitaStage FROM t_TipoAttivitaStage WHERE TipoAttivitaStage='ATTIVITÃ PIP' AND PIP=True ";
PerseoNET/frmCalendarioAltreFunzioni.cs:					string origineDati = "SELECT DataAttivita, OraInizio, OraFine, DescrAttivita, Esito FROM t_CalendarioAttivita ";
PerseoNET/frmCalendarioAltreFunzioni.cs:							string origineDati = ((tblCalAltro.get_Riga(vMantieniPrimaRigaVisualizzata: false) != 0) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_RegistroStage.IDregstage, IDutente, IDiscrizione, (FK_DoteStudente) AS IDdotestud, (Cognome + ' ' + Nome) AS Studente FROM t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE FK_Attivita=", tblCalAltro.get_Campo((object)"IDcalatt", vFlagUpdateDB: false)), " ORDER BY (Cognome + ' ' + Nome) ")) : "SELECT t_RegistroStage.IDregstage, IDutente, IDiscrizione, (FK_DoteStudente) AS IDdotestud, (Cognome + ' ' + Nome) AS Studente FROM t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente ORDER BY (Cognome + ' ' + Nome) ");
PerseoNET/frmCalendarioAltreFunzioni.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_RegistroStage.IDregstage, IDutente, IDiscrizione, (FK_DoteStudente) AS IDdotestud, (Cognome + ' ' + Nome) AS Studente FROM t_RegistroStage INNER JOIN t_Iscrizioni ON t_RegistroStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE FK_Attivita=", tblCalAltro.get_Campo((object)"IDcalatt", vFlagUpdateDB: false)), " ORDER BY (Cognome + ' ' + Nome) "));
PerseoNET/frmCalendarioAltreFunzioni.cs:				string origineDati = "SELECT (FK_Attivita) AS IDcalatt, COUNT(IDregstage) AS NReg FROM v_RegistrazioniCoachingTutoring GROUP BY FK_Attivita HAVING FK_Attivita " + clsTblDatiDR.StringaFiltroIN("IDcalatt");
PerseoNET/frmCalendarioAltreFunzioni.cs:							string str = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Iscrizioni.IDiscrizione, DataAvvio, DataFine, IDedizione, t_PianoServizi.Bloccato, (CASE WHEN IDedizione=", Variabili.Edizione.get_Campo((object)0)), " THEN 1 ELSE 2 END) AS OrdEdizioni, "), "(Cognome + ' ' + Nome) AS Studente, DataIscr, DataRitiro, (0) AS OreSvolteSostegno, "), "(0) AS OreSvolteSostegnoIndividuale, (NULL) AS Sostegno, (NULL) AS Presente "), "FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente=t_Utenti.IDutente INNER JOIN "), "t_PianoServizi ON t_Iscrizioni.FK_Edizione=t_PianoServizi.IDedizione "));
PerseoNET/frmCalendarioAltreFunzioni.cs:						string str = "SELECT t_IscrittiEdizione.IDiscrizione, IDdotestud, Studente, ID_Dote, DataAvvioDote, DataFineDote, (SELECT SUM(MaxOrePreviste) FROM t_DescrAttivitaAltreFunzioni WHERE IDiscrizione=t_IscrittiEdizione.IDiscrizione) AS OreAttivitaIndividuali, DoteChiusa, IIf(DataRitiro IS NOT NULL,True,False) AS Ritirato, DataRitiro, DataDoteChiusa FROM t_IscrittiEdizione WHERE DataIscr IS NOT NULL ORDER BY Studente ";
PerseoNET/frmCalendarioAltreFunzioni.cs:					string origineDati = "SELECT (t_IscrizioniSostegno.FK_Iscrizione) AS IDiscrizione, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleMinuti, t_CalendarioCodocenza.SostegnoIndividuale FROM t_IscrizioniSostegno INNER JOIN t_CalendarioCodocenza ON t_IscrizioniSostegno.FK_SostegnoAula = t_CalendarioCodocenza.IDcalcod INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt GROUP BY t_IscrizioniSostegno.FK_Iscrizione, t_CalendarioCodocenza.SostegnoIndividuale HAVING t_IscrizioniSostegno.FK_Iscrizione " + tblStud.StringaFiltroIN("IDiscrizione") + " UNION SELECT (t_IscrizioniSostegno.FK_Iscrizione) AS IDiscrizione, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleMinuti, SostegnoIndividuale FROM t_IscrizioniSostegno INNER JOIN t_CalendarioAttivita ON t_IscrizioniSostegno.FK_SostegnoAttivita = t_CalendarioAttivita.IDcalatt GROUP BY t_IscrizioniSostegno.FK_Iscrizione, t_CalendarioAttivita.SostegnoIndividuale HAVING t_IscrizioniSostegno.FK_Iscrizione " + tblStud.StringaFiltroIN("IDiscrizione") + " ";
PerseoNET/frmCalendarioAltreFunzioni.cs:				string origineDati = "SELECT IDsostegnoiscr, (FK_Iscrizione) AS IDiscrizione, FK_SostegnoAttivita FROM t_IscrizioniSostegno WHERE FK_SostegnoAttivita " + tblCalAltro.StringaFiltroIN("IDcalatt") + " ORDER BY FK_Iscrizione ";
PerseoNET/frmCalendarioAltreFunzioni.cs:				origineDati = "SELECT IDregstage, (FK_Iscrizione) AS IDiscrizione, FK_Attivita, DescrAttivitaStage, DataStage, OraIngresso, OraUscita FROM t_RegistroStage INNER JOIN t_TipoAttivitaStage ON t_RegistroStage.FK_TipoStage=t_TipoAttivitaStage.IDtstage WHERE FK_Iscrizione " + tblStud.StringaFiltroIN("IDiscrizione") + " AND DataStage " + text + " ORDER BY FK_Iscrizione, DataStage ";
PerseoNET/frmDettBando.cs:				string origineDati = "SELECT IDbando, FK_TipoBando, DescrBando, DescrEstesaBando, CodiceBando, DataBando, DescrDecreto, AnnoBando, ObbligatorioID, ObbligatorioEdizioneID, BandoAttivo, DataRec, DataModifica, Bloccato FROM t_Bandi WHERE IDbando=" + Conversions.ToString(Variabili.Bando.PKBando);
PerseoNET/frmDettBando.cs:				origineDati = "SELECT IDtbando, TipoBando FROM t_TipoBando WHERE Obsoleto=0 ORDER BY TipoBando";
PerseoNET/frmDettBando.cs:					vSQL = "SELECT MIN(DataAvvioProg) AS PrimaData, MAX(DataFineProg) AS UltimaData FROM t_Progetti WHERE FK_Bando=" + Conversions.ToString(FormBando.ChiavePrimaria);
PerseoNET/frmDettBando.cs:				vSQL = ((FormBando.ChiavePrimaria != 0L) ? ("SELECT IDbando, FK_TipoBando, DescrBando, AnnoBando, CodiceBando FROM t_Bandi WHERE DescrBando='" + FunzStringa.StringaSQL(txtDescrBando.Text) + "' AND CodiceBando='" + FunzStringa.StringaSQL(txtCodiceBando.Text) + "' AND AnnoBando='" + FunzStringa.StringaSQL(txtAnnoBando.Text) + "' AND IDbando<>" + Conversions.ToString(FormBando.ChiavePrimaria)) : ("SELECT IDbando, FK_TipoBando, DescrBando, AnnoBando, CodiceBando FROM t_Bandi WHERE DescrBando='" + FunzStringa.StringaSQL(txtDescrBando.Text) + "' AND CodiceBando='" + FunzStringa.StringaSQL(txtCodiceBando.Text) + "' AND AnnoBando='" + FunzStringa.StringaSQL(txtAnnoBando.Text) + "' "));
PerseoNET/frmDettBando.cs:								string origineDati = "SELECT t_Progetti.IDprogetto, FK_Bando, IDtlogoregstage, SiglaSede, DescrProgetto, TipoProgetto, IDmwp, CodiceProgetto, CodiceBando, DataAvvioProg, DataFineProg, TipoLogoRegistroStage, ProgettoAttivo, (SELECT COUNT(IDedizione) FROM t_Azioni INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione WHERE FK_Progetto=IDprogetto) AS NumEdizioni FROM t_Progetti INNER JOIN t_Sedi ON t_Progetti.FK_SedeProgetto = t_Sedi.IDsede INNER JOIN t_Bandi ON t_Progetti.FK_Bando = t_Bandi.IDbando LEFT OUTER JOIN t_TipoProgetto ON t_Progetti.FK_TipoProgetto = t_TipoProgetto.IDtprogetto LEFT OUTER JOIN t_TipoLogoRegistroStage ON t_Progetti.FK_TipoLogoRegistroStage = t_TipoLogoRegistroStage.IDtlogoregstage WHERE FK_Bando=" + Conversions.ToString(FormBando.ChiavePrimaria) + " ORDER BY SiglaSede, IDmwp ";
PerseoNET/frmDettBando.cs:									origineDati = "SELECT IDtlogoregstage, TipoLogoRegistroStage FROM t_TipoLogoRegistroStage WHERE Obsoleto=0 ORDER BY IndLogo, TipoLogoRegistroStage ";
PerseoNET/frmDettBando.cs:					string origineDati = "SELECT ('" + FunzStringa.StringaSQL(txtDescrBando.Text) + "') AS Bando, DescrProgetto, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeProgetto) AS SedeProgetto, IDmwp, CodiceProgetto, DataAvvioProg, DataFineProg, t_Progetti.DelegaAzienda, BudgetProgetto, DescrAzione, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeAzione) AS SedeAzione, DescrEdizione, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SedeEdizione, IDmwe, CodiceEdizione, TipoFormativoInterno, DataAvvio, DataFine, DataInizioEsame, DataFineEsame, Durata, (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE FK_Edizione=IDedizione AND DataIscr IS NOT NULL) AS NumeroIscritti, (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE FK_Edizione=IDedizione AND DataIscr IS NOT NULL AND DataRitiro IS NOT NULL) AS NumeroRitirati FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint WHERE FK_Bando=" + Conversions.ToString(FormBando.ChiavePrimaria) + " ORDER BY DescrProgetto, DescrAzione, TipoFormativoInterno, DataAvvio ";
PerseoNET/frmDettBando.cs:					string origineDati = "SELECT ('" + FunzStringa.StringaSQL(txtDescrBando.Text) + "') AS Bando, DescrProgetto, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeProgetto) AS SedeProgetto, IDmwp, CodiceProgetto, DataAvvioProg, DataFineProg, t_Progetti.DelegaAzienda, BudgetProgetto, DescrAzione, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeAzione) AS SedeAzione, DescrEdizione, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SedeEdizione, IDmwe, CodiceEdizione, TipoFormativoInterno, DataAvvio, DataFine, DataInizioEsame, DataFineEsame, Durata, (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE FK_Edizione=IDedizione AND DataIscr IS NOT NULL) AS NumeroIscritti, (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE FK_Edizione=IDedizione AND DataIscr IS NOT NULL AND DataRitiro IS NOT NULL) AS NumeroRitirati FROM t_Progetti INNER JOIN t_Azioni ON t_Progetti.IDprogetto = t_Azioni.FK_Progetto INNER JOIN t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint WHERE FK_Bando=" + Conversions.ToString(FormBando.ChiavePrimaria) + " ORDER BY DescrProgetto, DescrAzione, TipoFormativoInterno, DataAvvio ";
PerseoNET/frmDettBando.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("INSERT INTO t_Progetti(FK_Bando, FK_TipoProgetto, FK_SedeProgetto, ConsenteCreaEdizioni, GestioneProgettoPersonale, ProgettoAttivo, DescrProgetto, CodiceProgetto, DataAvvioProg, DataFineProg, DelegaAzienda, ProgettoStandard, IscrizioneDote, BloccoDescrEdizione) SELECT (" + Conversions.ToString(FormBando.ChiavePrimaria) + ") AS FK_Bando, FK_TipoProgetto, FK_SedeProgetto, ConsenteCreaEdizioni, GestioneProgettoPersonale, (1) AS ProgettoAttivo, DescrProgetto, ('" + text + "') AS CodiceProgetto, (" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + ") AS DataAvvioProg, (" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + ") AS DataFineProg, DelegaAzienda, ProgettoStandard, IscrizioneDote, BloccoDescrEdizione FROM t_Progetti WHERE IDprogetto=", Variabili.Progetto.get_Campo((object)"IDprogetto")));
PerseoNET/clsDipendente.cs:					string origineDati = "SELECT IDdocente, FK_Tipo, FK_Ruolo, FK_ParFiscaleAttuale, FK_TipoLavoroAttuale, FK_SedePrimaria, DescrProfessione, FK_TipoFascia, Cognome, Nome, Sesso, CodFiscale, PIVA, DataNascita, LuogoNascita, NazNascita, ProvNascita, FK_Nazionalita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, NazResidenza, ComAbitazione, IndirAbitazione, CAPabitazione, ProvAbitazione, Attivo, DocenteTest, DataRec, DataModifica, Bloccato FROM t_Docenti ";
PerseoNET/clsDipendente.cs:				string origineDati = "SELECT t_DocentiContratti.IDcontratto, FK_Docente, IDtformacontr, IDtlivcontrdoc, DataInizioContratto, DataFineContratto, DataDimissioneDipendente, OreContratto, OreLavorate, CostoDocenza, CostoCoordTutor, CostoAltreFunzioni, TipoFormaContratto, TipoLivelloDocInterno, CodiceLivelloDoc FROM t_DocentiContratti INNER JOIN t_TipoLivelloDocenteInterno ON t_DocentiContratti.FK_LivelloInterno = t_TipoLivelloDocenteInterno.IDtlivcontrdoc INNER JOIN t_TipoFormaContrattuale ON t_DocentiContratti.FK_TipoFormaContratto = t_TipoFormaContrattuale.IDtformacontr WHERE DataInizioContratto>='" + Variabili.Annualita.GeneraStringaAvvioAnnoAmministrativo(vDataInizioAnnoAmm) + "' AND DataFineContratto<='" + Variabili.Annualita.GeneraStringaFineAnnoAmministrativo(vDataInizioAnnoAmm) + "' AND FK_Docente=" + Conversions.ToString(mvPKdocente) + " ";
PerseoNET/clsDipendente.cs:				string origineDati = "SELECT t_DocentiPrevisioneImpiego.FK_Docente, ContrattoAula, SUM(OrePreviste) AS TotaleOrePreviste FROM t_DocentiPrevisioneImpiego INNER JOIN t_TipoAttivitaEdizione ON t_DocentiPrevisioneImpiego.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE DataInizioPeriodo>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataFinePeriodo<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " GROUP BY t_DocentiPrevisioneImpiego.FK_Docente, ContrattoAula ORDER BY FK_Docente, ContrattoAula ";
PerseoNET/clsDipendente.cs:				string origineDati = "SELECT t_DocentiContratti.IDcontratto, t_DocentiContratti.FK_Docente, SUM(OreAssegnate) AS OreLI FROM t_DocentiContratti INNER JOIN t_DocentiContrattiInterniStorico ON t_DocentiContratti.IDcontratto = t_DocentiContrattiInterniStorico.FK_Contratto GROUP BY t_DocentiContratti.IDcontratto, t_DocentiContratti.FK_Docente HAVING IDcontratto=" + Conversions.ToString(mvPKContrattoInterno) + " ";
PerseoNET/clsDipendente.cs:					string origineDati = "SELECT t_Docenti.IDdocente, IDprogetto, IDattedi, IDsede, (Cognome + ' ' + Nome) AS StrDOC, CodiceEdizione, IDmwp, DescrEdizione, DataAvvioProg, DataFineProg, DescrSede, SiglaSede, IndTA, TipoAttivita, MIN(DataAvvio) AS DataAvvio, MAX(DataFine) AS DataFine, SUM(OreAssegnate) AS OreAssegnate FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE FK_Tipo=2 AND IDincacontra IS NULL GROUP BY t_Docenti.IDdocente, IDprogetto, IDattedi, IDsede, Cognome, Nome, CodiceEdizione, IDmwp, DescrEdizione, DataAvvioProg, DataFineProg, DescrSede, SiglaSede, TipoAttivita, IndTA HAVING IDdocente=" + Conversions.ToString(mvPKdocente) + " AND IDprogetto=" + Conversions.ToString(Variabili.Progetto.PKProgetto) + " ORDER BY (Cognome + ' ' + Nome), CodiceEdizione, IndTA ";
PerseoNET/clsDipendente.cs:					origineDati = "SELECT Numerico_1, Numerico_2, Numerico_3, Numerico_4, Testo_1, Testo_2, Testo_3, Testo_4, Testo_5, Testo_6, Testo_7, Testo_8, Numerico_5, Testo_9, Testo_10, Testo_11, Numerico_6 FROM t_StampaTbl_1 ";
PerseoNET/clsDipendente.cs:					origineDati = "SELECT (Numerico_2) AS IDprogetto, (Numerico_5) AS IndTA, (Testo_9) AS TipoAttivita, SUM(Numerico_6) AS OreAssegnate FROM t_StampaTbl_1 GROUP BY Numerico_2, Numerico_5, Testo_9 ORDER BY Numerico_5 ";
PerseoNET/clsDipendente.cs:			string origineDati = "SELECT t_Docenti.IDdocente, IDprogetto, IDattedi, IDsede, (Cognome + ' ' + Nome) AS StrDOC, CodiceEdizione, IDmwp, DescrEdizione, DataAvvioProg, DataFineProg, DescrSede, SiglaSede, IndTA, TipoAttivita, MIN(DataAvvio) AS DataAvvio, MAX(DataFine) AS DataFine, SUM(OreAssegnate) AS OreAssegnate FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto WHERE FK_Tipo=2 GROUP BY t_Docenti.IDdocente, IDprogetto, IDattedi, IDsede, Cognome, Nome, CodiceEdizione, IDmwp, DescrEdizione, DataAvvioProg, DataFineProg, DescrSede, SiglaSede, TipoAttivita, IndTA HAVING IDdocente=" + Conversions.ToString(mvPKdocente) + " AND IDprogetto=" + Conversions.ToString(Variabili.Progetto.PKProgetto) + " ORDER BY (Cognome + ' ' + Nome), CodiceEdizione, IndTA ";
PerseoNET/clsDipendente.cs:					string origineDati = "SELECT t_Docenti.IDdocente, IDprogetto, IDattedi, IDsede, (Cognome + ' ' + Nome) AS StrDOC, CodiceEdizione, IDmwp, DescrEdizione, DataAvvioProg, t_Progetti.DataFineProg, DescrSede, SiglaSede, IndTA, TipoAttivita, DataAvvio, DataFine, OreAssegnate FROM t_TipoAttivitaEdizione INNER JOIN t_AttivitaEdizioni ON t_TipoAttivitaEdizione.IDtattivita = t_AttivitaEdizioni.FK_TipoAttivita INNER JOIN t_Progetti INNER JOIN t_ProgettiStoricoLettereIncaricoInterni INNER JOIN t_Docenti ON t_ProgettiStoricoLettereIncaricoInterni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_Sedi ON t_ProgettiStoricoLettereIncaricoInterni.FK_Sede = t_Sedi.IDsede ON t_Progetti.IDprogetto = t_ProgettiStoricoLettereIncaricoInterni.FK_Progetto ON t_AttivitaEdizioni.IDattedi = t_ProgettiStoricoLettereIncaricoInterni.FK_AttivitaEdizione INNER JOIN t_PianoServizi ON t_AttivitaEdizioni.FK_Edizione = t_PianoServizi.IDedizione WHERE FK_Tipo=2 AND IDdocente=" + Conversions.ToString(mvPKdocente) + " AND IDprogetto=" + Conversions.ToString(Variabili.Progetto.PKProgetto) + " " + text + "ORDER BY (Cognome + ' ' + Nome), CodiceEdizione, IndTA ";
PerseoNET/clsDipendente.cs:					origineDati = "SELECT Numerico_1, Numerico_2, Numerico_3, Numerico_4, Testo_1, Testo_2, Testo_3, Testo_4, Testo_5, Testo_6, Testo_7, Testo_8, Numerico_5, Testo_9, Testo_10, Testo_11, Numerico_6 FROM t_StampaTbl_1 ";
PerseoNET/clsDipendente.cs:					origineDati = "SELECT (Numerico_2) AS IDprogetto, (Numerico_5) AS IndTA, (Testo_9) AS TipoAttivita, SUM(Numerico_6) AS OreAssegnate FROM t_StampaTbl_1 GROUP BY Numerico_2, Numerico_5, Testo_9 ORDER BY Numerico_5 ";
PerseoNET/clsDipendente.cs:					string origineDati = "SELECT t_Docenti.IDdocente, IDprogetto, IDattedi, IDsede, (Cognome + ' ' + Nome) AS StrDOC, CodiceEdizione, IDmwp, DescrEdizione, DataAvvioProg, t_Progetti.DataFineProg, DescrSede, SiglaSede, IndTA, TipoAttivita, DataAvvio, DataFine, OreAssegnate FROM t_TipoAttivitaEdizione INNER JOIN t_AttivitaEdizioni ON t_TipoAttivitaEdizione.IDtattivita = t_AttivitaEdizioni.FK_TipoAttivita INNER JOIN t_Progetti INNER JOIN t_ProgettiStoricoLettereIncaricoInterni INNER JOIN t_Docenti ON t_ProgettiStoricoLettereIncaricoInterni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_Sedi ON t_ProgettiStoricoLettereIncaricoInterni.FK_Sede = t_Sedi.IDsede ON t_Progetti.IDprogetto = t_ProgettiStoricoLettereIncaricoInterni.FK_Progetto ON t_AttivitaEdizioni.IDattedi = t_ProgettiStoricoLettereIncaricoInterni.FK_AttivitaEdizione INNER JOIN t_PianoServizi ON t_PianoServizi.IDedizione=t_AttivitaEdizioni.FK_Edizione WHERE FK_Tipo=2 AND IDdocente=" + Conversions.ToString(mvPKdocente) + " AND IDprogetto=" + Conversions.ToString(mvPKprogetto) + " AND Variazione=1 ORDER BY (Cognome + ' ' + Nome), SiglaSede, IndTA ";
PerseoNET/clsDipendente.cs:				string origineDati = "SELECT t_Docenti.IDdocente, IDedizione, IDincarico, IDattedi, (Cognome + ' ' + Nome) AS StrDOC, CodFiscale, DescrSede, CodiceEdizione, DescrEdizione, IDmwa, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, DescrArgomento, Aula, OreAssegnate, (0) AS OreAssegnateAnnoAmm, (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)) FROM t_CalendarioAttivita WHERE FK_Incarico= IDincarico AND DataAttivita<'" + text + "') AS OreFattePrecedente, (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)) FROM t_CalendarioAttivita INNER JOIN t_CalendarioCodocenza ON t_CalendarioAttivita.IDcalatt = t_CalendarioCodocenza.FK_Calendario WHERE t_CalendarioCodocenza.FK_Incarico= IDincarico AND DataAttivita<'" + text + "') AS OreCODFattePrecedente FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE (IDdocente=" + Conversions.ToString(mvPKdocente) + " AND DataAvvio<'" + text + "' AND DataFine>='" + text + "' AND IDincacontra IS NULL) OR (IDdocente=" + Conversions.ToString(mvPKdocente) + " AND DataAvvio>='" + text + "' AND DataAvvio<='" + text2 + "' AND DataFine>'" + text + "' AND IDincacontra IS NULL) OR (DataAvvio<'" + text + "' AND DataFineFA>='" + text + "' AND FK_Docente=" + Conversions.ToString(mvPKdocente) + " AND IDincacontra IS NULL) OR (DataAvvio>'" + text2 + "' AND DataInizioFA<='" + text2 + "' AND FK_Docente=" + Conversions.ToString(mvPKdocente) + " AND IDincacontra IS NULL) ORDER BY IndTA ";
PerseoNET/clsDipendente.cs:						origineDati = "SELECT t_Docenti.IDdocente, IDedizione, IDattedi, (Cognome + ' ' + Nome) AS StrDOC, DescrSede, CodiceEdizione, DescrEdizione, DataAvvio, DataFine, TipoAttivita, (0) AS OreAssegnateAnnoAmm, DataLettera, Protocollo, Variazione FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ";
PerseoNET/clsDipendente.cs:						origineDati = "SELECT TipoAttivita, (0) AS OreAttivita FROM t_TipoAttivita ";
PerseoNET/clsDipendente.cs:				string origineDati = "SELECT t_Docenti.IDdocente, IDedizione, IDattedi, (Cognome + ' ' + Nome) AS StrDOC, DescrSede, CodiceEdizione, DescrEdizione, DataAvvio, DataFine, TipoAttivita, (OreAssegnate) AS OreAssegnateAnnoAmm, DataLettera, Protocollo, Variazione FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_DocentiContrattiInterniStorico ON t_DocentiContratti.IDcontratto = t_DocentiContrattiInterniStorico.FK_Contratto INNER JOIN t_AttivitaEdizioni ON t_DocentiContrattiInterniStorico.FK_AttivitaEdizione = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_AttivitaEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE DataInizioContratto>='" + text + "' AND DataFineContratto<='" + text2 + "' AND IDdocente=" + Conversions.ToString(mvPKdocente) + " AND Variazione=0 ORDER BY IndTA, SiglaSede";
PerseoNET/clsDipendente.cs:					origineDati = "SELECT TipoAttivita, (0) AS OreAttivita FROM t_TipoAttivita ";
PerseoNET/clsDipendente.cs:				string origineDati = "SELECT t_DocentiContratti.IDcontratto, IDstorcontr, FK_AttivitaEdizione, OreAssegnate, DataLettera, (0) AS Nuova FROM t_DocentiContrattiInterniStorico INNER JOIN t_DocentiContratti ON t_DocentiContrattiInterniStorico.FK_Contratto = t_DocentiContratti.IDcontratto WHERE IDcontratto=" + Conversions.ToString(mvPKContrattoInterno) + " AND Variazione=0 ORDER BY DataLettera DESC ";
PerseoNET/clsDipendente.cs:						origineDati = "SELECT t_Docenti.IDdocente, IDattedi, (Cognome + ' ' + Nome) AS StrDOC, DescrSede, CodiceEdizione, DescrEdizione, DataAvvio, DataFine, TipoAttivita, (OreAssegnate) AS OreAssegnateAnnoAmm, DataLettera, Protocollo, Variazione FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_DocentiContrattiInterniStorico ON t_DocentiContratti.IDcontratto = t_DocentiContrattiInterniStorico.FK_Contratto INNER JOIN t_AttivitaEdizioni ON t_DocentiContrattiInterniStorico.FK_AttivitaEdizione = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_AttivitaEdizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_Sedi ON t_Docenti.FK_SedePrimaria = t_Sedi.IDsede AND t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede WHERE t_DocentiContrattiInterniStorico.FK_Contratto=" + Conversions.ToString(mvPKContrattoInterno) + " AND IDdocente=" + Conversions.ToString(mvPKdocente) + " AND Variazione=1 ORDER BY IndTA, SiglaSede";
PerseoNET/clsDipendente.cs:						string destinazioneDati = "SELECT Numerico_1, Numerico_2, Numerico_3, Numerico_4, Testo_1, Testo_2, Testo_3, Testo_4, Testo_5, Testo_6, Testo_7, Testo_8, Numerico_5, Testo_9, Testo_10, Testo_11, Numerico_6 FROM t_StampaTbl_1 ";
PerseoNET/clsDipendente.cs:						destinazioneDati = "SELECT (Numerico_2) AS IDprogetto, (Numerico_5) AS IndTA, (Testo_9) AS TipoAttivita, SUM(Numerico_6) AS OreAssegnate FROM t_StampaTbl_1 GROUP BY Numerico_2, Numerico_5, Testo_9 ORDER BY Numerico_5 ";
PerseoNET/clsDipendente.cs:				string text = "SELECT t_IncarichiEdizioni.IDincarico, IDedizione, FK_SedeEdizione, FK_Docente, DescrEdizione, CodiceEdizione, SiglaSede, CodiceProgetto, IDmwp, IDmwa, IDmwe, DataAvvio, DataFine, IndTA, TipoAttivita, DescrArgomento, OreAssegnate, (0) AS TotOreFatte, (0) AS TotOreFatteAnno, (0) AS TotOreCOD, (0) AS TotOreCODAnno FROM t_IncarichiEdizioni INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento ";
PerseoNET/clsDipendente.cs:				string origineDati = "SELECT t_DocentiContratti.IDcontratto, FK_Docente, OreContratto, OreLavorate, (NULL) AS OreDocenza, (NULL) AS OreDocenzaAss, (NULL) AS OreFunzArticolate, (NULL) AS OreFunzArticolateAss, (NULL) AS OrePreparazione, (NULL) AS OreAggiornamento, (NULL) AS OreAltroAgg, (NULL) AS OrePendolo, (NULL) AS UsoPendolo, (OrePiu-OreMeno) AS VariazioneOre, (NULL) AS DeltaContratto, (0) OreFatteAula, (0) OreFatteAltro FROM t_DocentiContratti WHERE DataInizioContratto>='" + mvStrInizioAnnoAmm + "' AND DataFineContratto<='" + mvStrFineAnnoAmm + "' AND FK_Docente=" + Conversions.ToString(vID) + " AND FK_LivelloInterno IS NOT NULL ";
PerseoNET/clsDipendente.cs:				string origineDati = "SELECT t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Edizione, FK_Docente, FK_Attivita, FK_Argomento, FK_TipoAttivita, DescrEdizione, CodiceEdizione, IndTA, TipoAttivita, OreAssegnate, (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)/60) FROM t_CalendarioAttivita WHERE FK_Incarico= IDincarico AND DataAttivita<'" + mvStrInizioAnnoAmm + "') AS OreFattePrecedente, (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)/60) FROM t_CalendarioAttivita INNER JOIN t_CalendarioCodocenza ON t_CalendarioAttivita.IDcalatt = t_CalendarioCodocenza.FK_Calendario WHERE t_CalendarioCodocenza.FK_Incarico= IDincarico AND DataAttivita<'" + mvStrInizioAnnoAmm + "') AS OreCODFattePrecedente, (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)/60) FROM t_CalendarioAttivita WHERE FK_Incarico= IDincarico AND DataAttivita>='" + mvStrInizioAnnoAmm + "' AND DataAttivita<='" + mvStrFineAnnoAmm + "') AS OreFatte, (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)/60) FROM t_CalendarioAttivita INNER JOIN t_CalendarioCodocenza ON t_CalendarioAttivita.IDcalatt = t_CalendarioCodocenza.FK_Calendario WHERE t_CalendarioCodocenza.FK_Incarico= IDincarico AND DataAttivita>='" + mvStrInizioAnnoAmm + "' AND DataAttivita<='" + mvStrFineAnnoAmm + "') AS OreFatteCOD, ContrattoAula FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE (FK_Docente=" + Conversions.ToString(vID) + " AND DataAvvio<'" + mvStrInizioAnnoAmm + "' AND DataFine>'" + mvStrInizioAnnoAmm + "' AND IDincacontra IS NULL) OR (FK_Docente=" + Conversions.ToString(vID) + " AND DataAvvio>='" + mvStrInizioAnnoAmm + "' AND DataAvvio<='" + mvStrFineAnnoAmm + "' AND IDincacontra IS NULL) OR (DataAvvio<'" + mvStrInizioAnnoAmm + "' AND DataFineFA>='" + mvStrInizioAnnoAmm + "' AND FK_Docente=" + Conversions.ToString(vID) + " AND IDincacontra IS NULL) OR (DataAvvio>'" + mvStrFineAnnoAmm + "' AND DataInizioFA<='" + mvStrFineAnnoAmm + "' AND FK_Docente=" + Conversions.ToString(vID) + " AND IDincacontra IS NULL) ORDER BY FK_Docente, CodiceEdizione, IndTA ";
PerseoNET/clsDipendente.cs:				origineDati = "SELECT t_DocentiContratti.IDcontratto, FK_Docente, OreContratto, OreLavorate, (NULL) AS OreDocenza, (NULL) AS OreDocenzaAss, (NULL) AS OreFunzArticolate, (NULL) AS OreFunzArticolateAss, (NULL) AS OrePreparazione, (0) AS OreAggiornamento, (NULL) AS OreAltroAgg, (NULL) AS OrePendolo, (NULL) AS UsoPendolo, (OrePiu-OreMeno) AS VariazioneOre, (NULL) AS DeltaContratto, (0) OreFatteAula, (0) OreFatteAltro FROM t_DocentiContratti WHERE DataInizioContratto>='" + mvStrInizioAnnoAmm + "' AND DataFineContratto<='" + mvStrFineAnnoAmm + "' AND FK_Docente=" + Conversions.ToString(vID) + " ";
PerseoNET/clsDipendente.cs:				string str = "SELECT t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS StrDOC, IDcontratto, OreContratto, OreLavorate, (0) AS OreDocenza, (0) AS OreDocenzaAss, (0) AS OreFunzArticolate, (0) AS OreFunzArticolateAss, (0) AS OreFAPendolo, (0) AS OrePreparazione, (0) AS OreAggiornamento, (0) AS OreAltroAgg, (0) AS OrePendolo, (0) AS UsoPendolo, (OrePiu-OreMeno) AS VariazioneOre, (0) AS DeltaContratto, (0) OreFatteAula, (0) OreFatteAltro FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_TipoLivelloDocenteInterno ON t_DocentiContratti.FK_LivelloInterno = t_TipoLivelloDocenteInterno.IDtlivcontrdoc WHERE DataInizioContratto>='" + mvStrInizioAnnoAmm + "' AND FK_Tipo=2 AND t_Docenti.Attivo=1 AND DataFineContratto<='" + mvStrFineAnnoAmm + "' " + text + " " + mvStrFiltroLivello + " ";
PerseoNET/clsDipendente.cs:				str = "SELECT t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS StrDOC, IDincarico, t_IncarichiEdizioni.FK_Edizione, FK_Docente, FK_Attivita, FK_Argomento, FK_TipoAttivita, DescrEdizione, CodiceEdizione, IndTA, TipoAttivita, OreAssegnate, (0) AS OreFattePrecedente, (0) AS OreCODFattePrecedente, (0) AS OreFatte, (0) AS OreFatteCOD, ContrattoAula, Primaria, Secondaria, AttivitaPendolo FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE DataInizioFA<=" + FunzStringa.StrDataSQL(mvStrFineAnnoAmm, FlagSqlServer: true) + " AND DataFineFA>=" + FunzStringa.StrDataSQL(mvStrInizioAnnoAmm, FlagSqlServer: true) + " AND IDincacontra IS NULL AND IDdocente " + mvContratto.StringaFiltroIN("IDdocente") + " ORDER BY (Cognome + ' ' + Nome), IDdocente, CodiceEdizione, IndTA ";
PerseoNET/clsDipendente.cs:					str = "SELECT (FK_Docente) AS IDdocente, IDincarico, TipoAttivita, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleFatte FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita  WHERE DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " GROUP BY FK_Docente, IDincarico, TipoAttivita, IndTA HAVING IDincarico " + mvIncarichi.StringaFiltroIN("IDincarico") + " ORDER BY FK_Docente, IDincarico, IndTA ";
PerseoNET/clsDipendente.cs:					str = (clsTblDatiDR.OrigineDatiUnione = "SELECT (FK_Docente) AS IDdocente, IDincarico, TipoAttivita, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleFatte FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE DataAttivita>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " GROUP BY FK_Docente, IDincarico, TipoAttivita, IndTA HAVING IDincarico " + mvIncarichi.StringaFiltroIN("IDincarico") + " ORDER BY FK_Docente, IDincarico, IndTA ");
PerseoNET/clsDipendente.cs:					str = "SELECT (FK_Docente) AS IDdocente, IDincarico, TipoAttivita, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleFatte FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita  WHERE DataAttivita<" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " GROUP BY FK_Docente, IDincarico, TipoAttivita, IndTA HAVING IDincarico " + mvIncarichi.StringaFiltroIN("IDincarico") + " ORDER BY FK_Docente, IDincarico, IndTA ";
PerseoNET/clsDipendente.cs:					str = (clsTblDatiDR2.OrigineDatiUnione = "SELECT (FK_Docente) AS IDdocente, IDincarico, TipoAttivita, SUM(DATEDIFF(mi, OraInizio, OraFine)) AS TotaleFatte FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE DataAttivita<" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " GROUP BY FK_Docente, IDincarico, TipoAttivita, IndTA HAVING IDincarico " + mvIncarichi.StringaFiltroIN("IDincarico") + " ORDER BY FK_Docente, IDincarico, IndTA ");
PerseoNET/clsDipendente.cs:					str = "SELECT IDdocente, IDincarico, TipoAttivita, SUM(Minuti) AS TotaleFatte FROM v_DettaglioOreSvoltePerIncarico WHERE DataSvolgimento>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " AND DataSvolgimento<=" + FunzStringa.StrDataSQL(stringa2, FlagSqlServer: true) + " GROUP BY IDdocente, IDincarico, TipoAttivita, IndTA HAVING IDincarico " + mvIncarichi.StringaFiltroIN("IDincarico") + " ORDER BY IDdocente, IDincarico, IndTA ";
PerseoNET/clsDipendente.cs:					str = "SELECT IDdocente, IDincarico, TipoAttivita, SUM(Minuti) AS TotaleFatte FROM v_DettaglioOreSvoltePerIncarico WHERE DataSvolgimento<" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + " GROUP BY IDdocente, IDincarico, TipoAttivita, IndTA HAVING IDincarico " + mvIncarichi.StringaFiltroIN("IDincarico") + " ORDER BY IDdocente, IDincarico, IndTA ";
PerseoNET/clsDipendente.cs:				string str = "SELECT t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS StrDOC, IDcontratto, OreContratto, OreLavorate, (0) AS OreDocenza, (0) AS OreDocenzaAss, (0) AS OreFunzArticolate, (0) AS OreFunzArticolateAss, (0) AS OreFAPendolo, (0) AS OrePreparazione, (0) AS OreAggiornamento, (0) AS OreAltroAgg, (0) AS OrePendolo, (0) AS UsoPendolo, (OrePiu-OreMeno) AS VariazioneOre, (0) AS DeltaContratto, (0) OreFatteAula, (0) OreFatteAltro FROM t_Docenti INNER JOIN t_DocentiContratti ON t_Docenti.IDdocente = t_DocentiContratti.FK_Docente INNER JOIN t_TipoLivelloDocenteInterno ON t_DocentiContratti.FK_LivelloInterno = t_TipoLivelloDocenteInterno.IDtlivcontrdoc WHERE DataInizioContratto>='" + mvStrInizioAnnoAmm + "' AND FK_Tipo=2 AND t_Docenti.Attivo=1 AND DataFineContratto<='" + mvStrFineAnnoAmm + "' " + text + " " + mvStrFiltroLivello + " ";
PerseoNET/clsDipendente.cs:				str = "SELECT t_Docenti.IDdocente, (Cognome + ' ' + Nome) AS StrDOC, IDincarico, t_IncarichiEdizioni.FK_Edizione, FK_Docente, FK_Attivita, FK_Argomento, FK_TipoAttivita, DescrEdizione, CodiceEdizione, IndTA, TipoAttivita, OreAssegnate, (0) AS OreFattePrecedente, (0) AS OreCODFattePrecedente, (0) AS OreFatte, (0) AS OreFatteCOD, ContrattoAula, AttivitaPendolo FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE (DataAvvio<'" + mvStrInizioAnnoAmm + "' AND DataFine>'" + mvStrInizioAnnoAmm + "' AND IDdocente " + mvContratto.StringaFiltroIN(0) + " AND IDincacontra IS NULL) OR (DataAvvio>='" + mvStrInizioAnnoAmm + "' AND DataAvvio<='" + mvStrFineAnnoAmm + "'AND IDdocente " + mvContratto.StringaFiltroIN(0) + " AND IDincacontra IS NULL) OR (DataAvvio<'" + mvStrInizioAnnoAmm + "' AND DataFineFA>='" + mvStrInizioAnnoAmm + "' AND IDdocente " + mvContratto.StringaFiltroIN(0) + " AND IDincacontra IS NULL) OR (DataAvvio>'" + mvStrFineAnnoAmm + "' AND DataInizioFA<='" + mvStrFineAnnoAmm + "' AND IDdocente " + mvContratto.StringaFiltroIN(0) + " AND IDincacontra IS NULL) ORDER BY (Cognome + ' ' + Nome), IDdocente, CodiceEdizione, IndTA ";
PerseoNET/clsDipendente.cs:				str = "SELECT IDincarico, SUM(DATEDIFF(mi, OraInizio, OraFine)/60) AS TotaleFatte FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE DataAttivita<'" + mvStrInizioAnnoAmm + "' AND FK_Edizione " + mvIncarichi.StringaFiltroIN("FK_Edizione") + " AND FK_Docente " + mvIncarichi.StringaFiltroIN("IDdocente") + " GROUP BY IDincarico ";
PerseoNET/clsDipendente.cs:				str = "SELECT IDincarico, SUM(DATEDIFF(mi, OraInizio, OraFine)/60) AS TotaleFatte FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE DataAttivita>='" + text2 + "' AND DataAttivita<='" + text3 + "' AND FK_Edizione " + mvIncarichi.StringaFiltroIN("FK_Edizione") + " AND FK_Docente " + mvIncarichi.StringaFiltroIN("IDdocente") + " GROUP BY IDincarico ";
PerseoNET/clsDipendente.cs:				str = "SELECT IDincarico, SUM(DATEDIFF(mi, OraInizio, OraFine)/60) AS TotaleFatte FROM t_IncarichiEdizioni INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE DataAttivita<'" + mvStrInizioAnnoAmm + "'  AND FK_Edizione " + mvIncarichi.StringaFiltroIN("FK_Edizione") + " AND FK_Docente " + mvIncarichi.StringaFiltroIN("IDdocente") + " GROUP BY IDincarico ";
PerseoNET/clsDipendente.cs:				str = "SELECT IDincarico, SUM(DATEDIFF(mi, OraInizio, OraFine)/60) AS TotaleFatte FROM t_IncarichiEdizioni INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE DataAttivita>='" + text2 + "' AND DataAttivita<='" + text3 + "' AND FK_Edizione " + mvIncarichi.StringaFiltroIN("FK_Edizione") + " AND FK_Docente " + mvIncarichi.StringaFiltroIN("IDdocente") + " GROUP BY IDincarico ";
PerseoNET/clsDipendente.cs:				string origineDati = "SELECT t_IncarichiEdizioni.IDincarico, t_IncarichiEdizioni.FK_Edizione, FK_Docente, FK_Attivita, FK_Argomento, FK_TipoAttivita, DescrEdizione, CodiceEdizione, IndTA, TipoAttivita, OreAssegnate, (0) AS OreFatte, (0) AS OreFatteCOD, ContrattoAula, AttivitaPendolo FROM t_IncarichiEdizioni INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE (FK_Docente=" + Conversions.ToString(vID) + " AND DataAvvio<'" + mvStrInizioAnnoAmm + "' AND DataFine>'" + mvStrInizioAnnoAmm + "' AND IDincacontra IS NULL) OR (FK_Docente=" + Conversions.ToString(vID) + " AND DataAvvio>='" + mvStrInizioAnnoAmm + "' AND DataAvvio<='" + mvStrFineAnnoAmm + "' AND IDincacontra IS NULL) OR (DataAvvio<'" + mvStrInizioAnnoAmm + "' AND DataFineFA>='" + mvStrInizioAnnoAmm + "' AND FK_Docente=" + Conversions.ToString(vID) + " AND IDincacontra IS NULL) OR (DataAvvio>'" + mvStrFineAnnoAmm + "' AND DataInizioFA<='" + mvStrFineAnnoAmm + "' AND FK_Docente=" + Conversions.ToString(vID) + " AND IDincacontra IS NULL) ORDER BY CodiceEdizione, IndTA ";
PerseoNET/clsDipendente.cs:				origineDati = "SELECT IDincarico, SUM(DATEDIFF(mi, OraInizio, OraFine)/60) AS TotaleFatte FROM t_IncarichiEdizioni INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' AND FK_Edizione " + mvIncarichi.StringaFiltroIN("FK_Edizione") + " AND FK_Docente " + mvIncarichi.StringaFiltroIN("FK_Docente") + " GROUP BY IDincarico ";
PerseoNET/clsDipendente.cs:				origineDati = "SELECT IDincarico, SUM(DATEDIFF(mi, OraInizio, OraFine)/60) AS TotaleFatte FROM t_IncarichiEdizioni INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE DataAttivita>='" + text + "' AND DataAttivita<='" + text2 + "' AND FK_Edizione " + mvIncarichi.StringaFiltroIN("FK_Edizione") + " AND FK_Docente " + mvIncarichi.StringaFiltroIN("FK_Docente") + " GROUP BY IDincarico ";
PerseoNET/clsDipendente.cs:					origineDati = "SELECT t_DocentiContratti.IDcontratto, FK_Docente, OreContratto, OreLavorate, (0) AS OreDocenza, (0) AS OreDocenzaAss, (0) AS OreFunzArticolate, (0) AS OreFAPendolo, (0) AS OreFunzArticolateAss, (0) AS OrePreparazione, (0) AS OreAggiornamento, (0) AS OreAltroAgg, (0) AS OrePendolo, (0) AS UsoPendolo, (OrePiu-OreMeno) AS VariazioneOre, (0) AS DeltaContratto FROM t_DocentiContratti WHERE DataInizioContratto>='" + mvStrInizioAnnoAmm + "' AND DataFineContratto<='" + mvStrFineAnnoAmm + "' AND FK_Docente=" + Conversions.ToString(vID) + " ";
PerseoNET/clsDipendente.cs:				string origineDati = "SELECT IDcontratto, FK_Docente, DataInizioContratto, DataFineContratto, DataDimissioneDipendente FROM t_DocentiContratti WHERE DataDimissioneDipendente IS NOT NULL AND DataDimissioneDipendente>='01/07/2003' ";
PerseoNET/clsDipendente.cs:				origineDati = "SELECT IDdimessi, (Cognome + ' ' + Nome) AS StrDipe, CodFiscale, DataLicenziamento, Livello, SiglaSede, IncentivoELGA FROM wt_t_Docenti_Dimessi WHERE DataLicenziamento IS NOT NULL ORDER BY Cognome, Nome, DataLicenziamento DESC ";
PerseoNET/clsDipendente.cs:				string origineDati = "SELECT MIN(PeriodoDAL) AS Dal37, MIN(PeriodoAL) AS Al37, MIN(NumeroSett) AS Sett_37 FROM wt_SettimaneBonus37 WHERE PeriodoDAL>=" + FunzStringa.StrDataSQL(Strings.Format(mvDAL, "dd/MM/yyyy")) + " AND PeriodoAL<=" + FunzStringa.StrDataSQL(Strings.Format(mvAL, "dd/MM/yyyy")) + " AND Settimana37=True ";
PerseoNET/clsDipendente.cs:					origineDati = "SELECT MAX(SogliaOreDoc) AS SogliaOreDocMIN FROM wt_SettimaneBonus37 WHERE PeriodoDAL>=" + FunzStringa.StrDataSQL(Strings.Format(mvDAL, "dd/MM/yyyy")) + " AND PeriodoAL<=" + FunzStringa.StrDataSQL(Strings.Format(mvAL, "dd/MM/yyyy")) + " AND Settimana37=True ";
PerseoNET/clsDipendente.cs:					origineDati = "SELECT t_CalendarioAttivita.IDcalatt, IDdocente, FK_CalAttivita, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, TipoAttivita, Aula, BonusDipendente, (Cognome + ' ' + Nome) AS StrDOC, IDincarico FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico " + text + " ";
PerseoNET/clsDipendente.cs:					origineDati = origineDati + "UNION SELECT t_CalendarioCodocenza.IDcalcod, IDdocente, (NULL) AS FK_CalAttivita, DataAttivita, OraInizio, OraFine, (DATEDIFF(mi, OraInizio, OraFine)) AS Minuti, TipoAttivita, Aula, BonusDipendente, (Cognome + ' ' + Nome) AS StrDOC, IDincarico FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione AND t_PianoServizi.IDedizione = t_AttivitaEdizioni.FK_Edizione INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt " + text + "ORDER BY DataAttivita, OraInizio";
PerseoNET/clsDipendente.cs:					origineDati = (clsTblDatiDR.DestinazioneDati = "SELECT IDrec, IDdocente, IDcalatt, DataAttivita, OraInizio, OraFine, T_Ore, TipoAttivita, Aula, BonusDipendente, Docente, IDincarico FROM t_PianificazioneDocente ");
PerseoNET/clsDipendente.cs:						vSQL = "SELECT (" + Conversions.ToString(vID) + ") AS IDdocente, NumeroSett, PeriodoDAL, PeriodoAL, (SELECT SUM(T_ORE)/60 FROM t_PianificazioneDocente WHERE DataAttivita>=PeriodoDAL AND DataAttivita<=PeriodoAL AND IDdocente=" + Conversions.ToString(vID) + ") AS TotaleOre, (SELECT SUM(T_ORE)/60 FROM t_PianificazioneDocente WHERE DataAttivita>=PeriodoDAL AND DataAttivita<=PeriodoAL AND IDdocente=" + Conversions.ToString(vID) + " AND Aula=True AND BonusDipendente=True) AS OreDocenza, (SELECT SUM(T_ORE)/60 FROM t_PianificazioneDocente WHERE DataAttivita>=PeriodoDAL AND DataAttivita<=PeriodoAL AND IDdocente=" + Conversions.ToString(vID) + " AND Aula=True) AS OreAula, (SELECT SUM(T_ORE)/60 FROM t_PianificazioneDocente WHERE DataAttivita>=PeriodoDAL AND DataAttivita<=PeriodoAL AND IDdocente=" + Conversions.ToString(vID) + " AND Aula=True AND TipoAttivita LIKE '%CODOCENZA%') AS OreCopresenza, (SELECT SUM(T_ORE)/60 FROM t_PianificazioneDocente WHERE DataAttivita>=PeriodoDAL AND DataAttivita<=PeriodoAL AND IDdocente=" + Conversions.ToString(vID) + " AND Aula=True AND TipoAttivita LIKE '%SOSTEGNO%') AS OreSostegno, (SELECT SUM(T_ORE)/60 FROM t_PianificazioneDocente WHERE DataAttivita>=PeriodoDAL AND DataAttivita<=PeriodoAL AND IDdocente=" + Conversions.ToString(vID) + " AND Aula=False) AS OreAltreFunzioni, (0) AS MinutiBonus22, (0) AS MinutiBonus27, (0) AS MinutiBonus37, (0) AS OreMinutiBonus22, (0) AS OreMinutiBonus27, (0) AS OreBonus37 FROM wt_SettimaneBonus37 WHERE PeriodoDAL>=" + FunzStringa.StrDataSQL(Strings.Format(mvDAL, "dd/MM/yyyy")) + " AND PeriodoAL<=" + FunzStringa.StrDataSQL(Strings.Format(mvAL, "dd/MM/yyyy")) + " ORDER BY NumeroSett ";
PerseoNET/clsDipendente.cs:						vSQL = (clsTblDatiDR.DestinazioneDati = "SELECT IDdocente, Settimana, InizioSettimana, FineSettimana, T_Ore, OreDocenza, OreAula, OreCopresenza, OreSostegno, OreAltreFunzioni, MinutiBonus22, MinutiBonus27, MinutiBonus37, OreMinutiBonus22, OreMinutiBonus27, OreBonus37 FROM t_PianificazioneAula ");
PerseoNET/clsDipendente.cs:						vSQL = (clsTblDatiDR.DestinazioneDati = "SELECT Testo_1, Numerico_2, Testo_2, Testo_3, Numerico_12, Numerico_3, Numerico_4, Numerico_19, Numerico_20, Numerico_11, Numerico_8, Numerico_9, Numerico_10, Numerico_5, Numerico_6, Numerico_7 FROM t_StampaTbl_2 ");
PerseoNET/clsDipendente.cs:						string origineDati = "SELECT (" + Conversions.ToString(value) + ") AS IDdocente, IDedizione, IDincarico, IDattedi, ('" + FunzStringa.StringaSQL(stringa) + "') AS StrDOC, ('" + text + "') AS CodFiscale, DescrSede, CodiceEdizione, DescrEdizione, IDmwa, TipoFormativoInterno, DataAvvio, DataFine, Durata, TipoAttivita, DescrArgomento, Aula, OreAssegnate, (0) AS OreAssegnateAnnoAmm, (SELECT SUM(DATEDIFF(mi, OraInizio, OraFine)) FROM t_CalendarioAttivita WHERE FK_Incarico= IDincarico AND DataAttivita<'" + text3 + "') AS OreFattePrecedente, (0) AS OreCODFattePrecedente FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita LEFT OUTER JOIN t_TipoFormativoInterno ON t_PianoServizi.FK_TipoFormativoInterno = t_TipoFormativoInterno.IDtformaint LEFT OUTER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento LEFT OUTER JOIN t_IncarichiEdizioniContratti ON t_IncarichiEdizioni.IDincarico = t_IncarichiEdizioniContratti.FK_IncaricoEdizione WHERE (FK_IncaricoClassiRiunite " + text2 + " AND DataAvvio<'" + text3 + "' AND DataFine>='" + text3 + "' AND IDincacontra IS NULL) OR (FK_IncaricoClassiRiunite " + text2 + " AND DataAvvio>='" + text3 + "' AND DataAvvio<='" + text4 + "' AND DataFine>'" + text3 + "' AND IDincacontra IS NULL) OR (FK_IncaricoClassiRiunite " + text2 + " AND DataAvvio<'" + text3 + "' AND DataFineFA>='" + text3 + "' AND IDincacontra IS NULL) OR (FK_IncaricoClassiRiunite " + text2 + " AND DataAvvio>'" + text4 + "' AND DataInizioFA<='" + text4 + "' AND IDincacontra IS NULL) ORDER BY IndTA ";
PerseoNET/clsDipendente.cs:							origineDati = "SELECT t_Docenti.IDdocente, IDedizione, IDattedi, (Cognome + ' ' + Nome) AS StrDOC, DescrSede, CodiceEdizione, DescrEdizione, DataAvvio, DataFine, TipoAttivita, (0) AS OreAssegnateAnnoAmm, DataLettera, Protocollo, Variazione, (0) AS ClassiRiunite FROM t_Docenti INNER JOIN t_IncarichiEdizioni ON t_Docenti.IDdocente = t_IncarichiEdizioni.FK_Docente INNER JOIN t_PianoServizi ON t_IncarichiEdizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ";
PerseoNET/clsDipendente.cs:							origineDati = "SELECT TipoAttivita, (0) AS OreAttivita FROM t_TipoAttivita ";
PerseoNET/clsDipendente.cs:							origineDati = "SELECT IDdocente, IDedizione, IDattivita, Docente, DescrSede, CodiceEdizione, DescrEdizione, DataAvvio, DataFine, TipoAttivita, OreAssegnate, DataLettera, Protocollo, Variazione, ClassiRiunite FROM t_IncarichiEdizione ";
PerseoNET/frmDettDoteStudente.cs:				string origineDati = "SELECT IDdotestud, FK_Studente, FK_ProgettoRendiconta, FK_SedePrimaria, FK_TipoDote, ID_Dote, DataAvvioDote, DataFineDote, ImportoTotaleDote, PIPEsterno, DescrEnteProvenienza, DoteDeroga, DoteChiusa, DataDoteChiusa, DescrEnteProsegue, IgnoraRegoleProgetto, QuotaServiziIndividuali, QuotaServiziLavoro, QuotaServiziAutoImpre, DataRec, DataModifica FROM t_StudentiDoti WHERE IDdotestud=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettDoteStudente.cs:				origineDati = "SELECT IDsede, SiglaSede FROM t_Sedi WHERE Attiva=True AND FK_TipoSede=3 AND IDsede " + Variabili.FiltroSedi + " ORDER BY OrdGruppo, SiglaSede ";
PerseoNET/frmDettDoteStudente.cs:				origineDati = "SELECT IDtdote, TipoDote FROM t_TipoDoteStudente WHERE Obsoleto=0 ORDER BY IndTipoDote ";
PerseoNET/frmDettDoteStudente.cs:					else if (VariabiliClassi.CmdSQL.CreaDataTbl("SELECT IDiscrizione FROM t_Iscrizioni WHERE FK_DoteStudente=" + Conversions.ToString(FormDote.ChiavePrimaria), "", "int") > 0)
PerseoNET/frmDettDoteStudente.cs:					string vSQL = "SELECT (" + Conversions.ToString(FormDote.ChiavePrimaria) + ") AS PKDote, FK_TipoAttivitaPF, IndPIP, DescrAttivita, MaxOrePreviste, CostoOra FROM t_StudentiDotiPianiFormativi WHERE FK_Dote=" + Conversions.ToString(Variabili.PKCopiaDotePIP);
PerseoNET/frmDettDoteStudente.cs:						vSQL = "SELECT FK_Dote, FK_TipoAttivitaPF, IndPIP, DescrAttivita, MaxOrePreviste, CostoOra FROM t_StudentiDotiPianiFormativi ";
PerseoNET/frmDettDoteStudente.cs:						vSQL = "SELECT t_StudentiDotiPianiFormativi.IDpfdote, FK_Dote, FK_TipoAttivitaPF, IndPIP, DescrAttivita, MaxOrePreviste, CostoOra, TipoAttivita, (0) AS TotaleOreSvolte, (NULL) AS Prima, (NULL) AS Ultima FROM t_StudentiDotiPianiFormativi LEFT OUTER JOIN t_TipoAttivitaEdizione ON t_StudentiDotiPianiFormativi.FK_TipoAttivitaPF = t_TipoAttivitaEdizione.IDtattivita  GROUP BY IDpfdote, FK_Dote, FK_TipoAttivitaPF, IndPIP, DescrAttivita, MaxOrePreviste, CostoOra, TipoAttivita HAVING FK_Dote=" + Conversions.ToString(FormDote.ChiavePrimaria) + " ORDER BY IndPIP ";
PerseoNET/frmDettDoteStudente.cs:					string origineDati = "SELECT IDpfdote, FK_Dote, FK_TipoAttivitaPF, IndPIP, DescrAttivita, MaxOrePreviste, CostoOra, DataRec, DataModifica FROM t_StudentiDotiPianiFormativi WHERE IDpfdote=" + Conversions.ToString(vID);
PerseoNET/frmDettDoteStudente.cs:					origineDati = "SELECT IDtattivita, TipoAttivita FROM t_TipoAttivitaEdizione WHERE AttivitaPIP=True AND Obsoleto=False ORDER by IndTA ";
PerseoNET/frmDettDoteStudente.cs:					string vSQL = "SELECT IDdotestud, ID_Dote FROM t_StudentiDoti WHERE ID_Dote='" + txtID_Dote.Text + "' AND FK_ProgettoRendiconta=" + Conversions.ToString(Conversions.ToLong(FormDote.get_ValoreFK((object)"FK_ProgettoRendiconta"))) + " ";
PerseoNET/frmDettDoteStudente.cs:					string vSQL = "SELECT IDdotestud, ID_Dote FROM t_StudentiDoti WHERE ID_Dote='" + txtID_Dote.Text + "' AND IDdotestud<>" + Conversions.ToString(FormDote.ChiavePrimaria) + " AND FK_ProgettoRendiconta=" + Conversions.ToString(Conversions.ToLong(FormDote.get_ValoreFK((object)"FK_ProgettoRendiconta"))) + " ";
PerseoNET/frmDettDoteStudente.cs:								string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT FK_SedeEdizione FROM t_Azioni INNER JOIN  t_PianoServizi ON t_Azioni.IDazione = t_PianoServizi.FK_Azione INNER JOIN t_Iscrizioni ON t_PianoServizi.IDedizione = t_Iscrizioni.FK_Edizione WHERE FK_Utente=", Variabili.Studente.get_Campo((object)0)), " "), "AND FK_Progetto="), tblProg.get_Campo((object)0, vFlagUpdateDB: false)), " "), "ORDER BY DataIscr "));
PerseoNET/frmDettDoteStudente.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDpipprogetto, FK_Progetto, IDtattivita, IndPIP, DescrAttivita, MaxOrePreviste, CostoOra, TipoAttivita FROM t_ProgettiServiziPIP LEFT OUTER JOIN t_TipoAttivitaEdizione ON t_ProgettiServiziPIP.FK_TipoAttivitaPF = t_TipoAttivitaEdizione.IDtattivita WHERE FK_progetto=", Variabili.Progetto.get_Campo((object)"IDprogetto")), " ORDER BY IndPIP, DescrAttivita"));
PerseoNET/frmDettDoteStudente.cs:				string origineDati = "SELECT IDpfdote, IDdote, (SUM(DATEDIFF(mi, OraInizio, OraFine))/60) AS TotaleOreSvolte, MIN(DataAttivita) AS Prima, MAX(DataAttivita) AS Ultima FROM v_StudentiDettaglioSvolteAttivitaPIP GROUP BY IDpfdote, IDdote HAVING IDdote=" + Conversions.ToString(FormDote.ChiavePrimaria) + " ";
PerseoNET/frmDettDoteStudente.cs:				origineDati = "SELECT t_StudentiDotiPianiFormativi.IDpfdote, FK_Dote, FK_TipoAttivitaPF, IndPIP, DescrAttivita, MaxOrePreviste, CostoOra, TipoAttivita, (0) AS TotaleOreSvolte, (NULL) AS Prima, (NULL) AS Ultima FROM t_StudentiDotiPianiFormativi LEFT OUTER JOIN t_TipoAttivitaEdizione ON t_StudentiDotiPianiFormativi.FK_TipoAttivitaPF = t_TipoAttivitaEdizione.IDtattivita  GROUP BY IDpfdote, FK_Dote, FK_TipoAttivitaPF, IndPIP, DescrAttivita, MaxOrePreviste, CostoOra, TipoAttivita HAVING FK_Dote=" + Conversions.ToString(FormDote.ChiavePrimaria) + " ORDER BY IndPIP ";
PerseoNET/frmDettDoteStudente.cs:					origineDati = "SELECT IDprogetto, DescrProgetto, CodiceProgetto, DataAvvioProg, DataFineProg FROM t_Progetti WHERE IDprogetto=" + Conversions.ToString(vID) + " ORDER BY CodiceProgetto ";
PerseoNET/frmDettDoteStudente.cs:					origineDati = "SELECT t_PianoServizi.IDedizione, IDprogetto FROM t_PianoServizi INNER JOIN t_Azioni ON t_PianoServizi.FK_Azione = t_Azioni.IDazione INNER JOIN t_Progetti ON t_Azioni.FK_Progetto = t_Progetti.IDprogetto WHERE FK_SedeEdizione " + Variabili.FiltroSedi + " ";
PerseoNET/frmDettDoteStudente.cs:					origineDati = "SELECT IDprogetto, DescrProgetto, CodiceProgetto, DataAvvioProg, DataFineProg FROM t_Progetti WHERE DataAvvioProg<=" + FunzStringa.StrDataSQL(txtDataFineDote.Text, FlagSqlServer: true) + " AND DataFineProg>=" + FunzStringa.StrDataSQL(txtDataAvvioDote.Text, FlagSqlServer: true) + " AND IDprogetto " + VariabiliClassi.CmdSQL.StringaFiltroIN_DataTbl("IDprogetto") + " ORDER BY CodiceProgetto ";
PerseoNET/frmDettDoteStudente.cs:					origineDati = "SELECT IDprogetto, DescrProgetto, CodiceProgetto, DataAvvioProg, DataFineProg FROM t_Progetti WHERE CodiceProgetto LIKE '%" + txt_CodiceProgetto.Text + "%' AND DataAvvioProg<=" + FunzStringa.StrDataSQL(txtDataFineDote.Text, FlagSqlServer: true) + " AND DataFineProg>=" + FunzStringa.StrDataSQL(txtDataAvvioDote.Text, FlagSqlServer: true) + " ORDER BY CodiceProgetto ";
PerseoNET/frmDettDoteStudente.cs:					origineDati = "SELECT IDprogetto, DescrProgetto, CodiceProgetto, DataAvvioProg, DataFineProg FROM t_Progetti ORDER BY CodiceProgetto ";
PerseoNET/frmDettConvenzioneStudente.cs:				string origineDati = "SELECT IDtconvderoga, TipoAttivazioneDeroga, NumTirociniAmmessi FROM t_TipoConvenzioneAttivazioneDeroga WHERE Obsoleto=0 ORDER BY IntDeroga ";
PerseoNET/frmDettConvenzioneStudente.cs:				origineDati = "SELECT IDconvenzione, FK_Iscrizione, FK_Tutor, FK_SedeStage, FK_TutorAzienda, FK_ConvenzioneAzienda, FK_LivelloSpecificoSicurezza, DescrQualificaUscita, NumeroConv, DataAvvio, DataFine, DurataStage, GiorniStage, MaxOreGiorno, MaxOreSettimana, DescrFacilitazioni, NoteAltreSediStage, DescrAmbitoStage, NoteStage, StagePagamento, CompensoStage, DataAccordoEconomico, ProtocolloAccordo, OrdineAzienda, GiorniPagare, ImportoIndennita, DescrValutaCompe, DescrCertCompe, DescrCertSicurezza, ContenutiSicurSpec, NumAltriTirocinanti, CreditiSicurezzaGen, CreditiSicurezzaSpec, DataSospesoDal, DataSospesoAl, CertificareCompetenze, CertificareConoscenze, FK_ClasseINAIL, AziendaPosizioneINAIL, AziendaDescrINAIL, FileAccordoEconomicoPDF, DescrVariazioni, DescrIndennita, FK_TipoAttivazioneDeroga, FK_TipoIndennita, IndennitaPromotore, IndennitaAzienda, FK_NumeroDipendenti, Mensa, BuoniPasto, DescrAttivitaPreviste, FK_TipoStatoTirocinante, NumeroExtraCurrAttivi, NumeroAddettiSede, OraIngressoM, OraIngressoP, OraUscitaM, OraUscitaP, DataRipresa, DataRipresaProroga, DataRec, DataModifica FROM t_ConvenzioniStage WHERE IDconvenzione=" + Conversions.ToString(VariabiliClassi.IDform);
PerseoNET/frmDettConvenzioneStudente.cs:				origineDati = "SELECT IDtoresicurezza, (TipoLivello & ' - ' & DescrSettore & ' (' & OrePreviste & ' ore)') AS TipoLivello FROM t_TipoSicurezzaLivello WHERE LivelloSpecifico=True AND Obsoleto=False ORDER BY LivelloSpecificoCombo, DescrSettore, OrePreviste ";
PerseoNET/frmDettConvenzioneStudente.cs:				origineDati = "SELECT IDtindennitacorrisposta, TipoIndennitaCorrisposta FROM t_TipoStageIndennitaCorrisposta WHERE Obsoleto=0 ORDER BY IndTIC ";
PerseoNET/frmDettConvenzioneStudente.cs:				origineDati = "SELECT IDtdipedesestage, TipoDipendentiSedeStage FROM t_TipoDipendentiSedeStage WHERE Obsoleto=0 ORDER BY IntTDSS";
PerseoNET/frmDettConvenzioneStudente.cs:				origineDati = "SELECT IDtstirocinante, DescrTipoStatoTirocinante FROM t_TipoStatoTirocinante WHERE Obsoleto=False ORDER BY IndTSTIR ";
PerseoNET/frmDettConvenzioneStudente.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IndennitaFacoltativa FROM t_TipoStatoTirocinante WHERE IDtstirocinante=", FormConv.get_Campo((object)"FK_TipoStatoTirocinante")), " AND IndennitaFacoltativa=True "));
PerseoNET/frmDettConvenzioneStudente.cs:							origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtconvenzione, RetroDatabile FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoConvenzione")));
PerseoNET/frmDettConvenzioneStudente.cs:				origineDati = "SELECT IDtinail, Categoria, DescrLavorazione, DescrDettLavorazione, Classificazione, Obsoleto FROM t_TipoClasseINAIL ";
PerseoNET/frmDettConvenzioneStudente.cs:					origineDati = "SELECT IDconvazienda, FK_TipoConvenzione, DataConvenzione, DataScadenza, FK_TipoLogo, TipoDescrBreveLoghi FROM t_AziendeSediFormativeConvenzioni INNER JOIN t_Sedi ON t_AziendeSediFormativeConvenzioni.FK_SedeFormativa = t_Sedi.IDsede INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione INNER JOIN t_ConvenzioniStage ON t_AziendeSediFormativeConvenzioni.IDconvazienda = t_ConvenzioniStage.FK_ConvenzioneAzienda INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione LEFT OUTER JOIN t_TipoLogoRegistroStage ON t_AziendeSediFormativeConvenzioni.FK_TipoLogo = t_TipoLogoRegistroStage.IDtlogoregstage ORDER BY DataConvenzione DESC, ConvenzioneAzienda ";
PerseoNET/frmDettConvenzioneStudente.cs:						string origineDati = "SELECT t_ConvenzioniStageObiettivi.IDconvob, IDcompestd, IDconoabi, FK_TipoSettProfessionale, DescrProfessione, t_ProfessioniCompetenzeRL.DescrCompetenza, DescrConoAbi, Tipo FROM t_ProfessioniCompetenzeRL INNER JOIN t_ProfessioniConoAbiRL ON t_ProfessioniCompetenzeRL.IDcompestd = t_ProfessioniConoAbiRL.FK_Competenza INNER JOIN t_ProfessioniStandardRL ON t_ProfessioniCompetenzeRL.FK_Professione = t_ProfessioniStandardRL.IDprofessionerl INNER JOIN t_ConvenzioniStageObiettivi ON t_ProfessioniConoAbiRL.IDconoabi = t_ConvenzioniStageObiettivi.FK_ConoscenzaAbilita WHERE FK_Convenzione=" + Conversions.ToString(FormConv.ChiavePrimaria) + " ORDER BY DescrProfessione, IndCompe, t_ProfessioniCompetenzeRL.DescrCompetenza, Tipo, IndCA ";
PerseoNET/frmDettConvenzioneStudente.cs:								origineDati = "SELECT t_ConvenzioniStageObiettivi.IDconvob, (NULL) AS IDcompestd, (NULL) AS IDconoabi, (NULL) AS FK_TipoSettProfessionale, (NULL) AS DescrProfessione, DescrCompetenza, DescrObiettivoStage, (NULL) AS Tipo FROM t_ConvenzioniStageObiettivi LEFT OUTER JOIN t_TipoObiettivoStage ON t_ConvenzioniStageObiettivi.FK_TipoObiettivo = t_TipoObiettivoStage.IDtobstage WHERE FK_Convenzione=" + Conversions.ToString(FormConv.ChiavePrimaria) + " AND FK_ConoscenzaAbilita IS NULL ORDER BY IndObStage ";
PerseoNET/frmDettConvenzioneStudente.cs:							origineDati = "SELECT t_ConvenzioniStageObiettivi.IDconvob, (NULL) AS IDcompestd, (NULL) AS IDconoabi, (NULL) AS FK_TipoSettProfessionale, (NULL) AS DescrProfessione, DescrCompetenza, DescrObiettivoStage, (NULL) AS Tipo FROM t_ConvenzioniStageObiettivi LEFT OUTER JOIN t_TipoObiettivoStage ON t_ConvenzioniStageObiettivi.FK_TipoObiettivo = t_TipoObiettivoStage.IDtobstage WHERE FK_Convenzione=" + Conversions.ToString(FormConv.ChiavePrimaria) + " AND FK_ConoscenzaAbilita IS NULL ORDER BY IndObStage ";
PerseoNET/frmDettConvenzioneStudente.cs:									string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT Svantaggio FROM t_TipoStatoTirocinante WHERE IDtstirocinante=", FormConv.get_ValoreSelezioneCombo(cmbFK_TipoStatoTirocinante)));
PerseoNET/frmDettConvenzioneStudente.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtstirocinante, Svantaggio FROM t_TipoStatoTirocinante WHERE IDtstirocinante=", FormConv.get_ValoreSelezioneCombo(cmbFK_TipoStatoTirocinante)));
PerseoNET/frmDettConvenzioneStudente.cs:								vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtdipedesestage, MaxExtraCurrAttivi FROM t_TipoDipendentiSedeStage WHERE IDtdipedesestage=", FormConv.get_ValoreSelezioneCombo(cmbFK_NumeroDipendenti)));
PerseoNET/frmDettConvenzioneStudente.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtconvenzione, RetroDatabile FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoConvenzione")));
PerseoNET/frmDettConvenzioneStudente.cs:						vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtconvenzione, RetroDatabile FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoConvenzione")));
PerseoNET/frmDettConvenzioneStudente.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDreferaz, Cognome, Nome, CF_RapprLegale, DescrEsperienzaProf, AnniEsperienzaProf FROM t_ReferentiAziende WHERE IDreferaz=", FormConv.get_Campo((object)"FK_TutorAzienda")));
PerseoNET/frmDettConvenzioneStudente.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDtdipedesestage, MaxExtraCurrAttivi FROM t_TipoDipendentiSedeStage WHERE IDtdipedesestage=", FormConv.get_ValoreSelezioneCombo(cmbFK_NumeroDipendenti)));
PerseoNET/frmDettConvenzioneStudente.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento, FK_Studente, FK_Iscrizione, TipoDocumento FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Studente=", MyProject.Forms.frmEdizioneStudentiConvenzioni.tblIscr.get_Campo((object)"IDutente", vFlagUpdateDB: false)), " "), "AND TipoDocumento='Certificazione SICUREZZA SPECIFICA' "));
PerseoNET/frmDettConvenzioneStudente.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT Svantaggio FROM t_TipoStatoTirocinante WHERE IDtstirocinante=", FormConv.get_ValoreSelezioneCombo(cmbFK_TipoStatoTirocinante)));
PerseoNET/frmDettConvenzioneStudente.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IndennitaFacoltativa FROM t_TipoStatoTirocinante WHERE IDtstirocinante=", FormConv.get_ValoreSelezioneCombo(cmbFK_TipoStatoTirocinante)), " "), "AND IndennitaFacoltativa=True "));
PerseoNET/frmDettConvenzioneStudente.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento, FK_Studente, FK_Iscrizione, TipoDocumento FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Studente=", MyProject.Forms.frmEdizioneStudentiConvenzioni.tblIscr.get_Campo((object)"IDutente", vFlagUpdateDB: false)), " "), "AND TipoDocumento='Certificazione SICUREZZA GENERALE' "));
PerseoNET/frmDettConvenzioneStudente.cs:							vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento, FK_Studente, FK_Iscrizione, TipoDocumento FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Studente=", MyProject.Forms.frmEdizioneStudentiConvenzioni.tblIscr.get_Campo((object)"IDutente", vFlagUpdateDB: false)), " "), "AND TipoDocumento='Certificazione SICUREZZA GENERALE' "));
PerseoNET/frmDettConvenzioneStudente.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDdocumento, FK_Studente, FK_Iscrizione, TipoDocumento FROM t_Documenti INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc WHERE FK_Studente=", MyProject.Forms.frmEdizioneStudentiConvenzioni.tblIscr.get_Campo((object)"IDutente", vFlagUpdateDB: false)), " "), "AND TipoDocumento='Certificazione SICUREZZA SPECIFICA' "));
PerseoNET/frmDettConvenzioneStudente.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtconvenzione, IndTCS, TipoConvenzione, EtaMinima, DurataMesi, DurataMesiTirocinio, ExtraCurriculare, ResidenteEstero, ObbligoIndennita, IndennitaMIN, IndennitaMAX, Obsoleto FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoConvenzione")), " "));
PerseoNET/frmDettConvenzioneStudente.cs:						string vSQL = "SELECT IDvers, INAILExtraCurrAziende FROM zt_Versione ";
PerseoNET/frmDettConvenzioneStudente.cs:						origineDati = "SELECT IDtinail, Categoria, DescrLavorazione, DescrDettLavorazione, Classificazione, Obsoleto FROM t_TipoClasseINAIL WHERE (DescrLavorazione LIKE '%" + FunzStringa.StringaSQL(txtCercaINAIL.Text) + "%' OR DescrDettLavorazione LIKE '%" + FunzStringa.StringaSQL(txtCercaINAIL.Text) + "%') AND Obsoleto=0 ORDER BY Categoria, DescrLavorazione ";
PerseoNET/frmDettConvenzioneStudente.cs:						origineDati = "SELECT IDtinail, Categoria, DescrLavorazione, DescrDettLavorazione, Classificazione, Obsoleto FROM t_TipoClasseINAIL WHERE Classificazione LIKE '" + txtCercaINAIL.Text + "%' AND Obsoleto=0 ORDER BY Categoria, DescrLavorazione ";
PerseoNET/frmDettConvenzioneStudente.cs:						origineDati = "SELECT IDtinail, Categoria, DescrLavorazione, DescrDettLavorazione, Classificazione, Obsoleto FROM t_TipoClasseINAIL WHERE Classificazione LIKE '%" + txtCercaINAIL.Text + "%' AND Obsoleto=0 ORDER BY Categoria, DescrLavorazione ";
PerseoNET/frmDettConvenzioneStudente.cs:				string origineDati = "SELECT Categoria, DescrLavorazione, DescrDettLavorazione, Classificazione, Obsoleto, (CASE WHEN Obsoleto=1 THEN 'OBSOLETO (non utilizzabile)' ELSE NULL END) AS Nota FROM t_TipoClasseINAIL ORDER BY Obsoleto, Categoria, DescrLavorazione ";
PerseoNET/frmDettConvenzioneStudente.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT t_AziendeSediFormativeConvenzioni.FK_Azienda, (AziendaPosizioneINAIL + ' [' + AziendaDescrINAIL + ']') AS DescrINAIL FROM t_AziendeSediFormativeConvenzioni INNER JOIN t_ConvenzioniStage ON t_AziendeSediFormativeConvenzioni.IDconvazienda = t_ConvenzioniStage.FK_ConvenzioneAzienda GROUP BY FK_Azienda, AziendaPosizioneINAIL, AziendaDescrINAIL HAVING AziendaPosizioneINAIL IS NOT NULL AND FK_Azienda=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"IDazienda")));
PerseoNET/frmDettConvenzioneStudente.cs:				string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtconvenzione, ExtraCurriculare FROM t_TipoConvenzioneStage WHERE IDtconvenzione=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoConvenzione")), " "), "AND ExtraCurriculare=True "));
PerseoNET/frmDettConvenzioneStudente.cs:					vSQL = "SELECT IDconvenzione, ExtraCurriculare, FK_Tutor FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE (DataAvvio<=" + FunzStringa.StrDataSQL(txtDataFine.Text, FlagSqlServer: true) + " AND DataFine>=" + FunzStringa.StrDataSQL(txtDataAvvio.Text, FlagSqlServer: true) + " AND DataInterruzione IS NULL AND DataProlungamento IS NULL AND FK_Tutor=" + Conversions.ToString(value) + " AND ExtraCurriculare=1 AND IDconvenzione<>" + Conversions.ToString(FormConv.ChiavePrimaria) + ") OR (DataAvvio<=" + FunzStringa.StrDataSQL(txtDataFine.Text, FlagSqlServer: true) + " AND DataProlungamento>=" + FunzStringa.StrDataSQL(txtDataAvvio.Text, FlagSqlServer: true) + " AND DataInterruzione IS NULL AND DataProlungamento IS NOT NULL AND FK_Tutor=" + Conversions.ToString(value) + " AND ExtraCurriculare=1 AND IDconvenzione<>" + Conversions.ToString(FormConv.ChiavePrimaria) + ") OR (DataAvvio<=" + FunzStringa.StrDataSQL(txtDataFine.Text, FlagSqlServer: true) + " AND DataInterruzione>" + FunzStringa.StrDataSQL(txtDataAvvio.Text, FlagSqlServer: true) + " AND DataInterruzione IS NOT NULL AND DataProlungamento IS NULL AND FK_Tutor=" + Conversions.ToString(value) + " AND ExtraCurriculare=1 AND IDconvenzione<>" + Conversions.ToString(FormConv.ChiavePrimaria) + ") ";
PerseoNET/frmDettConvenzioneStudente.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT TipoDescrBreveLoghi FROM t_TipoLogoRegistroStage WHERE IDtlogoregstage=", Variabili.ConvenzioneStage.get_CampoConvAziendaSede((object)"FK_TipoLogo")));
PerseoNET/frmDettConvenzioneStudente.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDtoresicurezza, DescrSettore, TipoLivello, t_TipoSicurezzaLivello.OrePreviste, DescrContenuto, DescrContenutoDettaglio FROM t_TipoSicurezzaLivello INNER JOIN t_TipoSicurezzaContenuti ON t_TipoSicurezzaLivello.IDtoresicurezza = t_TipoSicurezzaContenuti.FK_Livello WHERE IDtoresicurezza=", FormConv.get_ValoreSelezioneCombo(cmbFK_LivelloSpecificoSicurezza)), " "), "ORDER BY IDtoresicurezza, t_TipoSicurezzaContenuti.Ordinale "));
PerseoNET/frmDettConvenzioneStudente.cs:						string origineDati = ((!Operators.ConditionalCompareObjectEqual(Variabili.Edizione.get_Campo((object)"EdizioneAmpliamento"), false, TextCompare: false)) ? "SELECT IDtrepcompe, TipoRepertorio FROM t_TipoRepertorioCompetenze WHERE TirCurriculari=1 And TirExtraCurriculari=0 And TirCurriculariAbilitanti=0 And Obsoleto=0 ORDER BY Obsoleto, IndRep " : (Operators.ConditionalCompareObjectEqual(Variabili.ConvenzioneStage.get_CampoTipologiaConvenzione((object)"ExtraCurriculare"), true, TextCompare: false) ? "SELECT IDtrepcompe, TipoRepertorio FROM t_TipoRepertorioCompetenze WHERE TirExtraCurriculari=1 And Obsoleto=0 ORDER BY Obsoleto, IndRep " : (Operators.ConditionalCompareObjectEqual(Variabili.ConvenzioneStage.get_CampoTipologiaConvenzione((object)"CurriculareDDIF"), true, TextCompare: false) ? "SELECT IDtrepcompe, TipoRepertorio FROM t_TipoRepertorioCompetenze WHERE TirCurriculari=1 And Obsoleto=0 ORDER BY Obsoleto, IndRep " : ((!Operators.ConditionalCompareObjectEqual(Variabili.ConvenzioneStage.get_CampoTipologiaConvenzione((object)"Curriculare"), true, TextCompare: false)) ? "SELECT IDtrepcompe, TipoRepertorio FROM t_TipoRepertorioCompetenze WHERE TObsoleto=0 ORDER BY Obsoleto, IndRep " : "SELECT IDtrepcompe, TipoRepertorio FROM t_TipoRepertorioCompetenze WHERE TirCurriculariAbilitanti=1 And Obsoleto=0 ORDER BY Obsoleto, IndRep "))));
PerseoNET/frmDettConvenzioneStudente.cs:						origineDati = "SELECT IDtsettprof, DescrSettoreProfessione FROM t_ProfessioniSettoriStandardRL ";
PerseoNET/frmDettConvenzioneStudente.cs:						origineDati = "SELECT IDprofessionerl, DescrProfessione FROM t_ProfessioniStandardRL ";
PerseoNET/frmDettConvenzioneStudente.cs:						origineDati = "SELECT t_ProfessioniCompetenzeRL.IDcompestd, FK_Professione, IndCompe, DescrCompetenza, LivelloEQF, CompetenzaAttiva FROM t_ProfessioniCompetenzeRL ORDER BY IndCompe, DescrCompetenza ";
PerseoNET/frmDettConvenzioneStudente.cs:						origineDati = "SELECT t_ProfessioniConoAbiRL.IDconoabi, FK_Competenza, IndCA, DescrConoAbi, Tipo, ConoAbilitaAttiva FROM t_ProfessioniConoAbiRL ORDER BY Tipo, IndCA, DescrConoAbi ";
PerseoNET/frmDettConvenzioneStudente.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, FK_ConvenzioneAzienda, FK_Iscrizione FROM t_ConvenzioniStage WHERE FK_Iscrizione=", MyProject.Forms.frmEdizioneStudentiConvenzioni.tblIscr.get_Campo((object)"IDiscrizione", vFlagUpdateDB: false)), " "), "AND DataFine<"), FunzStringa.StrDataSQL(txtDataFine.Text, FlagSqlServer: true)), " "), "AND FK_ConvenzioneAzienda="), Conversions.ToLong(txtNumeroConv.Text)));
PerseoNET/frmDettConvenzioneStudente.cs:				string origineDati = "SELECT IDtsettprof, DescrSettoreProfessione FROM t_ProfessioniSettoriStandardRL WHERE FK_TipoRepertorio=" + Conversions.ToString(ComboReper.PKSelezionatoCombo) + " AND Attivo=1 ORDER BY IndSett, DescrSettoreProfessione ";
PerseoNET/frmDettConvenzioneStudente.cs:				string origineDati = "SELECT IDprofessionerl, DescrProfessione FROM t_ProfessioniStandardRL WHERE Attiva=1 AND FK_TipoSettProfessionale=" + Conversions.ToString(ComboSett.PKSelezionatoCombo) + " ORDER BY IndProf, DescrProfessione ";
PerseoNET/frmDettConvenzioneStudente.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_ProfessioniConoAbiRL.IDconoabi, FK_Competenza, IndCA, DescrConoAbi, Tipo, ConoAbilitaAttiva FROM t_ProfessioniConoAbiRL WHERE FK_Competenza=", tblCompeReper.get_Campo((object)0, vFlagUpdateDB: false)), " "), "AND ConoAbilitaAttiva=1 ORDER BY Tipo, IndCA "));
PerseoNET/frmDettConvenzioneStudente.cs:				string origineDati = "SELECT IDpers, Cognome, Nome, Email FROM t_Personale WHERE Cognome='Birolini' OR Cognome='Cagna' OR Cognome='Pigni' AND Email IS NOT NULL ORDER BY Cognome ";
PerseoNET/frmDettConvenzioneStudente.cs:				string origineDati = ((!Operators.ConditionalCompareObjectEqual(Variabili.ConvenzioneStage.get_CampoTipologiaConvenzione((object)"ExtraCurriculare"), true, TextCompare: false)) ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, ExtraCurriculare, FK_TutorAzienda, DataAvvio, DataFine, DataProlungamento, DataInterruzione FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE DataFine>=" + FunzStringa.StrDataSQL(txtDataAvvio.Text, FlagSqlServer: true) + " AND FK_TutorAzienda=", FormConv.get_ValoreFK((object)"FK_TutorAzienda")), " "), "AND ExtraCurriculare=0 AND IDconvenzione<>"), FormConv.ChiavePrimaria), " "), "ORDER BY DataAvvio ")) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, ExtraCurriculare, FK_TutorAzienda, DataAvvio, DataFine, DataProlungamento, DataInterruzione FROM t_ConvenzioniStage INNER JOIN t_AziendeSediFormativeConvenzioni ON t_ConvenzioniStage.FK_ConvenzioneAzienda = t_AziendeSediFormativeConvenzioni.IDconvazienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione WHERE DataFine>=" + FunzStringa.StrDataSQL(txtDataAvvio.Text, FlagSqlServer: true) + " AND FK_TutorAzienda=", FormConv.get_ValoreFK((object)"FK_TutorAzienda")), " "), "AND ExtraCurriculare=1 AND IDconvenzione<>"), FormConv.ChiavePrimaria), " "), "ORDER BY DataAvvio ")));
PerseoNET/frmDettConvenzioneStudente.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDconvenzione, FK_Utente, t_AziendeSediFormativeConvenzioni.FK_Azienda, DataAvvio, DataFine, DataInterruzione, DataProlungamento, StatoDisagioSociale, Disabile FROM t_AziendeSediFormativeConvenzioni INNER JOIN t_ConvenzioniStage ON t_AziendeSediFormativeConvenzioni.IDconvazienda = t_ConvenzioniStage.FK_ConvenzioneAzienda INNER JOIN t_TipoConvenzioneStage ON t_AziendeSediFormativeConvenzioni.FK_TipoConvenzione = t_TipoConvenzioneStage.IDtconvenzione INNER JOIN t_Iscrizioni ON t_ConvenzioniStage.FK_Iscrizione = t_Iscrizioni.IDiscrizione INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente WHERE FK_SedeStage=", FormConv.get_ValoreFK((object)"FK_SedeStage")), " AND ExtraCurriculare=1 "), "AND StatoDisagioSociale=0 AND Disabile=0 "), "AND DataFine>="), FunzStringa.StrDataSQL(txtDataAvvio.Text, FlagSqlServer: true)), " AND IDconvenzione<>"), FormConv.ChiavePrimaria), " "), "ORDER BY DataAvvio "));
PerseoNET/frmDettSostegnoEdizione.cs:				string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDsede, SiglaSede FROM t_Sedi WHERE Attiva=True AND FK_TipoSede<>2 AND IDsede<>", Variabili.Edizione.get_Campo((object)"FK_SedeEdizione")), " AND IDsede "), Variabili.FiltroSedi), " "), "ORDER BY OrdGruppo, SiglaSede "));
PerseoNET/frmDettSostegnoEdizione.cs:				origineDati = "SELECT IDsostegnoiscr, IDiscrizione, FK_SostegnoAula, FK_SostegnoAttivita, " + text + ", DataAttivita, OraInizio, OraFine, DescrAttivita, (v_DettaglioIscrittiSostegno.Cognome + ' '  + v_DettaglioIscrittiSostegno.Nome) AS StrDOC, (NULL) AS Studente, TipoAttivita, SostegnoIndividuale FROM v_DettaglioIscrittiSostegno WHERE v_DettaglioIscrittiSostegno.IDiscrizione " + Variabili.Edizione.StrFiltroIN_PKIscritti + " ORDER BY DataAttivita, OraInizio ";
PerseoNET/frmDettSostegnoEdizione.cs:				origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT t_Iscrizioni.IDiscrizione, IDutente, DoteChiusa, PosRegistro, (Cognome + ' ' + Nome) AS Studente, DataIscr, DataRitiro, OreSostegno, OreSostegnoIndividuale, (0) AS TotaleOre, (0) AS TotaleOreIndividuale, (0) AS Selezione FROM t_Iscrizioni INNER JOIN t_Utenti ON t_Iscrizioni.FK_Utente = t_Utenti.IDutente LEFT OUTER JOIN t_StudentiDoti ON t_Iscrizioni.FK_DoteStudente = t_StudentiDoti.IDdotestud AND t_Utenti.IDutente = t_StudentiDoti.FK_Studente WHERE t_Iscrizioni.FK_Edizione=", Variabili.Edizione.get_Campo((object)0)), " AND Sostegno=1 AND DataIscr IS NOT NULL "), "ORDER BY PosRegistro, t_Utenti.Cognome, t_Utenti.Nome "));
PerseoNET/frmDettSostegnoEdizione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, (0) AS IDcalcod, DataAttivita, OraInizio, OraFine, (Cognome + ' ' + Nome) AS StrDOC, (t_CalendarioAttivita.DescrAttivita) AS DescrArgomento, TipoAttivita, CodiceEdizione, SostegnoIndividuale, FK_SedeEdizione FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE IscrittiSostegno=1 AND IDedizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataAttivita>="), FunzStringa.StrDataSQL(Conversions.ToString(Variabili.Edizione.get_Campo((object)"DataAvvio")), FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true)), " "));
PerseoNET/frmDettSostegnoEdizione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(origineDati + "UNION SELECT IDcalatt, IDcalcod, DataAttivita, OraInizio, OraFine, (Cognome + ' ' + Nome) AS StrDOC,  (CASE WHEN t_IncarichiEdizioni_1.FK_Argomento IS NULL THEN (SELECT (TipoAttivita + ' (extra)') FROM t_AttivitaEdizioni INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE IDattedi=t_IncarichiEdizioni_1.FK_Attivita) ELSE (SELECT DescrArgomento FROM t_ArgomentiModuli WHERE IDargomento=t_IncarichiEdizioni_1.FK_Argomento) END) AS DescrArgomento, TipoAttivita, CodiceEdizione, t_CalendarioCodocenza.SostegnoIndividuale, FK_SedeEdizione FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni t_IncarichiEdizioni_1 ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni_1.IDincarico WHERE IscrittiSostegno=1 AND IDedizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataAttivita>="), FunzStringa.StrDataSQL(Conversions.ToString(Variabili.Edizione.get_Campo((object)"DataAvvio")), FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true)), " "), "ORDER BY DataAttivita, OraInizio, CodiceEdizione"));
PerseoNET/frmDettSostegnoEdizione.cs:				string text3 = "(SELECT t_ArgomentiModuli.DescrArgomento FROM t_IncarichiEdizioni INNER JOIN t_ArgomentiModuli ON t_IncarichiEdizioni.FK_Argomento = t_ArgomentiModuli.IDargomento WHERE t_IncarichiEdizioni.IDincarico=t_CalendarioAttivita.FK_Incarico) ";
PerseoNET/frmDettSostegnoEdizione.cs:					origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt, (0) AS IDcalcod, DataAttivita, OraInizio, OraFine, (Cognome + ' ' + Nome) AS StrDOC, (t_CalendarioAttivita.DescrAttivita) AS DescrArgomento, TipoAttivita, CodiceEdizione, SostegnoIndividuale, FK_SedeEdizione FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE IscrittiSostegno=1 AND IDedizione=", Variabili.Edizione.get_Campo((object)0)), " AND DataAttivita>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " "), "UNION "), "SELECT (0) AS IDcalatt, IDcalcod, DataAttivita, OraInizio, OraFine, "), "(Cognome + ' ' + Nome) AS StrDOC, "), text3), " AS DescrArgomento, TipoAttivita, CodiceEdizione, t_CalendarioCodocenza.SostegnoIndividuale, FK_SedeEdizione "), "FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN "), "t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN "), "t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN "), "t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON "), "t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN "), "t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN "), "t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt "), "WHERE IscrittiSostegno=1 AND IDedizione="), Variabili.Edizione.get_Campo((object)0)), " AND DataAttivita>="), FunzStringa.StrDataSQL(text, FlagSqlServer: true)), " "), "AND DataAttivita<="), FunzStringa.StrDataSQL(text2, FlagSqlServer: true)), " "), "ORDER BY DataAttivita, OraInizio, CodiceEdizione"));
PerseoNET/frmDettSostegnoEdizione.cs:					origineDati = "SELECT IDcalatt, (0) AS IDcalcod, DataAttivita, OraInizio, OraFine, (Cognome + ' ' + Nome) AS StrDOC, (t_CalendarioAttivita.DescrAttivita) AS DescrArgomento, TipoAttivita, CodiceEdizione, SostegnoIndividuale, FK_SedeEdizione FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente=t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioAttivita ON t_IncarichiEdizioni.IDincarico = t_CalendarioAttivita.FK_Incarico WHERE IscrittiSostegno=1 " + str + " AND DataAttivita>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " UNION SELECT (0) AS IDcalatt, IDcalcod, DataAttivita, OraInizio, OraFine, (Cognome + ' ' + Nome) AS StrDOC, " + text3 + " AS DescrArgomento, TipoAttivita, CodiceEdizione, t_CalendarioCodocenza.SostegnoIndividuale, FK_SedeEdizione FROM t_PianoServizi INNER JOIN t_IncarichiEdizioni INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita ON t_PianoServizi.IDedizione = t_IncarichiEdizioni.FK_Edizione INNER JOIN t_CalendarioCodocenza ON t_IncarichiEdizioni.IDincarico = t_CalendarioCodocenza.FK_Incarico INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt WHERE IscrittiSostegno=1 " + str + " AND DataAttivita>=" + FunzStringa.StrDataSQL(text, FlagSqlServer: true) + " AND DataAttivita<=" + FunzStringa.StrDataSQL(text2, FlagSqlServer: true) + " ORDER BY DataAttivita, OraInizio, CodiceEdizione";
PerseoNET/frmDettSostegnoEdizione.cs:					origineDati = "SELECT  IDcalcod, TipoAttivita FROM t_CalendarioCodocenza INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt INNER JOIN t_IncarichiEdizioni ON t_CalendarioAttivita.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita WHERE IDcalcod " + str + " ORDER BY DataAttivita, OraInizio";
PerseoNET/frmDettSostegnoEdizione.cs:				string origineDati = "SELECT FK_Iscrizione, FK_SostegnoAula, COUNT(IDsostegnoiscr) AS Nreg FROM t_IscrizioniSostegno GROUP BY FK_Iscrizione, FK_SostegnoAula HAVING FK_SostegnoAula IS NOT NULL AND COUNT(IDsostegnoiscr)>1 AND FK_Iscrizione " + tblIscr.StringaFiltroIN("IDiscrizione");
PerseoNET/frmDettSostegnoEdizione.cs:						origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDsostegnoiscr FROM t_IscrizioniSostegno WHERE FK_Iscrizione=", clsTblDatiDR.get_Campo((object)"FK_Iscrizione")), " "), "AND FK_SostegnoAula="), clsTblDatiDR.get_Campo((object)"FK_SostegnoAula")));
PerseoNET/frmDettSostegnoEdizione.cs:						string vSQL = Conversions.ToString(Operators.ConcatenateObject("SELECT IDdocente, (Cognome + ' ' + Nome) AS Addizionale FROM t_CalendarioCodocenza INNER JOIN t_IncarichiEdizioni ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente WHERE IDcalcod=", clsTblDatiDR.get_Campo((object)"FK_AulaAddizionale")));
PerseoNET/clsDirittiUtente.cs:						string origineDati = "SELECT IDproc, IDdiritti, Nominativo, t_TipoDirittiDB.Procedura, Accesso, Modifica, Inserimento, Eliminazione, t_DirittiDB.DataModifica FROM t_TipoDirittiDB INNER JOIN t_DirittiDB ON t_TipoDirittiDB.IDproc = t_DirittiDB.Procedura WHERE Nominativo=" + Conversions.ToString(mvUtente) + " AND Obsoleto=0 ";
PerseoNET/clsRitardoScadenze.cs:				string origineDati = "SELECT t_Documenti.IDdocumento, IDutente, (Cognome + ' ' + Nome) AS Studente, CodFiscale, TipoDocumento, DescrDocumento, DataScadenza, CodiceEdizione, DescrEdizione, t_PianoServizi.DataFine, Durata, SiglaSede, (t_ConvenzioniStage.DataFine) AS DataFineStage, (NULL) AS Note FROM t_Documenti INNER JOIN t_Utenti ON t_Documenti.FK_Studente = t_Utenti.IDutente INNER JOIN t_Iscrizioni ON t_Utenti.IDutente = t_Iscrizioni.FK_Utente INNER JOIN t_PianoServizi ON t_Iscrizioni.FK_Edizione = t_PianoServizi.IDedizione INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione = t_Sedi.IDsede INNER JOIN t_TipoDocumento ON t_Documenti.FK_TipoDoc = t_TipoDocumento.IDtdoc LEFT OUTER JOIN t_ConvenzioniStage ON t_Iscrizioni.IDiscrizione = t_ConvenzioniStage.FK_Iscrizione WHERE DataScadenza IS NOT NULL AND DataScadenza<=" + FunzStringa.StrDataSQL(Strings.Format(DateAndTime.DateAdd("d", -15.0, VariabiliClassi.DataLogin), "dd/MM/yyyy"), FlagSqlServer: true) + " AND t_PianoServizi.DataFine>" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, "dd/MM/yyyy"), FlagSqlServer: true) + " AND IDsede " + Variabili.FiltroSedi + " AND t_Documenti.Attivo=1 ORDER BY (Cognome + ' ' + Nome), IDutente ";
PerseoNET/clsRitardoScadenze.cs:						string origineDati = "SELECT IDedizione, CodiceEdizione, (SELECT SiglaSede FROM t_Sedi WHERE IDsede=FK_SedeEdizione) AS SiglaSede, DataAvvio, DataFine, Gruppo, AllieviMIN, (0) AS GiorniRitardo, (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE FK_Edizione=IDedizione AND DataIscr IS NOT NULL) AS NumeroIscr, (NULL) AS Ritardo FROM t_PianoServizi INNER JOIN t_Sedi ON t_PianoServizi.FK_SedeEdizione=t_Sedi.IDsede WHERE DataFine>=" + FunzStringa.StrDataSQL(Strings.Format(DateAndTime.DateAdd(DateInterval.Year, -1.0, VariabiliClassi.DataLogin), VariabiliClassi.StrFormatoDataPC), FlagSqlServer: true) + " AND DataAvvio<=" + FunzStringa.StrDataSQL(Strings.Format(VariabiliClassi.DataLogin, VariabiliClassi.StrFormatoDataPC), FlagSqlServer: true) + " AND (SELECT COUNT(IDiscrizione) FROM t_Iscrizioni WHERE FK_Edizione=IDedizione)=0 AND IDsede " + vFiltroSedi + " AND ObbligoIscritti=1 AND ModelloEdizione=0 AND SedeTest=0 ORDER BY DataAvvio ";
PerseoNET/frmSettoriProfessioniStandardRL.cs:				string origineDati = "SELECT t_ProfessioniSettoriStandardRL.IDtsettprof, FK_TipoRepertorio, IndSett, DescrSettoreProfessione, Attivo FROM t_ProfessioniSettoriStandardRL ORDER BY Attivo DESC, IndSett ";
PerseoNET/frmSettoriProfessioniStandardRL.cs:				origineDati = "SELECT t_ProfessioniStandardRL.IDprofessionerl, FK_TipoSettProfessionale, IndProf, DescrProfessione, ProfessioneISTAT, Attiva FROM t_ProfessioniStandardRL ORDER BY Attiva DESC, IndProf ";
PerseoNET/frmSettoriProfessioniStandardRL.cs:				origineDati = "SELECT IDtrepcompe, (CASE WHEN Obsoleto=0 THEN TipoRepertorio ELSE ('* ' + TipoRepertorio) END) AS TipoRepertorio FROM t_TipoRepertorioCompetenze ORDER BY Obsoleto, IndRep ";
PerseoNET/frmSettoriProfessioniStandardRL.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT (IndSett) AS NSett, DescrSettoreProfessione, CodiceSettoreProf, (t_ProfessioniStandardRL.IndProf) AS NProf, DescrProfessione, DescrProfilo, DescrContesto, ProfessioneISCO, ProfessioneISTAT, (AttivitaEconomicaISTAT) AS ProfessioneATECO, ProfessioneCCNL, DescrVersioneProfessione, DescrCompetenza, (LivelloEQF) AS EQF, Tipo, DescrConoAbi FROM t_ProfessioniStandardRL INNER JOIN t_ProfessioniSettoriStandardRL ON t_ProfessioniStandardRL.FK_TipoSettProfessionale = t_ProfessioniSettoriStandardRL.IDtsettprof INNER JOIN t_TipoRepertorioCompetenze ON t_ProfessioniSettoriStandardRL.FK_TipoRepertorio = t_TipoRepertorioCompetenze.IDtrepcompe INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniStandardRL.IDprofessionerl = t_ProfessioniCompetenzeRL.FK_Professione INNER JOIN t_ProfessioniConoAbiRL ON t_ProfessioniCompetenzeRL.IDcompestd = t_ProfessioniConoAbiRL.FK_Competenza WHERE IDtsettprof=", tblSettProf.get_Campo((object)0, vFlagUpdateDB: false)), " AND Attiva=1 AND CompetenzaAttiva=1 "), "ORDER BY IndSett, DescrSettoreProfessione, t_ProfessioniStandardRL.IndProf, IndCompe, Tipo DESC, IndCA"));
PerseoNET/frmSettoriProfessioniStandardRL.cs:					string origineDati = "SELECT IndSett, DescrSettoreProfessione, CodiceSettoreProf, t_ProfessioniStandardRL.IndProf, DescrProfessione, DescrProfilo, DescrContesto, ProfessioneISCO, ProfessioneISTAT, (AttivitaEconomicaISTAT) AS ProfessioneATECO, ProfessioneCCNL, DescrVersioneProfessione, DescrCompetenza, LivelloEQF, Tipo, DescrConoAbi FROM t_ProfessioniStandardRL INNER JOIN t_ProfessioniSettoriStandardRL ON t_ProfessioniStandardRL.FK_TipoSettProfessionale = t_ProfessioniSettoriStandardRL.IDtsettprof INNER JOIN t_TipoRepertorioCompetenze ON t_ProfessioniSettoriStandardRL.FK_TipoRepertorio = t_TipoRepertorioCompetenze.IDtrepcompe INNER JOIN t_ProfessioniCompetenzeRL ON t_ProfessioniStandardRL.IDprofessionerl = t_ProfessioniCompetenzeRL.FK_Professione INNER JOIN t_ProfessioniConoAbiRL ON t_ProfessioniCompetenzeRL.IDcompestd = t_ProfessioniConoAbiRL.FK_Competenza WHERE t_ProfessioniStandardRL.DataRec>=" + FunzStringa.StrDataSQL(stringa, FlagSqlServer: true) + "  AND TipoRepertorio='" + FunzStringa.StringaSQL(cmbRepertorio.Text) + "' ORDER BY IndSett, DescrSettoreProfessione, t_ProfessioniStandardRL.IndProf, IndCompe, Tipo DESC, IndCA";
PerseoNET/frmCalendarioExtra.cs:						string text = "SELECT t_CalendarioCodocenza.IDcalcod, t_CalendarioCodocenza.FK_Incarico, IDdocente, FK_Tipo, DataAttivita, OraInizio, OraFine, TipoAttivita, (Cognome + ' ' + Nome) AS StrDOC FROM t_CalendarioCodocenza INNER JOIN t_IncarichiEdizioni ON t_CalendarioCodocenza.FK_Incarico = t_IncarichiEdizioni.IDincarico INNER JOIN t_AttivitaEdizioni ON t_IncarichiEdizioni.FK_Attivita = t_AttivitaEdizioni.IDattedi INNER JOIN t_TipoAttivitaEdizione ON t_AttivitaEdizioni.FK_TipoAttivita = t_TipoAttivitaEdizione.IDtattivita INNER JOIN t_Docenti ON t_IncarichiEdizioni.FK_Docente = t_Docenti.IDdocente INNER JOIN t_CalendarioAttivita ON t_CalendarioCodocenza.FK_Calendario = t_CalendarioAttivita.IDcalatt ";
PerseoNET/frmCalendarioExtra.cs:							text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDattedi, (IDedizione) AS FK_Edizione, IDincarico, FK_Tipo, FK_TipoAttivita, (IDdocente) AS FK_Docente, IndTA, TipoAttivita, OreAttivita, ('no') AS Occupato, StrDOC, OreAssegnate, (OreFatteInc) AS torep FROM t_IncarichiContrattiEdizioni WHERE IDargomento IS NULL AND Aula=True AND Secondaria=True GROUP BY IDattedi, IDedizione, IDincarico, FK_Tipo, FK_TipoAttivita, IDdocente, IndTA, TipoAttivita, OreAttivita, StrDOC, OreAssegnate, OreFatteInc HAVING IDedizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY IndTA, TipoAttivita, StrDOC "));
PerseoNET/frmCalendarioExtra.cs:					vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDaccesso, Data, Azione FROM t_StoricoEventi WHERE Azione LIKE '%edizione ID=", Variabili.Edizione.get_Campo((object)0)), "%' AND Azione LIKE '%ore assegnate%' "), "AND Tipo='"), VariabiliClassi.Evento.ConversioneTipoStringaTipo(clsGestioneEventi.TipoEvento.DatoCritico)), "' "), "AND Data>="), FunzStringa.StrDataSQL(Strings.Format(DateAndTime.DateAdd(DateInterval.Day, -8.0, VariabiliClassi.DataLogin), "dd/MM/yyyy") + " 00:00:00", FlagSqlServer: true)));
PerseoNET/frmCalendarioExtra.cs:				vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDloced, CodiceLocale FROM t_LocaliEdizioni WHERE IDedizione=", Variabili.Edizione.get_Campo((object)0)), " "), "ORDER BY Fittizio DESC, CodiceLocale "));
PerseoNET/frmCalendarioExtra.cs:				vSQL = "SELECT IDincarico, IDdocente, IDattedi, FK_TipoAttivita, FK_Tipo, ('no') AS Occupato, StrDOC, IndTA, TipoAttivita, DescrIncarico, OreAssegnate, torep FROM t_IncarichiContrattiEdizioni ";
PerseoNET/frmCalendarioExtra.cs:						string origineDati = "SELECT IDcalatt, FK_Incarico, FK_Locale, IDdocente, IDargomento, FK_CalAttivita, DataAttivita, OraInizio, OraFine, TipoAttivita, StrDOC, CodiceLocale, DocenzaFAD, ncod FROM zt_GrigliaSettimana ORDER BY DataAttivita, OraInizio ";
PerseoNET/frmCalendarioExtra.cs:					string vSQL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT IDcalatt FROM t_CalendarioAttivita WHERE FK_Incarico=", tblCal.get_Campo((object)"FK_Incarico", vFlagUpdateDB: false)), " "), "AND DataAttivita="), FunzStringa.StrDataSQL(Conversions.ToString(tblCal.get_Campo((object)"DataAttivita", vFlagUpdateDB: false)), FlagSqlServer: true)), " "), "AND OraInizio="), FunzStringa.StrOrarioSQL(Conversions.ToString(tblCal.get_Campo((object)"OraInizio", vFlagUpdateDB: false)), FlagSqlServer: true)), " "));
PerseoNET/frmCalendarioExtra.cs:							string origineDati = "SELECT t_VincoliOrariEdizione.IDvincolo, FK_GiornoSettimana, TipoGiornoSettimana, Dalle, Alle FROM  t_VincoliOrariEdizione ORDER BY NumeroGiorno, Dalle";
PerseoNET/frmCalendarioExtra.cs:							origineDati = "SELECT IDtgiornosett, (CASE WHEN NumeroGiorno=1 THEN 7 ELSE (NumeroGiorno-1) END) AS IndG, TipoGiornoSettimana, (0) AS Selezione FROM t_TipoGiornoSettimana ORDER BY (CASE WHEN NumeroGiorno=1 THEN 7 ELSE (NumeroGiorno-1) END)";
PerseoNET/frmCalendarioExtra.cs:							origineDati = "SELECT MAX(IDvincolo) AS ID_Vincolo FROM t_VincoliOrariEdizione ";
PerseoNET/frmCalendarioExtra.cs:					string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT IDvincolo, FK_GiornoSettimana, Dalle, Alle FROM t_VincoliOrariEdizione WHERE IDvincolo=", tblVinc.get_Campo((object)0, vFlagUpdateDB: false)));
PerseoNET/clsGrigliaDR.cs:						if (Operators.CompareString(Strings.Mid(value, 1, 7), "SELECT ", TextCompare: false) != 0)
PerseoNET/clsGrigliaDR.cs:							Information.Err().Raise(-2147220991, null, "Classe clsGrigliaDR: proprietÃ  OrigineDati. Manca parola chiave SELECT.");
PerseoNET/clsGrigliaDR.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT ", this.get_NomeCampo(0)), ", "), text2), " FROM "), mvTabella), " WHERE "), this.get_NomeCampo(0)), "="), this.get_Campo((object)0, vFlagUpdateDB: false)));
PerseoNET/clsGrigliaDR.cs:									mvTblGriglia.OrigineDati = "SELECT TOP " + Conversions.ToString(mvMaxRigheVisualizzabili + 1) + " " + text;
PerseoNET/clsGrigliaDR.cs:								if (Strings.InStr(1, vRelazione, "SELECT ", CompareMethod.Text) == 0)
PerseoNET/clsGrigliaDR.cs:								num3 = Strings.InStr(1, vRelazione, "SELECT ", CompareMethod.Text);
PerseoNET/clsGrigliaDR.cs:							string origineDati = Conversions.ToString(Operators.ConcatenateObject("SELECT " + str + ", Bloccato FROM " + mvTabella + " WHERE " + str + "=", this.get_Campo((object)0, vFlagUpdateDB: false)));
PerseoNET/frmDettReferenteStudente.cs:				string str = "SELECT IDrefute, FK_Utente, FK_TipoRef, Cognome, Nome, NoteRef, DescrAmmRef, TelRef_1, TelRef_2, EmailRef, FaxRef, ComuneAmmRef, IndirAmmRef, CAPammref, PROVammref, Attivo, Sesso, CodFiscale, DataNascita, LuogoNascita, ProvNascita, NazNascita, ComResidenza, CAPresidenza, IndirResidenza, ProvResidenza, NazResidenza, FirmaStageMinore, ConsenteNotificheMail, RichiedenteDote, Professione, TitoloStudio, Cittadinanza, DataRec, DataModifica FROM t_ReferentiUtente ";
PerseoNET/frmDettReferenteStudente.cs:				str = "SELECT IDtrefute, TipoReferenteUte FROM t_TipoReferenteUtente WHERE Obsoleto=0 ORDER BY IndTRU ";
PerseoNET/frmPannelloUtilita.cs:				string vSQL = "SELECT ConsentireProfilo FROM zt_MenuRiferimenti GROUP BY ConsentireProfilo HAVING ConsentireProfilo IS NOT NULL ";
